@using HCMIS.Interface;
@using HCMIS.Model
@using HCMIS.Repository
@using HCMIS.SHARED.Models
@using System.Text.Json
@inject IAuthenticationService IAuthService;
@inject NavigationManager Navigation;
@inject HttpClient Http;

@* Helps Me Push Account Holder Name Central *@
<style>
    .mud-typography-body1 {
        font-size: var(--mud-typography-body1-size);
        font-family: var(--mud-typography-body1-family);
        font-weight: var(--mud-typography-body1-weight);
        line-height: var(--mud-typography-body1-lineheight);
        letter-spacing: var(--mud-typography-body1-letterspacing);
        text-transform: var(--mud-typography-body1-text-transform);
        padding-top: 12px;
    }
</style>

@* <link href="https://use.fontawesome.com/releases/v5.14.0/css/all.css" rel="stylesheet"> *@

<MudAppBar Elevation="3">
   
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start"
                   OnClick="async () => await OnSidebarToggled.InvokeAsync()" />
    <MudSpacer/>

    @*<MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Error" Edge="Edge.End" />*@
    @* @if(Credentials != null)
    {
        <p style="color:ghostwhite">HELLO : @Credentials.AccountHolderName.ToUpper() </p>
    } *@
    
    @* <MudBadge Icon="@Icons.Material.Filled.Lock" Color="Color.Error" Overlap="true" Bordered="true" Class="mx-6 my-4">
        <MudButton Class="border-double border-4 mud-border-primary pa-4" Color="Color.Error" Variant="Variant.Filled" StartIcon="fa fa-sign-out" DisableElevation="true" OnClick="LogOut">LOG OUT</MudButton>
    </MudBadge> *@

    @if (Credentials != null)
    {
        <MudMenu FullWidth="false" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter"
                 TransformOrigin="Origin.TopCenter" Style="float:right;" Icon="fa fa-user">
            <ActivatorContent>
                <MudIconButton Icon="fa fa-user" Color="Color.Inherit" />
                <MudText Color="Color.Inherit" Style="color:white,padding-top: 12px;">@Credentials.AccountHolderName.ToUpper()</MudText>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Disabled=true Icon="@Icons.Material.Filled.GppGood" Style="color:darkred;">@Credentials.UserRole</MudMenuItem>
                    <MudMenuItem Icon="fa fa-key" OnClick="@(()=> {DropDownItemClick(1);})">Change Password</MudMenuItem>
                    <MudMenuItem Icon="fa fa-sign-out" OnClick="LogOut">Sign Out</MudMenuItem>
                </ChildContent>
            </MudMenu>
    }
</MudAppBar>

@code {
    private bool _isLightMode = true;
    private MudTheme _currentTheme = new MudTheme();
    [Parameter]
    public EventCallback OnSidebarToggled { get; set; }
    [Parameter]
    public EventCallback OnLogoutToggled { get; set; }
    [Parameter]
    public EventCallback<MudTheme> OnThemeToggled { get; set; }
    LoginResultModel? Credentials { get; set; }
    List<ViewUserManagement>? UsersData { get; set; }
    
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            Credentials = await IAuthService.GetUserCredentials();
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {

        }

    }

    private async void DropDownItemClick(int id)
    {
        if (id == 1)
        {
            Navigation.NavigateTo("/ChangePasswordPage");
        }
        else if (id == 2)
        {
            await IAuthService.Logout();
            Navigation.NavigateTo("/LoginPage", true);
        }
    }

    private async Task ToggleTheme()
    {
        _isLightMode = !_isLightMode;
        _currentTheme = !_isLightMode ? GenerateDarkTheme() : new MudTheme();
        await OnThemeToggled.InvokeAsync(_currentTheme);
    }
    private MudTheme GenerateDarkTheme() =>
        new MudTheme
        {
            Palette = new Palette()
            {
                Black = "#27272f",
                Background = "#32333d",
                BackgroundGrey = "#27272f",
                Surface = "#373740",
                TextPrimary = "#ffffffb3",
                TextSecondary = "rgba(255,255,255, 0.50)",
                AppbarBackground = "#27272f",
                AppbarText = "#ffffffb3",
                DrawerBackground = "#27272f",
                DrawerText = "#ffffffb3",
                DrawerIcon = "#ffffffb3"
            }
        };

    private async Task LogOut()
    {
        try
        {
            // Save LogOut Log
           
            var result = await Http.PutAsync($"Utilities/UpdateLoginLog", null);

            await IAuthService.Logout();
            Navigation.NavigateTo("/");
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {
            
        }
        
    }

    private async Task Log(MenuEventArgs<MenuItem> args)
    {
        //Selected menu item
        if (args.Item.Id == "LogOutButton")
        {
            //await localStore.ClearAsync();
            //AppState.LoggedIn = false;
            IAuthService.Logout();
            Navigation.NavigateTo("/");
        }
    }
}
