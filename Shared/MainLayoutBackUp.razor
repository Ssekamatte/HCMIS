@inherits LayoutComponentBase
@using HCMIS.Model
@using HCMIS.Interface;
@inject AppState AppState
@implements IDisposable
@inject SystemSettings _SystemSettings
@inject NavigationManager Navigation;
@inject ILocalStorageService localStore;
@inject IJSRuntime JsRuntime
@inject IAuthenticationService IAuthService;


<AuthorizeView>
    <Authorized>
       <div class="page" style="background-color: ghostwhite; flex-direction: column;">
           <main>
               <BlazoredToasts Position="Blazored.Toast.Configuration.ToastPosition.TopRight"
                            Timeout="10"
                            IconType="Blazored.Toast.Configuration.IconType.FontAwesome"
                            SuccessClass="success-toast-override"
                            SuccessIcon="fa fa-check"
                            ErrorIcon="fa fa-times"
                            InfoIcon="fa fa-info"
                            WarningIcon="fa fa-warning" />
           </main>
           <div class="control-container">

           </div>
       </div>
    </Authorized>
    <NotAuthorized>
        <BlazoredToasts Position="Blazored.Toast.Configuration.ToastPosition.BottomRight"
                        Timeout="10"
                        IconType="Blazored.Toast.Configuration.IconType.FontAwesome"
                        SuccessClass="success-toast-override"
                        SuccessIcon="fa fa-check"
                        ErrorIcon="fa fa-times"
                        InfoIcon="fa fa-info"
                        WarningIcon="fa fa-warning" />
        <style>
            .particles-js-canvas-el {
                display: block;
            }
        </style>
        @Body
    </NotAuthorized>
</AuthorizeView>

<style>
    #btn {
        display: none;
        /*display: block;*/
        position: fixed;
        bottom: 20px;
        right: 30px;
        z-index: 10000; /*99*/
        font-size: 18px;
        border: none;
        outline: none;
        background-color: red;
        color: white;
        cursor: pointer;
        padding: 15px;
        border-radius: 4px;
    }

        #btn:hover {
            background-color: #555;
        }

    .blazored-toast-container {
        z-index: 4000;
    }

    .e-toast-container {
        z-index: 4000;
    }

    .control-container .e-btn.e-inherit {
        margin: 0 3px;
        /*width: 100%;*/
    }

    .content {
        padding-top: 1.1rem;
    }

    .logo-style {
        padding: 2px;
    }

    /*Change Font */
    .e-menu-wrapper .e-menu .e-menu-item .e-menu-url, .e-menu-container .e-menu .e-menu-item .e-menu-url {
        color: ghostwhite;
    }

    /*Change App Bar Color */
    .e-menu-wrapper .e-menu, .e-menu-container .e-menu {
        background-color: black;
        color: white;
    }

    /*Assign Black To The Container on The Menu*/
    .e-appbar > div:first-child {
        display: -ms-flexbox;
        display: flex;
        -ms-flex-align: center;
        align-items: center;
        width: 100%;
        height: 100%;
        background-color: #212121;
    }

    /*Icons*/
    /*More Icons Here. - Use Icons list - Bootstrap 5
          https://blazor.syncfusion.com/documentation/appearance/icons
        */
    .e-icons {
        color: #00ffff;
        font-size: 26px;
    }

    .e-file::before {
        content: '\e7cb';
        color: ghostwhite;
    }

    .e-search:before {
        content: '\e724';
    }

    .e-upload:before {
        content: '\e769';
    }

    .e-font:before {
        content: '\e80e';
    }

    .e-edit::before {
        content: '\e78f';
    }

    .e-open::before {
        content: '\e70f';
    }

    .e-save::before {
        content: '\e74d';
    }

    .e-cut::before {
        content: '\e73f';
    }

    .e-copy::before {
        content: '\e77b';
    }

    .e-paste::before {
        content: '\e739';
    }

    .e-chart-insert-column:before {
        font-size: x-large;
        content: '\e845';
    }

    /*calculated-member*/
    .calculated-member:before {
        content: '\e798';
    }

    /*calculated-member*/
    .user-defined:before {
        content: '\e709';
    }

    /*hyperlink-edit*/
    .hyperlink-edit:before {
        content: '\e722';
    }

    /*group-icon*/
    .group-icon:before {
        content: '\e724';
    }

    /*line-small*/
    .line-small:before {
        content: '\e725';
    }

    /*drag-and-drop*/
    .drag-and-drop:before {
        content: '\e726';
    }

    /*check-large*/
    .check-large:before {
        content: '\e727';
    }

    /*shapes*/
    .shapes:before {
        content: '\e728';
    }

    /*decrease-indent*/
    .decrease-indent:before {
        content: '\e72a';
    }

    /*circle-check*/
    .circle-check:before {
        content: '\e72b';
    }

    /*notes*/
    .notes:before {
        content: '\e72d';
    }

    /*export*/
    .export:before {
        content: '\e72e';
    }

    /*location*/
    .location:before {
        content: '\e756';
    }

    /*month-agenda*/
    .month-agenda:before {
        content: '\e75b';
    }

    /*print*/
    .print:before {
        content: '\e75d';
    }

    /*bullet-6*/
    .bullet-6:before {
        content: '\e763';
    }

    /*repeat*/
    .repeat:before {
        content: '\e772';
    }

    /*user*/
    .user:before {
        content: '\e7b4';
    }

    /*people*/
    .people:before {
        content: '\e7b9';
    }

    /*close*/
    .close:before {
        content: '\e7e7';
    }

    /*time-zone*/
    .time-zone:before {
        content: '\e804';
    }

    /*settings*/
    .settings:before {
        content: '\e880';
    }

    /*circle-close*/
    .circle-close:before {
        content: '\e878';
    }

    /*page-column-one*/
    .page-column-one:before {
        content: '\e8b9';
    }

    /*multiple-comment*/
    .multiple-comment:before {
        content: '\e8bc';
    }

    /*key*/
    .key:before {
        content: '\e77f';
    }

    /*mark-for-redaction*/
    .mark-for-redaction:before {
        content: '\e7bc';
    }

    /*chart-polar*/
    .chart-polar:before {
        content: '\e7e2';
    }

    /*zoom-to-fit*/
    .zoom-to-fit:before {
        content: '\e657';
    }

    /*Change Icon Colors*/
    .e-menu-wrapper .e-menu .e-menu-item .e-menu-icon, .e-menu-container .e-menu .e-menu-item .e-menu-icon {
        font-size: larger; /*Dashboard Icon*/
        color: ghostwhite;
    }

    /*Change Icons Font Size*/
    .e-menu-wrapper .e-menu .e-menu-item .e-menu-icon, .e-menu-container .e-menu .e-menu-item .e-menu-icon {
        font-size: larger;
        color: ghostwhite;
    }

    /*Change Color of Dropdown Arrows on Menu*/
    .e-menu-wrapper .e-menu .e-menu-item .e-caret, .e-menu-container .e-menu .e-menu-item .e-caret {
        color: lightgreen;
    }

    /*Icons*/

    .e-custom {
        display: none;
        border-radius: 25px;
        height: 48px;
        width: 48px;
    }

    /*Push LogOut To Right*/
    .e-menu-wrapper .e-menu, .e-menu-container .e-menu {
        background-color: black;
        color: white;
        width: 100%;
    }

    /*Manage Records in Grid Font Size*/
    .e-grid .e-unboundcelldiv .e-icons:not(.e-btn-icon) {
        color: #605e5c;
        font-size: inherit;
    }

</style>

@code {
    private Boolean disable = true;
    public ElementReference ScrollToTop;

    Dictionary<string, object> HtmlAttribute = new Dictionary<string, object>()
    {
    {"class", "sidebar-treeview" }
    };
    Dictionary<string, object> MenuHtmlAttribute = new Dictionary<string, object>()
    {
    {"style", "z-index: 100;" }
    };
    Dictionary<string, object> LogoutHtmlAttribute = new Dictionary<string, object>()
    {
    {"class", "Menu-logout" },{"style","float:right;"}
    };

    public bool SidebarToggle = false;
    string NameText = string.Empty;
    public void SideMenu()
    {
        SidebarToggle = !SidebarToggle;
    }

    protected async override void OnInitialized()
    {
        
        AppState.OnChange += StateHasChanged;
        NameText = _SystemSettings.AccountHolderName;
    }

    private async Task OnAppbarCreated()
    {
        
        NameText = _SystemSettings.AccountHolderName;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }

    private async Task itemSelected(MenuEventArgs<MenuItem> args)
    {
        //Selected menu item
        if (args.Item.Id == "LogOutButton")
        {
            //await localStore.ClearAsync();
            //AppState.LoggedIn = false;
            IAuthService.Logout();
            Navigation.NavigateTo("/");
        }
    }

    public async void LogOutUser()
    {
        await localStore.ClearAsync();
        AppState.LoggedIn = false;
        Navigation.NavigateTo("/");
    }

    private async void OnButtonClick()
    {
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
    }
}