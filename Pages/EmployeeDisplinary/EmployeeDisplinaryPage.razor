@page "/Displinary"
@using HCMIS.Data
@using HCMIS.Model
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Text.RegularExpressions
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings
@inject DocumentUploadModel _DocumentUploadModel;
@using System.Collections;
<style>
    .e-edit-dialog {
        max-height: 95%;
        max-width: 100%;
        min-width: 100%;
        min-height: 95%;
    }

    h6 {
        color: ghostwhite;
        background-color: blue;
        padding: 10px;
        width: 100%;
        font-size: 10px;
    }

    h4 {
        color: black;
        background-color: white;
        padding: 10px;
    .Continous  width: 100%;
        font-size: 13px;
    }

      .e-grid .e-gridcontent .e-rowcell.SubmittedApplications {
            color: red;
            }

    .NotImplemented {
        background-color: red;
    }
    .Appealedcases{
         background-color:orangered ;
    }
    .FullyImplemented {
        background-color: lightseagreen;
    }
    .Actiontaken{
        background-color: forestgreen;
    }
    .PartiallyImplemented {
        background-color: yellow;
    }
    .Continous {
        background-color: blue;
    }
</style>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="width: 100%; color: darkblue; font-family: Cambria; padding: 5px; font: bolder;"><img src="/Image/logo.png" height="35" width="50" /> <stong>|Disciplinary Incidences</stong></li>
</ol>
   <div class="form-group col-md-12">
    <SfAccordion ExpandMode="@ExpandMode.Single">
        <AccordionItems>
            <AccordionItem Expanded="true">
                <HeaderTemplate>DISCIPLINARY INCIDENCE STATUS Key(Click To Expand)</HeaderTemplate>
                <ContentTemplate>
                    @*the css styles used are at the bottom of this page*@
                    <div class="row">
                        <div class="alert-info" style="padding-left: 10px; padding-right: 10px; padding-top:10px; padding-bottom:-10px;">
                            <p>
                                @if (disciplinaryStatusCounts != null)
                                {
                                    <div class="row">
                                      <div class="form-group col-md-12">
                                           <div class="row">
                                            <div class="form-group col-md-2">
                                                <div class="form-row">
                                                    <div class="form-group col-md-12">
                                                        <div class="PartiallyImplemented" style="border-radius:30%; height:30px;width:30px; margin-left:auto; margin-right:auto;"></div>
                                                    </div>
                                                    <div class="form-group col-md-12">
                                                        <p style="text-align:center;"><strong style="text-align:center;">Draft</strong></p>
                                                        <p style="text-align:center;"><strong style="text-align:center;">@disciplinaryStatusCounts.Draft</strong></p>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group col-md-2">
                                               <div class="form-row">
                                                    <div class="form-group col-md-12">
                                                            <div class="FullyImplemented" style="border-radius: 30%; height: 30px; width: 30px; margin-left: auto; margin-right: auto;"></div>
                                                    </div>
                                                    <div class="form-group col-md-12">
                                                        <p style="text-align:center;"><strong style="text-align:center;">Pending Response</strong></p>
                                                        <p style="text-align:center;"><strong style="text-align:center;">@disciplinaryStatusCounts.SubmittedForEmployeeResponse</strong></p>
                                                    </div>
                                               </div>
                                            </div>

                                            <div class="form-group col-md-2">
                                                <div class="form-row">
                                                    <div class="form-group col-md-12">
                                                            <div class="NotImplemented" style="border-radius: 30%; height: 30px; width: 30px; margin-left: auto; margin-right: auto;"></div>
                                                    </div>
                                                    <div class="form-group col-md-12">
                                                        <p style="text-align:center;"><strong style="text-align:center;">Refered Cases</strong></p>
                                                        <p style="text-align:center;"><strong style="text-align:center;">@disciplinaryStatusCounts.Refered</strong></p>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group col-md-2">
                                                <div class="form-row">
                                                    <div class="form-group col-md-12">
                                                        <div class="Appealedcases" style="border-radius: 30%; height: 30px; width: 30px; margin-left: auto; margin-right: auto;"></div>
                                                    </div>
                                                    <div class="form-group col-md-12">
                                                        <p style="text-align:center;"><strong style="text-align:center;">Appealed Cases</strong></p>
                                                        <p style="text-align:center;"><strong style="text-align:center;">@disciplinaryStatusCounts.Appeal</strong></p>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group col-md-2">
                                                <div class="form-row">
                                                    <div class="form-group col-md-12">
                                                            <div class="Actiontaken" style="border-radius: 30%; height: 30px; width: 30px; margin-left: auto; margin-right: auto;"></div>
                                                    </div>
                                                    <div class="form-group col-md-12">
                                                        <p style="text-align:center;"><strong style="text-align:center;">Action Taken</strong></p>
                                                        <p style="text-align:center;"><strong style="text-align:center;">@disciplinaryStatusCounts.ActionTaken</strong></p>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group col-md-2">
                                                <div class="form-row">
                                                    <div class="form-group col-md-12">
                                                        <div class="Continous" style="border-radius: 30%; height: 30px; width: 30px; margin-left: auto; margin-right: auto;"></div>
                                                    </div>
                                                    <div class="form-group col-md-12">
                                                        <p style="text-align:center;"><strong style="text-align:center;">Employee Response</strong></p>
                                                        <p style="text-align:center;"><strong style="text-align:center;">@disciplinaryStatusCounts.Response</strong></p>
                                                    </div>
                                                </div>
                                            </div>
                                       </div>
                                    </div>
                                  </div>
                                }

                            </p>
                        </div>
                    </div>
                </ContentTemplate>
            </AccordionItem>
        </AccordionItems>
    </SfAccordion>
    </div>
    @*    <div class="col-md-12">*@
        <SfGrid @ref="EmployeeDisplinaryGrid" TValue="DisplinaryModel" 
             Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})" AllowGrouping="true" ShowColumnChooser="true" AllowTextWrap="true"
             AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
             <SfDataManager AdaptorInstance="@typeof(TestDisplinaryDataAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
            <GridEvents OnActionComplete="ActionComplete" OnActionBegin="OnDisplinaryActionBegin" QueryCellInfo="QueryCellInfoHandler" TValue="DisplinaryModel"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog">

                   <Template Context="DisplinaryContext">
                        @{
                       HeaderReviewData = (DisplinaryContext as DisplinaryModel);
                         EmployeeDisplinaryData = (DisplinaryContext as DisplinaryModel).EmployeeDisplinaryHeader;
                        @if (EmployeeDisplinaryData != null)
                        {
                          <div class="row">
                          <div class="form-row">
                          <div class="row">
                             <div class="col-md-12">
                          <center><strong><p class="alert alert-primary"> DISCIPLINARY FORM</p></strong>  </center>
                           </div>       
                          </div>
                          </div>
                           <br>
                          <div class="col-md-6">
                            <div class="row">
                              
                            <div class="col-md-8">
                            <strong> <p>Employee Name:<span style="color:red;">(*)</span></p> </strong>
                             <SfDropDownList @bind-Value="@(EmployeeDisplinaryData.EmployeeId)" Enabled="true" TItem="ViewEmployeeDisplinary" TValue="int?" DataSource="@ViewEmployeeDisplinaryData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                 <DropDownListFieldSettings Value="@nameof(ViewEmployeeDisplinary.Employeeid)" Text="@nameof(ViewEmployeeDisplinary.EmployeeDetails)"></DropDownListFieldSettings>
                                 <DropDownListEvents TValue="int?" TItem="ViewEmployeeDisplinary" ValueChange="OnEmployeeChange"></DropDownListEvents>
                                </SfDropDownList>
                                <p> <ValidationMessage For="@(() => EmployeeDisplinaryData.EmployeeId)" /></p>
                            </div>
                            @if (employeeno != null)
                            {
                            <div class="col-md-4">
                            <strong><p>Employee Number:</p> </strong><br>
                                @employeeno.EmployeeNumber
                            </div>
                           
                              <div class="col-md-3">
                              <strong><p>Desgnation:</p> </strong><br>
                            </div>
                            <div class="col-md-3"> 
                              @employeeno.JobDescription
                            </div>
                             <div class="col-md-3">
                              <strong><p>Duration at NHCC:</p> </strong><br>
                            </div>
                            <div class="col-md-3"> 
                              @employeeno.DurationatWork
                            </div>
                            <br />
                            <div class="col-md-3">
                             <strong><p> Department:</p> </strong><br>
                            </div>
                            <div class="col-md-3">
                              @employeeno.DepartmentDescription
                             </div>
                            <div class="col-md-3">
                             <strong><p> Date Joined:</p> </strong><br>
                            </div>
                            <div class="col-md-3">
                           @if(employeeno.DateJoined.HasValue){
                                    @employeeno.DateJoined.Value.ToString("dd/MM/yyyy");
                                }     
                            </div>
                            }
                            </div>
                            </div>
                         <div class="col-md-6">
                             <div class="row">
                                 @if (EmployeeDisplinaryData.EmployeeId!=null)
                                   {
                                     <PreviousCasesPage EmployeeId="@EmployeeDisplinaryData.EmployeeId.Value" AccessToken="@_SystemSettings.AccessToken" DisplinaryReasonData="@DisplinaryReasonData" />
                                  }
                             
                              </div>
                         </div>
                          <div class="col-md-12">
                       @*From here*@
                               <SfTab @ref="Tab" CssClass="BlazorTab" Height="auto" LoadOn="ContentLoad.Demand">
                               <TabItems>
                                <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Disciplinary Information"></TabHeader>
                                        </ChildContent>
                                            <ContentTemplate>
                                            <div style="margin:10px;">
                                             <div class="form-row">
                                              <div class="col-md-12" hidden>
                                              <SfNumericTextBox @bind-Value="@(EmployeeDisplinaryData.DisplinaryId)" Enabled="false" Placeholder="DisplinaryId" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                             </div>
                                              <div class="row">
                                                  <div class="form-group col-md-6">
                                                  <strong>  <p class="alert alert-primary">OFFICIAL USE</p> </strong>
                                                      <div class="row">
                                                        <div class="form-group col-md-4">
                                                            <p>Incident Ref-Number:<span style="color:red;">(*)</span></p>
                                                           <SfTextBox Multiline="false" @bind-Value="@(EmployeeDisplinaryData.EmployeeDisplinaryNumber)" Enabled="false"  FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                         </div>
                                                           <div class="form-group col-md-4">
                                                          <p>Official's Name:<span style="color:red;">(*)</span></p>
                                                          <SfTextBox Multiline="false" @bind-Value="@(EmployeeDisplinaryData.DisplinedBy)" Enabled="false" Placeholder="Captured By" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                        </div>
                                                          <div class="form-group col-md-4">
                                                            <p>Official's Designation:<span style="color:red;">(*)</span></p>
                                                          <SfTextBox Multiline="false" @bind-Value="@(EmployeeDisplinaryData.OfficersDesignation)" Enabled="false" Placeholder="Designation" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                         </div>
                                                      </div>
                                                   <div class="row">
                                                      <div class="form-group col-md-12">
                                                          <p>Offence / Nature of complaint<span style="color:red;">(*)</span></p>
                                                            <SfDropDownList @bind-Value="@(EmployeeDisplinaryData.DisplinaryReasonId)" Enabled="true" TItem="ADisplinaryReason" TValue="int?" DataSource="@DisplinaryReasonData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                             <DropDownListFieldSettings Value="@nameof(ADisplinaryReason.DisplinaryReasonId)" Text="@nameof(ADisplinaryReason.DisplinaryReasonDescription)"></DropDownListFieldSettings>
                                                            </SfDropDownList>
                                                            <p><ValidationMessage For="@(() => EmployeeDisplinaryData.DisplinaryReasonId)" /></p>
                                                       </div>
                                                        <div class="form-group col-md-12">
                                                          <label>Offence  Details<span style="color:red;">(*)</span></label>
                                                            <SfTextBox Multiline="true" @bind-Value="@(EmployeeDisplinaryData.DisplinaryReason)" Enabled="true" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                       </div>
                                                       <div class="form-group col-md-4">
                                                        <p>Date of Incident <span style="color:red;">(*)</span></p>
                                                           <SfDatePicker @bind-Value="@(EmployeeDisplinaryData.DisplinaryDate)" Placeholder="Select Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                          <p> <ValidationMessage For="@(() => EmployeeDisplinaryData.DisplinaryDate)" /></p>
                                                       </div>
                                                        <div class="form-group col-md-4">
                                                           <p>Previous Warnings <span style="color:red;">(*)</span></p>
                                                            <SfDropDownList @bind-Value="@(EmployeeDisplinaryData.DisplinaryWarningId)" Enabled="true" TItem="ADisplinaryWarning" TValue="int?" DataSource="@DisplinaryWarningData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                              <DropDownListFieldSettings Value="@nameof(ADisplinaryWarning.DisplinaryWarningId)" Text="@nameof(ADisplinaryWarning.WarningDescription)"></DropDownListFieldSettings>
                                                            </SfDropDownList>
                                                            <p><ValidationMessage For="@(() => EmployeeDisplinaryData.DisplinaryWarningId)" /></p>
                                                       </div>
                                                          <div class="form-group col-md-4"> 
                                                       <p>Category of Offence<span style="color:red;">(*)</span></p>
                                                          <SfDropDownList @bind-Value="@(EmployeeDisplinaryData.DisplinaryCategoryId)" Enabled="true" TItem="ADisplinaryCategory" TValue="int?" DataSource="@DisplinaryCategoryData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                <DropDownListFieldSettings Value="@nameof(ADisplinaryCategory.DisplinaryCategoryId)" Text="@nameof(ADisplinaryCategory.DisplinaryCategoryDescription)"></DropDownListFieldSettings>
                                                                </SfDropDownList>
                                                             <p><ValidationMessage For="@(() => EmployeeDisplinaryData.DisplinaryCategoryId)" /></p>
                                                       </div>
                                                   </div>
                                                  @*1st From here*@
                                                  <div class="row">
                                                        <div class="form-group col-md-6">  
                                                           <SfCheckBox Label="Is Visible" @bind-Checked="@EmployeeDisplinaryData.IsVisible"></SfCheckBox>
                                                        </div>
                                                           <div class="form-group col-md-6">  
                                                           <SfCheckBox Label="Case Investigated" @bind-Checked="@EmployeeDisplinaryData.CaseInvestigated"></SfCheckBox>
                                                        </div>
                                                        <br>
                                                        @*2nd From here*@
                                                       <div class="form-group col-md-12">
                                                                <SfDialog @ref="ReferedDialog" Target=".main" Width="80%" Visible="false" ShowCloseIcon="true" AllowPrerender="true" IsModal="true">
                                                                    <DialogTemplates>
                                                                        <Header>Disciplinary Committee / Board  </Header>
                                                                        <Content>
                                                                        @if(DisplinaryReferedViewData != null)
                                                                        {
                                                                      <div> 
                                                                        <p>Refer to Disciplinary Committee / Board  </p>
                                                                       <SfTextBox Multiline="true" @bind-Value="@(DisplinaryReferedViewData.ReferedDescription)" Enabled="true" Placeholder="Enter Reason" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                       </div>
                                                                        }
                                                                        </Content>
                                                                        <FooterTemplate>
                                                                            <SfButton CssClass="e-primary" @onclick="@ReferedToBoard">Send Case</SfButton>
                                                                             <SfButton CssClass="e-danger" @onclick="(async ()=>{ await ReferedDialog.HideAsync();})">Cancel</SfButton>
                                                                        </FooterTemplate>
                                                                    </DialogTemplates>
                                                                </SfDialog>
                                                            </div>
                                                     <div class="form-group col-md-12">
                                                                <SfDialog @ref="AppealDialog" Target=".main" Width="80%" Visible="false" ShowCloseIcon="true" AllowPrerender="true" IsModal="true">
                                                                    <DialogTemplates>
                                                                        <Header>Appeal Disciplinary Committee Decision</Header>
                                                                        <Content>
                                                                        @if(DisplinaryAppealViewData != null)
                                                                        {
                                                                      <div> 
                                                                        <p>Write Appeal </p>
                                                                       <SfTextBox Multiline="true" @bind-Value="@(DisplinaryAppealViewData.AppealDescription)" Enabled="true" Placeholder="Enter Appeal" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                       </div>
                                                                        }
                                                                        </Content>
                                                                        <FooterTemplate>
                                                                            <SfButton CssClass="e-primary" @onclick="@ReferCase">Send Appeal</SfButton>
                                                                            <SfButton CssClass="e-danger" @onclick="CancelAppeal">Cancel Appeal</SfButton>
                                                                        </FooterTemplate>
                                                                    </DialogTemplates>
                                                                </SfDialog>
                                                            </div>
                                                   </div>
                                                            @if (EmployeeDisplinaryData.DisplinaryReasonId != null && EmployeeDisplinaryData.CaseStatusId == null)
                                                                    {
                                                                        <div class="form-group col-md-12">
                                                                            <p class="alert-primary" style="padding:10px;">Please upload a document(if any) to support your claim</p>
                                                                            <SfUploader AutoUpload="true" ShowFileList="false">
                                                                                <UploaderEvents ValueChange="OnReasonChange"></UploaderEvents>
                                                                            </SfUploader>
                                                                            <SfSpinner @ref="@UploadReasonSpinner" Visible="false" Label="UpLoading document please wait.."></SfSpinner>
                                                                        </div>
                                                                    }
                                                                    <div class="form-group col-md-12">
                                                                        @if (!string.IsNullOrEmpty(ReasonDocumentString))
                                                                        {
                                                                            if (!string.IsNullOrEmpty(EmployeeDisplinaryData.OfficialDocumentExt)  &&  !string.IsNullOrEmpty(EmployeeDisplinaryData.OfficialDocumentName) &&  EmployeeDisplinaryData.OfficialDocumentName.ToLower().Contains("pdf"))
                                                                            {
                                                                                <embed src="@ReasonDocumentString" width="100%" height="600px" style="border: none;" frameborder="0" allowfullscreen="true" />
                                                                            }
                                                                            else
                                                                            {
                                                                                <img src="@ReasonDocumentString" class="img-thumbnail" height="500" width="100%" style="margin-bottom:10px; margin:10%; margin-right:auto;" />
                                                                            }
                                                                        }
                                                                    </div>
                                                                    <div class="form-group col-md-12">
                                                                    </div>
                                               </div>
                                               @*Employee Here*@
                                           <div class="form-group col-md-6">
                                              <strong>  <p class="alert alert-primary">EMPLOYEE RESPONSE</p> </strong>
                                                  
                                                        <div class="form-group col-md-12">
                                                          <label>Employee Statement<span style="color:red;">(*)</span></label>
                                                        <SfTextBox Multiline="true" @bind-Value="@(EmployeeDisplinaryData.EmployeeResponse)" Enabled="false"  FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                       </div>
                                                @if (!string.IsNullOrEmpty(EmployeeDisplinaryData.DisplinaryActionDetails) && EmployeeDisplinaryData.DisplinaryReasonId != null && !string.IsNullOrEmpty(EmployeeDisplinaryData.EmployeeResponse) && EmployeeDisplinaryData.CaseStatusId == null)
                                                      {
                                                       <div class="form-group col-md-12">
                                                        <p class="alert-primary" style="padding:10px;">Please upload a document(if any)/statement to respond to claim</p>
                                                         <SfUploader AutoUpload="true" ShowFileList="false">
                                                          <UploaderEvents ValueChange="OnResponseChange"></UploaderEvents>
                                                           </SfUploader>
                                                          <SfSpinner @ref="@UploadResponseSpinner" Visible="false" Label="UpLoading document please wait.."></SfSpinner>
                                                       </div>
                                                       }
                                                        <div class="form-group col-md-12">
                                                    @if (!string.IsNullOrEmpty(ResponseDocumentString))
                                                         {
                                                              if (!string.IsNullOrEmpty(EmployeeDisplinaryData.EmployeeDocumentExt) && !string.IsNullOrEmpty(EmployeeDisplinaryData.EmployeeDocumentName)  && EmployeeDisplinaryData.EmployeeDocumentName.ToLower().Contains("pdf"))
                                                               {
                                                                 <embed src="@ResponseDocumentString" width="100%" height="600px" style="border: none;" frameborder="0" allowfullscreen="true" />
                                                               }
                                                              else
                                                               {
                                                                  <img src="@ResponseDocumentString" class="img-thumbnail" height="500" width="100%" style="margin-bottom:10px; margin:10%; margin-right:auto;" />
                                                                 }
                                                        }
                                                       </div>
                                               </div>
                                              </div>
                                             </div>
                                            </div>
                                            </ContentTemplate>
                                 </TabItem>
                                 @if((EmployeeDisplinaryData.DisplinaryDate != null) && (EmployeeDisplinaryData.IsVisible != false)
                                 && !string.IsNullOrEmpty(EmployeeDisplinaryData.DisplinaryReason)
                                  && !string.IsNullOrEmpty(EmployeeDisplinaryData.DisplinedBy)
                                 && (EmployeeDisplinaryData.DisplinaryCategoryId != null)  && (EmployeeDisplinaryData.DisplinaryWarningId != null)
                                    && (EmployeeDisplinaryData.DisplinaryReasonId != null) && (EmployeeDisplinaryData.CaseStatusId == 4))
                                            {
                                       <TabItem>
                                                <ChildContent>
                                                    <TabHeader Text="Action Information"></TabHeader>
                                                </ChildContent>
                                                <ContentTemplate>
                                             <div style="margin:10px;">
                                             <div class="form-row">
                                                     <div class="form-group col-md-12">
                                                          <p>Action Taken<span style="color:red;">(*)</span></p>
                                                            <SfDropDownList @bind-Value="@(EmployeeDisplinaryData.DisplinaryActionId)" Enabled="true" TItem="ADisplinaryAction" TValue="int?" DataSource="@DisplinaryData" Placeholder="Please select Disciplinary action" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                            <DropDownListFieldSettings Value="@nameof(ADisplinaryAction.DisplinaryActionId)" Text="@nameof(ADisplinaryAction.DisplinaryActionDescription)"></DropDownListFieldSettings>
                                                            </SfDropDownList>
                                                            <p><ValidationMessage For="@(() => EmployeeDisplinaryData.DisplinaryActionId)" /></p>
                                                      </div>
                                                       <div class="form-group col-md-12">
                                                           <p>Displinary Action Details:<span style="color:red;">(*)</span></p>
                                                          <SfTextBox Multiline="false" @bind-Value="@(EmployeeDisplinaryData.DisplinaryActionDetails)" Enabled="true"  FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                       </div>
                                             </div>
                                             </div>
                                                </ContentTemplate>
                                            </TabItem>
                                 }
                               </TabItems>
                             </SfTab>
                           </div>
                     </div>
                         }
                        }
                    </Template>
                     <FooterTemplate Context="Displinaryfootercontext">
                         <div>
                        <SfButton @onclick="@SaveCase" CssClass="e-success">Save</SfButton>
                        @if(EmployeeDisplinaryData != null)
                        {
                            if (EmployeeDisplinaryData.DisplinaryWarningId == 4 || EmployeeDisplinaryData.DisplinaryCategoryId ==1 && EmployeeDisplinaryData.CaseStatusId != 3 && (EmployeeDisplinaryData.ReferalDate != null))
                            {
                               <SfButton @onclick="ReferCase" CssClass="e-danger">Refer Case</SfButton>
                            }
                            if (
                            !string.IsNullOrEmpty(EmployeeDisplinaryData.DisplinaryReason) 
                            && (EmployeeDisplinaryData.DisplinaryCategoryId != null) && (EmployeeDisplinaryData.DisplinaryWarningId != null)
                            && (EmployeeDisplinaryData.DisplinaryReasonId != null) &&  EmployeeDisplinaryData.CaseStatusId == null)
                            {
                                   <SfButton @onclick="@SubmitCase"  CssClass="e-primary">Submit Case</SfButton>
                             }
                             if(EmployeeDisplinaryData.CaseStatusId == 4 && EmployeeDisplinaryData.EmployeeResponseDate != null){
                                    <SfButton @onclick="@SubmitAction"  CssClass="e-success">Submit Decision</SfButton>
                             }
                        }
                       <SfButton  CssClass="e-danger">Cancel</SfButton>
                          </div>
                      </FooterTemplate>
            </GridEditSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridColumns>
                <GridColumn Type="ColumnType.CheckBox" Width="30"></GridColumn>
                <GridColumn Field=@nameof(DisplinaryModel.EmployeeDisplinaryId) HeaderText="EmployeeDisplinaryId" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                       <GridColumn HeaderText="DISCIPLINARY NUMBER" Width="70">
                    <Template>
                        @{
                            var data = (context as DisplinaryModel);
                            string displayvalue = string.Empty;
                            if (data != null)
                            {
                                var _data = data.EmployeeDisplinaryHeader;
                                if (_data != null &&  !string.IsNullOrEmpty(_data.EmployeeDisplinaryNumber))
                                {
                                    displayvalue = _data.EmployeeDisplinaryNumber;
                                }
                            }
                            <p>@displayvalue</p>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="EMPLOYEE NAME" Width="100">
                    <Template>
                        @{
                            var data = (context as DisplinaryModel);
                            string displayvalue = string.Empty;
                            if (data != null)
                            {
                                var _data = data.EmployeeDisplinaryHeader;
                                if (_data != null)
                                {
                                    if (ViewEmployeeDisplinaryData != null)
                                    {
                                        var Ename = ViewEmployeeDisplinaryData.FirstOrDefault(o => o.Employeeid == _data.EmployeeId);
                                        if (Ename != null)
                                        {
                                            displayvalue = Ename.EmployeeDetails;
                                        }
                                    }
                                }
                            }
                            <p>@displayvalue</p>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="DISCIPLINARY  INCIDENT" Width="120">
                    <Template>
                        @{
                            var data = (context as DisplinaryModel);
                            string displayvalue = string.Empty;
                            if (data != null)
                            {
                                var _data = data.EmployeeDisplinaryHeader;
                                if (_data != null)
                                {
                                    if (DisplinaryReasonData != null)
                                    {
                                        var Ename = DisplinaryReasonData.FirstOrDefault(o => o.DisplinaryReasonId == _data.DisplinaryReasonId);
                                        if (Ename != null)
                                        {
                                            displayvalue = Ename.DisplinaryReasonDescription;
                                        }
                                    }
                                }
                            }
                            <p>@displayvalue</p>
                        }
                    </Template>
                </GridColumn>
               @* <GridColumn HeaderText="Action Taken" Width="100">
                    <Template>
                        @{
                            var data = (context as DisplinaryModel);
                            string displayvalue = string.Empty;
                            if (data != null)
                            {
                                var _data = data.EmployeeDisplinaryHeader;
                                if (_data != null)
                                {
                                    if (DisplinaryData != null)
                                    {
                                        var Ename = DisplinaryData.FirstOrDefault(o => o.DisplinaryActionId == _data.DisplinaryActionId);
                                        if (Ename != null)
                                        {
                                            displayvalue = Ename.DisplinaryActionDescription;
                                        }
                                    }
                                }
                            }
                            <p>@displayvalue</p>
                        }
                    </Template>
                </GridColumn>*@
            </GridColumns>

        </SfGrid>
     @*   </div>*@
@* </div>*@
@code {
    #region Toasters
    public static string? ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast? DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters
    #region Declarations
    //[Parameter]
    public int EmployeeId { get; set; }

    //  public List<ADisplinaryReason>? PreviousDisplinaryIncidences {}
    SfTab? Tab;
    SfDialog? ReferedDialog  { get; set; }
    SfDialog? AppealDialog  { get; set; }
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "40vh", Width = "60%" };
    private ADisplinaryRefered? DisplinaryReferedViewData { get; set; } = new();
    private ADisplinaryAppeal? DisplinaryAppealViewData { get; set; } = new();
    private EmployeeDisplinary? EmployeeDisplinaryData { get; set; }
    private DisplinaryModel? HeaderReviewData;
    Query mainQuery { get; set; } = new();
    private static ViewEmployeeDisplinary? employeeno { get; set; }
    private SfGrid<DisplinaryModel>? EmployeeDisplinaryGrid;
    List<ViewEmployeeDisplinary>? ViewEmployeeDisplinaryData { get; set; }
    List<ADisplinaryAction>? DisplinaryData { get; set;}
    List<ADepartment>? DepartmentData  { get; set;}
    List<ADisplinaryReason>? DisplinaryReasonData { get; set; }
    List<ADisplinaryCategory>? DisplinaryCategoryData {get;set;}
    List<ADisplinaryWarning>? DisplinaryWarningData { get; set; }
    public Query ChildQuery = new Query();
    public string? AccessToken { get; set; }
    string? RegisterError { get; set;}
    string? RegisterSuccess { get; set; }
    EmployeeDisplinaryModel inputmodel { get; set; } = new EmployeeDisplinaryModel();
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    SfSpinner? UploadReasonSpinner;
    string? ReasonDocumentString { get; set; } = null;
    SfSpinner? UploadResponseSpinner;
    string? ResponseDocumentString { get; set; } = null;
    SfDialog? ComfirmationDialog;
    string ComfirmationString { get; set; } = null;
    SfSpinner? SavingSpinner = new();
    SfDialog? SavingDialog;
    private ADisplinaryCaseStatusCounts disciplinaryStatusCounts = new ADisplinaryCaseStatusCounts();
    public List<EmployeeDisplinary>? PreviousCasesData  { get; set; }

    //disciplinaryStatusCounts.Draft = PreviousCasesData.Where(o => o.ProjectApprovalStatus == 1).ToList().Count();
    #endregion Declarations
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            await _SystemSettings.GetLoginCredentials();
            //  mainQuery = new();
            ChildQuery = new();
            //    mainQuery.AddParams("AccessToken", _SystemSettings.AccessToken).AddParams("BaseUrl",_ApiConfig.BaseUrl);
            ChildQuery.AddParams("AccessToken", _SystemSettings.AccessToken).AddParams("BaseUrl", _ApiConfig.BaseUrl);
            inputmodel = new();
            // inputmodel.EmpDisplinary = new();
            var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}EmployeeDisplinary/GetEmployeeDisplinaryDataList");
            var content = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                var _EmployeeDisplinaryModel = JsonSerializer.Deserialize<EmployeeDisplinaryModel>(content, _options);

                if(_EmployeeDisplinaryModel != null)
                {
                    ViewEmployeeDisplinaryData = _EmployeeDisplinaryModel.ViewEmployeeDisplinaryDetails;
                    DisplinaryData = _EmployeeDisplinaryModel.DisplinaryAction;
                    //DepartmentData = _EmployeeDisplinaryModel.Departments;
                    DisplinaryReasonData = _EmployeeDisplinaryModel.DisplinaryReason;
                    DisplinaryCategoryData = _EmployeeDisplinaryModel.DisplinaryCategories;
                    DisplinaryWarningData = _EmployeeDisplinaryModel.DisplinaryWarnings;
                }
            }
            if (PreviousCasesData != null)
            {
                disciplinaryStatusCounts.Draft = PreviousCasesData.Where(o => o.CaseStatusId == 1).ToList().Count();
                disciplinaryStatusCounts.Draft = PreviousCasesData.Where(o => o.CaseStatusId == 2).ToList().Count();
                disciplinaryStatusCounts.Draft = PreviousCasesData.Where(o => o.CaseStatusId == 3).ToList().Count();
                disciplinaryStatusCounts.Draft = PreviousCasesData.Where(o => o.CaseStatusId == 4).ToList().Count();
                disciplinaryStatusCounts.Draft = PreviousCasesData.Where(o => o.CaseStatusId == 5).ToList().Count();
                disciplinaryStatusCounts.Draft = PreviousCasesData.Where(o => o.CaseStatusId == 6).ToList().Count();
            }
        }
        catch (Exception ex)
        {
            RegisterError = $"Error: {ex.Message}";
        }
    }
    #region EmployeeDisplinaryAdapter
    public class TestDisplinaryDataAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        public TestDisplinaryDataAdapter(HttpClient _http, IToastService ts
        , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _SystemSettings = systemSettings;
            _ApiConfig = apiConfig;
            toastService = ts;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<DisplinaryModel>();
            try
            {
                await _SystemSettings.GetLoginCredentials();
                string? AccessToken = null;
                string? BaseUrl = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;

                    if (val.FirstOrDefault(o => o.Key == "AccessToken").Value != null)
                    {
                        AccessToken = val.FirstOrDefault(o => o.Key == "AccessToken").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "BaseUrl").Value != null)
                    {
                        BaseUrl = val.FirstOrDefault(o => o.Key == "BaseUrl").Value.ToString();
                    }
                }
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}EmployeeDisplinary/GetDisplinaryList");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<DisplinaryModel>>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<DisplinaryModel>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as DisplinaryModel);

                await _SystemSettings.GetLoginCredentials();
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                //if(_SystemSettings.UserRole){

                //}
                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}EmployeeDisplinary/SaveDisciplinaryRecord", httpContent);
                if (result.IsSuccessStatusCode)
                {
                    toastService.ShowSuccess("Displinary record was sucessfully saved");
                }
                else
                {
                    toastService.ShowError(result.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                await _SystemSettings.GetLoginCredentials();
                var val = (value as DisplinaryModel);
                if (val != null)
                {
                    if (val.EmployeeDisplinaryId == 0)
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}EmployeeDisplinary/SaveDisciplinaryRecord", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                    else
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}EmployeeDisplinary/SaveDisciplinaryRecord", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }

    }
    public async Task ActionComplete(ActionEventArgs<DisplinaryModel> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            EmployeeDisplinaryGrid.PreventRender(false);
            ResponseDocumentString = await GetImageString(args.RowData.EmployeeDisplinaryHeader.EmployeeDocumentName, args.RowData.EmployeeDisplinaryHeader.EmployeeDocumentExt, "ResponseToDisplinaryCase");
            ReasonDocumentString = await GetImageString(args.RowData.EmployeeDisplinaryHeader.OfficialDocumentName, args.RowData.EmployeeDisplinaryHeader.OfficialDocumentExt, "DisplinaryCaseProof");
        }
    }
    public void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDisplinary> args)
    {
        employeeno = args.ItemData;
    }
    public async Task OnDisplinaryActionBegin(ActionEventArgs<DisplinaryModel> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                employeeno = ViewEmployeeDisplinaryData.FirstOrDefault(o => o.Employeeid == args.RowData.EmployeeDisplinaryHeader.EmployeeId);
                if (args.RowData.aDisplinaryAppeals == null)
                {
                    args.RowData.aDisplinaryAppeals = new List<ADisplinaryAppeal>();
                }
                if (args.RowData.aDisplinaryRefereds == null)
                {
                    args.RowData.aDisplinaryRefereds = new List<ADisplinaryRefered>();
                }

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                //args.RowData.EmployeeDisplinaryHeader.DisplinedBy = _SystemSettings.AccountHolderName;
                //args.RowData.EmployeeDisplinaryHeader.OfficersDesignation = _SystemSettings.UserRole;
                args.RowData.aDisplinaryAppeals = new List<ADisplinaryAppeal>();
                args.RowData.aDisplinaryRefereds = new List<ADisplinaryRefered>();
                args.RowData.EmployeeDisplinaryHeader = new EmployeeDisplinary();
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                //if (string.IsNullOrEmpty(args.Data.EmployeeDisplinaryHeader.EmployeeResponse))
                //{
                //    ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please record your statment or response before submitting.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                //    args.Cancel = true;
                //}
                if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
                {
                    employeeno = ViewEmployeeDisplinaryData.FirstOrDefault(o => o.Employeeid == args.RowData.EmployeeDisplinaryHeader.EmployeeId);
                    // ChildQuery = new Query().AddParams("EmployeeId", args.RowData.EmployeeId).AddParams("AccessToken", _SystemSettings.AccessToken).AddParams("BaseUrl", _ApiConfig.BaseUrl);
                }
                if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
                {
                    employeeno = new();
                }
                if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
                {

                }
                if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
                {

                }

            }
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    public string GetDisplinaryHeader(EmployeeDisplinary Value)
    {
        if (Value.DisplinaryId == 0)
        {
            return "Add a new Displinary";
        }
        else
        {
            return "Edit Employee Displinary Details";

        }
    }
    private async Task<string> GetImageString(string imageUrl, string ext, string Rootfolder)
    {
        string? result = null;
        try
        {
            if (!string.IsNullOrEmpty(imageUrl))
            {
                ImageUpload a = await _DocumentUploadModel.GetDocument(imageUrl, Rootfolder, _SystemSettings.AccessToken);

                if (a != null)
                {
                    if (a.Imagebyte != null)
                    {
                        if (!string.IsNullOrEmpty(a.ImageExt) && a.ImageExt.Contains("pdf"))
                        {
                            string base64String = Convert.ToBase64String(a.Imagebyte, 0, a.Imagebyte.Length);
                            result = "data:application/pdf;base64," + base64String;
                        }
                        else if (!string.IsNullOrEmpty(a.ImageExt))
                        {
                            string base64String = Convert.ToBase64String(a.Imagebyte, 0, a.Imagebyte.Length);
                            result = "data:image/" + a.ImageExt + ";base64," + base64String;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        return result;
    }
    #endregion EmployeeDisplinaryAdapter

    #region Methods
    public void QueryCellInfoHandler(QueryCellInfoEventArgs<DisplinaryModel> Args)
    {
        if (Args.Column.Field == "EmployeeDisplinaryNumber")
        {
            if (Args.Data.EmployeeDisplinaryHeader.CaseStatusId == 1)
            {
                Args.Cell.AddClass(new string[] { "NotImplemented" });
            }
           else if (Args.Data.EmployeeDisplinaryHeader.CaseStatusId == 2)
            {
                Args.Cell.AddClass(new string[] { "FullyImplemented" });
            }
          else if (Args.Data.EmployeeDisplinaryHeader?.CaseStatusId == 3)
            {
                Args.Cell.AddClass(new string[] { "PartiallyImplemented" });
            }
            else if (Args.Data.EmployeeDisplinaryHeader?.CaseStatusId == 4)
            {
                Args.Cell.AddClass(new string[] { "NotImplemented" });
            }
            else if (Args.Data.EmployeeDisplinaryHeader?.CaseStatusId == 5)
            {
                Args.Cell.AddClass(new string[] { "NotImplemented" });
            }
            else if (Args.Data.EmployeeDisplinaryHeader?.CaseStatusId == 6)
            {
                Args.Cell.AddClass(new string[] { "NotImplemented" });
            }
         


        }
    }
    private async void OnReasonChange(UploadChangeEventArgs args)
    {
        try
        {
            await UploadReasonSpinner.ShowAsync();
            foreach (var file in args.Files)
            {
                if (file.FileInfo.Size <= 5242880)
                {
                    file.Stream.Position = 0;
                    if (file.FileInfo.Type.ToLower().Contains("pdf") || file.FileInfo.Type.ToLower().Contains("doc"))
                    {
                        string fileName = string.Empty;
                        if (file.FileInfo.Type.Trim().Contains("doc"))
                        {
                            var ttt = employeeno;
                            var a = DisplinaryReasonData.FirstOrDefault(o => o.DisplinaryReasonId == EmployeeDisplinaryData.DisplinaryReasonId);
                            fileName = ttt.EmployeeDetails + "_" + "DisplinaryCase" + "_" + DateTime.Now.ToString("dd_MM_yyyy") + ".pdf";
                            Syncfusion.DocIO.DLS.WordDocument document;
                            if (file.FileInfo.Type.Contains("doc") && !file.FileInfo.Type.Contains("docx"))
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Doc);
                            }
                            else
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Docx);
                            }
                            //Creates an instance of the DocToPDFConverter
                            DocIORenderer render = new DocIORenderer();//Converts Word document into PDF document
                            PdfDocument pdfDocument = render.ConvertToPDF(document);
                            MemoryStream _ms = new MemoryStream();
                            pdfDocument.Save(_ms);
                            _ms.Position = 0;
                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);
                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "DisplinaryCaseProof"
                                };
                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                EmployeeDisplinaryData.OfficialDocumentName = fileName;
                                EmployeeDisplinaryData.OfficialDocumentExt = "pdf";
                                ReasonDocumentString = result;
                                bytes = null;
                                _ms.Close();
                                _ms.Dispose();
                                pdfDocument.Close();
                                pdfDocument.Dispose();
                                render.Dispose();
                                document.Close();
                                document.Dispose();
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                        else
                        {
                            var ttt = employeeno;
                            var a = DisplinaryReasonData.FirstOrDefault(o => o.DisplinaryReasonId == EmployeeDisplinaryData.DisplinaryReasonId); 
                            // fileName = a.DisplinaryReasonDescription + "_" + DateTime.Now + ".pdf";
                            fileName = ttt.EmployeeDetails + "_" + "DisplinaryCase" + "_" + DateTime.Now.ToString("dd_MM_yyyy") + ".pdf";
                            MemoryStream ms = new MemoryStream();
                            file.Stream.WriteTo(ms);
                            ms.Position = 0;
                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);
                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "DisplinaryCaseProof"
                                };
                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                EmployeeDisplinaryData.OfficialDocumentName =fileName;
                                EmployeeDisplinaryData.OfficialDocumentExt = "pdf";
                                ReasonDocumentString = result;
                                bytes = null;
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                    }
                    else if (file.FileInfo.Type.ToLower().Contains("png") || file.FileInfo.Type.ToLower().Contains("gif") || file.FileInfo.Type.ToLower().Contains("jpeg"))
                    {

                        var ttt = employeeno;
                        var a = DisplinaryReasonData.FirstOrDefault(o => o.DisplinaryReasonId == EmployeeDisplinaryData.DisplinaryReasonId);
                        //  string fileName = a.DisplinaryReasonDescription + "_" + DateTime.Now + ".pdf";
                        string fileName = ttt.EmployeeDetails + "_" + "DisplinaryCase" + "_" + DateTime.Now.ToString("dd_MM_yyyy") + ".pdf";
                        byte[] bytes = file.Stream.ToArray();
                        string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                        ImageUpload m = new ImageUpload()
                            {
                                ImageName = fileName,
                                ImageExt = file.FileInfo.Type.Trim(),
                                Imagebyte = bytes,
                                Rootfolder = "DisplinaryCaseProof"
                            };
                        var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                        if (Requestresult != null && Requestresult.IsSuccess)
                        {
                            var result = "data:image/" + file.FileInfo.Type.Trim() + ";base64," + base64;
                            EmployeeDisplinaryData.OfficialDocumentName = fileName;
                            EmployeeDisplinaryData.OfficialDocumentExt = file.FileInfo.Type.Trim();
                            ReasonDocumentString = result;
                            bytes = null;
                        }
                        else if (Requestresult != null)
                        {
                            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        }
                    }
                    else
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = "Please ensure that the uploaded document is either a pdf or doc or docx.", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await UploadReasonSpinner.HideAsync();
            StateHasChanged();
        }

    }
    private async void OnResponseChange(UploadChangeEventArgs args)
    {
        try
        {
            await UploadResponseSpinner.ShowAsync();
            foreach (var file in args.Files)
            {
                if (file.FileInfo.Size <= 5242880)
                {
                    file.Stream.Position = 0;
                    if (file.FileInfo.Type.ToLower().Contains("pdf") || file.FileInfo.Type.ToLower().Contains("doc"))
                    {
                        string fileName = string.Empty;
                        if (file.FileInfo.Type.Trim().Contains("doc"))
                        {
                            var tx = employeeno;
                            var a = DisplinaryReasonData.FirstOrDefault(o => o.DisplinaryReasonId == EmployeeDisplinaryData.DisplinaryReasonId);
                            //  fileName = a.DisplinaryReasonDescription + "_" + DateTime.Now.ToString("dd_MM_yyyy") + ".pdf";
                            fileName = tx.EmployeeDetails + "_" + "DisciplinaryStatement"+ "_"+ DateTime.Now.ToString("dd_MM_yyyy") + ".pdf";
                            //Create a new document
                            Syncfusion.DocIO.DLS.WordDocument document;
                            if (file.FileInfo.Type.Contains("doc") && !file.FileInfo.Type.Contains("docx"))
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Doc);
                            }
                            else
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Docx);
                            }
                            //Creates an instance of the DocToPDFConverter
                            DocIORenderer render = new DocIORenderer();//Converts Word document into PDF document
                            PdfDocument pdfDocument = render.ConvertToPDF(document);
                            MemoryStream _ms = new MemoryStream();
                            pdfDocument.Save(_ms);
                            _ms.Position = 0;
                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);
                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "ResponseToDisplinaryCase"
                                };
                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                EmployeeDisplinaryData.EmployeeDocumentName = fileName;
                                EmployeeDisplinaryData.EmployeeDocumentExt = "pdf";
                                ResponseDocumentString = result;
                                bytes = null;
                                _ms.Close();
                                _ms.Dispose();
                                pdfDocument.Close();
                                pdfDocument.Dispose();
                                render.Dispose();
                                document.Close();
                                document.Dispose();
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                        else
                        {
                            var tx = employeeno;
                            var a = DisplinaryReasonData.FirstOrDefault(o => o.DisplinaryReasonId == EmployeeDisplinaryData.DisplinaryReasonId);
                            //fileName = a.DisplinaryReasonDescription + "_" + DateTime.Now + ".pdf";
                            fileName = tx.EmployeeDetails  + "_" + "DisciplinaryStatement" + "_" + DateTime.Now.ToString("dd_MM_yyyy") + ".pdf";
                            MemoryStream ms = new MemoryStream();
                            file.Stream.WriteTo(ms);
                            ms.Position = 0;
                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);
                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "ResponseToDisplinaryCase"
                                };
                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                EmployeeDisplinaryData.EmployeeDocumentName = fileName;
                                EmployeeDisplinaryData.EmployeeDocumentExt = "pdf";
                                ResponseDocumentString = result;
                                bytes = null;
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                    }
                    else if (file.FileInfo.Type.ToLower().Contains("png") || file.FileInfo.Type.ToLower().Contains("gif") || file.FileInfo.Type.ToLower().Contains("jpeg"))
                    {

                        var tx = employeeno;
                        var a = DisplinaryReasonData.FirstOrDefault(o => o.DisplinaryReasonId == EmployeeDisplinaryData.DisplinaryReasonId);
                        //   string fileName = a.DisplinaryReasonDescription + "_" + DateTime.Now + ".pdf";
                        string fileName = tx.EmployeeDetails + "_" + "DisciplinaryStatement" + "_" + DateTime.Now.ToString("dd_MM_yyyy") + ".pdf";
                        byte[] bytes = file.Stream.ToArray();
                        string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                        ImageUpload m = new ImageUpload()
                            {
                                ImageName = fileName,
                                ImageExt = file.FileInfo.Type.Trim(),
                                Imagebyte = bytes,
                                Rootfolder = "ResponseToDisplinaryCase"
                            };
                        var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                        if (Requestresult != null && Requestresult.IsSuccess)
                        {
                            var result = "data:image/" + file.FileInfo.Type.Trim() + ";base64," + base64;
                            EmployeeDisplinaryData.EmployeeDocumentName = fileName;
                            EmployeeDisplinaryData.EmployeeDocumentExt = file.FileInfo.Type.Trim();
                            ResponseDocumentString = result;
                            bytes = null;
                        }
                        else if (Requestresult != null)
                        {
                            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        }
                    }
                    else
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = "Please ensure that the uploaded document is either a pdf or doc or docx or image(png/Jpeg/gif).", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await UploadResponseSpinner.HideAsync();
            StateHasChanged();
        }

    }
    private async Task ReferedToBoard()
    {
        try
        {
            if (string.IsNullOrEmpty(DisplinaryReferedViewData?.ReferedDescription))
            {
                await ToastObj.Show(new ToastModel { Title = "Error!", Content = "Please enter reason for refering case before you proceed", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
            }
            else
            {
                EmployeeDisplinaryData.CaseStatusId = 3;
                DisplinaryReferedViewData.ReferedBy = _SystemSettings.AccountHolderName;
                DisplinaryReferedViewData.ReferedDate = DateTime.Now;
                HeaderReviewData.aDisplinaryRefereds.Add(DisplinaryReferedViewData);
                await this.ToastObj.ShowAsync(new ToastModel { Title = "Success!", Content = "Case has been successfully refered to the disciplinary committee.", CssClass = "e-toast-success", Icon = "e-success toast-icons" });
                await this.ToastObj.HideAsync();
                await AppealDialog.HideAsync();
                await EmployeeDisplinaryGrid.EndEditAsync();
            }
            //await ReferedDialog.ShowAsync();
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            StateHasChanged();
        }
    }
    private async Task CancelRefer()
    {
        try
        {
        
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private async Task ReferCase()
    {
        try
        {
            DisplinaryReferedViewData = new();
            DisplinaryReferedViewData.ReferedCaseNumber = EmployeeDisplinaryData?.EmployeeDisplinaryNumber;
            EmployeeDisplinaryData.ReferalDate = DateTime.Now;
            DisplinaryReferedViewData.ReferedDate = DateTime.Now;
            if (EmployeeDisplinaryData.CaseInvestigated == false){
                await ToastObj.Show(new ToastModel { Title = "Error!", Content = "Please ensure the case has been fully investigated. Click Case Investigated check box to confirm.", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
            }
            ComfirmationString = "Are you sure you want to refer this Case?";
            await ReferedDialog.ShowAsync();
        }
        catch (Exception)
        {

            throw;
        }

    }
    private async Task AppealCase()
    {
        try
        {
            DisplinaryAppealViewData = new();
            DisplinaryAppealViewData.EmployeeDisplinaryId = EmployeeDisplinaryData.DisplinaryId;
            ComfirmationString = "Are you sure you want to appeal?";
            await AppealDialog.ShowAsync();
        }
        catch (Exception)
        {

            throw;
        }

    }
    private async Task CancelAppeal(){
        try
        {
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private async Task SaveCase()
    {
        await EmployeeDisplinaryGrid.EndEditAsync();
    }
    private async Task SubmitCase()
    {
        EmployeeDisplinaryData.CaseStatusId = 2;
        EmployeeDisplinaryData.DateSubmitted = DateTime.Now;
        await EmployeeDisplinaryGrid.EndEditAsync();
    }
       private async Task SubmitAction()
    {
        EmployeeDisplinaryData.CaseStatusId = 5;
        EmployeeDisplinaryData.DisplinaryActionDate = DateTime.Now;
        await EmployeeDisplinaryGrid.EndEditAsync();
    }
    #endregion Methods
}
