@page "/DisciplinaryPage"
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;
@inject AppState AppState


<style>
  
    /*Disable Grid on Load and Enable it on DataBound*/
    .e-grid[disable="yes"] {
        opacity: .5;
        pointer-events: none;
        -ms-touch-action: none;
        touch-action: none;
        cursor: no-drop;
    }

    /*hide the Default Grid spinner */
    .e-grid .e-spinner-pane {
        display: none;
    }

    /*Disable select all on grid checkbox*/
    .e-headercelldiv.e-headerchkcelldiv .e-checkbox-wrapper.e-css {
        pointer-events: none;
        opacity: 0.5;
    }

    /*Change Dialog Header Close Button*/
    .e-dialog .e-btn .e-btn-icon.e-icon-dlg-close {
        float: right;
        font-size: 12px;
        width: auto;
    }

    .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {
        background-color: #d9edf7;
        border-color: #d9edf7;
        border-radius: 1px;
        bottom: 0;
        float: right;
        height: 32px;
        left: 15px;
        position: relative;
        width: 15px;
        padding: 1px 9px;
    }

    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #964B00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    .pp {
        color: ghostwhite;
        background-color: #2ecc71;
        padding: 10px;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| DISCIPLINARY FORM
    </li>
</ol>

<SfSpinner @ref="SpinnerObj" Label="Loading Please Wait....." Size="50">
    @*Render custom spinner component.*@
</SfSpinner>

<SfGrid @ref="@DisciplinaryGrid" ID="Grid" TValue="EmployeeDisplinary" AllowPaging="true"
        AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
        AllowTextWrap="true" AllowSorting="true" Toolbar="@ToolbarMenu">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <SfDataManager AdaptorInstance="@typeof(EmployeeDisplinaryDataAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEvents 
        OnActionComplete="@OnDisciplinaryActionComplete" 
        OnActionBegin="@OnDisciplinaryActionBegin" 
        RowSelecting="RowSelectingHandler"
                OnLoad="LoadHandler"
                DataBound="DataBound"
                TValue="EmployeeDisplinary">
    </GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams">
        <HeaderTemplate>
            @{
                var text = GetDisciplinaryHeader((context as EmployeeDisplinary));
                <div class="headerbandimg">
                    <span>@text</span>
                </div>
            }
        </HeaderTemplate>
        <Template Context="DisciplinaryContext">
            @{
                KpiData = (DisciplinaryContext as EmployeeDisplinary);
                @if (KpiData != null)
                {
                    <div class="row" style="margin-right:10px;margin-left:10px;">
                        <div class="col-md-12" hidden>
                            <SfNumericTextBox @bind-Value="@(KpiData.DisplinaryId)" Enabled="false" Placeholder="Disciplinary Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-md-5">
                                    <p style="font-weight:bolder">Employee Name:<span style="color:red;">*</span></p>
                                </div>
                                <div class="col-md-7">
                                    <SfDropDownList @bind-Value="@(KpiData.EmployeeId)" Enabled="OnSubmitButtonsBool" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnEmployeeChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>
                            </div>
                        </div>
                        @if(employeeno != null)
                        {
                            <div class="col-md-3">
                                <div class="row">
                                    <div class="col-md-5">
                                        <p style="font-weight:bolder">Department</p>
                                    </div>
                                    <div class="col-md-7">
                                        @if (employeeno.DepartmentId != null)
                                        {
                                            @employeeno.DepartmentDescription
                                        }
                                        else
                                        {
                                            <p style="color:darkred">Not Provided</p>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="row">
                                    <div class="col-md-5">
                                        <p style="font-weight:bolder">Head of Department</p>
                                    </div>
                                    <div class="col-md-7">
                                        @if (employeeno.HoDemployeeId != null)
                                        {
                                            @employeeno.HodfullName
                                        }
                                        else
                                        {
                                            <p style="color:darkred">Not Provided</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="row" style="margin-top:10px;margin-right:10px;margin-left:10px;">
                        <div class="form-group col-md-6">
                            <p>Warning Date:<span style="color:red;">*</span></p>
                            <SfDatePicker @bind-Value="@(KpiData.WarningDate)" ID="WarningDate" Enabled="OnSubmitButtonsBool" Format="dd-MMMM-yyyy" FloatLabelType="FloatLabelType.Never">
                            </SfDatePicker>
                        </div>
                        <div class="form-group col-md-6">
                            <p>Violation Date:</p>
                            <SfDatePicker @bind-Value="@(KpiData.ViolationDate)" ID="ViolationDate" Enabled="OnSubmitButtonsBool" Format="dd-MMMM-yyyy" FloatLabelType="FloatLabelType.Never">
                            </SfDatePicker>
                        </div>
                        <div class="form-group col-md-6">
                            <p>The place where the violation happened:<span style="color:red;">*</span></p>
                            <SfTextBox Multiline="true" @bind-Value="@(KpiData.OccurrencePlace)" Enabled="OnSubmitButtonsBool" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                        </div>
                        <div class="form-group col-md-6">
                            <p>Details of Violation:<span style="color:red;">*</span></p>
                            <SfTextBox Multiline="true" @bind-Value="@(KpiData.ViolationDetails)" Enabled="OnSubmitButtonsBool" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                        </div>
                        <div class="form-group col-md-6">
                            <p>Witness of Violation:</p>
                            <SfTextBox Multiline="true" @bind-Value="@(KpiData.ViolationWitness)" Enabled="OnSubmitButtonsBool" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                        </div>
                        <div class="form-group col-md-6">
                            <p>Disciplinary Action:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.DisplinaryActionId)" Enabled="OnSubmitButtonsBool" TItem="ADisplinaryAction" TValue="int?" DataSource="@DisplinaryActionData" Placeholder="Please Select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(ADisplinaryAction.DisplinaryActionId)" Text="@nameof(ADisplinaryAction.DisplinaryActionDescription)"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <div class="form-group col-md-12">
                            <p>Previous Warnings</p>
                            <SfTextBox Multiline="true" Rows=3 Enabled="false" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                        </div>
                    </div>

                    <div class="col-md-12" style="margin-top:10px">
                        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                            <MudTabPanel Text="OFFICIAL USE ONLY">
                                <div class="row">
                                    <div class="form-group col-md-6">
                                        <p style="font-weight:bolder">Issuing Officer</p>
                                        <SfDropDownList @bind-Value="@(KpiData.IssuingOfficerId)" Enabled="IssuingOfficerDD" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                            <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                    <div class="form-group col-md-6">
                                        <p style="font-weight:bolder">Issuance Date:</p>
                                        <SfDatePicker @bind-Value="@(KpiData.DateCreated)" ID="DateCreated" Enabled="IssuanceDateEnabled" Format="dd-MMMM-yyyy" FloatLabelType="FloatLabelType.Never">
                                        </SfDatePicker>
                                    </div>
                                </div>
                            </MudTabPanel>

                            <MudTabPanel Text="Employee Response">
                                <div class="form-group col-md-12">
                                    <p style="font-weight:bolder">Type Your Response Here</p>
                                    <SfTextBox Multiline="true" @bind-Value="@(KpiData.EmployeeResponse)" Rows=3 Enabled="EmployeeResponseEnabled" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                            </MudTabPanel>
                        </MudTabs>
                    </div>
                    @*

                    <div class="row" style="margin-top:10px;margin-left:20px;">
                        <div class="form-group col-md-12">
                            <p class="alert alert-primary">OFFICIAL USER</p>
                        </div>
                    </div>

                    <div class="row" style="margin-right:10px;margin-left:10px;">
                        <div class="form-group col-md-6">
                            <p style="font-weight:bolder">Issuing Officer</p>
                            <SfDropDownList @bind-Value="@(KpiData.IssuingOfficerId)" Enabled="IssuingOfficerDD" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <div class="form-group col-md-6">
                            <p style="font-weight:bolder">Issuance Date:</p>
                            <SfDatePicker @bind-Value="@(KpiData.DateCreated)" ID="DateCreated" Enabled="IssuanceDateEnabled" Format="dd-MMMM-yyyy" FloatLabelType="FloatLabelType.Never">
                                    </SfDatePicker>
                        </div>
                    </div>
                    *@
                }
            }
        </Template>
        <FooterTemplate>
            <button @onclick="@onSaveDraftForm" hidden=@IsHiddenDraft disabled=@IsDraftDisabled class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Save Draft</button>
            <button @onclick="@onSubmitForm" hidden=@IsSubmitHidden disabled=@IsSubmitDisabled class="btn btn-success" data-ripple="true" style="margin-right:10px;">@SaveText</button>

            <button @onclick="@DialogCancelBtnclicked" disabled=@IsCancelDisabled class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Cancel</button>
        </FooterTemplate>
    </GridEditSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50" Visible="false"></GridColumn>
        <GridColumn HeaderText="Manage"
                    Width="40"
                    CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"
                    TextAlign="TextAlign.Left">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit/View"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeDisplinary.DisplinaryId) Visible=false HeaderText="Perspective Id" AllowEditing="false" IsPrimaryKey="true"></GridColumn>
        <GridForeignColumn Field=@nameof(EmployeeDisplinary.EmployeeId)
                           HeaderText="Employee"
                           Width="80"
                           AllowEditing="false"
                           ForeignKeyField="@(nameof(ViewEmployeeDropDown.Employeeid))"
                           ForeignKeyValue="@(nameof(ViewEmployeeDropDown.EmployeeDetails))"
                           ForeignDataSource="@EmployeeData"
                           AllowFiltering="false"
                           IsFrozen="false"
                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

         <GridColumn Field=@nameof(EmployeeDisplinary.ViolationDetails)
                    HeaderText="Disciplinary Violation Reason"
                    TextAlign="TextAlign.Justify"
                    Width="120"
                    ClipMode="ClipMode.EllipsisWithTooltip"
                    Type="ColumnType.String"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
        </GridColumn>

        <GridColumn Field=@nameof(EmployeeDisplinary.DateCreated)
                    HeaderText="Date Created"
                    EditType="EditType.DatePickerEdit"
                    Format="dd/MM/yyyy"
                    Type="ColumnType.Date"
                    Width="80"
                    AllowEditing="false"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
        </GridColumn>
    </GridColumns>
</SfGrid>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="20%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader-Loading-text"></div>
                        @*<div class="loader-Saving-text"></div>*@
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

@code {
    #region Declarations
    private static EmployeeDisplinary? KpiData { get; set; }
    SfGrid<EmployeeDisplinary>? DisciplinaryGrid;
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "98%" };
    private static ViewEmployeeDropDown? employeeno { get; set; }
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<AFinancialYear>? FinancialYearData { get; set; }
    List<ADepartment>? DepartmentsData { get; set; }
    List<ADisplinaryAction>? DisplinaryActionData { get; set; }

    EmployeeRegistrationModel inputmodel { get; set; } = new EmployeeRegistrationModel();
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    [Parameter]
    public int? finyear { get; set; }
    LoginResultModel? Credentials { get; set; }
    public bool WeightTextBox = true;
    public bool BasicUnitDD = true;
    public bool DepartmentDD = false;
    SfSpinner? SpinnerObj;
    private Dictionary<string, object> GridAttributes { get; set; } = new Dictionary<string, object>();
    public bool IssuingOfficerDD = false;
    public bool IssuanceDateEnabled = false;
    public bool OnSubmitButtonsBool = true;
    public bool IsSubmitDisabled;
    public bool IsSubmitHidden;
    public bool IsCancelDisabled = false;
    public bool EmployeeResponseEnabled;

    Syncfusion.Blazor.Grids.Action _previous { get; set; }
    SfDialog? LoadingDialogue;
    public string SaveText { get; set; }

    private List<object> ToolbarMenu = new List<object>()
        {
            new ItemModel() { Text = "New Case", PrefixIcon = "e-add", Id = "Grid_add"}
            // ,new ItemModel(){ Text = "Edit Case", PrefixIcon= "e-edit", Id="Grid_edit"}
        };

    bool IsDraftDisabled = false;
    bool IsHiddenDraft = false;

    #endregion Declarations

    protected override async Task OnInitializedAsync()
    {
        Credentials = await AuthService.GetUserCredentials();
        JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        employeeno = null;

        ////To be accessed by HR only
        //if (Credentials != null && Credentials.JobTitleId != 44)
        //{
        //    AppState.LoggedIn = false;
        //    navigation.NavigateTo("/");
        //}
        //else if (DateTime.Now > Credentials.expiration)
        //{
        //    AppState.LoggedIn = false;
        //    navigation.NavigateTo("/");
        //}

        List<Task> t = new List<Task>();
        t.Add(Task.Run(async () =>
        {
            var responsedisplinaryaction = await Http.GetAsync($"Utilities/GetDisciplinaryAction");
            if (responsedisplinaryaction.IsSuccessStatusCode)
            {
                var contentdisplinaryaction = await responsedisplinaryaction.Content.ReadAsStringAsync();
                DisplinaryActionData = JsonSerializer.Deserialize<List<ADisplinaryAction>>(contentdisplinaryaction, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
            if (responsedepartment.IsSuccessStatusCode)
            {
                var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
                DepartmentsData = JsonSerializer.Deserialize<List<ADepartment>>(contentdepartment, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseemployee = await Http.GetAsync($"Utilities/GetEmployeeDD");
            if (responseemployee.IsSuccessStatusCode)
            {
                var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(contentemployee, _options);
            }
        }));

        if (Credentials != null && Credentials.JobTitleId != 44)
        {
            ToolbarMenu = new List<object>()
                {
                    new ItemModel(){ Text = "Edit Case", PrefixIcon= "e-edit", Id="Grid_edit"}
                };
        }

        StateHasChanged();
    }

    public async void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeeno = args.ItemData;
    }

    public async Task onSaveDraftForm()
    {
        try
        {
            if (KpiData.EmployeeId == null)
            {
                toastService.ShowWarning("Please select the employee.");
            }

            //else if (KpiData.DateofReview == null)
            //{
            //    toastService.ShowWarning("Please enter the date of review.");
            //}

            //else if (KpiData.AppraisalReasonId == null)
            //{
            //    toastService.ShowWarning("Please select the reason for appraisal.");
            //}

            //else if (KpiData.AppraiserName == null)
            //{
            //    toastService.ShowWarning("Please select the appraiser.");
            //}

            //else if (KpiData.FinancialYearId == null)
            //{
            //    toastService.ShowWarning("Please select the financial year.");
            //}

            else
            {
                if (DisciplinaryGrid != null)
                {
                    KpiData.CaseStatusId = 6;
                    KpiData.DateCreated = DateTime.Now;
                    await DisciplinaryGrid.EndEditAsync();
                }

            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    public async Task onSubmitForm()
    {
        try
        {
            if (KpiData.EmployeeId == null)
            {
                toastService.ShowWarning("Please select the employee.");
            }

            else if (KpiData.WarningDate == null)
            {
                toastService.ShowWarning("Please enter the warning date.");
            }

            else if (string.IsNullOrEmpty(KpiData.OccurrencePlace))
            {
                toastService.ShowWarning("Please enter the place where the violation happened.");
            }

            else if (string.IsNullOrEmpty(KpiData.ViolationDetails))
            {
                toastService.ShowWarning("Please enter the place where the violation details.");
            }

            else if (KpiData.DisplinaryActionId == null)
            {
                toastService.ShowWarning("Please select the disciplinary action.");
            }

            else
            {
                // if (DisciplinaryGrid != null)
                // {
                //     await LoadingDialogue.ShowAsync();
                //     KpiData.CaseStatusId = 2;
                //     KpiData.DateCreated = DateTime.Now;
                //     await DisciplinaryGrid.EndEditAsync();
                // }

                if (DisciplinaryGrid != null)
                {
                    await LoadingDialogue.ShowAsync();
                    if (_previous == Syncfusion.Blazor.Grids.Action.Add)
                    {                        
                        KpiData.CaseStatusId = 2;
                        KpiData.DateCreated = DateTime.Now;
                    }
                    else if (_previous == Syncfusion.Blazor.Grids.Action.BeginEdit)
                    {
                        if (KpiData.CaseStatusId == 1)
                        {
                            
                        }
                        else if(KpiData.CaseStatusId == 2)
                        {
                            KpiData.CaseStatusId = 4;
                            KpiData.DateCreated = DateTime.Now;                            
                        }
                        else if(KpiData.CaseStatusId == 3)
                        {

                        }
                        else if(KpiData.CaseStatusId == 4)
                        {

                        }
                        else if (KpiData.CaseStatusId == 5)
                        {

                        }
                        else if (KpiData.CaseStatusId == 6)
                        {

                        }
                    }

                    await DisciplinaryGrid.EndEditAsync();
                }               

            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    public async Task onSubmitResponseForm()
    {
        try
        {
            if (KpiData.EmployeeId == null)
            {
                toastService.ShowWarning("Please select the employee.");
            }

            else if (string.IsNullOrEmpty(KpiData.EmployeeResponse))
            {
                toastService.ShowWarning("Please enter your reponse.");
            }

            //else if (KpiData.AppraisalReasonId == null)
            //{
            //    toastService.ShowWarning("Please select the reason for appraisal.");
            //}

            //else if (KpiData.AppraiserName == null)
            //{
            //    toastService.ShowWarning("Please select the appraiser.");
            //}

            //else if (KpiData.FinancialYearId == null)
            //{
            //    toastService.ShowWarning("Please select the financial year.");
            //}

            else
            {
                if (DisciplinaryGrid != null)
                {
                    await LoadingDialogue.ShowAsync();
                    KpiData.CaseStatusId = 4;
                    //KpiData.DateCreated = DateTime.Now;
                    await DisciplinaryGrid.EndEditAsync();
                }

            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    public async void DialogCancelBtnclicked()
    {
        if (DisciplinaryGrid != null)
        {
            await DisciplinaryGrid.CloseEdit();
        }
    }

    #region DisciplinaryAdapter
    public class EmployeeDisplinaryDataAdapter : DataAdaptor
    {
        HttpClient Http;
        ApiConfig _ApiConfig;
        private readonly JsonSerializerOptions _options;
        public IToastService toastService;
        private readonly NavigationManager Navigation;
        public EmployeeDisplinaryDataAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;

        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<EmployeeDisplinary>();
            try
            {
                var response = await Http.GetAsync($"EmployeeDisplinary/GetEmployeeDisplinaryList");
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    toastService.ShowError(response.ReasonPhrase);
                }
                data = JsonSerializer.Deserialize<List<EmployeeDisplinary>>(content, _options);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<EmployeeDisplinary>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as EmployeeDisplinary);

                if (val.DisplinaryId == 0)
                {
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var result = await Http.PostAsync($"EmployeeDisplinary/CreateDisplinary?_baseurl={_baseurl}", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        toastService.ShowSuccess("Record sucessfully added");
                    }
                    else
                    {
                        // toastService.ShowError(result.Content.);
                    }
                }
                else
                {
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var result = await Http.PutAsync($"EmployeeDisplinary/UpdateDisplinary?_baseurl={_baseurl}", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        toastService.ShowSuccess("Record sucessfully added");
                    }
                    else
                    {
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as EmployeeDisplinary);
                if (val != null)
                {
                    if (val.DisplinaryId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"EmployeeDisplinary/CreateDisplinary?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"EmployeeDisplinary/UpdateDisplinary?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }

    }
    public async void OnDisciplinaryActionBegin(ActionEventArgs<EmployeeDisplinary> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                _previous = args.RequestType;
                employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == args.RowData.EmployeeId);

                //Disable these fields for employees summoned and Submission is submitted to employee

                //Appeal
                if (args.RowData.CaseStatusId == 1)
                {

                }
                //Submitted for employee response
                else if (args.RowData.CaseStatusId == 2)
                {
                    OnSubmitButtonsBool = false;
                    //For employee
                    if (args.RowData.EmployeeId == Credentials.StaffId)
                    {
                        IsSubmitDisabled = false;
                        IsSubmitHidden = false;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        EmployeeResponseEnabled = true;
                        SaveText  = "Submit Reponse";
                    }
                    else
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        EmployeeResponseEnabled = false;
                    }
                }
                //Refered to disciplinary committe
                else if (args.RowData.CaseStatusId == 3)
                {

                }
                //Submitted employee response to take acton
                else if (args.RowData.CaseStatusId == 4)
                {

                }
                //Disciplinary action taken
                else if (args.RowData.CaseStatusId == 5)
                {

                }
                //Draft
                else if (args.RowData.CaseStatusId == 6)
                {

                }
            }

            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                _previous = args.RequestType;
                employeeno = null;
                OnSubmitButtonsBool = true;
                IsSubmitDisabled = true;
                IsSubmitHidden = false;
                IsHiddenDraft = false;
                IsDraftDisabled = false;
                EmployeeResponseEnabled = false;
                SaveText  = "Submit To Employee";

                args.Data.DateCreated = DateTime.Now;

                if (Credentials.StaffId > 0)
                {
                    args.Data.IssuingOfficerId = Credentials.StaffId;
                }

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
    }

    public void OnDisciplinaryActionComplete(ActionEventArgs<EmployeeDisplinary> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            DisciplinaryGrid?.PreventRender(false);
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

            employeeno = null;
            //List<Task> t = new List<Task>();
            //t.Add(Task.Run(async () =>
            //{
            //    var responsebscperspective = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
            //    if (responsebscperspective.IsSuccessStatusCode)
            //    {
            //        var contentbscperspective = await responsebscperspective.Content.ReadAsStringAsync();
            //        BscPerspectiveData = JsonSerializer.Deserialize<List<ABscPerspectives>>(contentbscperspective, _options);
            //    }
            //}));

            //t.Add(Task.Run(async () =>
            //{
            //    var responsebscperspectivesum = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesSum");
            //    if (responsebscperspectivesum.IsSuccessStatusCode)
            //    {
            //        var contentbscperspectivesum = await responsebscperspectivesum.Content.ReadAsStringAsync();
            //        BscPerspectiveSumData = JsonSerializer.Deserialize<List<ViewPerspectiveTotalWeightSum>>(contentbscperspectivesum, _options);
            //    }
            //}));

            //t.Add(Task.Run(async () =>
            //{
            //    var responsefinyear = await Http.GetAsync($"FinancialYear/list");
            //    if (responsefinyear.IsSuccessStatusCode)
            //    {
            //        var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
            //        FinancialYearData = JsonSerializer.Deserialize<List<AFinancialYear>>(contentfinyear, _options);
            //    }
            //}));

            //t.Add(Task.Run(async () =>
            //{
            //    var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
            //    if (responsebscperspectivetype.IsSuccessStatusCode)
            //    {
            //        var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
            //        BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesType>>(contentbscperspectivetype, _options);
            //    }
            //}));

            //t.Add(Task.Run(async () =>
            //{
            //    var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
            //    if (responsedepartment.IsSuccessStatusCode)
            //    {
            //        var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
            //        DepartmentsData = JsonSerializer.Deserialize<List<ADepartment>>(contentdepartment, _options);
            //    }
            //}));

            //t.Add(Task.Run(async () =>
            //{
            //    var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
            //    if (responsemetric.IsSuccessStatusCode)
            //    {
            //        var contentmetric = await responsemetric.Content.ReadAsStringAsync();
            //        MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetric>>(contentmetric, _options);
            //    }
            //}));

            //t.Add(Task.Run(async () =>
            //{
            //    var responseemployee = await Http.GetAsync($"Employeez/GetMasterList");
            //    if (responseemployee.IsSuccessStatusCode)
            //    {
            //        var contentemployee = await responseemployee.Content.ReadAsStringAsync();
            //        EmployeeData = JsonSerializer.Deserialize<List<Employee>>(contentemployee, _options);
            //    }
            //}));
        }
    }

    public async Task RowSelectingHandler(RowSelectingEventArgs<EmployeeDisplinary> args)
    {
        await DisciplinaryGrid.ClearSelection();   //clear selection
    }

    public async void LoadHandler()
    {
        SpinnerObj.ShowAsync();
        GridAttributes.Add("disable", "yes");
    }
    public async void DataBound()
    {
        GridAttributes["disable"] = "no";
        SpinnerObj.HideAsync();
    }

    public string GetDisciplinaryHeader(EmployeeDisplinary Value)
    {
        if (Value.DisplinaryId == 0)
        {
            return "Add a new Discilinary Case";
        }
        else
        {
            return "Edit the Record" /*+ Value.BscPerspectiveDescription*/;
        }
    }
    #endregion DisciplinaryAdapter
    }
