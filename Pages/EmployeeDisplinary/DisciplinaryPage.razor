@page "/DisciplinaryPage"
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@using HCMIS.SHARED.DTOs.BSC;
@using HCMIS.SHARED.DTOs.Utilities;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;
@using HCMIS.SHARED.DTOs.Employeez;

<style>
        .e-dialog {
        max-height: 98%;
        max-width: 100%;
        min-width: 98%;
        position: absolute;
    }

    /*Disable Grid on Load and Enable it on DataBound*/
    .e-grid[disable="yes"] {
        opacity: .5;
        pointer-events: none;
        -ms-touch-action: none;
        touch-action: none;
        cursor: no-drop;
    }

    /*hide the Default Grid spinner */
    .e-grid .e-spinner-pane {
        display: none;
    }

    /*Disable select all on grid checkbox*/
    .e-headercelldiv.e-headerchkcelldiv .e-checkbox-wrapper.e-css {
        pointer-events: none;
        opacity: 0.5;
    }

    /*Change Dialog Header Close Button*/
    .e-dialog .e-btn .e-btn-icon.e-icon-dlg-close {
        float: right;
        font-size: 12px;
        width: auto;
    }

    .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {
        background-color: #d9edf7;
        border-color: #d9edf7;
        border-radius: 1px;
        bottom: 0;
        float: right;
        height: 32px;
        left: 15px;
        position: relative;
        width: 15px;
        padding: 1px 9px;
    }

    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #964B00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    .pp {
        color: ghostwhite;
        background-color: #2ecc71;
        padding: 10px;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| DISCIPLINARY FORM
    </li>
</ol>

<SfSpinner @ref="SpinnerObj" Label="Loading Please Wait....." Size="50">
    @*Render custom spinner component.*@
</SfSpinner>

<SfGrid @ref="@DisciplinaryGrid" ID="Grid" TValue="EmployeeDisciplinaryDto" AllowPaging="true"
        AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
        AllowTextWrap="true" AllowSorting="true" Toolbar="@ToolbarMenu">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <SfDataManager AdaptorInstance="@typeof(EmployeeDisplinaryDataAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEvents 
        OnActionComplete="@OnDisciplinaryActionComplete" 
        OnActionBegin="@OnDisciplinaryActionBegin" 
        RowSelecting="RowSelectingHandler"
                OnLoad="LoadHandler"
                DataBound="DataBound"
                TValue="EmployeeDisciplinaryDto">
    </GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams">
        <HeaderTemplate>
            @{
                var text = GetDisciplinaryHeader((context as EmployeeDisciplinaryDto));
                <div class="headerbandimg">
                    <span>@text</span>
                </div>
            }
        </HeaderTemplate>
        <Template Context="DisciplinaryContext">
            @{
                KpiData = (DisciplinaryContext as EmployeeDisciplinaryDto);
                @if (KpiData != null)
                {
                    <div class="row" style="margin-right:10px;margin-left:10px;">
                        <div class="col-md-12" hidden>
                            <SfNumericTextBox @bind-Value="@(KpiData.DisplinaryId)" Enabled="false" Placeholder="Disciplinary Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>
                        <div class="col-md-4">
                            <div class="row">
                                <div class="col-md-5">
                                    <p style="font-weight:bolder">Employee Name:<span style="color:red;">*</span></p>
                                </div>
                                <div class="col-md-7">
                                    <SfDropDownList @bind-Value="@(KpiData.EmployeeId)" Enabled="EmployeeDD" TItem="ViewEmployeeDropDownDto" TValue="int?" DataSource="@EmployeeData" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDownDto.Employeeid)" Text="@nameof(ViewEmployeeDropDownDto.EmployeeDetails)"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDownDto" ValueChange="OnEmployeeChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>
                            </div>
                        </div>
                        @if(employeeno != null)
                        {
                            <div class="col-md-4">
                                <div class="row">
                                    <div class="col-md-5">
                                        <p style="font-weight:bolder">Department</p>
                                    </div>
                                    <div class="col-md-7">
                                        @if (employeeno.DepartmentId != null)
                                        {
                                            @employeeno.DepartmentDescription
                                        }
                                        else
                                        {
                                            <p style="color:darkred">Not Provided</p>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="row">
                                    <div class="col-md-5">
                                        <p style="font-weight:bolder">Head of Department</p>
                                    </div>
                                    <div class="col-md-7">
                                        @if (employeeno.HoDemployeeId != null)
                                        {
                                            @employeeno.HodfullName
                                        }
                                        else
                                        {
                                            <p style="color:darkred">Not Provided</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="row" style="margin-top:10px;margin-left:20px;">
                        <div class="col-md-4">
                            <div class="row">
                                <div class="col-md-5">
                                    <p>Warning Date:<span style="color:red;">*</span></p>
                                </div>
                                <div class="col-md-7">
                                    <SfDatePicker @bind-Value="@(KpiData.WarningDate)" ID="WarningDate" Format="dd-MMMM-yyyy" FloatLabelType="FloatLabelType.Never">
                                    </SfDatePicker>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="row">
                                <div class="col-md-5">
                                    <p>Violation Date:</p>
                                </div>
                                <div class="col-md-7">
                                    <SfDatePicker @bind-Value="@(KpiData.ViolationDate)" ID="ViolationDate" Format="dd-MMMM-yyyy" FloatLabelType="FloatLabelType.Never">
                                    </SfDatePicker>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="row">                                
                                <div class="col-md-5">
                                    <p>The place where the violation happened:<span style="color:red;">*</span></p>
                                </div>
                                <div class="col-md-7">
                                    <SfTextBox Multiline="false" @bind-Value="@(KpiData.OccurrencePlace)" Enabled="true" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-4">
                            <div class="row">
                                <div class="col-md-5">
                                    <p>Details of Violation:<span style="color:red;">*</span></p>
                                </div>
                                <div class="col-md-7">
                                    <SfTextBox Multiline="true" @bind-Value="@(KpiData.ViolationDetails)" Enabled="true" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="row">
                                <div class="col-md-5">
                                    <p>Witness of Violation:</p>
                                </div>
                                <div class="col-md-7">
                                    <SfTextBox Multiline="true" @bind-Value="@(KpiData.ViolationWitness)" Enabled="true" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="row">
                                <div class="col-md-5">
                                    <p>Disciplinary Action:<span style="color:red;">*</span></p>
                                </div>
                                <div class="col-md-7">
                                    <SfDropDownList @bind-Value="@(KpiData.DisplinaryActionId)" Enabled="true" TItem="ADisplinaryActionDto" TValue="int?" DataSource="@DisplinaryActionData" Placeholder="Please Select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Value="@nameof(ADisplinaryActionDto.DisplinaryActionId)" Text="@nameof(ADisplinaryActionDto.DisplinaryActionDescription)"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="row" style="margin-top:10px;margin-left:20px;">
                        <div class="col-md-6">
                            <p>Previous Warnings</p>
                            <SfTextBox Multiline="true" Enabled="false" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                        </div>
                        <div class="col-md-6">
                            <p>Employee Response</p>
                            <SfTextBox Multiline="true" @bind-Value="@(KpiData.EmployeeResponse)" Enabled="EmployeeResponseEnabled" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                        </div>
                    </div>

                    <div class="row" style="margin-top:10px;margin-left:20px;">
                        <div class="form-group col-md-12">
                            <p class="alert alert-primary">Official Use</p>
                        </div>
                    </div>

                    <div class="row" style="margin-top:10px;margin-left:20px;">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-md-5">
                                    <p style="font-weight:bolder">Issuing Officer</p>
                                </div>
                                <div class="col-md-7">
                                    <SfDropDownList @bind-Value="@(KpiData.IssuingOfficerId)" Enabled="IssuingOfficerDD" TItem="ViewEmployeeDropDownDto" TValue="int?" DataSource="@EmployeeData" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDownDto.Employeeid)" Text="@nameof(ViewEmployeeDropDownDto.EmployeeDetails)"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6" hidden>
                            <div class="row">
                                <div class="col-md-5">
                                    <p style="font-weight:bolder">Employee</p>
                                </div>
                                <div class="col-md-7">
                                    <SfDropDownList @bind-Value="@(KpiData.EmployeeId)" Enabled="EmployeeDD" TItem="ViewEmployeeDropDownDto" TValue="int?" DataSource="@EmployeeData" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDownDto.Employeeid)" Text="@nameof(ViewEmployeeDropDownDto.EmployeeDetails)"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-md-5">
                                    <p style="font-weight:bolder">Issuance Date:</p>
                                </div>
                                <div class="col-md-7">
                                    <SfDatePicker @bind-Value="@(KpiData.DateCreated)" ID="DateCreated" Enabled="IssuanceDateEnabled" Format="dd-MMMM-yyyy" FloatLabelType="FloatLabelType.Never">
                                    </SfDatePicker>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6" hidden>
                            <div class="row">
                                <div class="col-md-5">
                                    <p style="font-weight:bolder">Employee Response Date</p>
                                </div>
                                <div class="col-md-7">
                                    <SfDatePicker @bind-Value="@(KpiData.EmployeeResponseDate)" ID="EmployeeResponseDate" Format="dd-MMMM-yyyy" FloatLabelType="FloatLabelType.Never">
                                     </SfDatePicker>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </Template>
        <FooterTemplate>
            <button @onclick="@onSaveDraftForm" hidden=@IsHiddenDraft disabled=@IsDraftDisabled class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Save Draft</button>
            @if (_previous == Syncfusion.Blazor.Grids.Action.Add)
            {
                <button @onclick="@onSubmitForm" hidden=@IsAddSubmitHidden disabled=@IsAddSubmitEnabled class="btn btn-success" data-ripple="true" style="margin-right:10px;">Submit</button>
            }
            else if (_previous == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                @*<button @onclick="@onApproveForm" hidden=@IsHiddenApprove disabled=@IsHiddenApproveDisabled class="btn btn-info" data-ripple="true" style="margin-right:10px;">Approve</button>
                <button @onclick="@onRejectForm" hidden=@IsHiddenRejected disabled=@IsRejectedDisabled class="btn btn-warning" data-ripple="true" style="margin-right:10px;">Reject</button>
                <button @onclick="@onSubmitForm" hidden=@IsHiddenSubmitEdit disabled=@IsHiddenDisabled class="btn btn-success" data-ripple="true" style="margin-right:10px;">Submit</button>*@
            }
            <button @onclick="@DialogCancelBtnclicked" disabled=@IsCancelDisabled class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Cancel</button>
        </FooterTemplate>
    </GridEditSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
        <GridColumn Field=@nameof(EmployeeDisciplinaryDto.DisplinaryId) Visible=false HeaderText="Perspective Id" AllowEditing="false" IsPrimaryKey="true"></GridColumn>
        <GridForeignColumn Field=@nameof(EmployeeDisciplinaryDto.EmployeeId)
                           HeaderText="Employee"
                           Width="80"
                           AllowEditing="false"
                           ForeignKeyField="@(nameof(ViewEmployeeDropDownDto.Employeeid))"
                           ForeignKeyValue="@(nameof(ViewEmployeeDropDownDto.EmployeeDetails))"
                           ForeignDataSource="@EmployeeData"
                           AllowFiltering="false"
                           IsFrozen="false"
                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

         <GridColumn Field=@nameof(EmployeeDisciplinaryDto.ViolationDetails)
                    HeaderText="Disciplinary Violation Reason"
                    TextAlign="TextAlign.Justify"
                    Width="120"
                    ClipMode="ClipMode.EllipsisWithTooltip"
                    Type="ColumnType.String"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
        </GridColumn>

        <GridColumn Field=@nameof(EmployeeDisciplinaryDto.DateCreated)
                    HeaderText="Date Created"
                    EditType="EditType.DatePickerEdit"
                    Format="dd/MM/yyyy"
                    Type="ColumnType.Date"
                    Width="80"
                    AllowEditing="false"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
        </GridColumn>
    </GridColumns>
</SfGrid>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="20%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader-Loading-text"></div>
                        @*<div class="loader-Saving-text"></div>*@
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

@code {
    @code {
        #region Declarations
        private static EmployeeDisciplinaryDto? KpiData { get; set; }
        SfGrid<EmployeeDisciplinaryDto>? DisciplinaryGrid;
        private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "40vh", Width = "65%" };
        private static ViewEmployeeDropDownDto? employeeno { get; set; }
        List<ViewEmployeeDropDownDto>? EmployeeData { get; set; }
        List<ViewFinancialYearDto>? FinancialYearData { get; set; }
        List<ADepartmentDto>? DepartmentsData { get; set; }
        List<ADisplinaryActionDto>? DisplinaryActionData { get; set; }

        EmployeeRegistrationModel inputmodel { get; set; } = new EmployeeRegistrationModel();
        private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        [Parameter]
        public int? finyear { get; set; }
        LoginResultModel? Credentials { get; set; }
        public bool WeightTextBox = true;
        public bool BasicUnitDD = true;
        public bool DepartmentDD = false;
        SfSpinner? SpinnerObj;
        private Dictionary<string, object> GridAttributes { get; set; } = new Dictionary<string, object>();
        public bool EmployeeDD = true;
        public bool IssuingOfficerDD = false;
        public bool IssuanceDateEnabled = false;
        public bool EmployeeResponseEnabled = true;        
        public bool IsCancelDisabled = false;
        public bool IsAddSubmitEnabled = false;
        public bool IsAddSubmitHidden = false;
        Syncfusion.Blazor.Grids.Action _previous { get; set; }
        SfDialog? LoadingDialogue;

        private List<object> ToolbarMenu = new List<object>()
        {
            new ItemModel() { Text = "NEW CASE", PrefixIcon = "e-add", Id = "Grid_add"},
            new ItemModel(){ Text = "EDIT CASE", PrefixIcon= "e-edit", Id="Grid_edit"},
            new ItemModel(){ Text = "UPDATE CASE", PrefixIcon= "e-update", Id="Grid_update"},
            new ItemModel(){ Text = "CANCEL CHANGES", PrefixIcon= "e-cancel", Id="Grid_cancel"}
        };

        bool IsDraftDisabled = false;
        bool IsHiddenDraft = false;

        #endregion Declarations

        protected override async Task OnInitializedAsync()
        {
            Credentials = await AuthService.GetUserCredentials();
            JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

            employeeno = null;
            List<Task> t = new List<Task>();
            t.Add(Task.Run(async () =>
            {
                var responsedisplinaryaction = await Http.GetAsync($"Utilities/GetDisciplinaryAction");
                if (responsedisplinaryaction.IsSuccessStatusCode)
                {
                    var contentdisplinaryaction = await responsedisplinaryaction.Content.ReadAsStringAsync();
                    DisplinaryActionData = JsonSerializer.Deserialize<List<ADisplinaryActionDto>>(contentdisplinaryaction, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
                if (responsedepartment.IsSuccessStatusCode)
                {
                    var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
                    DepartmentsData = JsonSerializer.Deserialize<List<ADepartmentDto>>(contentdepartment, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responseemployee = await Http.GetAsync($"Utilities/GetEmployeeDD");
                if (responseemployee.IsSuccessStatusCode)
                {
                    var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                    EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDownDto>>(contentemployee, _options);
                }
            }));
        }

        public async void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDownDto> args)
        {
            employeeno = args.ItemData;  
        }

        public async Task onSaveDraftForm()
        {
            try
            {
                if (KpiData.EmployeeId == null)
                {
                    toastService.ShowWarning("Please select the employee.");
                }

                //else if (KpiData.DateofReview == null)
                //{
                //    toastService.ShowWarning("Please enter the date of review.");
                //}

                //else if (KpiData.AppraisalReasonId == null)
                //{
                //    toastService.ShowWarning("Please select the reason for appraisal.");
                //}

                //else if (KpiData.AppraiserName == null)
                //{
                //    toastService.ShowWarning("Please select the appraiser.");
                //}

                //else if (KpiData.FinancialYearId == null)
                //{
                //    toastService.ShowWarning("Please select the financial year.");
                //}

                else
                {
                    if (DisciplinaryGrid != null)
                    {
                        KpiData.CaseStatusId = 6;
                        KpiData.DateCreated = DateTime.Now;
                        await DisciplinaryGrid.EndEditAsync();
                    }

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            finally
            {
                await LoadingDialogue.HideAsync();
                StateHasChanged();
            }
        }

        public async Task onSubmitForm()
        {
            try
            {
                if (KpiData.EmployeeId == null)
                {
                    toastService.ShowWarning("Please select the employee.");
                }

                //else if (KpiData.DateofReview == null)
                //{
                //    toastService.ShowWarning("Please enter the date of review.");
                //}

                //else if (KpiData.AppraisalReasonId == null)
                //{
                //    toastService.ShowWarning("Please select the reason for appraisal.");
                //}

                //else if (KpiData.AppraiserName == null)
                //{
                //    toastService.ShowWarning("Please select the appraiser.");
                //}

                //else if (KpiData.FinancialYearId == null)
                //{
                //    toastService.ShowWarning("Please select the financial year.");
                //}

                else
                {                    
                    if (DisciplinaryGrid != null)
                    {
                        KpiData.CaseStatusId = 2;
                        KpiData.DateCreated = DateTime.Now;
                        await DisciplinaryGrid.EndEditAsync();
                    }

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            finally
            {
                await LoadingDialogue.HideAsync();
                StateHasChanged();
            }
        }


        public async void DialogCancelBtnclicked()
        {
            if (DisciplinaryGrid != null)
            {
                await DisciplinaryGrid.CloseEdit();
            }
        }

        #region DisciplinaryAdapter
        public class EmployeeDisplinaryDataAdapter : DataAdaptor
        {
            HttpClient Http;
            ApiConfig _ApiConfig;
            private readonly JsonSerializerOptions _options;
            public IToastService toastService;
            private readonly NavigationManager Navigation;
            public EmployeeDisplinaryDataAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
                , ApiConfig apiConfig)
            {
                Http = _http;
                _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                toastService = ts;
                Navigation = _Navigation;
                _ApiConfig = apiConfig;

            }
            public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
            {
                var data = new List<EmployeeDisciplinaryDto>();
                try
                {
                    var response = await Http.GetAsync($"EmployeeDisplinary/GetEmployeeDisplinaryList");
                    var content = await response.Content.ReadAsStringAsync();
                    if (!response.IsSuccessStatusCode)
                    {
                        toastService.ShowError(response.ReasonPhrase);
                    }
                    data = JsonSerializer.Deserialize<List<EmployeeDisciplinaryDto>>(content, _options);
                }
                catch (Exception ex)
                {
                    toastService.ShowError(ex.Message.ToString());
                }

                IEnumerable GridData = data;
                int _count = data.Count;
                if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
                {
                    // Searching
                    GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
                }
                if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
                {
                    // Filtering
                    GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
                }
                if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
                {
                    GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
                }
                if (dataManagerRequest.Skip != 0)
                {
                    GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
                }
                if (dataManagerRequest.Take != 0)
                {
                    GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
                }
                IDictionary<string, object> aggregates = new Dictionary<string, object>();
                if (dataManagerRequest.Aggregates != null) // Aggregation
                {
                    aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
                }
                if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
                {
                    foreach (var group in dataManagerRequest.Group)
                    {
                        GridData = DataUtil.Group<EmployeeDisciplinaryDto>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                    }
                }
                return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
            }

            public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
            {
                try
                {
                    var val = (value as EmployeeDisciplinaryDto);

                    if (val.DisplinaryId == 0)
                    {
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                        var result = await Http.PostAsync($"EmployeeDisplinary/CreateDisplinary", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            toastService.ShowSuccess("Record sucessfully added");
                        }
                        else
                        {
                            // toastService.ShowError(result.Content.);
                        }
                    }
                    else
                    {
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                        var result = await Http.PutAsync($"EmployeeDisplinary/UpdateDisplinary", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            toastService.ShowSuccess("Record sucessfully added");
                        }
                        else
                        {
                        }
                    }
                }
                catch (Exception ex)
                {
                    toastService.ShowError(ex.Message.ToString());
                }
                return value;
            }

            public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
            {
                try
                {
                    var val = (value as EmployeeDisciplinaryDto);
                    if (val != null)
                    {
                        if (val.DisplinaryId == 0)
                        {

                            string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                            StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                            var result = await Http.PutAsync($"EmployeeDisplinary/CreateDisplinary", httpContent);
                            if (result.IsSuccessStatusCode)
                            {
                                var content = await result.Content.ReadAsStringAsync();
                                var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                if (data != null)
                                {
                                    if (data.IsSuccess)
                                    {
                                        toastService.ShowSuccess(data.Message);
                                    }
                                    else
                                    {
                                        toastService.ShowError(data.Message);
                                    }
                                }
                            }
                            else
                            {
                                toastService.ShowError(result.ReasonPhrase);
                            }

                        }
                        else
                        {

                            string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                            StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                            var result = await Http.PutAsync($"EmployeeDisplinary/UpdateDisplinary", httpContent);
                            if (result.IsSuccessStatusCode)
                            {
                                var content = await result.Content.ReadAsStringAsync();
                                var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                if (data != null)
                                {
                                    if (data.IsSuccess)
                                    {
                                        toastService.ShowSuccess(data.Message);
                                    }
                                    else
                                    {
                                        toastService.ShowError(data.Message);
                                    }
                                }
                            }
                            else
                            {
                                toastService.ShowError(result.ReasonPhrase);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    toastService.ShowError(ex.Message.ToString());
                }

                return value;
            }

        }
        public async void OnDisciplinaryActionBegin(ActionEventArgs<EmployeeDisciplinaryDto> args)
        {
            try
            {
                if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
                {
                    _previous = args.RequestType;
                    EmployeeResponseEnabled = true;
                    employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == args.RowData.EmployeeId);
                }
                if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
                {
                    _previous = args.RequestType;
                    EmployeeResponseEnabled = false;
                    args.Data.DateCreated = DateTime.Now;

                    if (Credentials.StaffId > 0)
                    {
                        args.Data.IssuingOfficerId = Credentials.StaffId;
                    }

                }
                if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
                {

                }
                if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
                {
                    if (args.Data.EmployeeId == null)
                    {
                        toastService.ShowWarning("Please select the Employee.");
                        args.Cancel = true;
                    }
                    //else if (args.Data.DepartmentId == null)
                    //{
                    //    toastService.ShowWarning("Please select a department.");
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.BscPerspectiveTypeId == null)
                    //{
                    //    toastService.ShowWarning("Please select the perspective type.");
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.PerspectiveTotalWeight == null)
                    //{
                    //    toastService.ShowWarning("Please enter the perspective total weight.");
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.MeasurementMetricId == null)
                    //{
                    //    toastService.ShowWarning("Please select the basic unit.");
                    //    args.Cancel = true;
                    //}

                    //else if (args.Data.MeasurementMetricId == 1 && args.Data.PerspectiveTotalWeight > 100)
                    //{
                    //    toastService.ShowWarning("The percentage cannot be beyond 100%. Please revise your perspective total weight.");
                    //    args.Cancel = true;
                    //}

                    else
                    {
                        //var countdata = BscPerspectiveData?.FirstOrDefault(o => o.BscPerspectiveTypeId == args.Data.BscPerspectiveTypeId && o.FinancialYearId == args.Data.FinancialYearId && o.DepartmentId == args.Data.DepartmentId);
                        //var sumdata = BscPerspectiveSumData?.FirstOrDefault(o => o.FinancialYearId == args.Data.FinancialYearId && o.DepartmentId == args.Data.DepartmentId);

                        //if (countdata != null && args.Action == "Add")
                        //{
                        //    var findesc = FinancialYearData?.FirstOrDefault(o => o.Id == countdata.FinancialYearId);
                        //    var perdesc = BscPerspectiveTypeData?.FirstOrDefault(o => o.BscPerspectiveTypeId == countdata.BscPerspectiveTypeId);
                        //    var depdesc = DepartmentsData?.FirstOrDefault(o => o.DepartmentId == countdata.DepartmentId);

                        //    toastService.ShowWarning("You have arleady captured a value for this perspective (" + perdesc.BscPerspectiveTypeDescription + ") in the Financial Year (" + findesc.FinancialYear + ") in the department (" + depdesc.DepartmentDescription + "). Record Not Saved");
                        //    args.Cancel = true;
                        //}

                        //else if (sumdata != null)
                        //{
                        //    if (args.Action == "Add")
                        //    {
                        //        //To ensure that all the four perspectives do not exceed 70%
                        //        double? setpercentage = 70;
                        //        double? newtotal = sumdata.TotalWeight + args.Data.PerspectiveTotalWeight;
                        //        if (newtotal > setpercentage)
                        //        {
                        //            var basicunitdesc = MeasurementUnitData?.FirstOrDefault(o => o.MeasurementMetricId == args.Data.MeasurementMetricId);
                        //            toastService.ShowWarning("Make sure all the four perspectives are not exceeding 70 and are not less than 70 " + basicunitdesc.MeasurementMetricDesc + " Record Not Saved");
                        //            //toastService.ShowWarning("Make sure all the four perspectives are not exceeding 70 and are not less than 70 " + basicunitdesc.MeasurementMetricDesc + ". Your acceptable percentage is ( " + (setpercentage - sumdata.TotalWeight) + "). Record Not Saved");
                        //            args.Cancel = true;
                        //        }
                        //    }
                        //    else if (args.Action == "Edit")
                        //    {
                        //        //To ensure that all the four perspectives do not exceed 70%
                        //        double? balance = args.RowData.PerspectiveTotalWeight;
                        //        double? newtotal = (sumdata.TotalWeight - args.RowData.PerspectiveTotalWeight) + args.Data.PerspectiveTotalWeight;

                        //        double? setpercentage = 70;
                        //        if (newtotal > setpercentage)
                        //        {
                        //            var basicunitdesc = MeasurementUnitData?.FirstOrDefault(o => o.MeasurementMetricId == args.Data.MeasurementMetricId);
                        //            toastService.ShowWarning("Make sure all the four perspectives are not exceeding 70 and are not less than 70 " + basicunitdesc.MeasurementMetricDesc + " Record Not Saved");
                        //            //toastService.ShowWarning("Make sure all the four perspectives are not exceeding 70 and are not less than 70 " + basicunitdesc.MeasurementMetricDesc + ". Your acceptable percentage is ( " + (setpercentage - sumdata.TotalWeight) + "). Record Not Saved");
                        //            args.Cancel = true;
                        //        }
                        //    }
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
        }

        public void OnDisciplinaryActionComplete(ActionEventArgs<EmployeeDisciplinaryDto> args)
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {
                DisciplinaryGrid?.PreventRender(false);
            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

                employeeno = null;
                //List<Task> t = new List<Task>();
                //t.Add(Task.Run(async () =>
                //{
                //    var responsebscperspective = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
                //    if (responsebscperspective.IsSuccessStatusCode)
                //    {
                //        var contentbscperspective = await responsebscperspective.Content.ReadAsStringAsync();
                //        BscPerspectiveData = JsonSerializer.Deserialize<List<BscPerspectivesDto>>(contentbscperspective, _options);
                //    }
                //}));

                //t.Add(Task.Run(async () =>
                //{
                //    var responsebscperspectivesum = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesSum");
                //    if (responsebscperspectivesum.IsSuccessStatusCode)
                //    {
                //        var contentbscperspectivesum = await responsebscperspectivesum.Content.ReadAsStringAsync();
                //        BscPerspectiveSumData = JsonSerializer.Deserialize<List<ViewPerspectiveTotalWeightSumDto>>(contentbscperspectivesum, _options);
                //    }
                //}));

                //t.Add(Task.Run(async () =>
                //{
                //    var responsefinyear = await Http.GetAsync($"FinancialYear/list");
                //    if (responsefinyear.IsSuccessStatusCode)
                //    {
                //        var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
                //        FinancialYearData = JsonSerializer.Deserialize<List<ViewFinancialYearDto>>(contentfinyear, _options);
                //    }
                //}));

                //t.Add(Task.Run(async () =>
                //{
                //    var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
                //    if (responsebscperspectivetype.IsSuccessStatusCode)
                //    {
                //        var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                //        BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesTypeDto>>(contentbscperspectivetype, _options);
                //    }
                //}));

                //t.Add(Task.Run(async () =>
                //{
                //    var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
                //    if (responsedepartment.IsSuccessStatusCode)
                //    {
                //        var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
                //        DepartmentsData = JsonSerializer.Deserialize<List<ADepartmentDto>>(contentdepartment, _options);
                //    }
                //}));

                //t.Add(Task.Run(async () =>
                //{
                //    var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
                //    if (responsemetric.IsSuccessStatusCode)
                //    {
                //        var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                //        MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetricDto>>(contentmetric, _options);
                //    }
                //}));

                //t.Add(Task.Run(async () =>
                //{
                //    var responseemployee = await Http.GetAsync($"Employeez/GetMasterList");
                //    if (responseemployee.IsSuccessStatusCode)
                //    {
                //        var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                //        EmployeeData = JsonSerializer.Deserialize<List<EmployeeDto>>(contentemployee, _options);
                //    }
                //}));
            }
        }

        public async Task RowSelectingHandler(RowSelectingEventArgs<EmployeeDisciplinaryDto> args)
        {
            await DisciplinaryGrid.ClearSelection();   //clear selection
        }

        public async void LoadHandler()
        {
            SpinnerObj.ShowAsync();
            GridAttributes.Add("disable", "yes");
        }
        public async void DataBound()
        {
            GridAttributes["disable"] = "no";
            SpinnerObj.HideAsync();
        }

        public string GetDisciplinaryHeader(EmployeeDisciplinaryDto Value)
        {
            if (Value.DisplinaryId == 0)
            {
                return "Add a new Discilinary Case";
            }
            else
            {
                return "Edit the Record" /*+ Value.BscPerspectiveDescription*/;
            }
        }
        #endregion DisciplinaryAdapter
    }
}
