@page "/LeaveRequestReportPage"
@using HCMIS.Data;
@using HCMIS.Model;
@using HCMIS.SHARED.Data;
@using HCMIS.Interface;
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings
@inject IAuthenticationService AuthService;
@using HCMIS.SHARED.Models;
@using Syncfusion.XlsIO;
@using System.Text.Json;
@inject IReportService reportservice;
@inject IToastService toastService;
@inject Microsoft.JSInterop.IJSRuntime JS;
@inject IUtilityRepository UtilityRepo;

<style>
    .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
        stroke: green;
    }
</style>

<MudOverlay @bind-Visible="@loadingspinner" DarkBackground="true" AutoClose="false" Absolute="true">
    <SfSpinner @bind-Visible="loadingspinner" Type="@Syncfusion.Blazor.Spinner.SpinnerType.Bootstrap" Size="70" Label="Page loading">
    </SfSpinner>
</MudOverlay>

<BreadCrumbPage Module="HCMIS" Submodule="LEAVE REQUEST REPORT - EMPLOYEE" />

<EditForm Model="@InputModel" OnValidSubmit="@OnSearchSubmit">
    <DataAnnotationsValidator />
    <div class="row" style="margin-bottom:10px;">

        <div class="col col-md-3">
            <p>Employee</p>
            <SfMultiSelect @bind-Value="@InputModel.Employeeid" TValue="int?[]"
                           TItem="ViewEmployeeDropDown" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                           Mode="@VisualMode.CheckBox" DataSource="@EmployeeData" ShowSelectAll="true" EnableSelectionOrder="true"
                           ShowDropDownIcon="true" FilterBarPlaceholder="Employee" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" Enabled="EmployeeDD">
                <MultiSelectFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>

        @*<div class="col col-md-3">
        <p>Gender</p>
        <SfMultiSelect @bind-Value="@InputModel.GenderId" TValue="int?[]" TItem="AGender" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@GenderData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Gender" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
        <MultiSelectFieldSettings Value="@nameof(AGender.GenderId)" Text="@nameof(AGender.GenderDesc)"></MultiSelectFieldSettings>
        </SfMultiSelect>
        </div>*@
        <div class="col col-md-3">
            <p>Leave Type</p>
            <SfMultiSelect @bind-Value="@InputModel.LeaveTypeId" TValue="int?[]" TItem="ALeaveType" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@LeaveTypeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Leave Type" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ALeaveType.LeaveTypeId)" Text="@nameof(ALeaveType.LeaveTypeDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="col col-md-3">
            <p>Department</p>
            <SfMultiSelect @bind-Value="@InputModel.DepartmentId" Enabled="DepartmentDD"
                           TValue="int?[]" TItem="ADepartment" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox"
                           DataSource="@DepartmentData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true"
                           FilterBarPlaceholder="Search Department" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ADepartment.DepartmentId)" Text="@nameof(ADepartment.DepartmentDescription)"></MultiSelectFieldSettings>
                <MultiSelectEvents TValue="int?[]" TItem="ADepartment" ValueChange="OnDepartmentChange"></MultiSelectEvents>
            </SfMultiSelect>

        </div>
        <div class="col col-md-3">
            <p>Job Title</p>
            <SfMultiSelect @bind-Value="@InputModel.JobTitleId" Query="@IndicatorQuery" TValue="int?[]" TItem="AJobTitle" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@JobTitleData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Job Title" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" Enabled="JobTitleDD">
                <MultiSelectFieldSettings Value="@nameof(AJobTitle.JobTitleId)" Text="@nameof(AJobTitle.JobTitleDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>

        <div class="col-md-4">
            <p>Commencement Date Range<span style="color:red;">*</span></p>
            <div class="row">
                <div class="col-md-5" style="margin-left: -30px;">
                    <SfDatePicker @bind-Value="@(InputModel.StartDate)" AllowEdit="false" Enabled="true" Placeholder="Start Date" FloatLabelType="FloatLabelType.Never" Format="dd/MM/yyyy" Width="150px"></SfDatePicker>
                </div>
                <div class="col-md-5" style="margin-left: 30px;">
                    <SfDatePicker @bind-Value="@(InputModel.EndDate)" AllowEdit="false" Enabled="true" Placeholder="End Date" FloatLabelType="FloatLabelType.Never" Format="dd/MM/yyyy" Width="150px"></SfDatePicker>
                </div>
            </div>
        </div>

        @if (Downloadreport == false)
        {
            <div class="col col-md-12" style="margin-top:10px;">
                <button @onclick="@OnSearchSubmit" class="btn btn-success" data-ripple="true" style="margin-right:10px;">Download Report</button>
                <button @onclick="@ClearSearchBtnClick" class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Clear Search</button>
            </div>
        }

        <div class="form-group col-md-12">
            <SfSpinner @ref="DownloadingSpinner" Label="Downloading Report Please Wait....." Size="50"></SfSpinner>
        </div>

        @if (!string.IsNullOrEmpty(InputModel.Response))
        {
            <div class="col col-md-12" style="margin-top:10px;">
                <div class="alert alert-success">@InputModel.Response</div>
            </div>
        }
    </div>
    <ValidationSummary />
</EditForm>


@code {
    private UtilitiesSearchPanel InputModel = new UtilitiesSearchPanel();
    SfSpinner? DownloadingSpinner;
    bool Downloadreport { get; set; } = false;
    string? filename { get; set; } = null;
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<AGender>? GenderData { get; set; }
    List<ADepartment>? DepartmentData { get; set; }
    List<AJobTitle>? JobTitleData { get; set; }
    List<ALeaveType>? LeaveTypeData { get; set; }
    List<ALeaveApprovalStatus>? ApprovalStatusData { get; set; }
    List<AYears>? YearData { get; set; }
    List<APublicHolidays>? PublicHolidaysData { get; set; }
    List<ViewTimeandAttendanceSummary>? attendancedata { get; set; }
    private string? NHCCLogo { get; set; }
    private string? NHCCLogoName { get; set; }
    LoginResultModel? Credentials { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    public bool EmployeeDD { get; set; }
    public bool DepartmentDD { get; set; }
    public bool JobTitleDD = false;
    Query? IndicatorQuery { get; set; }
    string imagepath;
    private string? JMSLogo { get; set; }
    private string? JMSLogoName { get; set; }
    public bool loadingspinner { get; set; }
    public static int PublicHolidays { get; set; } = 0;
    public static int numberOfDays2 { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loadingspinner = true;
            await base.OnInitializedAsync();
            var isAuthenticated = await AuthService.CheckAuthenticationStatus();
            if (isAuthenticated == false)
            {
                Navigation.NavigateTo("/LoginPage", true);
            }
            else
            {
                Credentials = await AuthService.GetUserCredentials();

                List<Task> t = new List<Task>();

                t.Add(Task.Run(async () =>
                    {
                        var response = await Http.GetAsync($"Utilities/GetEmployeeDD");
                        if (response.IsSuccessStatusCode)
                        {
                            var content = await response.Content.ReadAsStringAsync();
                            EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(content, _options);
                        }
                    }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetPublicHoliday");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        PublicHolidaysData = JsonSerializer.Deserialize<List<APublicHolidays>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsegender = await Http.GetAsync($"Utilities/GetGender");
                    if (responsegender.IsSuccessStatusCode)
                    {
                        var contentemployeegender = await responsegender.Content.ReadAsStringAsync();
                        GenderData = JsonSerializer.Deserialize<List<AGender>>(contentemployeegender, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetDepartment");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
               {
                   var response = await Http.GetAsync($"Utilities/GetLeaveType");
                   if (response.IsSuccessStatusCode)
                   {
                       var content = await response.Content.ReadAsStringAsync();
                       LeaveTypeData = JsonSerializer.Deserialize<List<ALeaveType>>(content, _options);
                   }
               }));

                t.Add(Task.Run(async () =>
                     {
                         var response = await Http.GetAsync($"Utilities/GetLeaveApprovalStatus");
                         if (response.IsSuccessStatusCode)
                         {
                             var content = await response.Content.ReadAsStringAsync();
                             ApprovalStatusData = JsonSerializer.Deserialize<List<ALeaveApprovalStatus>>(content, _options);
                         }
                     }));

                t.Add(Task.Run(async () =>
                     {
                         var response = await Http.GetAsync($"Utilities/GetJobTitle");
                         if (response.IsSuccessStatusCode)
                         {
                             var content = await response.Content.ReadAsStringAsync();
                             JobTitleData = JsonSerializer.Deserialize<List<AJobTitle>>(content, _options);
                         }
                     }));


                t.Add(Task.Run(async () =>
                    {
                        var response = await Http.GetAsync($"Utilities/GetYears");
                        if (response.IsSuccessStatusCode)
                        {
                            var content = await response.Content.ReadAsStringAsync();
                            YearData = JsonSerializer.Deserialize<List<AYears>>(content, _options);
                        }
                    }));

                //Attendance Report Summary

                t.Add(Task.Run(async () =>
                {
                    attendancedata = await reportservice.GetAttendanceData(InputModel);
                }));

                Task _t = Task.WhenAll(t);
                await _t;

                if (Credentials != null && (!string.IsNullOrEmpty(Credentials.UserRole) &&
                Credentials.UserRole.Contains("Administrator") || Credentials.JobTitleId == 44))
                {
                    EmployeeDD = true;
                    DepartmentDD = true;
                }
                else
                {
                    EmployeeDD = false;
                    DepartmentDD = false;

                    if (Credentials != null && EmployeeData != null)
                    {
                        var _employeedetails = EmployeeData.FirstOrDefault(o => o.Employeeid == Credentials.StaffId);

                        List<int?> _employeeid = new List<int?>();
                        List<int?> _departmentid = new List<int?>();
                        List<int?> _jobtitleid = new List<int?>();

                        _employeeid.Add(Credentials.StaffId);
                        _departmentid.Add(_employeedetails.DepartmentId);
                        _jobtitleid.Add(_employeedetails.JibTitleId);

                        InputModel.Employeeid = _employeeid.ToArray();
                        InputModel.DepartmentId = _departmentid.ToArray();
                        InputModel.JobTitleId = _jobtitleid.ToArray();
                    }
                }
            }
        }
        catch (Exception ex)
        {

        }
        finally
        {
            loadingspinner = false;
        }
    }

    private void OnDepartmentChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            JobTitleDD = true;
            IndicatorQuery = new Query();
            List<WhereFilter> filterList = new List<WhereFilter>();
            foreach (var item in args.Value)
            {
                filterList.Add(new WhereFilter() { Field = "DepartmentId", Operator = "equal", value = item, IgnoreCase = true });
            }

            var orWhere = WhereFilter.Or(filterList);
            IndicatorQuery = new Query().Where(orWhere);
        }
        else
        {
            IndicatorQuery = new Query();
        }
    }

    private async Task OnSearchSubmit()
    {
        filename = null;
        Downloadreport = true;
        string _text = string.Empty;
        int _numericvalue = 0;

        await DownloadingSpinner.ShowAsync();

        try
        {
            var data = await reportservice.GetLeaveRequest(InputModel);

            if (data.Count > 0)
            {
                using (ExcelEngine excelEngine = new ExcelEngine())
                {
                    IApplication application = excelEngine.Excel;
                    application.DefaultVersion = ExcelVersion.Excel2013;
                    IWorkbook workbook = application.Workbooks.Create(1);
                    IWorksheet worksheet = workbook.Worksheets[0];
                    worksheet.Name = "Leave Request Report";

                    #region Styles
                    var headerStyle = workbook.Styles.Add("headerStyle");

                    headerStyle.BeginUpdate();
                    headerStyle.Color = Syncfusion.Drawing.Color.Black;
                    headerStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                    headerStyle.Font.Bold = true;
                    headerStyle.Font.FontName = "Arial";
                    headerStyle.Font.Size = 8f;
                    headerStyle.Font.Color = ExcelKnownColors.White;

                    headerStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    headerStyle.Borders.Color = ExcelKnownColors.White;
                    headerStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    headerStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    headerStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;

                    headerStyle.WrapText = true;

                    headerStyle.EndUpdate();

                    var Style = workbook.Styles.Add("bodyStyle");

                    Style.BeginUpdate();
                    Style.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                    Style.VerticalAlignment = ExcelVAlign.VAlignTop;
                    Style.Font.Bold = false;
                    Style.Font.FontName = "Arial";
                    Style.Font.Size = 8f;
                    Style.Font.Color = ExcelKnownColors.Black;
                    Style.WrapText = true;
                    Style.Borders.Color = ExcelKnownColors.Black;
                    Style.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                    Style.EndUpdate();


                    var CategoryStyle = workbook.Styles.Add("CategoryStyle");

                    CategoryStyle.BeginUpdate();
                    CategoryStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 204, 0);
                    CategoryStyle.Font.Bold = true;
                    CategoryStyle.Font.FontName = "Arial";
                    CategoryStyle.Font.Size = 20f;
                    CategoryStyle.Font.Color = ExcelKnownColors.Brown;
                    CategoryStyle.WrapText = true;
                    CategoryStyle.Borders.Color = ExcelKnownColors.White;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.EndUpdate();

                    var DivisionStyle = workbook.Styles.Add("DivisionStyle");

                    DivisionStyle.BeginUpdate();
                    DivisionStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    DivisionStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 0, 0); //RED
                    DivisionStyle.Font.Bold = true;
                    DivisionStyle.Font.FontName = "Arial";
                    DivisionStyle.Font.Size = 8f;
                    DivisionStyle.Font.Color = ExcelKnownColors.White;
                    DivisionStyle.WrapText = true;
                    DivisionStyle.Borders.Color = ExcelKnownColors.White;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.EndUpdate();

                    #endregion

                    //Logo

                    worksheet.Range["A1"].ColumnWidth = 9;
                    worksheet.Range["A1:A2"].Merge();

                    var images = await UtilityRepo.GetLocalLogos();
                    byte[]? _imagebyte = null;
                    if (images != null && images.Count > 0)
                    {
                        var JMS = images.FirstOrDefault(o => o.ImageName.Contains("logonhcc"));
                        if (JMS != null)
                        {

                            JMSLogo = JMS.ImageString;
                            JMSLogoName = JMS.ImageName;
                            if (!string.IsNullOrEmpty(JMS.ImageString))
                            {
                                var a = JMS.ImageString.Split(";base64,");
                                _imagebyte = Convert.FromBase64String(a[1]);
                            }

                        }
                    }
                    if (_imagebyte != null && _imagebyte.Length > 0)
                    {
                        MemoryStream _ms = new MemoryStream(_imagebyte);

                        IPictureShape shape = worksheet.Pictures.AddPicture(1, 1, _ms);
                        //Re-sizing a Picture
                        shape.Height = 60;
                        shape.Width = 60;
                        //shape.IsSizeWithCell = true;
                        //shape.IsMoveWithCell = true;
                        shape.Left = 5;
                        shape.Top = 2;
                    }
                    //Logo

                    worksheet.Range["B1"].Text = "NHCC";
                    worksheet.Range["B1"].CellStyle = CategoryStyle;
                    worksheet.Range["B1"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                    worksheet.Range["B1"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;
                    worksheet.Range["B1"].RowHeight = 30;
                    worksheet.Range["B1:P1"].Merge();

                    worksheet.Range["B2"].Text = "Leave Request Report";
                    worksheet.Range["B2"].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(71, 44, 76);
                    worksheet.Range["B2"].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.White;
                    worksheet.Range["B2"].CellStyle.Font.FontName = "cambria";
                    worksheet.Range["B2"].CellStyle.Font.Size = 18;
                    worksheet.Range["B2:P2"].Merge();

                    int row = 1;
                    row++;
                    row++;


                    //FILTERS SEARCHED BY

                    worksheet.Range[row, 1].Text = "#";
                    worksheet.Range[row, 1].CellStyle = headerStyle;
                    worksheet.Range[row, 1].ColumnWidth = 9;
                    worksheet.Range[row, 1].WrapText = true;

                    worksheet.Range[row, 2].Text = "Leave Number";
                    worksheet.Range[row, 2].CellStyle = headerStyle;
                    worksheet.Range[row, 2].ColumnWidth = 13;
                    worksheet.Range[row, 2].WrapText = true;

                    worksheet.Range[row, 3].Text = "Employee";
                    worksheet.Range[row, 3].CellStyle = headerStyle;
                    worksheet.Range[row, 3].ColumnWidth = 13;
                    worksheet.Range[row, 3].WrapText = true;

                    worksheet.Range[row, 4].Text = "Department";
                    worksheet.Range[row, 4].CellStyle = headerStyle;
                    worksheet.Range[row, 4].ColumnWidth = 13;
                    worksheet.Range[row, 4].WrapText = true;

                    worksheet.Range[row, 5].Text = "Leave Type";
                    worksheet.Range[row, 5].CellStyle = headerStyle;
                    worksheet.Range[row, 5].ColumnWidth = 13;
                    worksheet.Range[row, 5].WrapText = true;

                    worksheet.Range[row, 6].Text = "Commencement Date";
                    worksheet.Range[row, 6].CellStyle = headerStyle;
                    worksheet.Range[row, 6].ColumnWidth = 13;
                    worksheet.Range[row, 6].WrapText = true;

                    worksheet.Range[row, 7].Text = "End Date";
                    worksheet.Range[row, 7].CellStyle = headerStyle;
                    worksheet.Range[row, 7].ColumnWidth = 13;
                    worksheet.Range[row, 7].WrapText = true;

                    worksheet.Range[row, 8].Text = "Total Leave Days Taken";
                    worksheet.Range[row, 8].CellStyle = headerStyle;
                    worksheet.Range[row, 8].ColumnWidth = 13;
                    worksheet.Range[row, 8].WrapText = true;

                    worksheet.Range[row, 9].Text = "Balance of Leave Days";
                    worksheet.Range[row, 9].CellStyle = headerStyle;
                    worksheet.Range[row, 9].ColumnWidth = 13;
                    worksheet.Range[row, 9].WrapText = true;

                    worksheet.Range[row, 10].Text = "Supervisor";
                    worksheet.Range[row, 10].CellStyle = headerStyle;
                    worksheet.Range[row, 10].ColumnWidth = 13;
                    worksheet.Range[row, 10].WrapText = true;

                    worksheet.Range[row, 11].Text = "Supervisor Approval Date";
                    worksheet.Range[row, 11].CellStyle = headerStyle;
                    worksheet.Range[row, 11].ColumnWidth = 13;
                    worksheet.Range[row, 11].WrapText = true;

                    worksheet.Range[row, 12].Text = "Head of Department";
                    worksheet.Range[row, 12].CellStyle = headerStyle;
                    worksheet.Range[row, 12].ColumnWidth = 13;
                    worksheet.Range[row, 12].WrapText = true;

                    worksheet.Range[row, 13].Text = "HOD Approval Date";
                    worksheet.Range[row, 13].CellStyle = headerStyle;
                    worksheet.Range[row, 13].ColumnWidth = 16;
                    worksheet.Range[row, 13].WrapText = true;

                    worksheet.Range[row, 14].Text = "CHRO";
                    worksheet.Range[row, 14].CellStyle = headerStyle;
                    worksheet.Range[row, 14].ColumnWidth = 13;
                    worksheet.Range[row, 14].WrapText = true;

                    worksheet.Range[row, 15].Text = "Approval Date";
                    worksheet.Range[row, 15].CellStyle = headerStyle;
                    worksheet.Range[row, 15].ColumnWidth = 13;
                    worksheet.Range[row, 15].WrapText = true;

                    worksheet.Range[row, 16].Text = "Leave Status";
                    worksheet.Range[row, 16].CellStyle = headerStyle;
                    worksheet.Range[row, 16].ColumnWidth = 13;
                    worksheet.Range[row, 16].WrapText = true;

                    row++;
                    int count = 1;

                    foreach (var item in data)
                    {
                        worksheet.Range[row, 1].Text = count.ToString();
                        worksheet.Range[row, 2].Text = item.EmployeeLeaveNo;
                        worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 2].HorizontalAlignment = ExcelHAlign.HAlignRight;


                        if (item.Employeeid != null && EmployeeData != null)
                        {
                            var _resultdata = EmployeeData.FirstOrDefault(o => o.Employeeid == item.Employeeid);
                            if (_resultdata != null && !string.IsNullOrEmpty(_resultdata.EmployeeDetails))
                            {
                                _text = _resultdata.EmployeeDetails;
                            }

                            worksheet.Range[row, 3].Text = _text;
                            worksheet.Range[row, 3].WrapText = true;
                            worksheet.Range[row, 3].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 3].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        }

                        worksheet.Range[row, 4].Text = item.DepartmentDescription;
                        worksheet.Range[row, 4].WrapText = true;
                        worksheet.Range[row, 4].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 4].HorizontalAlignment = ExcelHAlign.HAlignLeft;

                        if (item.LeaveTypeId != null && LeaveTypeData != null)
                        {
                            var _leavetype = LeaveTypeData.FirstOrDefault(o => o.LeaveTypeId == item.LeaveTypeId);
                            if (_leavetype != null && !string.IsNullOrEmpty(_leavetype.LeaveTypeDescription))
                            {
                                _text = _leavetype.LeaveTypeDescription;
                            }
                            worksheet.Range[row, 5].Text = _text;
                            worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 5].HorizontalAlignment = ExcelHAlign.HAlignLeft;

                        }

                        if (item.CommencementDate.HasValue)
                        {
                            worksheet.Range[row, 6].Text = item.CommencementDate.Value.ToString("dd/MM/yyyy");
                            worksheet.Range[row, 6].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 6].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (item.EndDate.HasValue)
                        {
                            worksheet.Range[row, 7].Text = item.EndDate.Value.ToString("dd/MM/yyyy");
                            worksheet.Range[row, 7].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 7].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (item.NoDaysAppliedFor.HasValue)
                        {
                            worksheet.Range[row, 8].Number = item.NoDaysAppliedFor.Value;
                            worksheet.Range[row, 8].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 8].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (item.NoDaysAppliedFor.HasValue && item.LeaveTypeId != null && LeaveTypeData != null)
                        {
                            var _leavetype = LeaveTypeData.FirstOrDefault(o => o.LeaveTypeId == item.LeaveTypeId);
                            if (_leavetype != null && !string.IsNullOrEmpty(_leavetype.LeaveTypeDescription))
                            {
                                _numericvalue = Convert.ToInt32(_leavetype.LeaveDaysPerYear - item.TotalDays);
                            }
                            worksheet.Range[row, 9].Number = _numericvalue;
                            worksheet.Range[row, 9].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 9].HorizontalAlignment = ExcelHAlign.HAlignRight;

                        }

                        if (item.ImmediateSupervisor != null && EmployeeData != null)
                        {
                            var _resultdata = EmployeeData.FirstOrDefault(o => o.Employeeid == item.ImmediateSupervisor);
                            if (_resultdata != null && !string.IsNullOrEmpty(_resultdata.EmployeeDetails))
                            {
                                _text = _resultdata.EmployeeDetails;
                            }
                            worksheet.Range[row, 10].Text = _text;
                            worksheet.Range[row, 10].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 10].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        }

                        if (item.SupervisorApprovalDate.HasValue)
                        {
                            worksheet.Range[row, 11].Text = item.SupervisorApprovalDate.Value.ToString("dd/MM/yyyy  hh:mm:ss");
                            worksheet.Range[row, 11].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 11].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        }

                        if (item.Hod != null && EmployeeData != null)
                        {
                            var _resultdata = EmployeeData.FirstOrDefault(o => o.Employeeid == item.Hod);
                            if (_resultdata != null && !string.IsNullOrEmpty(_resultdata.EmployeeDetails))
                            {
                                _text = _resultdata.EmployeeDetails;
                            }
                            worksheet.Range[row, 12].Text = _text;
                            worksheet.Range[row, 12].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 12].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        }

                        if (item.HodapprovalDate.HasValue)
                        {
                            worksheet.Range[row, 13].Text = item.HodapprovalDate.Value.ToString("dd/MM/yyyy  hh:mm:ss");
                            worksheet.Range[row, 13].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 13].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (item.Chro != null && EmployeeData != null)
                        {
                            var _resultdata = EmployeeData.FirstOrDefault(o => o.Employeeid == item.Chro);
                            if (_resultdata != null && !string.IsNullOrEmpty(_resultdata.EmployeeDetails))
                            {
                                _text = _resultdata.EmployeeDetails;
                            }
                            worksheet.Range[row, 14].Text = _text;
                            worksheet.Range[row, 14].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 14].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        }

                        if (item.ChroapprovalDate.HasValue)
                        {
                            worksheet.Range[row, 15].Text = item.ChroapprovalDate.Value.ToString("dd/MM/yyyy  hh:mm:ss");
                            worksheet.Range[row, 15].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 15].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        var _leavetypestatus = ApprovalStatusData.FirstOrDefault(o => o.LeaveApprovalStatusId == item.LeaveApprovalStatusId);

                        if (_leavetypestatus != null)
                        {
                            var color = Aspose.Svg.Drawing.Color.FromString(_leavetypestatus.LeaveApprovalStatusColor);
                            var fontcolor = Aspose.Svg.Drawing.Color.FromString(_leavetypestatus.LeaveApprovalTextColor);
                            int rgbColor = color.ToInt();
                            int fontrgbColor = fontcolor.ToInt();

                            worksheet.Range[row, 16].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(rgbColor);

                            worksheet.Range[row, 16].Text = _leavetypestatus.LeaveApprovalStatus;
                            worksheet.Range[row, 16].WrapText = true;
                            worksheet.Range[row, 16].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 16].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        }

                        // int expectedworkhours = 0;

                        // if(attendancedata != null && attendancedata.Count > 0 && YearData != null)
                        // {
                        //     int _numericvalue1 = 0;
                        //     var _leaveyear = YearData.FirstOrDefault(o => o.YearId == item.FinancialYearId);

                        //     if(_leaveyear != null)
                        //     {
                        //         foreach (var i in attendancedata)
                        //         {
                        //             int ndays = DateTime.DaysInMonth(Convert.ToInt32(_leaveyear.YearDesc), Convert.ToInt32(i.ReportMonth));
                        //             //To get hours required to work for in a month
                        //             DateTime StartDate = new DateTime(Convert.ToInt32(_leaveyear.YearDesc), Convert.ToInt32(i.ReportMonth), 01);
                        //             DateTime EndDate = new DateTime(Convert.ToInt32(_leaveyear.YearDesc),Convert.ToInt32(i.ReportMonth), ndays);


                        //             PublicHolidays = GetNumberOfPublicHolidays(StartDate, EndDate);
                        //             numberOfDays2 = GetNumberOfDates(StartDate, EndDate);

                        //             int totaldays = numberOfDays2 - PublicHolidays;

                        //             toastService.ShowWarning("Year:" + _leaveyear.YearDesc + "Month:" + i.ReportMonth + "Days:" + ndays);
                        //             // toastService.ShowWarning("Year:" + y.Value + "Month:" + m.Value + "Days:" + totaldays);

                        //             expectedworkhours = totaldays * 8;
                        //         }

                        //                 // //Get Sum of Total Hours Worked for Individual
                        //                 // int? _attendance = attendancedata.Where(o => o.HcmisemployeeId == item.Employeeid && o.ReportYearId == _leaveyear.YearId).Sum(o => o.TotalHoursWorked);


                        //                 // if (_attendance != null && _attendance.HasValue)
                        //                 // {
                        //                 //     _numericvalue1 = Convert.ToInt32(_attendance);
                        //                 // }
                        //                 worksheet.Range[row, 17].Number = expectedworkhours;
                        //                 worksheet.Range[row, 17].VerticalAlignment = ExcelVAlign.VAlignTop;
                        //                 worksheet.Range[row, 17].HorizontalAlignment = ExcelHAlign.HAlignLeft;

                        //     }

                        // }

                        //Original Code Using This
                        // //Attendance Data
                        // if(attendancedata != null && attendancedata.Count > 0 && YearData != null)
                        // {
                        //     int _numericvalue1 = 0;
                        //     var _leaveyear = YearData.FirstOrDefault(o => o.YearId == item.FinancialYearId);

                        //     if(_leaveyear != null)
                        //     {
                        //         // var _attendance = attendancedata.FirstOrDefault(o => o.HcmisemployeeId == item.Employeeid && o.ReportYearId == _leaveyear.YearId);

                        //         // if (_attendance != null && _attendance.TotalHoursWorked.HasValue)
                        //         // {
                        //         //     _numericvalue1 = Convert.ToInt32(_attendance.TotalHoursWorked);
                        //         // }
                        //         // var _attendance = attendancedata.Where(o => o.HcmisemployeeId == item.Employeeid && o.ReportYearId == _leaveyear.YearId).ToList();

                        //         //Get Sum of Total Hours Worked for Individual
                        //         int? _attendance = attendancedata.Where(o => o.HcmisemployeeId == item.Employeeid && o.ReportYearId == _leaveyear.YearId).Sum(o => o.TotalHoursWorked);


                        //         if (_attendance != null && _attendance.HasValue)
                        //         {
                        //             _numericvalue1 = Convert.ToInt32(_attendance);
                        //         }
                        //         worksheet.Range[row, 17].Number = _numericvalue1;
                        //         worksheet.Range[row, 17].VerticalAlignment = ExcelVAlign.VAlignTop;
                        //         worksheet.Range[row, 17].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        //     }

                        // }

                        row += 1;
                        count++;
                    }


                    MemoryStream ms = new MemoryStream();
                    // Save and close the document.
                    workbook.SaveAs(ms);
                    //Reset the memory stream position.
                    ms.Position = 0;
                    string _filename = "Leave Request Report.xlsx";
                    filename = _filename;
                    await JS.InvokeAsync<object>("saveAsFile", filename, Convert.ToBase64String(ms.ToArray()));
                    ms.Dispose();
                    workbook.Close();
                    Downloadreport = false;
                    InputModel.Response = "Report Downloaded Successfully";
                }
            }
            else
            {
                InputModel.Response = "There were no records found that match the given search parameters";
                Downloadreport = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString());
        }
        finally
        {
            await DownloadingSpinner.HideAsync();
            StateHasChanged();
        }
    }

    private void ClearSearchBtnClick()
    {
        InputModel = new UtilitiesSearchPanel();
    }

    public int GetNumberOfPublicHolidays(DateTime from, DateTime to)
    {
        int publicHolidaysCount = 0;

        // Iterate through each holiday and check if it falls on a weekday
        foreach (var holiday in PublicHolidaysData.Where(o => o.HolidayDate >= from && o.HolidayDate <= to))
        {
            if (holiday.HolidayDate.Value.DayOfWeek != DayOfWeek.Saturday && holiday.HolidayDate.Value.DayOfWeek != DayOfWeek.Sunday)
            {
                publicHolidaysCount++;
            }
        }

        return publicHolidaysCount;
    }

    //Function to return number of days minus weekends
    static int GetNumberOfDates(DateTime from, DateTime to)
    {
        if (to < from)
            throw new ArgumentException("To cannot be smaller than from.", nameof(to));


        if ((to.Date == from.Date) && (from.DayOfWeek != DayOfWeek.Saturday && from.DayOfWeek != DayOfWeek.Sunday))
        {
            return 1;
        }

        else if ((to.Date == from.Date) && (from.DayOfWeek == DayOfWeek.Saturday && from.DayOfWeek == DayOfWeek.Sunday))
        {
            return 0;
        }

        int n = 0;
        DateTime nextDate = from;
        while (nextDate <= to.Date)
        {
            if (nextDate.DayOfWeek != DayOfWeek.Saturday && nextDate.DayOfWeek != DayOfWeek.Sunday)
                n++;
            nextDate = nextDate.AddDays(1);
        }

        return n;
    }
}
