@page "/LeaveRequestReportPage"
@using HCMIS.Data;
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.DTOs;
@using HCMIS.Interface;
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings
@using HCMIS.SHARED.DTOs.Utilities;
@using Syncfusion.XlsIO;
@inject IReportService reportservice;
@inject IToastService toastService;
@inject Microsoft.JSInterop.IJSRuntime JS;
@inject IUtilityRepository UtilityRepo;

<style>
    .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
        stroke: green;
    }
</style>

<BreadcrumbPage CategoryName="LEAVE REQUEST" PageName="REPORT" />

<EditForm Model="@InputModel" OnValidSubmit="@OnSearchSubmit">
    <DataAnnotationsValidator/>
    <div class="row" style="margin-bottom:10px;">
        <div class="col-md-6">
            <p>Commencement Date Range</p>
            <div class="row">
                <div class="col-md-6">
                    <SfDatePicker @bind-Value="@(InputModel.StartDate)" Enabled="true" Placeholder="Start Date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>
                <div class="col-md-6">
                    <SfDatePicker @bind-Value="@(InputModel.EndDate)" Enabled="true" Placeholder="End Date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>
            </div>
        </div>
        <div class="col col-md-6">
            <p>Employee</p>
            <SfMultiSelect @bind-Value="@InputModel.Employeeid" TValue="int?[]" TItem="ViewBscEmployeeDto" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@EmployeeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Employee" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ViewBscEmployeeDto.Employeeid)" Text="@nameof(ViewBscEmployeeDto.EmployeeDetails)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="col col-md-6">
            <p>Gender</p>
            <SfMultiSelect @bind-Value="@InputModel.GenderId" TValue="int?[]" TItem="AGenderDto" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@GenderData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Gender" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(AGenderDto.GenderId)" Text="@nameof(AGenderDto.GenderDesc)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="col col-md-6">
            <p>Leave Type</p>
            <SfMultiSelect @bind-Value="@InputModel.LeaveTypeId" TValue="int?[]" TItem="ALeaveTypeDto" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@LeaveTypeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Leave Type" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ALeaveTypeDto.LeaveTypeId)" Text="@nameof(ALeaveTypeDto.LeaveTypeDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="col col-md-6">
            <p>Department</p>
            <SfMultiSelect @bind-Value="@InputModel.DepartmentId" TValue="int?[]" TItem="ADepartmentDto" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@DepartmentData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Department" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ADepartmentDto.DepartmentId)" Text="@nameof(ADepartmentDto.DepartmentDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="col col-md-6">
            <p>Job Title</p>
            <SfMultiSelect @bind-Value="@InputModel.JobTitleId" TValue="int?[]" TItem="ViewOrgStructureJobTitleDto" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@JobTitleData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Department" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ViewOrgStructureJobTitleDto.JobTitleId)" Text="@nameof(ViewOrgStructureJobTitleDto.JobTitleDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        @if (Downloadreport == false)
        {
            <div class="col col-md-3">
                <SfButton Color="Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit">Download Report</SfButton>
                <SfButton Color="Color.Secondary" ButtonType="BlazorStrap.ButtonType.Button" @onclick="ClearSearchBtnClick">Clear Search</SfButton>
            </div>

        }

        <div class="form-group col-md-12">
            <SfSpinner @ref="DownloadingSpinner" Label="Downloading Report Please Wait....." Size="50"></SfSpinner>
        </div>

        @if (!string.IsNullOrEmpty(InputModel.Response))
        {
            <div class="col col-md-12" style="margin-top:10px;">
                <div class="alert alert-success">@InputModel.Response</div>
            </div>
        }
    </div>
    <ValidationSummary />
</EditForm>


@code {
    private UtilitiesSearchPanel InputModel = new UtilitiesSearchPanel();
    SfSpinner? DownloadingSpinner;
    bool Downloadreport { get; set; } = false;
    string? filename { get; set; } = null;
    List<ViewBscEmployeeDto>? EmployeeData { get; set; }
    List<AGenderDto>? GenderData { get; set; }
    List<ADepartmentDto>? DepartmentData { get; set; }
    List<ViewOrgStructureJobTitleDto>? JobTitleData { get; set; }
    List<ALeaveTypeDto>? LeaveTypeData { get; set; }
    private string? NHCCLogo { get; set; }
    private string? NHCCLogoName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        var responseemployee = await Http.GetAsync($"BalanceScoreCard/GetEmployeeData");
        var contentemployee = await responseemployee.Content.ReadAsStringAsync();
        var responsegender = await Http.GetAsync($"FinancialYear/list");
        var contentgender = await responsegender.Content.ReadAsStringAsync();
        var responsedepartment = await Http.GetAsync($"BalanceScoreCard/GetBSCData");
        var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
        var responseJobTitle = await Http.GetAsync($"AppraisalReason/GetAppraisalReason");
        var contentJobTitle = await responseJobTitle.Content.ReadAsStringAsync();
        var responseleavetype = await Http.GetAsync($"Utilities/GetLeaveType");
        var contentleavetype = await responseleavetype.Content.ReadAsStringAsync();

        if (responseemployee.IsSuccessStatusCode)
        {
            EmployeeData = await Http.GetFromJsonAsync<List<ViewBscEmployeeDto>>
            ($"BalanceScoreCard/GetEmployeeData");
        }

        if (responsegender.IsSuccessStatusCode)
        {
            GenderData = await Http.GetFromJsonAsync<List<AGenderDto>>
            ($"Utilities/GetGender");
        }

        if (responsedepartment.IsSuccessStatusCode)
        {
            DepartmentData = await Http.GetFromJsonAsync<List<ADepartmentDto>>
            ($"Utilities/GetDepartment");
        }

        if (responseJobTitle.IsSuccessStatusCode)
        {
            JobTitleData = await Http.GetFromJsonAsync<List<ViewOrgStructureJobTitleDto>>
            ($"Utilities/GetOrgStructureJobTitle");
        }
        if (responseleavetype.IsSuccessStatusCode)
        {
            LeaveTypeData = await Http.GetFromJsonAsync<List<ALeaveTypeDto>>
            ($"Utilities/GetLeaveType");
        }
    }

    private async Task OnSearchSubmit()
    {
        filename = null;
        Downloadreport = true;
        await DownloadingSpinner.ShowAsync();
        try
        {
            var data = await reportservice.GetLeaveRequest(InputModel);
            if (data.Count > 0)
            {
                using (ExcelEngine excelEngine = new ExcelEngine())
                {
                    IApplication application = excelEngine.Excel;
                    application.DefaultVersion = ExcelVersion.Excel2013;
                    IWorkbook workbook = application.Workbooks.Create(1);
                    IWorksheet worksheet = workbook.Worksheets[0];
                    worksheet.Name = "Leave Request Report";

                    #region Styles
                    var headerStyle = workbook.Styles.Add("headerStyle");

                    headerStyle.BeginUpdate();
                    headerStyle.Color = Syncfusion.Drawing.Color.Black;
                    headerStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                    headerStyle.Font.Bold = true;
                    headerStyle.Font.FontName = "Arial";
                    headerStyle.Font.Size = 8f;
                    headerStyle.Font.Color = ExcelKnownColors.White;

                    headerStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    headerStyle.Borders.Color = ExcelKnownColors.White;
                    headerStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    headerStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    headerStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;

                    headerStyle.WrapText = true;

                    headerStyle.EndUpdate();

                    var Style = workbook.Styles.Add("bodyStyle");

                    Style.BeginUpdate();
                    Style.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                    Style.VerticalAlignment = ExcelVAlign.VAlignTop;
                    Style.Font.Bold = false;
                    Style.Font.FontName = "Arial";
                    Style.Font.Size = 8f;
                    Style.Font.Color = ExcelKnownColors.Black;
                    Style.WrapText = true;
                    Style.Borders.Color = ExcelKnownColors.Black;
                    Style.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                    Style.EndUpdate();


                    var CategoryStyle = workbook.Styles.Add("CategoryStyle");

                    CategoryStyle.BeginUpdate();
                    CategoryStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(0,204,0);
                    CategoryStyle.Font.Bold = true;
                    CategoryStyle.Font.FontName = "Arial";
                    CategoryStyle.Font.Size = 20f;
                    CategoryStyle.Font.Color = ExcelKnownColors.Brown;
                    CategoryStyle.WrapText = true;
                    CategoryStyle.Borders.Color = ExcelKnownColors.White;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.EndUpdate();

                    var DivisionStyle = workbook.Styles.Add("DivisionStyle");

                    DivisionStyle.BeginUpdate();
                    DivisionStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    DivisionStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 0, 0); //RED
                    DivisionStyle.Font.Bold = true;
                    DivisionStyle.Font.FontName = "Arial";
                    DivisionStyle.Font.Size = 8f;
                    DivisionStyle.Font.Color = ExcelKnownColors.White;
                    DivisionStyle.WrapText = true;
                    DivisionStyle.Borders.Color = ExcelKnownColors.White;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.EndUpdate();

                    #endregion


                    //Logo
                    worksheet.Range["A1"].AutofitColumns();
                    worksheet.Range["A1:B2"].Merge();
                    var images = await UtilityRepo.GetLocalLogos();
                    byte[]? _imagebyte = null;
                    if (images != null && images.Count > 0)
                    {
                        var NHCC = images.FirstOrDefault(o => o.ImageName.Contains("logonhcc"));
                        if (NHCC != null)
                        {

                            NHCCLogo = NHCC.ImageString;
                            NHCCLogoName = NHCC.ImageName;
                            if (!string.IsNullOrEmpty(NHCC.ImageString))
                            {
                                var a = NHCC.ImageString.Split(";base64,");
                                _imagebyte = Convert.FromBase64String(a[1]);
                            }

                        }
                    }
                    if (_imagebyte != null && _imagebyte.Length > 0)
                    {
                        MemoryStream _ms = new MemoryStream(_imagebyte);

                        IPictureShape shape = worksheet.Pictures.AddPicture(1, 1, _ms);
                        //Re-sizing a Picture
                        shape.Height = 70;
                        shape.Width = 140;
                        //shape.IsSizeWithCell = true;
                        //shape.IsMoveWithCell = true;
                        shape.Left = 5;
                        shape.Top = 2;
                    }
                    //Logo

                    int row = 1;
                    worksheet.Range["A" + row].Text = "Leave Request Report";
                    worksheet.Range["A" + row + ":O" + row].CellStyle = CategoryStyle;
                    worksheet.Range["A" + row + ":O" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    worksheet.Range["A" + row + ":O" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                    worksheet.Range["A" + row].RowHeight = 30;
                    worksheet.Range["A" + row + ":O" + row].Merge();
                    row++;

                    //FILTERS SEARCHED BY
                    row++;
                    row++;

                    worksheet.Range[row, 1].Text = "#";
                    worksheet.Range[row, 1].CellStyle = headerStyle;
                    worksheet.Range[row, 1].ColumnWidth = 5;
                    worksheet.Range[row, 1].WrapText = true;

                    worksheet.Range[row, 2].Text = "Leave Number";
                    worksheet.Range[row, 2].CellStyle = headerStyle;
                    worksheet.Range[row, 2].ColumnWidth = 20;
                    worksheet.Range[row, 2].WrapText = true;

                    worksheet.Range[row, 3].Text = "Employee";
                    worksheet.Range[row, 3].CellStyle = headerStyle;
                    worksheet.Range[row, 3].ColumnWidth = 20;
                    worksheet.Range[row, 3].WrapText = true;

                    worksheet.Range[row, 4].Text = "Department";
                    worksheet.Range[row, 4].CellStyle = headerStyle;
                    worksheet.Range[row, 4].ColumnWidth = 20;
                    worksheet.Range[row, 4].WrapText = true;

                    worksheet.Range[row, 5].Text = "Leave Type";
                    worksheet.Range[row, 5].CellStyle = headerStyle;
                    worksheet.Range[row, 5].ColumnWidth = 20;
                    worksheet.Range[row, 5].WrapText = true;

                    worksheet.Range[row, 6].Text = "Scheduled Start Date";
                    worksheet.Range[row, 6].CellStyle = headerStyle;
                    worksheet.Range[row, 6].ColumnWidth = 20;
                    worksheet.Range[row, 6].WrapText = true;

                    worksheet.Range[row, 7].Text = "Scheduled End Date";
                    worksheet.Range[row, 7].CellStyle = headerStyle;
                    worksheet.Range[row, 7].ColumnWidth = 20;
                    worksheet.Range[row, 7].WrapText = true;

                    worksheet.Range[row, 8].Text = "Total Days Taken";
                    worksheet.Range[row, 8].CellStyle = headerStyle;
                    worksheet.Range[row, 8].ColumnWidth = 20;
                    worksheet.Range[row, 8].WrapText = true;

                    worksheet.Range[row, 9].Text = "Supervisor";
                    worksheet.Range[row, 9].CellStyle = headerStyle;
                    worksheet.Range[row, 9].ColumnWidth = 20;
                    worksheet.Range[row, 9].WrapText = true;

                    worksheet.Range[row, 10].Text = "Supervisor Approval Date";
                    worksheet.Range[row, 10].CellStyle = headerStyle;
                    worksheet.Range[row, 10].ColumnWidth = 20;
                    worksheet.Range[row, 10].WrapText = true;

                    worksheet.Range[row, 11].Text = "Head of Department";
                    worksheet.Range[row, 11].CellStyle = headerStyle;
                    worksheet.Range[row, 11].ColumnWidth = 20;
                    worksheet.Range[row, 11].WrapText = true;

                    worksheet.Range[row, 12].Text = "HOD Approval Date";
                    worksheet.Range[row, 12].CellStyle = headerStyle;
                    worksheet.Range[row, 12].ColumnWidth = 20;
                    worksheet.Range[row, 12].WrapText = true;

                    worksheet.Range[row, 13].Text = "Approved By (CHRO)";
                    worksheet.Range[row, 13].CellStyle = headerStyle;
                    worksheet.Range[row, 13].ColumnWidth = 20;
                    worksheet.Range[row, 13].WrapText = true;

                    worksheet.Range[row, 14].Text = "Approval Date";
                    worksheet.Range[row, 14].CellStyle = headerStyle;
                    worksheet.Range[row, 14].ColumnWidth = 20;
                    worksheet.Range[row, 14].WrapText = true;

                    worksheet.Range[row, 15].Text = "Leave Status";
                    worksheet.Range[row, 15].CellStyle = headerStyle;
                    worksheet.Range[row, 15].ColumnWidth = 20;
                    worksheet.Range[row, 15].WrapText = true;

                    row++;
                    int count = 1;

                    foreach (var item in data)
                    {
                        worksheet.Range[row, 1].Text = count.ToString();
                        worksheet.Range[row, 2].Text = item.EmployeeLeaveNo;
                        worksheet.Range[row, 3].Text = item.EmployeeDetails;
                        worksheet.Range[row, 3].WrapText = true;
                        worksheet.Range[row, 4].Text = item.DepartmentDescription;
                        worksheet.Range[row, 4].WrapText = true;
                        worksheet.Range[row, 5].Text = item.LeaveTypeDescription;
                        if (item.ScheduledStartDate.HasValue)
                        {
                            worksheet.Range[row, 6].Text = item.ScheduledStartDate.Value.ToString("dd/MM/yyyy");
                        }

                        if (item.ScheduledEndDate.HasValue)
                        {
                            worksheet.Range[row, 7].Text = item.ScheduledEndDate.Value.ToString("dd/MM/yyyy");
                        }

                        if (item.NoDaysAppliedFor.HasValue)
                        {
                            worksheet.Range[row, 8].Number = item.NoDaysAppliedFor.Value;
                        }                

                        worksheet.Range[row, 9].Text = item.SupervisorFullName;
                        if (item.SupervisorRecommendationDate.HasValue)
                        {
                            worksheet.Range[row,10].Text = item.SupervisorRecommendationDate.Value.ToString("dd/MM/yyyy");
                        }
                        worksheet.Range[row, 11].Text = item.HODFullName;
                        if (item.HODRecommendationDate.HasValue)
                        {
                            worksheet.Range[row, 12].Text = item.HODRecommendationDate.Value.ToString("dd/MM/yyyy");
                        }
                        worksheet.Range[row,13].Text = item.CHROFullName;
                        if (item.CHROApprovalDate.HasValue)
                        {
                            worksheet.Range[row, 14].Text = item.CHROApprovalDate.Value.ToString("dd/MM/yyyy");
                        }
                        worksheet.Range[row, 15].Text = item.LeaveApprovalStatus;
                        worksheet.Range[row, 15].WrapText = true;
                        row += 1;
                        count++;
                    }


                    MemoryStream ms = new MemoryStream();
                    // Save and close the document.
                    workbook.SaveAs(ms);
                    //Reset the memory stream position.
                    ms.Position = 0;
                    string _filename = "Leave Request Report.xlsx";
                    filename = _filename;
                    JS.InvokeAsync<object>("saveAsFile", filename, Convert.ToBase64String(ms.ToArray()));
                    ms.Dispose();
                    workbook.Close();
                    Downloadreport = false;
                    InputModel.Response = "Report Downloaded Successfully";
                }
            }
            else
            {
                InputModel.Response = "There were no records found that match the given search parameters";
                Downloadreport = false;
                StateHasChanged();
            }
        }
        catch(Exception ex)
        {
            toastService.ShowError(ex.ToString());
        }
        finally
        {
            await DownloadingSpinner.HideAsync();
            StateHasChanged();
        }
    }

    private void ClearSearchBtnClick()
    {
        InputModel = new UtilitiesSearchPanel();
    }

}
