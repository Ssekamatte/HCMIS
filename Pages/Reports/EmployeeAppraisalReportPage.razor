@* <h3>EmployeeAppraisalReportPage1</h3> *@

@page "/EmployeeAppraisalReportPage"
@using HCMIS.Data;
@using HCMIS.Model;
@using HCMIS.SHARED.Data;
@using HCMIS.Interface;
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings

@using HCMIS.SHARED.Models;
@using Syncfusion.XlsIO;
@using System.Text.Json;
@inject IReportService reportservice;
@inject IToastService toastService;
@inject Microsoft.JSInterop.IJSRuntime JS;
@inject IAuthenticationService AuthService;

<style>
    .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
        stroke: green;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| APPRAISAL REPORT - EMPLOYEE
    </li>
</ol>

<EditForm Model="@InputModel" OnValidSubmit="@OnSearchSubmit">
    <DataAnnotationsValidator />
    <div class="row" style="margin-bottom:10px;">

        <div class="col col-md-3">
            <p>Employee</p>
            <SfMultiSelect @bind-Value="@InputModel.Employeeid" TValue="int?[]" TItem="ViewEmployeeDropDown" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@EmployeeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Employee" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></MultiSelectFieldSettings>
            </SfMultiSelect>
            @*<SfMultiSelect 
                @bind-Value="@InputModel.Employeeid" 
                TValue="int?[]" 
                TItem="ViewBscEmployee" 
                AllowFiltering="true" 
                FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" 
                Mode="@VisualMode.CheckBox" 
                DataSource="@EmployeeData" 
                ShowSelectAll="true" 
                EnableSelectionOrder="true" 
                ShowDropDownIcon="true" 
                FilterBarPlaceholder="Employee" 
                FloatLabelType="FloatLabelType.Never" 
                PopupHeight="350px"
                Enabled="EmployeeDD">
                <MultiSelectFieldSettings Value="@nameof(ViewBscEmployee.Employeeid)" Text="@nameof(ViewBscEmployee.EmployeeDetails)"></MultiSelectFieldSettings>
            </SfMultiSelect>*@
        </div>

        <div class="col col-md-3">
            <p>Department</p>
            <SfMultiSelect @bind-Value="@InputModel.DepartmentId" TValue="int?[]" TItem="ADepartment" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@DepartmentsData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Employee" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ADepartment.DepartmentId)" Text="@nameof(ADepartment.DepartmentDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>

        <div class="col col-md-3">
            <p>Appraisal Reason</p>
            <SfMultiSelect @bind-Value="@InputModel.AppraisalReasonId" TValue="int?[]" TItem="AAppraisalReason" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@AppraisalData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Appraisal Reason" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(AAppraisalReason.AppraisalReasonId)" Text="@nameof(AAppraisalReason.AppraisalReason)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="col col-md-3">
            <p>Financial Year</p>
            <SfMultiSelect @bind-Value="@InputModel.FinancialYearId" TValue="int?[]" TItem="AFinancialYear" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@FinancialYearData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Year" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(AFinancialYear.Id)" Text="@nameof(AFinancialYear.FinancialYear)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="col col-md-3">
            <p>Perspective</p>
            <SfMultiSelect @bind-Value="@InputModel.BscPerspectiveTypeId" TValue="int?[]" TItem="ABscPerspectivesType" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@BscPerspectiveTypeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Employee" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ABscPerspectivesType.BscPerspectiveTypeId)" Text="@nameof(ABscPerspectivesType.BscPerspectiveTypeDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>

        <div class="col-md-4">
            <p>Review Date Range</p>
            <div class="row">
                <div class="col-md-4">
                    <SfDatePicker @bind-Value="@(InputModel.StartDate)" Enabled="true" Placeholder="Start Date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>
                <div class="col-md-4">
                    <SfDatePicker @bind-Value="@(InputModel.EndDate)" Enabled="true" Placeholder="End Date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>
            </div>
        </div>

        <div class="form-group col-md-12">
            <SfSpinner @ref="DownloadingSpinner" Label="Downloading Report Please Wait....." Size="50"></SfSpinner>
        </div>
        @if (!string.IsNullOrEmpty(InputModel.Response))
        {
            <div class="col col-md-12" style="margin-top:10px;">
                <div class="alert alert-success">@InputModel.Response</div>
            </div>
        }

    </div>

    <div class="row" style="margin-bottom:10px;">
        @if (Downloadreport == false)
        {
            <div class="col col-md-12">
                <button @onclick="@OnSearchSubmit" class="btn btn-success" data-ripple="true" style="margin-right:10px;">Download Report</button>
                <button @onclick="@ClearSearchBtnClick" class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Clear Search</button>
            </div>
        }

    </div>
    <ValidationSummary />
</EditForm>



@code {
    private UtilitiesSearchPanel InputModel = new UtilitiesSearchPanel();
    SfSpinner? DownloadingSpinner;
    bool Downloadreport { get; set; } = false;
    string? filename { get; set; } = null;
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<AFinancialYear>? FinancialYearData { get; set; }
    List<AAppraisalReason>? AppraisalData { get; set; }
    List<ABscKpi>? KpiData { get; set; }
    List<ABscPerspectives>? BscPerspectiveData { get; set; }
    List<APerformanceDescriptor>? PerformanceDescriptorData { get; set; }
    List<ABscPerformanceMeasurement>? BscMeasurementData { get; set; }
    List<ABehavioralCompetencies>? CompetenceData { get; set; }
    List<ABscPerspectivesType>? BscPerspectiveTypeData { get; set; }
    List<ViewBalanceScoreCardTargetSettingReport>? TargetSettingReportData { get; set; }
    List<AMeasurementMetric>? MeasurementUnitData { get; set; }
    List<ADepartment>? DepartmentsData { get; set; }
    List<APerformanceScale>? ScaleData { get; set; }
    LoginResultModel? Credentials { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    public bool EmployeeDD { get; set; }
    double? targetvalue = 0;
    double? behavioralvalue = 0;

    protected override async Task OnInitializedAsync()
    {
        Credentials = await AuthService.GetUserCredentials();

        List<Task> t = new List<Task>();

        t.Add(Task.Run(async () =>
        {
            var responseemployee = await Http.GetAsync($"BalanceScoreCard/GetEmployeeData");
            if (responseemployee.IsSuccessStatusCode)
            {
                var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(contentemployee, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsefinyear = await Http.GetAsync($"FinancialYear/list");
            if (responsefinyear.IsSuccessStatusCode)
            {
                var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
                FinancialYearData = JsonSerializer.Deserialize<List<AFinancialYear>>(contentfinyear, _options);
            }
        }));

        t.Add(Task.Run(async () =>
                {
                    var responseappraisal = await Http.GetAsync($"AppraisalReason/GetAppraisalReason");
                    if (responseappraisal.IsSuccessStatusCode)
                    {
                        var contentappraisal = await responseappraisal.Content.ReadAsStringAsync();
                        AppraisalData = JsonSerializer.Deserialize<List<AAppraisalReason>>(contentappraisal, _options);
                    }
                }));

        t.Add(Task.Run(async () =>
                     {
                         var responseKpi = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicator");
                         if (responseKpi.IsSuccessStatusCode)
                         {
                             var contentKpi = await responseKpi.Content.ReadAsStringAsync();
                             KpiData = JsonSerializer.Deserialize<List<ABscKpi>>(contentKpi, _options);
                         }
                     }));

        t.Add(Task.Run(async () =>
                        {
                            var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
                            if (responsebscperspectivetype.IsSuccessStatusCode)
                            {
                                var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                                BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesType>>(contentbscperspectivetype, _options);
                            }
                        }));

        t.Add(Task.Run(async () =>
                        {
                            var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
                            if (responsemetric.IsSuccessStatusCode)
                            {
                                var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                                MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetric>>(contentmetric, _options);
                            }
                        }));

        t.Add(Task.Run(async () =>
                        {
                            var responseperformancedescriptor = await Http.GetAsync($"PerformanceDescriptor/GetPerformanceDescriptor");
                            if (responseperformancedescriptor.IsSuccessStatusCode)
                            {
                                var contentperformancedescriptor = await responseperformancedescriptor.Content.ReadAsStringAsync();
                                PerformanceDescriptorData = JsonSerializer.Deserialize<List<APerformanceDescriptor>>(contentperformancedescriptor, _options);
                            }
                        }));

        t.Add(Task.Run(async () =>
                        {
                            var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
                            if (responsebscperspectivetype.IsSuccessStatusCode)
                            {
                                var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                                BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesType>>(contentbscperspectivetype, _options);
                            }
                        }));

        t.Add(Task.Run(async () =>
        {
            var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
            if (responsedepartment.IsSuccessStatusCode)
            {
                var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
                DepartmentsData = JsonSerializer.Deserialize<List<ADepartment>>(contentdepartment, _options);
            }
        }));

        t.Add(Task.Run(async () =>
                {
                    var responsemetric = await Http.GetAsync($"Utilities/GetPerformanceScale");
                    if (responsemetric.IsSuccessStatusCode)
                    {
                        var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                        ScaleData = JsonSerializer.Deserialize<List<APerformanceScale>>(contentmetric, _options);
                    }
                }));

        t.Add(Task.Run(async () =>
                {
                    var responsecompetence = await Http.GetAsync($"BehavioralCompetencies/GetCompetence");
                    if (responsecompetence.IsSuccessStatusCode)
                    {
                        var contentcompetence = await responsecompetence.Content.ReadAsStringAsync();
                        CompetenceData = JsonSerializer.Deserialize<List<ABehavioralCompetencies>>(contentcompetence, _options);
                    }
                }));

        Task _t = Task.WhenAll(t);
        await _t;

        if (Credentials != null && (!string.IsNullOrEmpty(Credentials.UserRole) &&
            Credentials.UserRole.Contains("Administrator") || Credentials.JobTitleId == 44))
        {
            EmployeeDD = true;
        }
        else
        {
            EmployeeDD = false;
            if(Credentials != null)
            {
                List<int?> _employeeid = new List<int?>();
                _employeeid.Add(Credentials.StaffId);
                InputModel.Employeeid = _employeeid.ToArray();
            }            
        }
    }

    private async Task OnSearchSubmit()
    {
        filename = null;
        Downloadreport = true;
        await DownloadingSpinner.ShowAsync();
        try
        {
            var data = await reportservice.GetAppraisal(InputModel);
            var datatarget = await reportservice.GetAppraisalTargetGeneral(InputModel);
            var databehavioral = await reportservice.GetAppraisalBehavioralGeneral(InputModel);
            var datadevelopmentplan = await reportservice.GetDevelopmentPlan(InputModel);
            var dataappraiseecomments = await reportservice.GetAppraiseeComments(InputModel);
            var datasupervisorcomments = await reportservice.GetSupervisorComments(InputModel);
            var datahodcomments = await reportservice.GetHODComments(InputModel);
            var dataceocomments = await reportservice.GetCEOComments(InputModel);

            if (EmployeeData != null)
            {
                var _employeedata = EmployeeData.Where(o => InputModel.Employeeid == null || InputModel.Employeeid.Any(a => a == o.Employeeid)).ToList();
                if (data.Count > 0)
                {
                    using (ExcelEngine excelEngine = new ExcelEngine())
                    {
                        IApplication application = excelEngine.Excel;
                        application.DefaultVersion = ExcelVersion.Excel2013;
                        IWorkbook workbook = application.Workbooks.Create(1);
                        IWorksheet worksheet = workbook.Worksheets[0];
                        worksheet.Name = "Employee Appraisal Report.xlsx";

                        #region Styles
                        var headerStyle = workbook.Styles.Add("headerStyle");

                        headerStyle.BeginUpdate();
                        headerStyle.Color = Syncfusion.Drawing.Color.Black;
                        headerStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        headerStyle.Font.Bold = true;
                        headerStyle.Font.FontName = "Arial";
                        headerStyle.Font.Size = 8f;
                        headerStyle.Font.Color = ExcelKnownColors.White;

                        headerStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        headerStyle.Borders.Color = ExcelKnownColors.White;
                        headerStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        headerStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        headerStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;

                        headerStyle.WrapText = true;

                        headerStyle.EndUpdate();

                        var Style = workbook.Styles.Add("bodyStyle");

                        Style.BeginUpdate();
                        Style.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        Style.VerticalAlignment = ExcelVAlign.VAlignTop;
                        Style.Font.Bold = false;
                        Style.Font.FontName = "Arial";
                        Style.Font.Size = 8f;
                        Style.Font.Color = ExcelKnownColors.Black;
                        Style.WrapText = true;
                        Style.Borders.Color = ExcelKnownColors.Black;
                        Style.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        Style.EndUpdate();


                        var CategoryStyle = workbook.Styles.Add("CategoryStyle");

                        CategoryStyle.BeginUpdate();
                        CategoryStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 255, 255);
                        CategoryStyle.Font.Bold = true;
                        CategoryStyle.Font.FontName = "Arial";
                        CategoryStyle.Font.Size = 20f;
                        CategoryStyle.Font.Color = ExcelKnownColors.Brown;
                        CategoryStyle.WrapText = true;
                        CategoryStyle.Borders.Color = ExcelKnownColors.White;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.EndUpdate();

                        var DivisionStyle = workbook.Styles.Add("DivisionStyle");

                        DivisionStyle.BeginUpdate();
                        DivisionStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        DivisionStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 0, 0); //RED
                        DivisionStyle.Font.Bold = true;
                        DivisionStyle.Font.FontName = "Arial";
                        DivisionStyle.Font.Size = 8f;
                        DivisionStyle.Font.Color = ExcelKnownColors.White;
                        DivisionStyle.WrapText = true;
                        DivisionStyle.Borders.Color = ExcelKnownColors.White;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.EndUpdate();

                        var PerspectiveStyle = workbook.Styles.Add("PerspectiveStyle");

                        PerspectiveStyle.BeginUpdate();
                        PerspectiveStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        PerspectiveStyle.Color = Syncfusion.Drawing.Color.FromArgb(128, 0, 128); //Purple
                        PerspectiveStyle.Font.Bold = true;
                        PerspectiveStyle.Font.FontName = "Arial";
                        PerspectiveStyle.Font.Size = 8f;
                        PerspectiveStyle.Font.Color = ExcelKnownColors.White;
                        PerspectiveStyle.WrapText = true;
                        PerspectiveStyle.Borders.Color = ExcelKnownColors.White;
                        PerspectiveStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.None;
                        PerspectiveStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.None;
                        PerspectiveStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.None;
                        PerspectiveStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.None;
                        PerspectiveStyle.EndUpdate();

                        #endregion

                        var _data = data.Select(o => new { o.Employeeid, o.EmployeeFullName }).ToList().Distinct().ToList();
                        for (var i = 0; i <= (_data.Count - 1); i++)
                        {

                            string Pillarname = "Sheet 1";
                            if (!string.IsNullOrEmpty(_data[i].EmployeeFullName) && _data[i].EmployeeFullName.Contains(":"))
                            {
                                var a = _data[i].EmployeeFullName.Split(":");
                                Pillarname = a[1].Replace("/", ""); ;
                            }
                            else if (!string.IsNullOrEmpty(_data[i].EmployeeFullName))
                            {
                                Pillarname = _data[i].EmployeeFullName.Replace("/", ""); ;
                            }
                            if (i == 0)
                            {
                                worksheet = workbook.Worksheets[0];
                            }
                            else
                            {
                                if (workbook.Worksheets != null)
                                {
                                    //Pillarname = $"Sheet {workbook.Worksheets.Count+1}";
                                    workbook.Worksheets.Create(Pillarname);
                                    worksheet = workbook.Worksheets[i];
                                }
                                else
                                {
                                    Pillarname = "Error Sheet";
                                }

                            }
                            var mdata = data.Where(o => o.Employeeid == _data[i].Employeeid).ToList();
                            var _datatarget = datatarget.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _databehavioral = databehavioral.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _datadevelopmentplan = datadevelopmentplan.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _dataappraiseecomments = dataappraiseecomments.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _datasupervisorcomments = datasupervisorcomments.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _datahodcomments = datahodcomments.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _dataceocomments = dataceocomments.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();

                            CreateWorkSheet(workbook, worksheet, mdata, datatarget, databehavioral, datadevelopmentplan,
                                dataappraiseecomments, datasupervisorcomments, datahodcomments, dataceocomments, Pillarname);

                        }

                        MemoryStream ms = new MemoryStream();
                        // Save and close the document.
                        workbook.SaveAs(ms);
                        //Reset the memory stream position.
                        ms.Position = 0;
                        string _filename = "Employee Appraisal Report.xlsx";
                        filename = _filename;
                        JS.InvokeAsync<object>("saveAsFile", filename, Convert.ToBase64String(ms.ToArray()));
                        ms.Dispose();
                        workbook.Close();
                        Downloadreport = false;
                        InputModel.Response = "Report Downloaded Successfully";
                    }
                }

                else
                {
                    InputModel.Response = "There were no records found that match the given search parameters";
                    Downloadreport = false;
                    StateHasChanged();
                }

            }

            else if (EmployeeData == null)
            {
                toastService.ShowWarning("An issue has occurred while dowloading the report. Kindly refresh the system and try again");
            }

            else
            {
                InputModel.Response = "There were no records found that match the given search parameters";
                Downloadreport = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString());
        }
        finally
        {
            await DownloadingSpinner.HideAsync();
            StateHasChanged();
        }
    }

    private void ClearSearchBtnClick()
    {
        InputModel = new UtilitiesSearchPanel();
    }

    private async void CreateWorkSheet(IWorkbook workbook, IWorksheet worksheet, List<ViewBalanceScoreCardReport> data
        , List<BalanceScoreCardTargetSetting> datatarget, List<BalanceScoreCardBehavioral> databehavioral
        , List<BalanceScoreCardTargetDevelopmentPlan> datadevelopmentplan, List<BalanceScoreCardAppraiseeComments> dataappraiseecomments
        , List<BalanceScoreCardSupervisorComments> datasupervisorcomments, List<BalanceScoreCardHodcomments> datahodcomments,
         List<BalanceScoreCardCeocomments> dataceocomments, string name)
    {
        try
        {
            worksheet.Name = name;
            worksheet.Range["A1"].Text = "NHCC";
            worksheet.Range["A1"].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(157, 206, 92);
            worksheet.Range["A1"].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.White;
            worksheet.Range["A1"].CellStyle.Font.FontName = "cambria";
            worksheet.Range["A1"].CellStyle.Font.Size = 26;
            worksheet.Range["A1"].CellStyle.Font.Bold = true;
            worksheet.Range["A1:AD1"].Merge();

            worksheet.Range["A2"].Text = "Employee Appraisal Report";
            worksheet.Range["A2"].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(71, 44, 76);
            worksheet.Range["A2"].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.White;
            worksheet.Range["A2"].CellStyle.Font.FontName = "cambria";
            worksheet.Range["A2"].CellStyle.Font.Size = 18;
            worksheet.Range["A2:AD2"].Merge();

            int row = 1;

            row++;
            row++;

            int startingRange = row;
            worksheet.Range[row, 1].Text = "Employee:" + name;
            worksheet.Range[row, 1, row, 29].Merge();
            worksheet.Range[row, 1, row, 29].WrapText = true;
            worksheet.Range[row, 1, row, 29].RowHeight = 15;
            worksheet.Range[row, 1, row, 29].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 255, 255);
            worksheet.Range[row, 1, row, 29].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 1, row, 29].CellStyle.Font.FontName = "cambria";
            worksheet.Range[row, 1, row, 29].CellStyle.Font.Size = 18;
            worksheet.Range[row, 1, row, 29].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

            row++;

            targetvalue = datatarget.Sum(o => o.IndividualTargetObjectiveScore);
            behavioralvalue = databehavioral.Sum(o => o.SupervisorAssessment);

            // worksheet.Range["B" + row].Text = "Section";
            // worksheet.Range["C" + row].Text = "Score";
            // worksheet.Range["B" + row].ColumnWidth = 15;
            // worksheet.Range["B" + row].WrapText = true;
            // worksheet.Range["C" + row].ColumnWidth = 15;
            // worksheet.Range["C" + row].WrapText = true;
            // worksheet.Range["B" + row + ":C" + row].CellStyleName = "headerStyle";
            
            // row++;

            // worksheet.Range["B" + row].Text = "Section 2";
            // worksheet.Range["C" + row].Number =Convert.ToDouble(targetvalue);
            // worksheet.Range["B" + row + ":C" + row].CellStyleName = "bodyStyle";
            // worksheet.Range["B" + row].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            // worksheet.Range["C" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            
            // row++;
            // worksheet.Range["B" + row].Text = "Section 3";
            // worksheet.Range["C" + row].Number = Convert.ToDouble(behavioralvalue);
            // worksheet.Range["B" + row + ":C" + row].CellStyleName = "bodyStyle";
            // worksheet.Range["B" + row].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            // worksheet.Range["C" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            // row++;

            worksheet.Range[row, 7].Text = "SECTION 2: TARGET SETTING AND EVALUATION /  EXPECTED  ROLE KPIs or DELIVERABLES";
            worksheet.Range[row, 7, row, 16].Merge();
            worksheet.Range[row, 7, row, 16].WrapText = true;
            worksheet.Range[row, 7, row, 16].RowHeight = 15;
            worksheet.Range[row, 7, row, 16].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            worksheet.Range[row, 7, row, 16].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            worksheet.Range[row, 7, row, 16].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(122, 48, 160);
            worksheet.Range[row, 7, row, 16].CellStyle.Font.Size = 12f;
            worksheet.Range[row, 7, row, 16].CellStyle.Font.Bold = true;
            worksheet.Range[row, 7, row, 16].CellStyle.Font.Color = ExcelKnownColors.White;

            worksheet.Range[row, 17].Text = "SECTION 3: VALUES & BEHAVIORAL COMPETENCIES ( RATING USING A SCALE OF  1- 3  AS PER THE COMPETENCE GUIDE)";
            worksheet.Range[row, 17, row, 23].Merge();
            worksheet.Range[row, 17, row, 23].WrapText = true;
            worksheet.Range[row, 17, row, 23].RowHeight = 15;
            worksheet.Range[row, 17, row, 23].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            worksheet.Range[row, 17, row, 23].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            worksheet.Range[row, 17, row, 23].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(157, 206, 92);
            worksheet.Range[row, 17, row, 23].CellStyle.Font.Size = 12f;
            worksheet.Range[row, 17, row, 23].CellStyle.Font.Bold = true;
            worksheet.Range[row, 17, row, 23].CellStyle.Font.Color = ExcelKnownColors.White;

            worksheet.Range[row, 24].Text = "SECTION 4: INDIVIDUAL DEVELOPMENT PLAN";
            worksheet.Range[row, 24, row, 25].Merge();
            worksheet.Range[row, 24, row, 25].WrapText = true;
            worksheet.Range[row, 24, row, 25].RowHeight = 15;
            worksheet.Range[row, 24, row, 25].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            worksheet.Range[row, 24, row, 25].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            worksheet.Range[row, 24, row, 25].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(122, 48, 160);
            worksheet.Range[row, 24, row, 25].CellStyle.Font.Size = 12f;
            worksheet.Range[row, 24, row, 25].CellStyle.Font.Bold = true;
            worksheet.Range[row, 24, row, 25].CellStyle.Font.Color = ExcelKnownColors.White;

            worksheet.Range[row, 26].Text = "SECTION 5: OVER ALL COMMENTS";
            worksheet.Range[row, 26, row, 29].Merge();
            worksheet.Range[row, 26, row, 29].WrapText = true;
            worksheet.Range[row, 26, row, 29].RowHeight = 15;
            worksheet.Range[row, 26, row, 29].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            worksheet.Range[row, 26, row, 29].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            worksheet.Range[row, 26, row, 29].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(157, 206, 92);
            worksheet.Range[row, 26, row, 29].CellStyle.Font.Size = 12f;
            worksheet.Range[row, 26, row, 29].CellStyle.Font.Bold = true;
            worksheet.Range[row, 26, row, 29].CellStyle.Font.Color = ExcelKnownColors.White;

            worksheet.Range[row, 31].Text = "SCORES";
            worksheet.Range[row, 31, row, 33].Merge();
            worksheet.Range[row, 31, row, 33].WrapText = true;
            worksheet.Range[row, 31, row, 33].RowHeight = 15;
            worksheet.Range[row, 31, row, 33].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            worksheet.Range[row, 31, row, 33].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            worksheet.Range[row, 31, row, 33].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(122, 48, 160);
            worksheet.Range[row, 31, row, 33].CellStyle.Font.Size = 12f;
            worksheet.Range[row, 31, row, 33].CellStyle.Font.Bold = true;
            worksheet.Range[row, 31, row, 33].CellStyle.Font.Color = ExcelKnownColors.White;

            row = row + 1;

            worksheet.Range[row, 1].Text = "#";
            worksheet.Range[row, 1].CellStyleName = "headerStyle";
            worksheet.Range[row, 1].ColumnWidth = 5;
            worksheet.Range[row, 1].WrapText = true;

            worksheet.Range[row, 2].Text = "Employee No.";
            worksheet.Range[row, 2].CellStyleName = "headerStyle";
            worksheet.Range[row, 2].ColumnWidth = 10;
            worksheet.Range[row, 2].WrapText = true;

            worksheet.Range[row, 3].Text = "Department";
            worksheet.Range[row, 3].CellStyleName = "headerStyle";
            worksheet.Range[row, 3].ColumnWidth = 15;
            worksheet.Range[row, 3].WrapText = true;

            worksheet.Range[row, 4].Text = "Job Title";
            worksheet.Range[row, 4].CellStyleName = "headerStyle";
            worksheet.Range[row, 4].ColumnWidth = 25;
            worksheet.Range[row, 4].WrapText = true;

            worksheet.Range[row, 5].Text = "Appraisal Reason";
            worksheet.Range[row, 5].CellStyleName = "headerStyle";
            worksheet.Range[row, 5].ColumnWidth = 15;
            worksheet.Range[row, 5].WrapText = true;

            worksheet.Range[row, 6].Text = "Financial Year";
            worksheet.Range[row, 6].CellStyleName = "headerStyle";
            worksheet.Range[row, 6].ColumnWidth = 10;
            worksheet.Range[row, 6].WrapText = true;

            //Section 2

            worksheet.Range[row, 7].Text = "BSC Perspective";
            worksheet.Range[row, 7].CellStyleName = "headerStyle";
            worksheet.Range[row, 7].ColumnWidth = 15;
            worksheet.Range[row, 7].WrapText = true;

            worksheet.Range[row, 8].Text = "Perspective Total Weight";
            worksheet.Range[row, 8].CellStyleName = "headerStyle";
            worksheet.Range[row, 8].ColumnWidth = 10;
            worksheet.Range[row, 8].WrapText = true;

            worksheet.Range[row, 9].Text = "Key Performance Indicator (KPI)";
            worksheet.Range[row, 9].CellStyleName = "headerStyle";
            worksheet.Range[row, 9].ColumnWidth = 10;
            worksheet.Range[row, 9].WrapText = true;

            worksheet.Range[row, 10].Text = "Performance Measurement/Metric";
            worksheet.Range[row, 10].CellStyleName = "headerStyle";
            worksheet.Range[row, 10].ColumnWidth = 10;
            worksheet.Range[row, 10].WrapText = true;

            worksheet.Range[row, 11].Text = "Individual Target Weight";
            worksheet.Range[row, 11].CellStyleName = "headerStyle";
            worksheet.Range[row, 11].ColumnWidth = 10;
            worksheet.Range[row, 11].WrapText = true;

            worksheet.Range[row, 12].Text = "Employee Evidence";
            worksheet.Range[row, 12].CellStyleName = "headerStyle";
            worksheet.Range[row, 12].ColumnWidth = 10;
            worksheet.Range[row, 12].WrapText = true;

            worksheet.Range[row, 13].Text = "Employee Self Assessment % Target Achievement";
            worksheet.Range[row, 13].CellStyleName = "headerStyle";
            worksheet.Range[row, 13].ColumnWidth = 10;
            worksheet.Range[row, 13].WrapText = true;

            worksheet.Range[row, 14].Text = "SupervisorAssessment % Target Achievement";
            worksheet.Range[row, 14].CellStyleName = "headerStyle";
            worksheet.Range[row, 14].ColumnWidth = 10;
            worksheet.Range[row, 14].WrapText = true;

            worksheet.Range[row, 15].Text = "Supervisor Comments";
            worksheet.Range[row, 15].CellStyleName = "headerStyle";
            worksheet.Range[row, 15].ColumnWidth = 10;
            worksheet.Range[row, 15].WrapText = true;

            worksheet.Range[row, 16].Text = "Individual Target/Objective Score";
            worksheet.Range[row, 16].CellStyleName = "headerStyle";
            worksheet.Range[row, 16].ColumnWidth = 10;
            worksheet.Range[row, 16].WrapText = true;

            //Section 3
            worksheet.Range[row, 17].Text = "Competence";
            worksheet.Range[row, 17].CellStyleName = "headerStyle";
            worksheet.Range[row, 17].ColumnWidth = 30;
            worksheet.Range[row, 17].WrapText = true;

            worksheet.Range[row, 18].Text = "Employee Performance Rating";
            worksheet.Range[row, 18].CellStyleName = "headerStyle";
            worksheet.Range[row, 18].ColumnWidth = 10;
            worksheet.Range[row, 18].WrapText = true;

            worksheet.Range[row, 19].Text = "Employee Self Assessment";
            worksheet.Range[row, 19].CellStyleName = "headerStyle";
            worksheet.Range[row, 19].ColumnWidth = 14;
            worksheet.Range[row, 19].WrapText = true;

            worksheet.Range[row, 20].Text = "Employee Comment";
            worksheet.Range[row, 20].CellStyleName = "headerStyle";
            worksheet.Range[row, 20].ColumnWidth = 14;
            worksheet.Range[row, 20].WrapText = true;

            worksheet.Range[row, 21].Text = "Supervisor Performance Rating";
            worksheet.Range[row, 21].CellStyleName = "headerStyle";
            worksheet.Range[row, 21].ColumnWidth = 10;
            worksheet.Range[row, 21].WrapText = true;

            worksheet.Range[row, 22].Text = "Supervisor Assessment";
            worksheet.Range[row, 22].CellStyleName = "headerStyle";
            worksheet.Range[row, 22].ColumnWidth = 12;
            worksheet.Range[row, 22].WrapText = true;

            worksheet.Range[row, 23].Text = "Supervisor Comment";
            worksheet.Range[row, 23].CellStyleName = "headerStyle";
            worksheet.Range[row, 23].ColumnWidth = 12;
            worksheet.Range[row, 23].WrapText = true;

            //Section 4
            worksheet.Range[row, 24].Text = "Development Need";
            worksheet.Range[row, 24].CellStyleName = "headerStyle";
            worksheet.Range[row, 24].ColumnWidth = 30;
            worksheet.Range[row, 24].WrapText = true;

            worksheet.Range[row, 25].Text = "Development Action";
            worksheet.Range[row, 25].CellStyleName = "headerStyle";
            worksheet.Range[row, 25].ColumnWidth = 30;
            worksheet.Range[row, 25].WrapText = true;

            //Appraisee Comments
            worksheet.Range[row, 26].Text = "Appraisee Comments";
            worksheet.Range[row, 26].CellStyleName = "headerStyle";
            worksheet.Range[row, 26].ColumnWidth = 30;
            worksheet.Range[row, 26].WrapText = true;

            //Supervisor Comments
            worksheet.Range[row, 27].Text = "Supervisor Comments";
            worksheet.Range[row, 27].CellStyleName = "headerStyle";
            worksheet.Range[row, 27].ColumnWidth = 30;
            worksheet.Range[row, 27].WrapText = true;

            //HOD Comments
            worksheet.Range[row, 28].Text = "HOD Comments";
            worksheet.Range[row, 28].CellStyleName = "headerStyle";
            worksheet.Range[row, 28].ColumnWidth = 30;
            worksheet.Range[row, 28].WrapText = true;

            //CEO Comments
            worksheet.Range[row, 29].Text = "CEO Comments";
            worksheet.Range[row, 29].CellStyleName = "headerStyle";
            worksheet.Range[row, 29].ColumnWidth = 30;
            worksheet.Range[row, 29].WrapText = true;

            //Appraisal Status
            worksheet.Range[row, 30].Text = "Appraisal Status";
            worksheet.Range[row, 30].CellStyleName = "headerStyle";
            worksheet.Range[row, 30].ColumnWidth = 15;
            worksheet.Range[row, 30].WrapText = true;

            //Section 2
            worksheet.Range[row, 31].Text = "Section 2 Score";
            worksheet.Range[row, 31].CellStyleName = "headerStyle";
            worksheet.Range[row, 31].ColumnWidth = 15;
            worksheet.Range[row, 31].WrapText = true;

            //Section 3
            worksheet.Range[row, 32].Text = "Section 3 Score";
            worksheet.Range[row, 32].CellStyleName = "headerStyle";
            worksheet.Range[row, 32].ColumnWidth = 15;
            worksheet.Range[row, 32].WrapText = true;

            //Overall Score
            worksheet.Range[row, 33].Text = "Overall Score";
            worksheet.Range[row, 33].CellStyleName = "headerStyle";
            worksheet.Range[row, 33].ColumnWidth = 15;
            worksheet.Range[row, 33].WrapText = true;

            row++;

            int count = 1;
            int balancescorecard = data[0].BalanceScoreCardId;

            int perspectivetypestartrow = row;
            int perspectivetypeendrow = row;
            int previousperspectiveid = 0;

            int perspectivetotalweightstartrow = row;
            int perspectivetotalweightendrow = row;
            int previoustotalweight = 0;
                        

            foreach (var n in data)
            {
                int startrow = row;
                worksheet.Range[row, 1].Text = count.ToString();
                worksheet.Range[row, 1].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range[row, 2].Text = n.EmployeeNumber;
                worksheet.Range[row, 2].WrapText = true;
                worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range[row, 3].Text = n.DepartmentDescription;
                worksheet.Range[row, 3].WrapText = true;
                worksheet.Range[row, 3].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range[row, 4].Text = n.JobTitleDescription;
                worksheet.Range[row, 4].WrapText = true;
                worksheet.Range[row, 4].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range[row, 5].Text = n.AppraisalReason;
                worksheet.Range[row, 5].WrapText = true;
                worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range[row, 6].Text = n.FinancialYear;
                worksheet.Range[row, 6].WrapText = true;
                worksheet.Range[row, 6].VerticalAlignment = ExcelVAlign.VAlignTop;

                worksheet.Range[row, 30].Text = n.LeaveApprovalStatus;
                worksheet.Range[row, 30].WrapText = true;
                worksheet.Range[row, 30].VerticalAlignment = ExcelVAlign.VAlignTop;

                //Pass in the Section 2 Scores
                row = startrow;
                if (datatarget.Count > 0)
                {
                    var _datatarget = datatarget.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);

                    foreach (var m in _datatarget)
                    {

                        if (m.BscPerspectiveTypeId.HasValue)
                        {
                            //Perspective Type Cell Merging
                            if (previousperspectiveid != m.BscPerspectiveTypeId)
                            {
                                previousperspectiveid = m.BscPerspectiveTypeId.Value;
                                if (perspectivetypestartrow < (perspectivetypeendrow - 1))
                                {
                                    worksheet.Range[perspectivetypestartrow, 7, (perspectivetypeendrow - 1), 7].Merge();
                                    worksheet.Range[perspectivetypestartrow, 8, (perspectivetypeendrow - 1), 8].Merge();
                                    perspectivetypestartrow = perspectivetypeendrow;
                                }
                            }
                            var _bscperspective = BscPerspectiveTypeData.FirstOrDefault(o => o.BscPerspectiveTypeId == m.BscPerspectiveTypeId);
                            worksheet.Range[row, 7].Text = _bscperspective.BscPerspectiveTypeDescription;
                            worksheet.Range[row, 7].WrapText = true;
                            worksheet.Range[row, 7].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 7].HorizontalAlignment = ExcelHAlign.HAlignJustify;
                        }

                        if (m.PerspectiveTotalWeight.HasValue)
                        {
                            worksheet.Range[row, 8].Text = $"{m.PerspectiveTotalWeight.Value}%";
                            worksheet.Range[row, 8].WrapText = true;
                            worksheet.Range[row, 8].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 8].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (m.Bsckpiid.HasValue)
                        {
                            var _kpi = KpiData.FirstOrDefault(o => o.Bsckpiid == m.Bsckpiid);
                            // worksheet.Range[row, 9].Text = _kpi.Bsckpidescription;
                            worksheet.Range[row, 9].WrapText = true;
                            worksheet.Range[row, 9].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 9].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (m.MeasurementMetricId.HasValue)
                        {
                            var _measurement = MeasurementUnitData.FirstOrDefault(o => o.MeasurementMetricId == m.MeasurementMetricId);
                            worksheet.Range[row, 10].Text = _measurement.MeasurementMetricDesc;
                            worksheet.Range[row, 10].WrapText = true;
                            worksheet.Range[row, 10].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 10].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (m.IndividualTargetWeight.HasValue)
                        {
                            worksheet.Range[row, 11].Text = $"{Convert.ToDouble(m.IndividualTargetWeight)}%";
                            worksheet.Range[row, 11].WrapText = true;
                            worksheet.Range[row, 11].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 11].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        worksheet.Range[row, 12].Text = m.EvidenceId;
                        worksheet.Range[row, 12].WrapText = true;
                        worksheet.Range[row, 12].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 12].HorizontalAlignment = ExcelHAlign.HAlignRight;

                        if (m.EmployeeSelfAssessTgt.HasValue)
                        {
                            worksheet.Range[row, 13].Text = $"{Convert.ToDouble(m.EmployeeSelfAssessTgt)}%";
                            worksheet.Range[row, 13].WrapText = true;
                            worksheet.Range[row, 13].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 13].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (m.SupervisorAssessTgt.HasValue)
                        {
                            worksheet.Range[row, 14].Text = $"{Convert.ToDouble(m.SupervisorAssessTgt)}%";
                            worksheet.Range[row, 14].WrapText = true;
                            worksheet.Range[row, 14].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 14].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        worksheet.Range[row, 15].Text = m.SupervisorComments;
                        worksheet.Range[row, 15].WrapText = true;
                        worksheet.Range[row, 15].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 15].HorizontalAlignment = ExcelHAlign.HAlignRight;

                        if (m.IndividualTargetObjectiveScore.HasValue)
                        {
                            worksheet.Range[row, 16].Text = $"{Math.Round(m.IndividualTargetObjectiveScore.Value, 1)}%";
                            worksheet.Range[row, 16].WrapText = true;
                            worksheet.Range[row, 16].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 16].HorizontalAlignment = ExcelHAlign.HAlignRight;

                            targetvalue += m.IndividualTargetObjectiveScore.Value;
                        }

                        
                        row += 1;
                        perspectivetypeendrow = row;
                    }
                    
                    //Perspective Type Cell Merging
                    
                    if (perspectivetypestartrow < (perspectivetypeendrow - 1))
                    {
                        worksheet.Range[perspectivetypestartrow, 7, (perspectivetypeendrow - 1), 7].Merge();
                        worksheet.Range[perspectivetypestartrow, 8, (perspectivetypeendrow - 1), 8].Merge();
                        perspectivetypestartrow = perspectivetypeendrow;
                    }
                }

                //Pass in the Section 3 Scores
                row = startrow;
                if (databehavioral.Count > 0)
                {
                    var _databehavioral = databehavioral.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                    foreach (var m in _databehavioral)
                    {
                        if (m.CompetenceId.HasValue)
                        {
                            var _competence = CompetenceData.FirstOrDefault(o => o.CompetenceId == m.CompetenceId);
                            worksheet.Range[row, 17].Text = _competence.CompetenceDescription;
                            worksheet.Range[row, 17].WrapText = true;
                            worksheet.Range[row, 17].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 17].HorizontalAlignment = ExcelHAlign.HAlignJustify;
                        }

                        if (m.EmployeePerformanceDescriptorId.HasValue)
                        {
                            var _perf = PerformanceDescriptorData.FirstOrDefault(o => o.PerformanceDescriptorId == m.EmployeePerformanceDescriptorId);
                            worksheet.Range[row, 18].Text = _perf.PerformanceDescriptor;
                            worksheet.Range[row, 18].WrapText = true;
                            worksheet.Range[row, 18].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 18].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (m.EmployeeSelfAssessment.HasValue)
                        {
                            worksheet.Range[row, 19].Text = $"{Convert.ToDouble(m.EmployeeSelfAssessment)}%";
                            worksheet.Range[row, 19].WrapText = true;
                            worksheet.Range[row, 19].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 19].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        worksheet.Range[row, 20].Text = m.EmployeeComment;
                        worksheet.Range[row, 20].WrapText = true;
                        worksheet.Range[row, 20].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 20].HorizontalAlignment = ExcelHAlign.HAlignRight;

                        if (m.SupervisorPerformanceDescriptorId.HasValue)
                        {
                            var _perf = PerformanceDescriptorData.FirstOrDefault(o => o.PerformanceDescriptorId == m.SupervisorPerformanceDescriptorId);
                            worksheet.Range[row, 21].Text = _perf.PerformanceDescriptor;
                            worksheet.Range[row, 21].WrapText = true;
                            worksheet.Range[row, 21].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 21].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (m.SupervisorAssessment.HasValue)
                        {
                            worksheet.Range[row, 22].Text = $"{Convert.ToDouble(m.SupervisorAssessment)}%";
                            worksheet.Range[row, 22].WrapText = true;
                            worksheet.Range[row, 22].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 22].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        worksheet.Range[row, 23].Text = m.SupervisorComment;
                        worksheet.Range[row, 23].WrapText = true;
                        worksheet.Range[row, 23].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 23].HorizontalAlignment = ExcelHAlign.HAlignRight;

                        row += 1;
                    }
                }

                // //Pass in the Section 4 Results
                // row = startrow;
                // {
                //     var _datadevelopmentplan = datadevelopmentplan.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                //     foreach (var m in _datadevelopmentplan)
                //     {
                //         worksheet.Range[row, 24].Text = m.DevelopmentNeed;
                //         worksheet.Range[row, 24].WrapText = true;
                //         worksheet.Range[row, 24].VerticalAlignment = ExcelVAlign.VAlignTop;
                //         worksheet.Range[row, 24].HorizontalAlignment = ExcelHAlign.HAlignJustify;

                //         worksheet.Range[row, 25].Text = m.DevelopmentAction;
                //         worksheet.Range[row, 25].WrapText = true;
                //         worksheet.Range[row, 25].VerticalAlignment = ExcelVAlign.VAlignTop;
                //         worksheet.Range[row, 25].HorizontalAlignment = ExcelHAlign.HAlignJustify;

                //         row += 1;
                //     }
                // }

                // //Pass in the Appraisee Comments
                // row = startrow;
                // {
                //     var _dataappraiseecomments = dataappraiseecomments.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                //     foreach (var m in _dataappraiseecomments)
                //     {
                //         worksheet.Range[row, 26].Text = m.AppraiseeComments;
                //         worksheet.Range[row, 26].WrapText = true;
                //         worksheet.Range[row, 26].VerticalAlignment = ExcelVAlign.VAlignTop;
                //         worksheet.Range[row, 26].HorizontalAlignment = ExcelHAlign.HAlignJustify;

                //         row += 1;
                //     }
                // }

                // //Pass in the Supervisor Comments
                // row = startrow;
                // {
                //     var _datasupervisorcomments = datasupervisorcomments.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                //     foreach (var m in datasupervisorcomments)
                //     {
                //         worksheet.Range[row, 27].Text = m.SupervisorComments;
                //         worksheet.Range[row, 27].WrapText = true;
                //         worksheet.Range[row, 27].VerticalAlignment = ExcelVAlign.VAlignTop;
                //         worksheet.Range[row, 27].HorizontalAlignment = ExcelHAlign.HAlignJustify;

                //         row += 1;
                //     }
                // }

                // //Pass in the HOD Comments
                // row = startrow;
                // {
                //     var _datahodcomments = datahodcomments.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                //     foreach (var m in _datahodcomments)
                //     {
                //         worksheet.Range[row, 28].Text = m.Hodcomments;
                //         worksheet.Range[row, 28].WrapText = true;
                //         worksheet.Range[row, 28].VerticalAlignment = ExcelVAlign.VAlignTop;
                //         worksheet.Range[row, 28].HorizontalAlignment = ExcelHAlign.HAlignJustify;

                //         row += 1;
                //     }
                // }

                // //Pass in the CEO Comments
                // row = startrow;
                // {
                //     var _dataceocomments = dataceocomments.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                //     foreach (var m in _dataceocomments)
                //     {
                //         worksheet.Range[row, 29].Text = m.Ceocomments;
                //         worksheet.Range[row, 29].WrapText = true;
                //         worksheet.Range[row, 29].VerticalAlignment = ExcelVAlign.VAlignTop;
                //         worksheet.Range[row, 29].HorizontalAlignment = ExcelHAlign.HAlignJustify;

                //         row += 1;
                //     }
                // }

                // worksheet.Range[row, 31].Number = Convert.ToDouble(targetvalue);
                // worksheet.Range[row, 31].VerticalAlignment = ExcelVAlign.VAlignTop;
                // worksheet.Range[row, 31].HorizontalAlignment = ExcelHAlign.HAlignLeft;

                // worksheet.Range[row, 32].Number = Convert.ToDouble(behavioralvalue);
                // worksheet.Range[row, 32].VerticalAlignment = ExcelVAlign.VAlignTop;
                // worksheet.Range[row, 32].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                

                // //Overrall Score
                // worksheet.Range[row, 33].Number = Convert.ToDouble(targetvalue + behavioralvalue);
                // worksheet.Range[row, 33].VerticalAlignment = ExcelVAlign.VAlignTop;
                // worksheet.Range[row, 33].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                

                //worksheet.Range[row, 1, row, 13].CellStyleName = "headerStyle";
                row += 1;
                count++;
            }

        }

        catch (Exception ex)
        {
            throw ex;
        }
    }
}

