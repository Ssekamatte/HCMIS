@page "/AnnualLeaveRoasterReport"
@using HCMIS.Data;
@using HCMIS.Model;
@using HCMIS.SHARED.Data;
@using HCMIS.Interface;
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings

@using HCMIS.SHARED.Models;
@using Syncfusion.XlsIO;
@using System.Text.Json;
@using System.Globalization
@inject IReportService reportservice;
@inject IToastService toastService;
@inject Microsoft.JSInterop.IJSRuntime JS;
@inject IAuthenticationService AuthService;

<style>
    .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
        stroke: green;
    }
</style>

<MudOverlay Visible="@loadingspinner" DarkBackground="true" Absolute="true" Style="z-index:100000;">
    <div class="loader">
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--text" style="color:white;"></div>
    </div>
</MudOverlay>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| ANNUAL LEAVE ROASTER
    </li>
</ol>

<EditForm Model="@InputModel" OnValidSubmit="@OnSearchSubmit">
    <DataAnnotationsValidator />
    <div class="row" style="margin-bottom:10px;">
        <div class="col-md-4">
            <p>Year<span style="color:red;"> *</span></p>
            <SfMultiSelect @bind-Value="@InputModel.Year" TValue="int?[]" TItem="AYears" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@YearData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Years" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(AYears.YearId)" Text="@nameof(AYears.YearDesc)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>

        <div class="col col-md-4">
            <p>Department</p>
            <SfMultiSelect @bind-Value="@InputModel.DepartmentId" Enabled="DepartmentDD"
                           TValue="int?[]" TItem="ADepartment" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox"
                           DataSource="@DepartmentData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true"
                           FilterBarPlaceholder="Search Department" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="350px">
                <MultiSelectFieldSettings Value="@nameof(ADepartment.DepartmentId)" Text="@nameof(ADepartment.DepartmentDescription)"></MultiSelectFieldSettings>
                <MultiSelectEvents TValue="int?[]" TItem="ADepartment" ValueChange="OnDepartmentChange"></MultiSelectEvents>
            </SfMultiSelect>

        </div>

        <div class="col col-md-4">
            <p>Employee</p>
            <SfMultiSelect @bind-Value="@InputModel.Employeeid"  Enabled="EmployeeDD" TValue="int?[]" TItem="ViewEmployeeDropDown" AllowFiltering="true" 
            FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@EmployeeData" ShowSelectAll="true" 
            EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Employee" PopupHeight="350px"  PopupWidth="350px" Query="@IndicatorQuery">
                <MultiSelectFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        
        
        @if (!string.IsNullOrEmpty(InputModel.Response))
        {
            <div class="col col-md-12" style="margin-top:10px;">
                <div class="alert alert-success">@InputModel.Response</div>
            </div>
        }

    </div>

    <div class="row" style="margin-bottom:10px;">
        @if (Downloadreport == false)
        {
            <div class="col col-md-12">
                <button @onclick="@OnSearchSubmit" class="btn btn-success" data-ripple="true" style="margin-right:10px;">Download Report</button>
                <button @onclick="@ClearSearchBtnClick" class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Clear Search</button>
            </div>
        }

    </div>
    <ValidationSummary />
</EditForm>

@code {

    private UtilitiesSearchPanel InputModel = new UtilitiesSearchPanel();
    bool Downloadreport { get; set; } = false;
    string? filename { get; set; } = null;
    List<ViewUserManagement>? UsersData { get; set; }
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<AFinancialYear>? FinancialYearData { get; set; }
    List<AAppraisalReason>? AppraisalData { get; set; }
    List<ABscKpi>? KpiData { get; set; }
    List<ABscPerspectives>? BscPerspectiveData { get; set; }
    List<APerformanceDescriptor>? PerformanceDescriptorData { get; set; }
    List<ABscPerformanceMeasurement>? BscMeasurementData { get; set; }
    List<ABehavioralCompetencies>? CompetenceData { get; set; }
    List<ABscPerspectivesType>? BscPerspectiveTypeData { get; set; }
    List<ALeaveType>? LeaveTypeData { get; set; }
    List<ViewBalanceScoreCardTargetSettingReport>? TargetSettingReportData { get; set; }
    List<ADepartment>? DepartmentData { get; set; }
    List<ViewEmployeeLeaveRoasterReportPivoted>? LeaveRoasterYearData { get; set; }
    List<AYears>? YearData { get; set; }
    public bool loadingspinner { get; set; }
    LoginResultModel? Credentials { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    public static int PublicHolidays { get; set; } = 0;
    public static int numberOfDays2 { get; set; } = 0;
    List<APublicHolidays>? PublicHolidaysData { get; set; }    
    public static DateTime[]? datesselectedd = null;
    public bool EmployeeDD { get; set; } = false;
    public bool DepartmentDD { get; set; }
    public bool JobTitleDD;
    public Query IndicatorQuery = new Query().Take(15);
    List<WhereFilter> filterList = new List<WhereFilter>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loadingspinner = true;
            Credentials = await AuthService.GetUserCredentials();
            List<Task> t = new List<Task>();
            t.Add(Task.Run(async () =>
            {
                var responseusers = await Http.GetAsync($"Utilities/GetUsers");
                if (responseusers.IsSuccessStatusCode)
                {
                    var contentusers = await responseusers.Content.ReadAsStringAsync();
                    UsersData = JsonSerializer.Deserialize<List<ViewUserManagement>>(contentusers, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responseemployee = await Http.GetAsync($"Utilities/GetEmployeeDD");
                if (responseemployee.IsSuccessStatusCode)
                {
                    var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                    EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(contentemployee, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
                if (responsedepartment.IsSuccessStatusCode)
                {
                    var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
                    DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(contentdepartment, _options);
                }

            }));

            t.Add(Task.Run(async () =>
            {
                var responseleaveroaster = await Http.GetAsync($"Employeez/GetLeaveRoasterYears");
                if (responseleaveroaster.IsSuccessStatusCode)
                {
                    var contentleaveroaster = await responseleaveroaster.Content.ReadAsStringAsync();
                    LeaveRoasterYearData = JsonSerializer.Deserialize<List<ViewEmployeeLeaveRoasterReportPivoted>>(contentleaveroaster, _options);
                }

            }));
            t.Add(Task.Run(async () =>
            {
                var responseleavetype = await Http.GetAsync($"Utilities/GetLeaveType");
                if (responseleavetype.IsSuccessStatusCode)
                {
                    var contentleavetype = await responseleavetype.Content.ReadAsStringAsync();
                    LeaveTypeData = JsonSerializer.Deserialize<List<ALeaveType>>(contentleavetype, _options);
                }

            }));

            t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetYears");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        YearData = JsonSerializer.Deserialize<List<AYears>>(content, _options);
                    }
                }));

            t.Add(Task.Run(async () =>
            {
                var responsepublicholiday = await Http.GetAsync($"Utilities/GetPublicHoliday");
                if (responsepublicholiday.IsSuccessStatusCode)
                {
                    var contentpublicholiday = await responsepublicholiday.Content.ReadAsStringAsync();
                    PublicHolidaysData = JsonSerializer.Deserialize<List<APublicHolidays>>(contentpublicholiday, _options);
                }
            }));

            Task _t = Task.WhenAll(t);
            await _t;

            if (Credentials != null && (!string.IsNullOrEmpty(Credentials.UserRole) &&
            Credentials.UserRole.Contains("Administrator") || Credentials.JobTitleId == 44))
            {
                //EmployeeDD = true;
                DepartmentDD = true;
            }
            else
            {
                //EmployeeDD = false;
                DepartmentDD = false;

                if (Credentials != null && EmployeeData != null)
                {
                    var _employeedetails = EmployeeData.FirstOrDefault(o=>o.Employeeid == Credentials.StaffId);

                    List<int?> _employeeid = new List<int?>();
                    List<int?> _departmentid = new List<int?>();
                    List<int?> _jobtitleid = new List<int?>();

                    if (_employeedetails != null)
                    {
                        _employeeid.Add(Credentials.StaffId);
                        _departmentid.Add(_employeedetails.DepartmentId);
                        _jobtitleid.Add(_employeedetails.JibTitleId);

                        InputModel.Employeeid = _employeeid.ToArray();
                        InputModel.DepartmentId = _departmentid.ToArray();
                        InputModel.JobTitleId = _jobtitleid.ToArray();

                        filterList.Add(new WhereFilter() { Field = "DepartmentId", Operator = "equal", value = _employeedetails.DepartmentId, IgnoreCase = true });
                        var orWhere = WhereFilter.Or(filterList);
                        IndicatorQuery = new Query().Where(orWhere);

                        // toastService.ShowError("Emp Id" + Credentials.StaffId);
                    }
                }
            }

        }
        catch (Exception ex)
        {
            //throw ex;
        }
        finally
        {
            loadingspinner = false;
        }
    }

    private void OnDepartmentChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            EmployeeDD = true;
            JobTitleDD = true;
            IndicatorQuery = new Query();
            List<WhereFilter> filterList = new List<WhereFilter>();
            foreach (var item in args.Value)
            {
                filterList.Add(new WhereFilter() { Field = "DepartmentId", Operator = "equal", value = item, IgnoreCase = true });
            }

            var orWhere = WhereFilter.Or(filterList);
            IndicatorQuery = new Query().Where(orWhere);
        }
        else
        {
            IndicatorQuery = new Query();
        }
    }

    //Function to return number of days minus weekends
    static int GetNumberOfDates(DateTime from, DateTime to)
    {
        if (to < from)
            throw new ArgumentException("To cannot be smaller than from.", nameof(to));


        if ((to.Date == from.Date) && (from.DayOfWeek != DayOfWeek.Saturday && from.DayOfWeek != DayOfWeek.Sunday))
        {
            return 1;
        }

        else if ((to.Date == from.Date) && (from.DayOfWeek == DayOfWeek.Saturday && from.DayOfWeek == DayOfWeek.Sunday))
        {
            return 0;
        }

        int n = 0;
        DateTime nextDate = from;
        while(nextDate <= to.Date)
        {
            if (nextDate.DayOfWeek != DayOfWeek.Saturday && nextDate.DayOfWeek != DayOfWeek.Sunday)
                n++;
            nextDate = nextDate.AddDays(1);
        }

        return n;
    }

    public int GetNumberOfPublicHolidays(DateTime from, DateTime to)
    {
        int publicHolidaysCount = 0;

        // Iterate through each holiday and check if it falls on a weekday
        foreach (var holiday in PublicHolidaysData.Where(o => o.HolidayDate >= from && o.HolidayDate <= to))
        {
            if (holiday.HolidayDate.Value.DayOfWeek != DayOfWeek.Saturday && holiday.HolidayDate.Value.DayOfWeek != DayOfWeek.Sunday)
            {
                publicHolidaysCount++;
            }
        }

        return publicHolidaysCount;
    }

    //Function to get all dates between two dates
    public List<DateTime> GetDatesBetween(DateTime startDate, DateTime endDate)
    {
        List<DateTime> allDates = new List<DateTime>();

        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
        {
            var countdata = PublicHolidaysData?.FirstOrDefault(o => o.HolidayDate == date);

            if ((date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday) && (countdata == null))
            {
                allDates.Add(date.Date);
            }
        }

        return allDates;
    }
    private async Task OnSearchSubmit()
    {
        string? SelectedYear = null;
        string SelectedYeardesc = string.Empty;
        if (InputModel.Year != null && InputModel.Year.Length > 0)
        {
            SelectedYear = string.Join(",", InputModel.Year);   
            foreach (var f in InputModel.Year)
            {
                var _operator = YearData.FirstOrDefault(o => o.YearId == Convert.ToInt32(f));
                if (_operator != null)
                {
                    SelectedYeardesc += $"{_operator.YearDesc}, ";
                }
            }

        }

        var annualleavedays = LeaveTypeData.FirstOrDefault(o => o.LeaveTypeId == 1);   

        filename = null;
        Downloadreport = true;
        loadingspinner = true;
        try
        {
            if (InputModel.Year == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select atleast one year");
            }

            else
            {
                //https://stackoverflow.com/questions/65591550/calculate-the-number-of-days-per-month-between-two-dates-in-c-sharp#:~:text=The%20DateTime%20class%20does%20a,between%20specific%20dates%20of%20interest.
                //https://www.codeproject.com/Questions/1086883/Months-start-and-end-dates-and-no-of-days-in-each

                CultureInfo culture = new CultureInfo("en-US");
                // DateTime start = new DateTime(2020, 1, 2); // 2 January 2020
                // DateTime end = new DateTime(2020, 3, 4); // 4 March 2020

                // if(start.Year == end.Year && start.Month == end.Month) 
                // {
                //     var daysInSingleMonth = end.Day - start.Day;
                //     Console.WriteLine(start.ToString("MMM", culture) + " (Single Month): " + daysInSingleMonth.ToString("00"));
                // } 
                // else
                // {
                //     var daysInFirstMonth = DateTime.DaysInMonth(start.Year, start.Month) - start.Day;
                //     Console.WriteLine(start.ToString("MMM", culture) + " (First Month): " + daysInFirstMonth.ToString("00"));


                //     DateTime current = start.AddMonths(1);
                //     while (current <= end.AddMonths(-1))
                //     {
                //         var daysInCurrentMonth = DateTime.DaysInMonth(current.Year, current.Month);
                //         Console.WriteLine(current.ToString("MMM", culture) + ": " + daysInCurrentMonth.ToString("00"));

                //         current = current.AddMonths(1);
                //     }

                //     var daysInLastMonth = end.Day;
                //     Console.WriteLine(end.ToString("MMM", culture) + " (Last Month): " + daysInLastMonth.ToString("00"));
                // }

                //Function in DB
                //,select * from  ReturnDateRangeByMonth('2024-07-24 00:00:00.000','2024-08-09 01:00:00.000')


                //Above is my method

                var data = await reportservice.GetAnnualLeaveRoaster(InputModel);
                //var data1 = await reportservice.GetAnnualLeaveRoasterMonthDays(InputModel);
                var selecteddates = await reportservice.GetSelectedDates(InputModel);

                var _individualdates = selecteddates.Select(o => new { o.EmployeeId,o.YearId, o.ProposedLeaveStartDate,o.ProposedLeaveEndDate }).ToList().Distinct().ToList();

                int month = 0;
                List<int?> _Jan = new List<int?>();
                List<int?> _Feb = new List<int?>();
                List<int?> _Mar = new List<int?>();
                List<int?> _Apr = new List<int?>();
                List<int?> _May = new List<int?>();
                List<int?> _Jun = new List<int?>();
                List<int?> _Jul = new List<int?>();
                List<int?> _Aug = new List<int?>();
                List<int?> _Sep = new List<int?>();
                List<int?> _Oct = new List<int?>();
                List<int?> _Nov = new List<int?>();
                List<int?> _Dec = new List<int?>();

                if (data.Count > 0)
                {
                    using (ExcelEngine excelEngine = new ExcelEngine())
                    {
                        IApplication application = excelEngine.Excel;
                        application.DefaultVersion = ExcelVersion.Excel2013;
                        IWorkbook workbook = application.Workbooks.Create(1);
                        IWorksheet worksheet = workbook.Worksheets[0];
                        worksheet.Name = "Annual Leave Roaster Report";

                        #region Styles
                        var headerStyle = workbook.Styles.Add("headerStyle");

                        headerStyle.BeginUpdate();
                        headerStyle.Color = Syncfusion.Drawing.Color.Black;
                        headerStyle.VerticalAlignment = ExcelVAlign.VAlignTop;
                        headerStyle.Font.Bold = true;
                        headerStyle.Font.FontName = "Arial";
                        headerStyle.Font.Size = 8f;
                        headerStyle.Font.Color = ExcelKnownColors.White;

                        headerStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        headerStyle.Borders.Color = ExcelKnownColors.White;
                        headerStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        headerStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        headerStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;

                        headerStyle.WrapText = true;

                        headerStyle.EndUpdate();

                        var Style = workbook.Styles.Add("bodyStyle");

                        Style.BeginUpdate();
                        Style.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        Style.VerticalAlignment = ExcelVAlign.VAlignTop;
                        Style.Font.Bold = false;
                        Style.Font.FontName = "Arial";
                        Style.Font.Size = 8f;
                        Style.Font.Color = ExcelKnownColors.Black;
                        Style.WrapText = true;
                        Style.Borders.Color = ExcelKnownColors.Black;
                        Style.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        Style.EndUpdate();


                        var CategoryStyle = workbook.Styles.Add("CategoryStyle");

                        CategoryStyle.BeginUpdate();
                        CategoryStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 204, 0);
                        CategoryStyle.Font.Bold = true;
                        CategoryStyle.Font.FontName = "Arial";
                        CategoryStyle.Font.Size = 20f;
                        CategoryStyle.Font.Color = ExcelKnownColors.Brown;
                        CategoryStyle.WrapText = true;
                        CategoryStyle.Borders.Color = ExcelKnownColors.White;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.EndUpdate();

                        var DivisionStyle = workbook.Styles.Add("DivisionStyle");

                        DivisionStyle.BeginUpdate();
                        DivisionStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        DivisionStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 77, 0); //ORANGE
                        DivisionStyle.Font.Bold = true;
                        DivisionStyle.Font.FontName = "Arial";
                        DivisionStyle.Font.Size = 8f;
                        DivisionStyle.Font.Color = ExcelKnownColors.White;
                        DivisionStyle.WrapText = true;
                        DivisionStyle.Borders.Color = ExcelKnownColors.White;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.EndUpdate();

                        #endregion

                        int row = 1;
                        worksheet.Range["A" + row].Text = "Annual Leave Roaster Report";
                        worksheet.Range["A" + row + ":V" + row].CellStyle = CategoryStyle;
                        worksheet.Range["A" + row + ":V" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["A" + row + ":V" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["A" + row].RowHeight = 30;
                        worksheet.Range["A" + row + ":V" + row].Merge();
                        row++;

                        var chosenyear = string.Join(", ", YearData.Where(o => InputModel.Year.Any(a => a == o.YearId)).Select(o => o.YearDesc).ToArray());

                        worksheet.Range["H" + row].Text = "ANNUAL LEAVE SCHEDULE FOR " + chosenyear;
                        worksheet.Range["H" + row + ":S" + row].CellStyle = DivisionStyle;
                        worksheet.Range["H" + row + ":S" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["H" + row + ":S" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["H" + row].RowHeight = 30;
                        worksheet.Range["H" + row + ":S" + row].Merge();
                        //FILTERS SEARCHED BY

                        row++;

                        worksheet.Range[row, 1].Text = "#";
                        worksheet.Range[row, 1].CellStyle = headerStyle;
                        worksheet.Range[row, 1].ColumnWidth = 5;
                        worksheet.Range[row, 1].WrapText = true;

                        worksheet.Range[row, 2].Text = "Name";
                        worksheet.Range[row, 2].CellStyle = headerStyle;
                        worksheet.Range[row, 2].ColumnWidth = 13;
                        worksheet.Range[row, 2].WrapText = true;

                        worksheet.Range[row, 3].Text = "Department";
                        worksheet.Range[row, 3].CellStyle = headerStyle;
                        worksheet.Range[row, 3].ColumnWidth = 13;
                        worksheet.Range[row, 3].WrapText = true;

                        worksheet.Range[row, 4].Text = "Position";
                        worksheet.Range[row, 4].CellStyle = headerStyle;
                        worksheet.Range[row, 4].ColumnWidth = 15;
                        worksheet.Range[row, 4].WrapText = true;

                        worksheet.Range[row, 5].Text = "Year";
                        worksheet.Range[row, 5].CellStyle = headerStyle;
                        worksheet.Range[row, 5].ColumnWidth = 8;
                        worksheet.Range[row, 5].WrapText = true;

                        worksheet.Range[row, 6].Text = "Annual Leave For " + SelectedYeardesc;
                        worksheet.Range[row, 6].CellStyle = headerStyle;
                        worksheet.Range[row, 6].ColumnWidth = 8;
                        worksheet.Range[row, 6].WrapText = true;

                        worksheet.Range[row, 7].Text = "Total Leave Days";
                        worksheet.Range[row, 7].CellStyle = headerStyle;
                        worksheet.Range[row, 7].ColumnWidth = 8;
                        worksheet.Range[row, 7].WrapText = true;

                        worksheet.Range[row, 8].Text = "Jan";
                        worksheet.Range[row, 8].CellStyle = headerStyle;
                        worksheet.Range[row, 8].ColumnWidth = 4;
                        worksheet.Range[row, 8].WrapText = true;

                        worksheet.Range[row, 9].Text = "Feb";
                        worksheet.Range[row, 9].CellStyle = headerStyle;
                        worksheet.Range[row, 9].ColumnWidth = 4;
                        worksheet.Range[row, 9].WrapText = true;

                        worksheet.Range[row, 10].Text = "Mar";
                        worksheet.Range[row, 10].CellStyle = headerStyle;
                        worksheet.Range[row, 10].ColumnWidth = 4;
                        worksheet.Range[row, 10].WrapText = true;

                        worksheet.Range[row, 11].Text = "Apr";
                        worksheet.Range[row, 11].CellStyle = headerStyle;
                        worksheet.Range[row, 11].ColumnWidth = 4;
                        worksheet.Range[row, 11].WrapText = true;

                        worksheet.Range[row, 12].Text = "May";
                        worksheet.Range[row, 12].CellStyle = headerStyle;
                        worksheet.Range[row, 12].ColumnWidth = 4;
                        worksheet.Range[row, 12].WrapText = true;

                        worksheet.Range[row, 13].Text = "Jun";
                        worksheet.Range[row, 13].CellStyle = headerStyle;
                        worksheet.Range[row, 13].ColumnWidth = 4;
                        worksheet.Range[row, 13].WrapText = true;

                        worksheet.Range[row, 14].Text = "Jul";
                        worksheet.Range[row, 14].CellStyle = headerStyle;
                        worksheet.Range[row, 14].ColumnWidth = 4;
                        worksheet.Range[row, 14].WrapText = true;

                        worksheet.Range[row, 15].Text = "Aug";
                        worksheet.Range[row, 15].CellStyle = headerStyle;
                        worksheet.Range[row, 15].ColumnWidth = 4;
                        worksheet.Range[row, 15].WrapText = true;

                        worksheet.Range[row, 16].Text = "Sep";
                        worksheet.Range[row, 16].CellStyle = headerStyle;
                        worksheet.Range[row, 16].ColumnWidth = 4;
                        worksheet.Range[row, 16].WrapText = true;

                        worksheet.Range[row, 17].Text = "Oct";
                        worksheet.Range[row, 17].CellStyle = headerStyle;
                        worksheet.Range[row, 17].ColumnWidth = 4;
                        worksheet.Range[row, 17].WrapText = true;

                        worksheet.Range[row, 18].Text = "Nov";
                        worksheet.Range[row, 18].CellStyle = headerStyle;
                        worksheet.Range[row, 18].ColumnWidth = 4;
                        worksheet.Range[row, 18].WrapText = true;

                        worksheet.Range[row, 19].Text = "Dec";
                        worksheet.Range[row, 19].CellStyle = headerStyle;
                        worksheet.Range[row, 19].ColumnWidth = 4;
                        worksheet.Range[row, 19].WrapText = true;

                        worksheet.Range[row, 20].Text = "Total Utilised Leave Days";
                        worksheet.Range[row, 20].CellStyle = headerStyle;
                        worksheet.Range[row, 20].ColumnWidth = 8;
                        worksheet.Range[row, 20].WrapText = true;

                        worksheet.Range[row, 21].Text = "Balance of Leave Days";
                        worksheet.Range[row, 21].CellStyle = headerStyle;
                        worksheet.Range[row, 21].ColumnWidth = 8;
                        worksheet.Range[row, 21].WrapText = true;

                        worksheet.Range[row, 22].Text = "Narration By Serial Number";
                        worksheet.Range[row, 22].CellStyle = headerStyle;
                        worksheet.Range[row, 22].ColumnWidth = 25;
                        worksheet.Range[row, 22].WrapText = true;

                        row++;
                        int count = 1;

                        int carriedforward = 12;
                        int _annualleavedays = 25;
                        int totalleavedays = 0;

                        foreach (var item in data)
                        {
                            //datesselectedd = GetDatesBetween(item.ProposedLeaveStartDate.Value, item.ProposedLeaveEndDate.Value).ToArray();

                            worksheet.Range[row, 1].Text = count.ToString();
                            worksheet.Range[row, 1].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 2].Text = item.EmployeeFullName;
                            worksheet.Range[row, 2].WrapText = true;
                            worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 3].Text = item.DepartmentDescription;
                            worksheet.Range[row, 3].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 3].WrapText = true;
                            worksheet.Range[row, 4].Text = item.JobTitleDescription;
                            worksheet.Range[row, 4].WrapText = true;
                            worksheet.Range[row, 4].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 5].Number = Convert.ToDouble(item.YearNo);
                            worksheet.Range[row, 5].HorizontalAlignment = ExcelHAlign.HAlignRight;
                            worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 6].Number = Convert.ToDouble(annualleavedays.LeaveDaysPerYear);
                            worksheet.Range[row, 6].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 7].Number = Convert.ToDouble(annualleavedays.LeaveDaysPerYear);/* carriedforward + Convert.ToDouble(annualleavedays.LeaveDaysPerYear); */
                            worksheet.Range[row, 7].VerticalAlignment = ExcelVAlign.VAlignTop;

                            worksheet.Range[row, 8].Number = Convert.ToDouble(item.Jan)  /* _Jan.Count */;
                            worksheet.Range[row, 8].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 9].Number = Convert.ToDouble(item.Feb) /* _Feb.Count */;
                            worksheet.Range[row, 9].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 10].Number = Convert.ToDouble(item.Mar) /* _Mar.Count */;
                            worksheet.Range[row, 10].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 11].Number = Convert.ToDouble(item.Apr) /* _Apr.Count */;
                            worksheet.Range[row, 11].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 12].Number = Convert.ToDouble(item.May) /* _May.Count */;
                            worksheet.Range[row, 12].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 13].Number = Convert.ToDouble(item.Jun) /* _Jun.Count */;
                            worksheet.Range[row, 13].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 14].Number = Convert.ToDouble(item.Jul) /* _Jul.Count */; 
                            worksheet.Range[row, 14].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 15].Number = Convert.ToDouble(item.Aug) /* _Aug.Count */;
                            worksheet.Range[row, 15].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 16].Number = Convert.ToDouble(item.Sep) /* _Sep.Count */;
                            worksheet.Range[row, 16].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 17].Number = Convert.ToDouble(item.Oct) /* _Oct.Count */;
                            worksheet.Range[row, 17].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 18].Number = Convert.ToDouble(item.Nov) /* _Nov.Count */;
                            worksheet.Range[row, 18].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 19].Number = Convert.ToDouble(item.Dec) /* _Dec.Count */;
                            worksheet.Range[row, 19].VerticalAlignment = ExcelVAlign.VAlignTop;

                            worksheet.Range[row, 20].Number = Convert.ToDouble(item.TotalLeaveDays);
                            worksheet.Range[row, 20].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 21].Number = Convert.ToDouble(annualleavedays.LeaveDaysPerYear - item.TotalLeaveDays);
                            worksheet.Range[row, 21].VerticalAlignment = ExcelVAlign.VAlignTop;

                            //Pass in the selected dates here
                            if (_individualdates.Count > 0)
                            {
                                var employeedates = _individualdates.Where(o => o.EmployeeId == item.EmployeeId && o.YearId == item.YearId).ToList();
                                if(employeedates.Count>0)
                                {
                                    string concatenateddates =  string.Empty;
                                    foreach (var n in employeedates)
                                    {
                                        if (n.ProposedLeaveStartDate.HasValue && n.ProposedLeaveEndDate.HasValue)
                                        {
                                            concatenateddates += n.ProposedLeaveStartDate.Value.ToString("dd-MMM-yy") + " - " + n.ProposedLeaveEndDate.Value.ToString("dd-MMM-yy") + ", ";
                                        }                                        
                                    }
                                    worksheet.Range[row, 22].Text = concatenateddates;
                                    worksheet.Range[row, 22].WrapText = true;
                                    worksheet.Range[row, 22].VerticalAlignment = ExcelVAlign.VAlignTop;
                                }

                            }    

                            // totalleavedays = Convert.ToInt32(item._1 + item._2 + item._3 + item._4 +
                            // item._5 + item._6 + item._7 + item._8 + item._9 + item._10 + item._11 + item._12);

                            // totalleavedays = _Jan.Count + _Feb.Count + _Mar.Count + _Apr.Count +
                            // _May.Count + _Jun.Count + _Jul.Count + _Aug.Count + _Sep.Count + _Oct.Count + _Nov.Count +
                            // _Dec.Count;

                            //Count Selected Dates
                            // if (datesselectedd != null)
                            // {
                            //     foreach (var itemdate in datesselectedd)
                            //     {
                            //         month = Convert.ToDateTime(itemdate).Month;

                            //         if (month == 1)
                            //         {
                            //             _Jan.Add(month);
                            //         }
                            //         else if (month == 2)
                            //         {
                            //             _Feb.Add(month);
                            //         }
                            //         else if (month == 3)
                            //         {
                            //             _Mar.Add(month);
                            //         }
                            //         else if (month == 4)
                            //         {
                            //             _Apr.Add(month);
                            //         }
                            //         else if (month == 5)
                            //         {
                            //             _May.Add(month);
                            //         }
                            //         else if (month == 6)
                            //         {
                            //             _Jun.Add(month);
                            //         }
                            //         else if (month == 7)
                            //         {
                            //             _Jul.Add(month);
                            //         }
                            //         else if (month == 8)
                            //         {
                            //             _Aug.Add(month);
                            //         }
                            //         else if (month == 9)
                            //         {
                            //             _Sep.Add(month);
                            //         }
                            //         else if (month == 10)
                            //         {
                            //             _Oct.Add(month);
                            //         }
                            //         else if (month == 11)
                            //         {
                            //             _Nov.Add(month);
                            //         }
                            //         else if (month == 12)
                            //         {
                            //             _Dec.Add(month);
                            //         }

                            //     }                              

                            // }                                            

                            row += 1;
                            count++;
                        }


                        MemoryStream ms = new MemoryStream();
                        // Save and close the document.
                        workbook.SaveAs(ms);
                        //Reset the memory stream position.
                        ms.Position = 0;
                        string _filename = "Annual Leave Roaster Report.xlsx";
                        filename = _filename;
                        JS.InvokeAsync<object>("saveAsFile", filename, Convert.ToBase64String(ms.ToArray()));
                        ms.Dispose();
                        workbook.Close();
                        Downloadreport = false;
                        InputModel.Response = "Report Downloaded Successfully";
                    }
                }
                else
                {
                    InputModel.Response = "There were no records found that match the given search parameters";
                    Downloadreport = false;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ClearAll();
            toastService.ShowError(ex.ToString());
        }
        finally
        {
            loadingspinner = false;
            Downloadreport = false;
            StateHasChanged();
        }
    }

    private void ClearSearchBtnClick()
    {
        InputModel = new UtilitiesSearchPanel();
    }
}
