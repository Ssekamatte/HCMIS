@page "/AnnualLeaveRoasterReport"
@using HCMIS.Data;
@using HCMIS.SHARED.Data;
@using HCMIS.Interface;
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings
@using HCMIS.SHARED.DTOs.Utilities;
@using Syncfusion.XlsIO;
@inject IReportService reportservice;
@inject IToastService toastService;
@inject Microsoft.JSInterop.IJSRuntime JS;

<style>
    .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
        stroke: green;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| ANNUAL LEAVE ROASTER
    </li>
</ol>

<EditForm Model="@InputModel" OnValidSubmit="@OnSearchSubmit">
    <DataAnnotationsValidator />
    <div class="row" style="margin-bottom:10px;">
        <div class="col-md-4">
            <p>Review Date Range</p>
            <div class="row">
               @* <div class="col-md-6">
                    <SfDatePicker @bind-Value="@(InputModel.StartDate)" Enabled="true" Placeholder="Start Date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>
                <div class="col-md-6">
                    <SfDatePicker @bind-Value="@(InputModel.EndDate)" Enabled="true" Placeholder="End Date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>*@
            </div>
        </div>
        <div class="col col-md-4">
            <p>Employee</p>
            @*<SfMultiSelect @bind-Value="@InputModel.Employeeid" TValue="int?[]" TItem="ViewBscEmployeeDto" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@EmployeeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Employee" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ViewBscEmployeeDto.Employeeid)" Text="@nameof(ViewBscEmployeeDto.EmployeeDetails)"></MultiSelectFieldSettings>
            </SfMultiSelect>*@
        </div>
        <div class="col col-md-4">
            <p>Appraisal Reason</p>
            @*<SfMultiSelect @bind-Value="@InputModel.AppraisalReasonId" TValue="int?[]" TItem="AppraisalReasonDto" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@AppraisalData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Appraisal Reason" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(AppraisalReasonDto.AppraisalReasonId)" Text="@nameof(AppraisalReasonDto.AppraisalReason)"></MultiSelectFieldSettings>
            </SfMultiSelect>*@
        </div>
        <div class="col col-md-4">
            <p>Financial Year</p>
            @*<SfMultiSelect @bind-Value="@InputModel.FinancialYearId" TValue="int?[]" TItem="ViewFinancialYearDto" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@FinancialYearData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Year" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(AFinancialYear.Id)" Text="@nameof(AFinancialYear.FinancialYear)"></MultiSelectFieldSettings>
            </SfMultiSelect>*@
        </div>
        <div class="col col-md-4">
            <p>Perspective</p>
            @*<SfMultiSelect @bind-Value="@InputModel.BscPerspectiveTypeId" TValue="int?[]" TItem="ABscPerspectivesTypeDto" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@BscPerspectiveTypeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Employee" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeId)" Text="@nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>*@
        </div>

        <div class="form-group col-md-12">
            <SfSpinner @ref="DownloadingSpinner" Label="Downloading Report Please Wait....." Size="50"></SfSpinner>
        </div>
        @if (!string.IsNullOrEmpty(InputModel.Response))
        {
            <div class="col col-md-12" style="margin-top:10px;">
                <div class="alert alert-success">@InputModel.Response</div>
            </div>
        }

    </div>

    <div class="row" style="margin-bottom:10px;">
        @if (Downloadreport == false)
        {
            <div class="col col-md-12">
                <button @onclick="@OnSearchSubmit" class="btn btn-success" data-ripple="true" style="margin-right:10px;">Download Report</button>
                <button @onclick="@ClearSearchBtnClick" class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Clear Search</button>
            </div>
        }

    </div>
    <ValidationSummary />
</EditForm>

@code {

    private UtilitiesSearchPanel InputModel = new UtilitiesSearchPanel();
    SfSpinner? DownloadingSpinner;
    bool Downloadreport { get; set; } = false;
    string? filename { get; set; } = null;
    List<ViewBscEmployeeDto>? EmployeeData { get; set; }
    List<ViewFinancialYearDto>? FinancialYearData { get; set; }
    List<AppraisalReasonDto>? AppraisalData { get; set; }
    List<BscKpiDto>? KpiData { get; set; }
    List<BscPerspectivesDto>? BscPerspectiveData { get; set; }
    List<PerformanceDescriptorDto>? PerformanceDescriptorData { get; set; }
    List<BscPerformanceMeasurementDto>? BscMeasurementData { get; set; }
    List<BehavioralCompetenciesDto>? CompetenceData { get; set; }
    List<ABscPerspectivesTypeDto>? BscPerspectiveTypeData { get; set; }
    List<ViewBalanceScoreCardTargetSettingReportDto>? TargetSettingReportData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        
    }


    private async Task OnSearchSubmit()
    {
        filename = null;
        Downloadreport = true;
        await DownloadingSpinner.ShowAsync();
        try
        {
            var data = await reportservice.GetAnnualLeaveRoaster(InputModel);
            if (data.Count > 0)
            {
                using (ExcelEngine excelEngine = new ExcelEngine())
                {
                    IApplication application = excelEngine.Excel;
                    application.DefaultVersion = ExcelVersion.Excel2013;
                    IWorkbook workbook = application.Workbooks.Create(1);
                    IWorksheet worksheet = workbook.Worksheets[0];
                    worksheet.Name = "Annual Leave Roaster Report";

                    #region Styles
                    var headerStyle = workbook.Styles.Add("headerStyle");

                    headerStyle.BeginUpdate();
                    headerStyle.Color = Syncfusion.Drawing.Color.Black;
                    headerStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                    headerStyle.Font.Bold = true;
                    headerStyle.Font.FontName = "Arial";
                    headerStyle.Font.Size = 8f;
                    headerStyle.Font.Color = ExcelKnownColors.White;

                    headerStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    headerStyle.Borders.Color = ExcelKnownColors.White;
                    headerStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    headerStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    headerStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;

                    headerStyle.WrapText = true;

                    headerStyle.EndUpdate();

                    var Style = workbook.Styles.Add("bodyStyle");

                    Style.BeginUpdate();
                    Style.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                    Style.VerticalAlignment = ExcelVAlign.VAlignTop;
                    Style.Font.Bold = false;
                    Style.Font.FontName = "Arial";
                    Style.Font.Size = 8f;
                    Style.Font.Color = ExcelKnownColors.Black;
                    Style.WrapText = true;
                    Style.Borders.Color = ExcelKnownColors.Black;
                    Style.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                    Style.EndUpdate();


                    var CategoryStyle = workbook.Styles.Add("CategoryStyle");

                    CategoryStyle.BeginUpdate();
                    CategoryStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 204, 0);
                    CategoryStyle.Font.Bold = true;
                    CategoryStyle.Font.FontName = "Arial";
                    CategoryStyle.Font.Size = 20f;
                    CategoryStyle.Font.Color = ExcelKnownColors.Brown;
                    CategoryStyle.WrapText = true;
                    CategoryStyle.Borders.Color = ExcelKnownColors.White;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.EndUpdate();

                    var DivisionStyle = workbook.Styles.Add("DivisionStyle");

                    DivisionStyle.BeginUpdate();
                    DivisionStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    DivisionStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 0, 0); //RED
                    DivisionStyle.Font.Bold = true;
                    DivisionStyle.Font.FontName = "Arial";
                    DivisionStyle.Font.Size = 8f;
                    DivisionStyle.Font.Color = ExcelKnownColors.White;
                    DivisionStyle.WrapText = true;
                    DivisionStyle.Borders.Color = ExcelKnownColors.White;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.EndUpdate();

                    #endregion

                    int row = 1;
                    worksheet.Range["A" + row].Text = "Annual Leave Roaster Report";
                    worksheet.Range["A" + row + ":V" + row].CellStyle = CategoryStyle;
                    worksheet.Range["A" + row + ":V" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    worksheet.Range["A" + row + ":V" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                    worksheet.Range["A" + row].RowHeight = 30;
                    worksheet.Range["A" + row + ":V" + row].Merge();
                    row++;

                    //FILTERS SEARCHED BY
                    row++;
                    row++;

                    worksheet.Range[row, 1].Text = "#";
                    worksheet.Range[row, 1].CellStyle = headerStyle;
                    worksheet.Range[row, 1].ColumnWidth = 5;
                    worksheet.Range[row, 1].WrapText = true;

                    worksheet.Range[row, 2].Text = "Name";
                    worksheet.Range[row, 2].CellStyle = headerStyle;
                    worksheet.Range[row, 2].ColumnWidth = 20;
                    worksheet.Range[row, 2].WrapText = true;

                    worksheet.Range[row, 3].Text = "Department";
                    worksheet.Range[row, 3].CellStyle = headerStyle;
                    worksheet.Range[row, 3].ColumnWidth = 20;
                    worksheet.Range[row, 3].WrapText = true;

                    worksheet.Range[row, 4].Text = "Position";
                    worksheet.Range[row, 4].CellStyle = headerStyle;
                    worksheet.Range[row, 4].ColumnWidth = 20;
                    worksheet.Range[row, 4].WrapText = true;

                    worksheet.Range[row, 5].Text = "Carried Forward from Previous Year";
                    worksheet.Range[row, 5].CellStyle = headerStyle;
                    worksheet.Range[row, 5].ColumnWidth = 20;
                    worksheet.Range[row, 5].WrapText = true;

                    worksheet.Range[row, 6].Text = "Annual Leave For Current Year";
                    worksheet.Range[row, 6].CellStyle = headerStyle;
                    worksheet.Range[row, 6].ColumnWidth = 20;
                    worksheet.Range[row, 6].WrapText = true;

                    worksheet.Range[row, 7].Text = "Total Leave Days";
                    worksheet.Range[row, 7].CellStyle = headerStyle;
                    worksheet.Range[row, 7].ColumnWidth = 20;
                    worksheet.Range[row, 7].WrapText = true;

                    worksheet.Range[row, 8].Text = "Jan";
                    worksheet.Range[row, 8].CellStyle = headerStyle;
                    worksheet.Range[row, 8].ColumnWidth = 20;
                    worksheet.Range[row, 8].WrapText = true;

                    worksheet.Range[row, 9].Text = "Feb";
                    worksheet.Range[row, 9].CellStyle = headerStyle;
                    worksheet.Range[row, 9].ColumnWidth = 20;
                    worksheet.Range[row, 9].WrapText = true;

                    worksheet.Range[row, 10].Text = "Mar";
                    worksheet.Range[row, 10].CellStyle = headerStyle;
                    worksheet.Range[row, 10].ColumnWidth = 20;
                    worksheet.Range[row, 10].WrapText = true;

                    worksheet.Range[row, 11].Text = "Apr";
                    worksheet.Range[row, 11].CellStyle = headerStyle;
                    worksheet.Range[row, 11].ColumnWidth = 20;
                    worksheet.Range[row, 11].WrapText = true;

                    worksheet.Range[row, 12].Text = "May";
                    worksheet.Range[row, 12].CellStyle = headerStyle;
                    worksheet.Range[row, 12].ColumnWidth = 20;
                    worksheet.Range[row, 12].WrapText = true;

                    worksheet.Range[row, 13].Text = "Jun";
                    worksheet.Range[row, 13].CellStyle = headerStyle;
                    worksheet.Range[row, 13].ColumnWidth = 20;
                    worksheet.Range[row, 13].WrapText = true;

                    worksheet.Range[row, 14].Text = "Jul";
                    worksheet.Range[row, 14].CellStyle = headerStyle;
                    worksheet.Range[row, 14].ColumnWidth = 20;
                    worksheet.Range[row, 14].WrapText = true;

                    worksheet.Range[row, 15].Text = "Aug";
                    worksheet.Range[row, 15].CellStyle = headerStyle;
                    worksheet.Range[row, 15].ColumnWidth = 20;
                    worksheet.Range[row, 15].WrapText = true;

                    worksheet.Range[row, 16].Text = "Sep";
                    worksheet.Range[row, 16].CellStyle = headerStyle;
                    worksheet.Range[row, 16].ColumnWidth = 20;
                    worksheet.Range[row, 16].WrapText = true;

                    worksheet.Range[row, 17].Text = "Oct";
                    worksheet.Range[row, 17].CellStyle = headerStyle;
                    worksheet.Range[row, 17].ColumnWidth = 20;
                    worksheet.Range[row, 17].WrapText = true;

                    worksheet.Range[row, 18].Text = "Nov";
                    worksheet.Range[row, 18].CellStyle = headerStyle;
                    worksheet.Range[row, 18].ColumnWidth = 20;
                    worksheet.Range[row, 18].WrapText = true;

                    worksheet.Range[row, 19].Text = "Dec";
                    worksheet.Range[row, 19].CellStyle = headerStyle;
                    worksheet.Range[row, 19].ColumnWidth = 20;
                    worksheet.Range[row, 19].WrapText = true;

                    worksheet.Range[row, 20].Text = "Total Utilised Leave Days";
                    worksheet.Range[row, 20].CellStyle = headerStyle;
                    worksheet.Range[row, 20].ColumnWidth = 20;
                    worksheet.Range[row, 20].WrapText = true;

                    worksheet.Range[row, 21].Text = "Balance of Leave Days";
                    worksheet.Range[row, 21].CellStyle = headerStyle;
                    worksheet.Range[row, 21].ColumnWidth = 20;
                    worksheet.Range[row, 21].WrapText = true;

                    worksheet.Range[row, 22].Text = "Narration By Serial Number";
                    worksheet.Range[row, 22].CellStyle = headerStyle;
                    worksheet.Range[row, 22].ColumnWidth = 20;
                    worksheet.Range[row, 22].WrapText = true;

                    row++;
                    int count = 1;

                    //foreach (var item in data)
                    //{
                    //    worksheet.Range[row, 1].Text = count.ToString();
                    //    worksheet.Range[row, 2].Text = item.EmployeeLeaveNo;
                    //    worksheet.Range[row, 3].Text = item.EmployeeDetails;
                    //    worksheet.Range[row, 3].WrapText = true;
                    //    worksheet.Range[row, 4].Text = item.DepartmentDescription;
                    //    worksheet.Range[row, 4].WrapText = true;
                    //    worksheet.Range[row, 5].Text = item.LeaveTypeDescription;
                    //    if (item.ScheduledStartDate.HasValue)
                    //    {
                    //        worksheet.Range[row, 6].Text = item.ScheduledStartDate.Value.ToString("dd/MM/yyyy");
                    //    }

                    //    if (item.ScheduledEndDate.HasValue)
                    //    {
                    //        worksheet.Range[row, 7].Text = item.ScheduledEndDate.Value.ToString("dd/MM/yyyy");
                    //    }

                    //    if (item.NoDaysAppliedFor.HasValue)
                    //    {
                    //        worksheet.Range[row, 8].Number = item.NoDaysAppliedFor.Value;
                    //    }

                    //    worksheet.Range[row, 9].Text = item.SupervisorFullName;
                    //    if (item.SupervisorRecommendationDate.HasValue)
                    //    {
                    //        worksheet.Range[row, 10].Text = item.SupervisorRecommendationDate.Value.ToString("dd/MM/yyyy");
                    //    }
                    //    worksheet.Range[row, 11].Text = item.HODFullName;
                    //    if (item.HODRecommendationDate.HasValue)
                    //    {
                    //        worksheet.Range[row, 12].Text = item.HODRecommendationDate.Value.ToString("dd/MM/yyyy");
                    //    }
                    //    worksheet.Range[row, 13].Text = item.CHROFullName;
                    //    if (item.CHROApprovalDate.HasValue)
                    //    {
                    //        worksheet.Range[row, 14].Text = item.CHROApprovalDate.Value.ToString("dd/MM/yyyy");
                    //    }
                    //    worksheet.Range[row, 15].Text = item.LeaveApprovalStatus;
                    //    worksheet.Range[row, 15].WrapText = true;
                    //    row += 1;
                    //    count++;
                    //}


                    MemoryStream ms = new MemoryStream();
                    // Save and close the document.
                    workbook.SaveAs(ms);
                    //Reset the memory stream position.
                    ms.Position = 0;
                    string _filename = "Annual Leave Roaster Report.xlsx";
                    filename = _filename;
                    JS.InvokeAsync<object>("saveAsFile", filename, Convert.ToBase64String(ms.ToArray()));
                    ms.Dispose();
                    workbook.Close();
                    Downloadreport = false;
                    InputModel.Response = "Report Downloaded Successfully";
                }
            }
            else
            {
                InputModel.Response = "There were no records found that match the given search parameters";
                Downloadreport = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString());
        }
        finally
        {
            await DownloadingSpinner.HideAsync();
            StateHasChanged();
        }
    }

    private void ClearSearchBtnClick()
    {
        InputModel = new UtilitiesSearchPanel();
    }
}
