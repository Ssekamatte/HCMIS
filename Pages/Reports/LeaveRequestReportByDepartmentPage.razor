@page "/LeaveRequestReportByDepartmentPage"
@using HCMIS.Data;
@using HCMIS.Model;
@using HCMIS.SHARED.Data;
@using HCMIS.Interface;
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings
@inject IAuthenticationService AuthService;
@using HCMIS.SHARED.Models;
@using Syncfusion.XlsIO;
@using System.Text.Json;
@inject IReportService reportservice;
@inject IToastService toastService;
@inject Microsoft.JSInterop.IJSRuntime JS;
@inject IUtilityRepository UtilityRepo;

<style>
    .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
        stroke: green;
    }
</style>

<BreadCrumbPage Module="HCMIS" Submodule="LEAVE REQUEST REPORT - BY DEPARTMENT" />

<EditForm Model="@InputModel" OnValidSubmit="@OnSearchSubmit">
    <DataAnnotationsValidator/>
    <div class="row" style="margin-bottom:10px;">

        <div class="col col-md-3">
            <p>Employee</p>
            <SfMultiSelect @bind-Value="@InputModel.Employeeid" TValue="int?[]" 
            TItem="ViewEmployeeDropDown" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" 
            Mode="@VisualMode.CheckBox" DataSource="@EmployeeData" ShowSelectAll="true" EnableSelectionOrder="true" 
            ShowDropDownIcon="true" FilterBarPlaceholder="Employee" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" Enabled="EmployeeDD">
                <MultiSelectFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>

        @*<div class="col col-md-3">
            <p>Gender</p>
            <SfMultiSelect @bind-Value="@InputModel.GenderId" TValue="int?[]" TItem="AGender" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@GenderData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Gender" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(AGender.GenderId)" Text="@nameof(AGender.GenderDesc)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>*@
        <div class="col col-md-3">
            <p>Leave Type</p>
            <SfMultiSelect @bind-Value="@InputModel.LeaveTypeId" TValue="int?[]" TItem="ALeaveType" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@LeaveTypeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Leave Type" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ALeaveType.LeaveTypeId)" Text="@nameof(ALeaveType.LeaveTypeDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="col col-md-3">
            <p>Department</p>
            <SfMultiSelect @bind-Value="@InputModel.DepartmentId" 
                           TValue="int?[]" TItem="ADepartment" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox"
                           DataSource="@DepartmentData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true"
                           FilterBarPlaceholder="Search Pillar" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ADepartment.DepartmentId)" Text="@nameof(ADepartment.DepartmentDescription)"></MultiSelectFieldSettings>
                <MultiSelectEvents TValue="int?[]" TItem="ADepartment" ValueChange="OnDepartmentChange"></MultiSelectEvents>
            </SfMultiSelect>

        </div>
        <div class="col col-md-3">
            <p>Job Title</p>
            <SfMultiSelect @bind-Value="@InputModel.JobTitleId" Query="@IndicatorQuery" TValue="int?[]" TItem="AJobTitle" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@JobTitleData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Job Title" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" Enabled="JobTitleDD">
                <MultiSelectFieldSettings Value="@nameof(AJobTitle.JobTitleId)" Text="@nameof(AJobTitle.JobTitleDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>

        <div class="col-md-4">
            <p>Commencement Date Range</p>
            <div class="row">
                <div class="col-md-5" style="margin-left: -30px;">
                    <SfDatePicker @bind-Value="@(InputModel.StartDate)" AllowEdit="false" Enabled="true" Placeholder="Start Date" FloatLabelType="FloatLabelType.Never" Format="dd/MM/yyyy" Width="150px"></SfDatePicker>
                </div>
                <div class="col-md-5" style="margin-left: 30px;">
                    <SfDatePicker @bind-Value="@(InputModel.EndDate)" AllowEdit="false" Enabled="true" Placeholder="End Date" FloatLabelType="FloatLabelType.Never" Format="dd/MM/yyyy" Width="150px"></SfDatePicker>
                </div>
            </div>
        </div>

        @if (Downloadreport == false)
        {
            <div class="col col-md-12" style="margin-top:10px;">
                <button @onclick="@OnSearchSubmit" class="btn btn-success" data-ripple="true" style="margin-right:10px;">Download Report</button>
                <button @onclick="@ClearSearchBtnClick" class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Clear Search</button>
            </div>
        }

        <div class="form-group col-md-12">
            <SfSpinner @ref="DownloadingSpinner" Label="Downloading Report Please Wait....." Size="50"></SfSpinner>
        </div>

        @if (!string.IsNullOrEmpty(InputModel.Response))
        {
            <div class="col col-md-12" style="margin-top:10px;">
                <div class="alert alert-success">@InputModel.Response</div>
            </div>
        }
    </div>
    <ValidationSummary />
</EditForm>


@code {
    private UtilitiesSearchPanel InputModel = new UtilitiesSearchPanel();
    SfSpinner? DownloadingSpinner;
    bool Downloadreport { get; set; } = false;
    string? filename { get; set; } = null;
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<AGender>? GenderData { get; set; }
    List<ADepartment>? DepartmentData { get; set; }
    List<AJobTitle>? JobTitleData { get; set; }
    List<ALeaveType>? LeaveTypeData { get; set; }
    List<ALeaveApprovalStatus>? ApprovalStatusData { get; set; }
    private string? NHCCLogo { get; set; }
    private string? NHCCLogoName { get; set; }
    LoginResultModel? Credentials { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    public bool EmployeeDD = true;
    public bool DepartmentDD = true;
    public bool JobTitleDD = false;
    Query? IndicatorQuery { get; set; }
    string _textemployee = string.Empty;
    string _textleavetype = string.Empty;
    int _numericvalue = 0;
    List<ViewTimeandAttendanceSummary>? AttendanceData { get; set; }
    List<AttendanceDaysAccounting>? AccountingDaysData { get; set; }
    private string? JMSLogo { get; set; }
    private string? JMSLogoName { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var isAuthenticated = await AuthService.CheckAuthenticationStatus();
        if (isAuthenticated == false)
        {
            Navigation.NavigateTo("/LoginPage", true);
        }
        else
        {
            Credentials = await AuthService.GetUserCredentials();

            List<Task> t = new List<Task>();

            t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetEmployeeDD");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(content, _options);
                    }
                }));

            t.Add(Task.Run(async () =>
            {
                var responsegender = await Http.GetAsync($"Utilities/GetGender");
                if (responsegender.IsSuccessStatusCode)
                {
                    var contentemployeegender = await responsegender.Content.ReadAsStringAsync();
                    GenderData = JsonSerializer.Deserialize<List<AGender>>(contentemployeegender, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var response = await Http.GetAsync($"Utilities/GetDepartment");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(content, _options);
                }
            }));

            t.Add(Task.Run(async () =>
           {
               var response = await Http.GetAsync($"Utilities/GetLeaveType");
               if (response.IsSuccessStatusCode)
               {
                   var content = await response.Content.ReadAsStringAsync();
                   LeaveTypeData = JsonSerializer.Deserialize<List<ALeaveType>>(content, _options);
               }
           }));

            t.Add(Task.Run(async () =>
                 {
                     var response = await Http.GetAsync($"Utilities/GetLeaveApprovalStatus");
                     if (response.IsSuccessStatusCode)
                     {
                         var content = await response.Content.ReadAsStringAsync();
                         ApprovalStatusData = JsonSerializer.Deserialize<List<ALeaveApprovalStatus>>(content, _options);
                     }
                 }));

            t.Add(Task.Run(async () =>
                 {
                     var response = await Http.GetAsync($"Utilities/GetJobTitle");
                     if (response.IsSuccessStatusCode)
                     {
                         var content = await response.Content.ReadAsStringAsync();
                         JobTitleData = JsonSerializer.Deserialize<List<AJobTitle>>(content, _options);
                     }
                 }));

            t.Add(Task.Run(async () =>
               {
                   AttendanceData = await reportservice.GetAttendanceData(InputModel);
               }));

            t.Add(Task.Run(async () =>
                {
                    AccountingDaysData = await reportservice.GetAttendanceDaysAccountingData(InputModel);
                }));

            Task _t = Task.WhenAll(t);
            await _t;

        }
    }

    private void OnDepartmentChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            JobTitleDD = true;
            IndicatorQuery = new Query();
            List<WhereFilter> filterList = new List<WhereFilter>();
            foreach (var item in args.Value)
            {
                filterList.Add(new WhereFilter() { Field = "DepartmentId", Operator = "equal", value = item, IgnoreCase = true });
            }

            var orWhere = WhereFilter.Or(filterList);
            IndicatorQuery = new Query().Where(orWhere);
        }
        else
        {
            IndicatorQuery = new Query();
        }
    }

    private async Task OnSearchSubmit()
    {
        filename = null;
        Downloadreport = true;
        await DownloadingSpinner.ShowAsync();

        try
        {
            var data = await reportservice.GetLeaveRequestDepartmentalReport(InputModel);
            if (data.Count > 0)
            {
                using (ExcelEngine excelEngine = new ExcelEngine())
                {
                    IApplication application = excelEngine.Excel;
                    application.DefaultVersion = ExcelVersion.Excel2013;
                    IWorkbook workbook = application.Workbooks.Create(1);
                    IWorksheet worksheet = workbook.Worksheets[0];
                    worksheet.Name = "Leave Request Report By Department";

                    #region Styles
                    var headerStyle = workbook.Styles.Add("headerStyle");

                    headerStyle.BeginUpdate();
                    headerStyle.Color = Syncfusion.Drawing.Color.Black;
                    headerStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                    headerStyle.Font.Bold = true;
                    headerStyle.Font.FontName = "Arial";
                    headerStyle.Font.Size = 8f;
                    headerStyle.Font.Color = ExcelKnownColors.White;

                    headerStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    headerStyle.Borders.Color = ExcelKnownColors.White;
                    headerStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    headerStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    headerStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;

                    headerStyle.WrapText = true;

                    headerStyle.EndUpdate();

                    var Style = workbook.Styles.Add("bodyStyle");

                    Style.BeginUpdate();
                    Style.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                    Style.VerticalAlignment = ExcelVAlign.VAlignTop;
                    Style.Font.Bold = false;
                    Style.Font.FontName = "Arial";
                    Style.Font.Size = 8f;
                    Style.Font.Color = ExcelKnownColors.Black;
                    Style.WrapText = true;
                    Style.Borders.Color = ExcelKnownColors.Black;
                    Style.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                    Style.EndUpdate();


                    var CategoryStyle = workbook.Styles.Add("CategoryStyle");

                    CategoryStyle.BeginUpdate();
                    CategoryStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 204, 0);
                    CategoryStyle.Font.Bold = true;
                    CategoryStyle.Font.FontName = "Arial";
                    CategoryStyle.Font.Size = 20f;
                    CategoryStyle.Font.Color = ExcelKnownColors.Brown;
                    CategoryStyle.WrapText = true;
                    CategoryStyle.Borders.Color = ExcelKnownColors.White;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.EndUpdate();

                    var DivisionStyle = workbook.Styles.Add("DivisionStyle");

                    DivisionStyle.BeginUpdate();
                    DivisionStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    DivisionStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 0, 0); //RED
                    DivisionStyle.Font.Bold = true;
                    DivisionStyle.Font.FontName = "Arial";
                    DivisionStyle.Font.Size = 8f;
                    DivisionStyle.Font.Color = ExcelKnownColors.White;
                    DivisionStyle.WrapText = true;
                    DivisionStyle.Borders.Color = ExcelKnownColors.White;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.EndUpdate();

                    #endregion

                    // #region Logo

                    // worksheet.Range["A1"].ColumnWidth = 9;
                    // worksheet.Range["A1:A2"].Merge();

                    // var images = await UtilityRepo.GetLocalLogos();
                    // byte[]? _imagebyte = null;
                    // if (images != null && images.Count > 0)
                    // {
                    //     var JMS = images.FirstOrDefault(o => o.ImageName.Contains("logonhcc"));
                    //     if (JMS != null)
                    //     {

                    //         JMSLogo = JMS.ImageString;
                    //         JMSLogoName = JMS.ImageName;
                    //         if (!string.IsNullOrEmpty(JMS.ImageString))
                    //         {
                    //             var a = JMS.ImageString.Split(";base64,");
                    //             _imagebyte = Convert.FromBase64String(a[1]);
                    //         }

                    //     }
                    // }
                    // if (_imagebyte != null && _imagebyte.Length > 0)
                    // {
                    //     MemoryStream _ms = new MemoryStream(_imagebyte);

                    //     IPictureShape shape = worksheet.Pictures.AddPicture(1, 1, _ms);
                    //     //Re-sizing a Picture
                    //     shape.Height = 60;
                    //     shape.Width = 60;
                    //     //shape.IsSizeWithCell = true;
                    //     //shape.IsMoveWithCell = true;
                    //     shape.Left = 5;
                    //     shape.Top = 2;
                    // }
                    // #endregion Logo

                    // worksheet.Range["B1"].Text = "NHCC";
                    // worksheet.Range["B1"].CellStyle = CategoryStyle;
                    // worksheet.Range["B1"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                    // worksheet.Range["B1"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;
                    // worksheet.Range["B1"].RowHeight = 30;
                    // worksheet.Range["B1:P1"].Merge();

                    // worksheet.Range["B2"].Text = "Leave Request Report By Department";
                    // worksheet.Range["B2"].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(71, 44, 76);
                    // worksheet.Range["B2"].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.White;
                    // worksheet.Range["B2"].CellStyle.Font.FontName = "cambria";
                    // worksheet.Range["B2"].CellStyle.Font.Size = 18;
                    // worksheet.Range["B2:P2"].Merge();

                    var _data = (from d in data
                                 join desc in DepartmentData
                                 on d.DepartmentId equals desc.DepartmentId
                                 select new
                                 {
                                     d.DepartmentId,
                                     desc.DepartmentDescription
                                 })
                    .Distinct()
                    .ToList();

                    var orderedData = _data.OrderBy(d => d.DepartmentDescription).ToList();

                    for (var i = 0; i <= (orderedData.Count - 1); i++)
                    {

                        string Pillarname = "Sheet 1";
                        if (!string.IsNullOrEmpty(orderedData[i].DepartmentDescription) && orderedData[i].DepartmentDescription.Contains(":"))
                        {
                            var a = orderedData[i].DepartmentDescription.Split(":");
                            Pillarname = a[1].Replace("/", ""); ;
                        }
                        else if (!string.IsNullOrEmpty(orderedData[i].DepartmentDescription))
                        {
                            Pillarname = orderedData[i].DepartmentDescription.Replace("/", ""); ;
                        }
                        if (i == 0)
                        {
                            worksheet = workbook.Worksheets[0];
                        }
                        else
                        {
                            if (workbook.Worksheets != null)
                            {
                                //Pillarname = $"Sheet {workbook.Worksheets.Count+1}";
                                workbook.Worksheets.Create(Pillarname);
                                worksheet = workbook.Worksheets[i];
                            }
                            else
                            {
                                Pillarname = "Error Sheet";
                            }

                        }
                        var mdata = data.Where(o => o.DepartmentId == orderedData[i].DepartmentId).ToList();

                        CreateWorkSheet(workbook, worksheet, mdata, Pillarname);

                    }

                    MemoryStream ms = new MemoryStream();
                    // Save and close the document.
                    workbook.SaveAs(ms);
                    //Reset the memory stream position.
                    ms.Position = 0;
                    string _filename = "Leave Request Report By Department.xlsx";
                    filename = _filename;
                    JS.InvokeAsync<object>("saveAsFile", filename, Convert.ToBase64String(ms.ToArray()));
                    ms.Dispose();
                    workbook.Close();
                    Downloadreport = false;
                    InputModel.Response = "Report Downloaded Successfully";
                }
            }
            else
            {
                InputModel.Response = "There were no records found that match the given search parameters";
                Downloadreport = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString());
        }
        finally
        {
            await DownloadingSpinner.HideAsync();
            StateHasChanged();
        }
    }

    private void ClearSearchBtnClick()
    {
        InputModel = new UtilitiesSearchPanel();
    }

    private async void CreateWorkSheet(IWorkbook workbook, IWorksheet worksheet, List<ViewEmployeeLeaveDepartmentalReport> data, string name)
    {
        try
        {
            worksheet.Name = name;

            // #region Logo

            // worksheet.Range["A1"].ColumnWidth = 9;
            // worksheet.Range["A1:A2"].Merge();

            // var images = await UtilityRepo.GetLocalLogos();
            // byte[]? _imagebyte = null;
            // if (images != null && images.Count > 0)
            // {
            //     var JMS = images.FirstOrDefault(o => o.ImageName.Contains("logonhcc"));
            //     if (JMS != null)
            //     {                    
            //         JMSLogo = JMS.ImageString;
            //         JMSLogoName = JMS.ImageName;
                    
            //         if (!string.IsNullOrEmpty(JMS.ImageString))
            //         {
            //             var a = JMS.ImageString.Split(";base64,");
            //             _imagebyte = Convert.FromBase64String(a[1]);
            //         }

            //     }
            // }
            // if (_imagebyte != null && _imagebyte.Length > 0)
            // {
            //     toastService.ShowError("Into image byte");
            //     MemoryStream _ms = new MemoryStream(_imagebyte);

            //     IPictureShape shape = worksheet.Pictures.AddPicture(1, 1, _ms);
            //     //Re-sizing a Picture
            //     shape.Height = 60;
            //     shape.Width = 60;
            //     shape.Left = 5;
            //     shape.Top = 2;
            // }
            // #endregion Logo


            worksheet.Range["B1"].Text = "NHCC";
            worksheet.Range["B1"].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(157, 206, 92);
            worksheet.Range["B1"].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.White;
            worksheet.Range["B1"].CellStyle.Font.FontName = "cambria";
            worksheet.Range["B1"].CellStyle.Font.Size = 26;
            worksheet.Range["B1"].CellStyle.Font.Bold = true;
            worksheet.Range["B1:F1"].Merge();

            worksheet.Range["B2"].Text = "Leave Request Report - By Department";
            worksheet.Range["B2"].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(71, 44, 76);
            worksheet.Range["B2"].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.White;
            worksheet.Range["B2"].CellStyle.Font.FontName = "cambria";
            worksheet.Range["B2"].CellStyle.Font.Size = 18;
            worksheet.Range["B2:F2"].Merge();

            int row = 1;

            row++;
            row++;

            int startingRange = row;

            worksheet.Range["B" + row].Text = "Total Records";
            worksheet.Range["B" + row].ColumnWidth = 15;
            worksheet.Range["B" + row].CellStyleName = "headerStyle";

            row++;
            int startrow = row;
            int Endrow = row;

            worksheet.Range["B" + row].Number = data.ToList().Count;
            worksheet.Range["B" + row].CellStyleName = "bodyStyle";

            row = row + 1;

            worksheet.Range[row, 1].Text = "#";
            worksheet.Range[row, 1].CellStyleName = "headerStyle";
            worksheet.Range[row, 1].ColumnWidth = 9;
            worksheet.Range[row, 1].WrapText = true;

            worksheet.Range[row, 2].Text = "Employee";
            worksheet.Range[row, 2].CellStyleName = "headerStyle";
            worksheet.Range[row, 2].ColumnWidth = 20;
            worksheet.Range[row, 2].WrapText = true;

            worksheet.Range[row, 3].Text = "Leave Type";
            worksheet.Range[row, 3].CellStyleName = "headerStyle";
            worksheet.Range[row, 3].ColumnWidth = 20;
            worksheet.Range[row, 3].WrapText = true;

            worksheet.Range[row, 4].Text = "Total Days Taken";
            worksheet.Range[row, 4].CellStyleName = "headerStyle";
            worksheet.Range[row, 4].ColumnWidth = 20;
            worksheet.Range[row, 4].WrapText = true;

            worksheet.Range[row, 5].Text = "Less Days Time and Attendance";
            worksheet.Range[row, 5].CellStyleName = "headerStyle";
            worksheet.Range[row, 5].ColumnWidth = 20;
            worksheet.Range[row, 5].WrapText = true;

            worksheet.Range[row, 6].Text = "Balance Leave Days";
            worksheet.Range[row, 6].CellStyleName = "headerStyle";
            worksheet.Range[row, 6].ColumnWidth = 20;
            worksheet.Range[row, 6].WrapText = true;

            row++;

            int count = 1;

            foreach (var item in data)
            {                

                worksheet.Range[row, 1].Text = count.ToString();
                worksheet.Range[row, 1].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range[row, 1].HorizontalAlignment = ExcelHAlign.HAlignRight;

                if (EmployeeData != null)
                {
                    var _emp = EmployeeData.FirstOrDefault(o => o.Employeeid == item.Employeeid);
                    if (_emp != null && !string.IsNullOrEmpty(_emp.EmployeeDetails))
                    {
                        _textemployee = _emp.EmployeeDetails;
                    }                    
                }

                worksheet.Range[row, 2].Text = _textemployee;
                worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range[row, 2].HorizontalAlignment = ExcelHAlign.HAlignLeft;

                if (LeaveTypeData != null)
                {
                    var _emp = LeaveTypeData.FirstOrDefault(o => o.LeaveTypeId == item.LeaveTypeId);
                    if (_emp != null && !string.IsNullOrEmpty(_emp.LeaveTypeDescription))
                    {
                        _textleavetype = _emp.LeaveTypeDescription;
                    }
                }

                worksheet.Range[row, 3].Text = _textleavetype;
                worksheet.Range[row, 3].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range[row, 3].HorizontalAlignment = ExcelHAlign.HAlignLeft;

                if (item.TotalDaysonLeave.HasValue)
                {
                    worksheet.Range[row, 4].Number = item.TotalDaysonLeave.Value;
                    worksheet.Range[row, 4].VerticalAlignment = ExcelVAlign.VAlignTop;
                    worksheet.Range[row, 4].HorizontalAlignment = ExcelHAlign.HAlignRight;
                }

                //Time and Attendance
                double? _daysunaccountedfor = 0;
                double? _daysaccountedfor = 0;
                double? daysunaccountedfor = 0;

                //Time and Attendance Unaccounted Days
                if (AttendanceData != null)
                {
                    _daysunaccountedfor = AttendanceData.Where(o => o.ReportYearId == item.FinancialYearId && o.HcmisemployeeId == item.Employeeid).Sum(o => Math.Truncate(Convert.ToDouble(o.TotalDaysHrsDueUncountedFor)));

                    worksheet.Range[row, 5].Number = Convert.ToDouble(_daysunaccountedfor);
                    worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;
                    worksheet.Range[row, 5].HorizontalAlignment = ExcelHAlign.HAlignRight;
                }

                //Get Days Accounted For By HR
                if (AccountingDaysData != null)
                {                    
                    _daysaccountedfor = AccountingDaysData.Where(o => o.YearId == item.FinancialYearId && o.Employeeid == item.Employeeid).Sum(o => Math.Truncate(Convert.ToDouble(o.TotalDays)));
                }

                daysunaccountedfor = (_daysunaccountedfor - _daysaccountedfor);

                if (LeaveTypeData != null)
                {
                    var _leavetype = LeaveTypeData.FirstOrDefault(o => o.LeaveTypeId == item.LeaveTypeId);
                    if (_leavetype != null)
                    {
                        //Annual leave,Maternity Leave,Paternity Leave,Compassionate Leave ,Special Leave
                        if (item.LeaveTypeId == 1 || item.LeaveTypeId == 2 || item.LeaveTypeId == 4 || item.LeaveTypeId == 5 || item.LeaveTypeId == 6)
                        {
                            if (item.LeaveTypeId == 1)
                            {
                                _numericvalue = Convert.ToInt32((_leavetype.LeaveDaysPerYear - daysunaccountedfor) - item.TotalDaysonLeave);
                            }
                            else if (item.LeaveTypeId == 2 || item.LeaveTypeId == 4 || item.LeaveTypeId == 5 || item.LeaveTypeId == 6)
                            {
                                _numericvalue = Convert.ToInt32(_leavetype.LeaveDaysPerYear - item.TotalDaysonLeave);
                            }
                            worksheet.Range[row, 6].Number = Convert.ToDouble(_numericvalue);
                        }

                        //Sick Leave ,Study Leave,Official Duty
                        else
                        {
                            worksheet.Range[row, 6].Text = "N/A";
                        }
                    }
                                        
                    worksheet.Range[row, 6].VerticalAlignment = ExcelVAlign.VAlignTop;
                    worksheet.Range[row, 6].HorizontalAlignment = ExcelHAlign.HAlignRight;
                }
                
                row += 1;
                count++;
            }
        }

        catch (Exception ex)
        {
            throw ex;
        }
    }
}
