@page "/BiometricReportPage"
@using HCMIS.Data;
@using HCMIS.Model;
@using HCMIS.SHARED.Data;
@using HCMIS.Interface;
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings
@inject IAuthenticationService AuthService;
@using HCMIS.SHARED.Models;
@using Syncfusion.XlsIO;
@using System.Text.Json;
@inject IReportService reportservice;
@inject IToastService toastService;
@inject Microsoft.JSInterop.IJSRuntime JS;
@inject IUtilityRepository UtilityRepo;

<style>
    .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
        stroke: green;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| Biometric Report - EMPLOYEE
    </li>
</ol>

<EditForm Model="@InputModel" OnValidSubmit="@OnSearchSubmit">
    <DataAnnotationsValidator />
    <div class="row" style="margin-bottom:10px;">

        <div class="col col-md-3">
            <p>Employee</p>
            <SfMultiSelect @bind-Value="@InputModel.Employeeid" TValue="int?[]"
                           TItem="ViewEmployeeDropDown" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                           Mode="@VisualMode.CheckBox" DataSource="@EmployeeData" ShowSelectAll="true" EnableSelectionOrder="true"
                           ShowDropDownIcon="true" FilterBarPlaceholder="Employee" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" Enabled="EmployeeDD">
                <MultiSelectFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>

        @*<div class="col col-md-3">
        <p>Gender</p>
        <SfMultiSelect @bind-Value="@InputModel.GenderId" TValue="int?[]" TItem="AGender" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@GenderData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Gender" FloatLabelType="FloatLabelType.Always" PopupHeight="350px">
        <MultiSelectFieldSettings Value="@nameof(AGender.GenderId)" Text="@nameof(AGender.GenderDesc)"></MultiSelectFieldSettings>
        </SfMultiSelect>
        </div>*@
        <div class="col col-md-3">
            <p>Leave Type</p>
            <SfMultiSelect @bind-Value="@InputModel.LeaveTypeId" TValue="int?[]" TItem="ALeaveType" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@LeaveTypeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Leave Type" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ALeaveType.LeaveTypeId)" Text="@nameof(ALeaveType.LeaveTypeDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="col col-md-3">
            <p>Department</p>
            <SfMultiSelect @bind-Value="@InputModel.DepartmentId" Enabled="DepartmentDD"
                           TValue="int?[]" TItem="ADepartment" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox"
                           DataSource="@DepartmentData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true"
                           FilterBarPlaceholder="Search Department" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ADepartment.DepartmentId)" Text="@nameof(ADepartment.DepartmentDescription)"></MultiSelectFieldSettings>
                <MultiSelectEvents TValue="int?[]" TItem="ADepartment" ValueChange="OnDepartmentChange"></MultiSelectEvents>
            </SfMultiSelect>

        </div>
        <div class="col col-md-3">
            <p>Job Title</p>
            <SfMultiSelect @bind-Value="@InputModel.JobTitleId" Query="@IndicatorQuery" TValue="int?[]" TItem="AJobTitle" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@JobTitleData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Job Title" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" Enabled="JobTitleDD">
                <MultiSelectFieldSettings Value="@nameof(AJobTitle.JobTitleId)" Text="@nameof(AJobTitle.JobTitleDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>

        <div class="col-md-4">
            <p>Commencement Date Range</p>
            <div class="row">
                <div class="col-md-4">
                    <SfDatePicker @bind-Value="@(InputModel.StartDate)" Enabled="true" Placeholder="Start Date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>
                <div class="col-md-4">
                    <SfDatePicker @bind-Value="@(InputModel.EndDate)" Enabled="true" Placeholder="End Date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>
            </div>
        </div>
        @if (Downloadreport == false)
        {
            <div class="col col-md-12" style="margin-top:10px;">
                <button @onclick="@OnSearchSubmit" class="btn btn-success" data-ripple="true" style="margin-right:10px;">Download Report</button>
                <button @onclick="@ClearSearchBtnClick" class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Clear Search</button>
            </div>
        }

        <div class="form-group col-md-12">
            <SfSpinner @ref="DownloadingSpinner" Label="Downloading Report Please Wait....." Size="50"></SfSpinner>
        </div>

        @if (!string.IsNullOrEmpty(InputModel.Response))
        {
            <div class="col col-md-12" style="margin-top:10px;">
                <div class="alert alert-success">@InputModel.Response</div>
            </div>
        }
    </div>
    <ValidationSummary />
</EditForm>


@code {
    private UtilitiesSearchPanel InputModel = new UtilitiesSearchPanel();
    SfSpinner? DownloadingSpinner;
    bool Downloadreport { get; set; } = false;
    string? filename { get; set; } = null;
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<AGender>? GenderData { get; set; }
    List<ADepartment>? DepartmentData { get; set; }
    List<AJobTitle>? JobTitleData { get; set; }
    List<ALeaveType>? LeaveTypeData { get; set; }
    List<ALeaveApprovalStatus>? ApprovalStatusData { get; set; }
    private string? NHCCLogo { get; set; }
    private string? NHCCLogoName { get; set; }
    LoginResultModel? Credentials { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    public bool EmployeeDD { get; set; }
    public bool DepartmentDD { get; set; }
    public bool JobTitleDD = false;
    Query? IndicatorQuery { get; set; }
    string imagepath;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var isAuthenticated = await AuthService.CheckAuthenticationStatus();
        if (isAuthenticated == false)
        {
            Navigation.NavigateTo("/LoginPage", true);
        }
        else
        {
            Credentials = await AuthService.GetUserCredentials();

            List<Task> t = new List<Task>();
            t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetImagePath");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        imagepath = content;
                    }
                }));

            t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetEmployeeDD");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(content, _options);
                    }
                }));

            t.Add(Task.Run(async () =>
            {
                var responsegender = await Http.GetAsync($"Utilities/GetGender");
                if (responsegender.IsSuccessStatusCode)
                {
                    var contentemployeegender = await responsegender.Content.ReadAsStringAsync();
                    GenderData = JsonSerializer.Deserialize<List<AGender>>(contentemployeegender, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var response = await Http.GetAsync($"Utilities/GetDepartment");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(content, _options);
                }
            }));

            t.Add(Task.Run(async () =>
           {
               var response = await Http.GetAsync($"Utilities/GetLeaveType");
               if (response.IsSuccessStatusCode)
               {
                   var content = await response.Content.ReadAsStringAsync();
                   LeaveTypeData = JsonSerializer.Deserialize<List<ALeaveType>>(content, _options);
               }
           }));

            t.Add(Task.Run(async () =>
                 {
                     var response = await Http.GetAsync($"Utilities/GetLeaveApprovalStatus");
                     if (response.IsSuccessStatusCode)
                     {
                         var content = await response.Content.ReadAsStringAsync();
                         ApprovalStatusData = JsonSerializer.Deserialize<List<ALeaveApprovalStatus>>(content, _options);
                     }
                 }));

            t.Add(Task.Run(async () =>
                 {
                     var response = await Http.GetAsync($"Utilities/GetJobTitle");
                     if (response.IsSuccessStatusCode)
                     {
                         var content = await response.Content.ReadAsStringAsync();
                         JobTitleData = JsonSerializer.Deserialize<List<AJobTitle>>(content, _options);
                     }
                 }));


            Task _t = Task.WhenAll(t);
            await _t;

            if (Credentials != null && (!string.IsNullOrEmpty(Credentials.UserRole) &&
            Credentials.UserRole.Contains("Administrator") || Credentials.JobTitleId == 44))
            {
                EmployeeDD = true;
                DepartmentDD = true;
            }
            else
            {
                EmployeeDD = false;
                DepartmentDD = false;

                if (Credentials != null && EmployeeData != null)
                {
                    var _employeedetails = EmployeeData.FirstOrDefault(o => o.Employeeid == Credentials.StaffId);

                    List<int?> _employeeid = new List<int?>();
                    List<int?> _departmentid = new List<int?>();
                    List<int?> _jobtitleid = new List<int?>();

                    _employeeid.Add(Credentials.StaffId);
                    _departmentid.Add(_employeedetails.DepartmentId);
                    _jobtitleid.Add(_employeedetails.JibTitleId);

                    InputModel.Employeeid = _employeeid.ToArray();
                    InputModel.DepartmentId = _departmentid.ToArray();
                    InputModel.JobTitleId = _jobtitleid.ToArray();
                }
            }
        }
    }

    private void OnDepartmentChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            JobTitleDD = true;
            IndicatorQuery = new Query();
            List<WhereFilter> filterList = new List<WhereFilter>();
            foreach (var item in args.Value)
            {
                filterList.Add(new WhereFilter() { Field = "DepartmentId", Operator = "equal", value = item, IgnoreCase = true });
            }

            var orWhere = WhereFilter.Or(filterList);
            IndicatorQuery = new Query().Where(orWhere);
        }
        else
        {
            IndicatorQuery = new Query();
        }
    }

    private async Task OnSearchSubmit()
    {
        filename = null;
        Downloadreport = true;
        await DownloadingSpinner.ShowAsync();

        try
        {
            var data = await reportservice.GetBiometricRawData(InputModel);
            if (data.Count > 0)
            {
                using (ExcelEngine excelEngine = new ExcelEngine())
                {
                    IApplication application = excelEngine.Excel;
                    application.DefaultVersion = ExcelVersion.Excel2013;
                    IWorkbook workbook = application.Workbooks.Create(1);
                    IWorksheet worksheet = workbook.Worksheets[0];
                    worksheet.Name = "Biometric Report";

                    #region Styles
                    var headerStyle = workbook.Styles.Add("headerStyle");

                    headerStyle.BeginUpdate();
                    headerStyle.Color = Syncfusion.Drawing.Color.Black;
                    headerStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                    headerStyle.Font.Bold = true;
                    headerStyle.Font.FontName = "Arial";
                    headerStyle.Font.Size = 8f;
                    headerStyle.Font.Color = ExcelKnownColors.White;

                    headerStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    headerStyle.Borders.Color = ExcelKnownColors.White;
                    headerStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    headerStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    headerStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;

                    headerStyle.WrapText = true;

                    headerStyle.EndUpdate();

                    var Style = workbook.Styles.Add("bodyStyle");

                    Style.BeginUpdate();
                    Style.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                    Style.VerticalAlignment = ExcelVAlign.VAlignTop;
                    Style.Font.Bold = false;
                    Style.Font.FontName = "Arial";
                    Style.Font.Size = 8f;
                    Style.Font.Color = ExcelKnownColors.Black;
                    Style.WrapText = true;
                    Style.Borders.Color = ExcelKnownColors.Black;
                    Style.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                    Style.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                    Style.EndUpdate();


                    var CategoryStyle = workbook.Styles.Add("CategoryStyle");

                    CategoryStyle.BeginUpdate();
                    CategoryStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 204, 0);
                    CategoryStyle.Font.Bold = true;
                    CategoryStyle.Font.FontName = "Arial";
                    CategoryStyle.Font.Size = 20f;
                    CategoryStyle.Font.Color = ExcelKnownColors.Brown;
                    CategoryStyle.WrapText = true;
                    CategoryStyle.Borders.Color = ExcelKnownColors.White;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                    CategoryStyle.EndUpdate();

                    var DivisionStyle = workbook.Styles.Add("DivisionStyle");

                    DivisionStyle.BeginUpdate();
                    DivisionStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    DivisionStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 0, 0); //RED
                    DivisionStyle.Font.Bold = true;
                    DivisionStyle.Font.FontName = "Arial";
                    DivisionStyle.Font.Size = 8f;
                    DivisionStyle.Font.Color = ExcelKnownColors.White;
                    DivisionStyle.WrapText = true;
                    DivisionStyle.Borders.Color = ExcelKnownColors.White;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.None;
                    DivisionStyle.EndUpdate();

                    #endregion
                    worksheet.Range["B1"].AutofitColumns();
                    worksheet.Range["B1:B2"].Merge();


                    //Logo

                    // var basePath = @".\wwwroot\Image";
                    //string basePath = $@"{ hostEnvironment.ContentRootPath }\wwwroot\image";
                    // FileStream imageStream = new FileStream(imagepath + @"/logonhcc.png", FileMode.Open, FileAccess.Read);

                    // FileStream imageStream = new FileStream("~/Image/flags/1x1/ug.svg", FileMode.Open, FileAccess.Read);

                    // IPictureShape shape = worksheet.Pictures.AddPicture(1, 1, imageStream);
                    // //Re-sizing a Picture
                    // shape.Height = 70;
                    // shape.Width = 80;
                    // shape.Left = 40;
                    // shape.Top = 2;

                    //New

                    //Logo

                    int row = 1;
                    worksheet.Range["A" + row].Text = "Biometric Report";
                    worksheet.Range["A" + row + ":O" + row].CellStyle = CategoryStyle;
                    worksheet.Range["A" + row + ":O" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                    worksheet.Range["A" + row + ":O" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                    worksheet.Range["A" + row].RowHeight = 30;
                    worksheet.Range["A" + row + ":O" + row].Merge();
                    row++;


                    //FILTERS SEARCHED BY
                    row++;
                    row++;

                    worksheet.Range[row, 1].Text = "#";
                    worksheet.Range[row, 1].CellStyle = headerStyle;
                    worksheet.Range[row, 1].ColumnWidth = 5;
                    worksheet.Range[row, 1].WrapText = true;

                    worksheet.Range[row, 2].Text = "Name";
                    worksheet.Range[row, 2].CellStyle = headerStyle;
                    worksheet.Range[row, 2].ColumnWidth = 20;
                    worksheet.Range[row, 2].WrapText = true;

                    worksheet.Range[row, 3].Text = "Date";
                    worksheet.Range[row, 3].CellStyle = headerStyle;
                    worksheet.Range[row, 3].ColumnWidth = 20;
                    worksheet.Range[row, 3].WrapText = true;

                    worksheet.Range[row, 4].Text = "Week Day";
                    worksheet.Range[row, 4].CellStyle = headerStyle;
                    worksheet.Range[row, 4].ColumnWidth = 20;
                    worksheet.Range[row, 4].WrapText = true;

                    worksheet.Range[row, 5].Text = "Check In At";
                    worksheet.Range[row, 5].CellStyle = headerStyle;
                    worksheet.Range[row, 5].ColumnWidth = 20;
                    worksheet.Range[row, 5].WrapText = true;

                    worksheet.Range[row, 6].Text = "Check Out At";
                    worksheet.Range[row, 6].CellStyle = headerStyle;
                    worksheet.Range[row, 6].ColumnWidth = 20;
                    worksheet.Range[row, 6].WrapText = true;

                    worksheet.Range[row, 7].Text = "Minutes Worked";
                    worksheet.Range[row, 7].CellStyle = headerStyle;
                    worksheet.Range[row, 7].ColumnWidth = 20;
                    worksheet.Range[row, 7].WrapText = true;

                    row++;
                    int count = 1;

                    var _year = data.Select(o => o.ReportYear ).ToList().Distinct().ToList();
                    var _month = data.Select(o => o.ReportMonth).ToList().Distinct().ToList();
                    var _day = data.Select(o => new { o.DayNamesNo}).ToList().Distinct().ToList();
                    var _employees = data.Select(o => new { o.HcmisemployeeId, o.EmployeeDetails }).ToList().Distinct().ToList();



                    foreach (var y in _year)
                    {
                        foreach (var m in _month)
                        {
                            foreach (var item in _employees)
                            {
                                if (y.HasValue && m.HasValue)
                                {
                                    int ndays = DateTime.DaysInMonth(y.Value, m.Value);
                                    for (int i = 1; i <= ndays; i++)
                                    {
                                        var _data = data.FirstOrDefault(o => o.ReportYear == y && o.ReportMonth == m && o.ReportDay == i && o.HcmisemployeeId == item.HcmisemployeeId);
                                        if (_data != null)
                                        {
                                            worksheet.Range[row, 1].Number = count;

                                            worksheet.Range[row, 2].Text = item.EmployeeDetails;
                                            if (_data.AuthDate.HasValue)
                                            {
                                                worksheet.Range[row, 3].Text = _data.AuthDate.Value.ToString("dd/MM/yyyy");
                                            }



                                            worksheet.Range[row, 4].Text = _data.DayNames;

                                            worksheet.Range[row, 5].Text = _data.CheckIn;

                                            worksheet.Range[row, 6].Text = _data.CheckOut;

                                            if (_data.MinutesWorked.HasValue)
                                            {
                                                worksheet.Range[row, 7].Number = _data.MinutesWorked.Value;
                                            }

                                            if (_data.HoursWorked.HasValue)
                                            {
                                                worksheet.Range[row, 8].Number = _data.HoursWorked.Value;
                                            }
                                        }
                                        else
                                        {
                                            DateTime _date = new DateTime(y.Value, m.Value, i);
                                            string dayname = _date.DayOfWeek.ToString();

                                            worksheet.Range[row, 1].Number = count;

                                            worksheet.Range[row, 2].Text = item.EmployeeDetails;

                                            worksheet.Range[row, 3].Text = _date.ToString("dd/MM/yyyy");

                                            worksheet.Range[row, 4].Text = dayname;

                                            worksheet.Range[row, 5].Text = "-";

                                            worksheet.Range[row, 6].Text = "-";

                                            worksheet.Range[row, 7].Number = 0;

                                            worksheet.Range[row, 8].Number = 0;
                                        }

                                        worksheet.Range[row, 1, row, 8].CellStyle = Style;
                                        row++;
                                        count++;
                                    }

                                    row++;
                                }                                
                            }

                            row++;
                        }
                    }                    

                    MemoryStream ms = new MemoryStream();
                    // Save and close the document.
                    workbook.SaveAs(ms);
                    //Reset the memory stream position.
                    ms.Position = 0;
                    string _filename = "Biometric Report.xlsx";
                    filename = _filename;
                    JS.InvokeAsync<object>("saveAsFile", filename, Convert.ToBase64String(ms.ToArray()));
                    ms.Dispose();
                    workbook.Close();
                    Downloadreport = false;
                    InputModel.Response = "Report Downloaded Successfully";

                }
            }
            else
            {
                InputModel.Response = "There were no records found that match the given search parameters";
                Downloadreport = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString());
        }
        finally
        {
            await DownloadingSpinner.HideAsync();
            StateHasChanged();
        }
    }

    private void ClearSearchBtnClick()
    {
        InputModel = new UtilitiesSearchPanel();
    }

}

