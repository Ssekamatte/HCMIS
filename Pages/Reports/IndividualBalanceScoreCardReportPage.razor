@* <h3>IndividualBalanceScoreCardReportPage</h3> *@
@page "/IndividualBalanceScoreCardReportPage"
@using HCMIS.Data;
@using HCMIS.Model;
@using HCMIS.SHARED.Data;
@using HCMIS.Interface;
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings

@using HCMIS.SHARED.Models;
@using Syncfusion.XlsIO;
@using System.Text.Json;
@inject IReportService reportservice;
@inject IToastService toastService;
@inject Microsoft.JSInterop.IJSRuntime JS;
@inject IAuthenticationService AuthService;
@inject IUtilityRepository UtilityRepo;

<style>
    .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
        stroke: green;
    }
</style>

<BreadCrumbPage Module="HCMIS" Submodule="APPRAISAL REPORT - EMPLOYEE" />

<EditForm Model="@InputModel" OnValidSubmit="@OnSearchSubmit">
    <DataAnnotationsValidator />
    <div class="row" style="margin-bottom:10px;">

        <div class="col col-md-4">
            <p>Employee</p>
            <SfMultiSelect @bind-Value="@InputModel.Employeeid" TValue="int?[]" TItem="ViewEmployeeDropDown" Enabled="EmployeeDD" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@EmployeeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Employee" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></MultiSelectFieldSettings>
            </SfMultiSelect>
            @*<SfMultiSelect 
                @bind-Value="@InputModel.Employeeid" 
                TValue="int?[]" 
                TItem="ViewEmployeeDropDown" 
                AllowFiltering="true" 
                FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" 
                Mode="@VisualMode.CheckBox" 
                DataSource="@EmployeeData" 
                ShowSelectAll="true" 
                EnableSelectionOrder="true" 
                ShowDropDownIcon="true" 
                FilterBarPlaceholder="Employee" 
                FloatLabelType="FloatLabelType.Never" 
                PopupHeight="350px"
                Enabled="EmployeeDD">
                <MultiSelectFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></MultiSelectFieldSettings>
            </SfMultiSelect>*@
        </div>

        <div class="col col-md-4">
            <p>Department</p>
            <SfMultiSelect @bind-Value="@InputModel.DepartmentId"
                           TValue="int?[]" TItem="ADepartment" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox"
                           DataSource="@DepartmentData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true"
                           FilterBarPlaceholder="Search Department" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ADepartment.DepartmentId)" Text="@nameof(ADepartment.DepartmentDescription)"></MultiSelectFieldSettings>
                <MultiSelectEvents TValue="int?[]" TItem="ADepartment" ValueChange="OnDepartmentChange"></MultiSelectEvents>
            </SfMultiSelect>

        </div>

        <div class="col col-md-4">
            <p>Appraisal Reason</p>
            <SfMultiSelect @bind-Value="@InputModel.AppraisalReasonId" TValue="int?[]" TItem="AAppraisalReason" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@AppraisalData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Appraisal Reason" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(AAppraisalReason.AppraisalReasonId)" Text="@nameof(AAppraisalReason.AppraisalReason)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="col col-md-4">
            <p>Financial Year</p>
            <SfMultiSelect @bind-Value="@InputModel.FinancialYearId" TValue="int?[]" TItem="AFinancialYear" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@FinancialYearData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Year" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(AFinancialYear.Id)" Text="@nameof(AFinancialYear.FinancialYear)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="col col-md-4">
            <p>Perspective</p>
            <SfMultiSelect @bind-Value="@InputModel.BscPerspectiveTypeId" TValue="int?[]" TItem="ABscPerspectivesType" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Mode="@VisualMode.CheckBox" DataSource="@BscPerspectiveTypeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Employee" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                <MultiSelectFieldSettings Value="@nameof(ABscPerspectivesType.BscPerspectiveTypeId)" Text="@nameof(ABscPerspectivesType.BscPerspectiveTypeDescription)"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>

        <div class="col-md-4">
            <p>Select Period<span style="color:red;">*</span></p>
            <div class="row">
                <div class="col-md-5" style="margin-left: -30px;">
                    <SfDatePicker @bind-Value="@(InputModel.StartDate)" AllowEdit="false" Enabled="true" Placeholder="Start Date" FloatLabelType="FloatLabelType.Never" Format="dd-MMM-yy" Width="150px"></SfDatePicker>
                </div>
                <div class="col-md-5" style="margin-left: 30px;">
                    <SfDatePicker @bind-Value="@(InputModel.EndDate)" AllowEdit="false" Enabled="true" Placeholder="End Date" FloatLabelType="FloatLabelType.Never" Format="dd-MMM-yy" Width="150px"></SfDatePicker>
                </div>
            </div>
        </div>

        <div class="form-group col-md-12">
            <SfSpinner @ref="DownloadingSpinner" Label="Downloading Report Please Wait....." Size="50"></SfSpinner>
        </div>

        @*<MudProgressLinear Color="Color.Tertiary" Size="Size.Large" Value="@PrecentageCompletion" Style="margin-top:10px;">
            <MudText Typo="Typo.subtitle1" Color="Color.Primary" Style="color:white;">
                <b>@PrecentageCompletion.ToString() %</b>
            </MudText>
        </MudProgressLinear>*@

        @if (!string.IsNullOrEmpty(InputModel.Response))
        {
            <div class="col col-md-12" style="margin-top:10px;">
                <MudAlert Severity="Severity.Info" Elevation="3">
                    @InputModel.Response
                </MudAlert>
            </div>
        }

    </div>

    <div class="row" style="margin-bottom:10px;">
        @if (Downloadreport == false)
        {
            <div class="col col-md-12">
                <button @onclick="@OnSearchSubmit" class="btn btn-success" data-ripple="true" style="margin-right:10px;">Download Report</button>
                <button @onclick="@ClearSearchBtnClick" class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Clear Search</button>
            </div>
        }

    </div>
    <ValidationSummary />
</EditForm>

@code {
    private UtilitiesSearchPanel InputModel = new UtilitiesSearchPanel();
    SfSpinner? DownloadingSpinner;
    bool Downloadreport { get; set; } = false;
    string? filename { get; set; } = null;
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<AFinancialYear>? FinancialYearData { get; set; }
    List<AAppraisalReason>? AppraisalData { get; set; }
    List<ViewABscKpidetails>? KpiData { get; set; }
    List<ABscPerspectives>? BscPerspectiveData { get; set; }
    List<APerformanceDescriptor>? PerformanceDescriptorData { get; set; }
    List<ABscPerformanceMeasurement>? BscMeasurementData { get; set; }
    List<ABehavioralCompetencies>? CompetenceData { get; set; }
    List<ABscPerspectivesType>? BscPerspectiveTypeData { get; set; }
    List<ViewBalanceScoreCardTargetSettingReport>? TargetSettingReportData { get; set; }
    List<AMeasurementMetric>? MeasurementUnitData { get; set; }
    List<ADepartment>? DepartmentData { get; set; }
    List<APerformanceScale>? ScaleData { get; set; }
    LoginResultModel? Credentials { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    public bool EmployeeDD { get; set; }
    double? targetvalue = 0;
    double? behavioralvalue = 0;
    public bool DepartmentDD { get; set; }
    public bool JobTitleDD = false;
    Query? IndicatorQuery { get; set; }
    string imagepath;
    private string? JMSLogo { get; set; }
    private string? JMSLogoName { get; set; }
    List<ViewTargetSettingTotals>? TargetSettingTotalData { get; set; }
    List<ViewBehavioralTotals>? BehavioralTotalData { get; set; }
    List<ViewABscPerspectivesDetail>? PerspectivesDetailData { get; set; }
    double _PrecentageCompletion = 0;

    protected override async Task OnInitializedAsync()
    {
        Credentials = await AuthService.GetUserCredentials();

        List<Task> t = new List<Task>();

        t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetEmployeeDD");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(content, _options);
                    }
                }));

        t.Add(Task.Run(async () =>
        {
            var responsefinyear = await Http.GetAsync($"FinancialYear/list");
            if (responsefinyear.IsSuccessStatusCode)
            {
                var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
                FinancialYearData = JsonSerializer.Deserialize<List<AFinancialYear>>(contentfinyear, _options);
            }
        }));

        t.Add(Task.Run(async () =>
                {
                    var responseappraisal = await Http.GetAsync($"AppraisalReason/GetAppraisalReason");
                    if (responseappraisal.IsSuccessStatusCode)
                    {
                        var contentappraisal = await responseappraisal.Content.ReadAsStringAsync();
                        AppraisalData = JsonSerializer.Deserialize<List<AAppraisalReason>>(contentappraisal, _options);
                    }
                }));

        t.Add(Task.Run(async () =>
                     {
                         var responseKpi = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicatorDetailAll");
                         if (responseKpi.IsSuccessStatusCode)
                         {
                             var contentKpi = await responseKpi.Content.ReadAsStringAsync();
                             KpiData = JsonSerializer.Deserialize<List<ViewABscKpidetails>>(contentKpi, _options);
                         }
                     }));

        t.Add(Task.Run(async () =>
                        {
                            var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
                            if (responsebscperspectivetype.IsSuccessStatusCode)
                            {
                                var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                                BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesType>>(contentbscperspectivetype, _options);
                            }
                        }));

        t.Add(Task.Run(async () =>
                        {
                            var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
                            if (responsemetric.IsSuccessStatusCode)
                            {
                                var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                                MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetric>>(contentmetric, _options);
                            }
                        }));

        t.Add(Task.Run(async () =>
                        {
                            var responseperformancedescriptor = await Http.GetAsync($"PerformanceDescriptor/GetPerformanceDescriptor");
                            if (responseperformancedescriptor.IsSuccessStatusCode)
                            {
                                var contentperformancedescriptor = await responseperformancedescriptor.Content.ReadAsStringAsync();
                                PerformanceDescriptorData = JsonSerializer.Deserialize<List<APerformanceDescriptor>>(contentperformancedescriptor, _options);
                            }
                        }));

        t.Add(Task.Run(async () =>
                        {
                            var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
                            if (responsebscperspectivetype.IsSuccessStatusCode)
                            {
                                var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                                BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesType>>(contentbscperspectivetype, _options);
                            }
                        }));

        t.Add(Task.Run(async () =>
        {
            var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
            if (responsedepartment.IsSuccessStatusCode)
            {
                var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
                DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(contentdepartment, _options);
            }
        }));

        t.Add(Task.Run(async () =>
                {
                    var responsemetric = await Http.GetAsync($"Utilities/GetPerformanceScale");
                    if (responsemetric.IsSuccessStatusCode)
                    {
                        var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                        ScaleData = JsonSerializer.Deserialize<List<APerformanceScale>>(contentmetric, _options);
                    }
                }));

        t.Add(Task.Run(async () =>
                {
                    var responsecompetence = await Http.GetAsync($"BehavioralCompetencies/GetCompetence");
                    if (responsecompetence.IsSuccessStatusCode)
                    {
                        var contentcompetence = await responsecompetence.Content.ReadAsStringAsync();
                        CompetenceData = JsonSerializer.Deserialize<List<ABehavioralCompetencies>>(contentcompetence, _options);
                    }
                }));


        t.Add(Task.Run(async () =>
                {
                    var responsetargettotal = await Http.GetAsync($"BalanceScoreCard/GetTargetTotal");
                    if (responsetargettotal.IsSuccessStatusCode)
                    {
                        var contenttargettotal = await responsetargettotal.Content.ReadAsStringAsync();
                        TargetSettingTotalData = JsonSerializer.Deserialize<List<ViewTargetSettingTotals>>(contenttargettotal, _options);
                    }
                }));

        t.Add(Task.Run(async () =>
        {
            var responsebehavioraltotal = await Http.GetAsync($"BalanceScoreCard/GetBehavioralTotal");
            if (responsebehavioraltotal.IsSuccessStatusCode)
            {
                var contentbehavioraltotal = await responsebehavioraltotal.Content.ReadAsStringAsync();
                BehavioralTotalData = JsonSerializer.Deserialize<List<ViewBehavioralTotals>>(contentbehavioraltotal, _options);
            }
        }));

        //Get Set Perspective Weights on Edit
        var response = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesDetailAll");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            PerspectivesDetailData = JsonSerializer.Deserialize<List<ViewABscPerspectivesDetail>>(content, _options);
        }
        Task _t = Task.WhenAll(t);
        await _t;

        if (Credentials != null && (!string.IsNullOrEmpty(Credentials.UserRole) &&
            Credentials.UserRole.Contains("Administrator") || Credentials.JobTitleId == 44))
        {
            EmployeeDD = true;
            DepartmentDD = true;
        }
        else
        {
            EmployeeDD = false;
            DepartmentDD = false;

            if (Credentials != null && EmployeeData != null)
            {
                var _employeedetails = EmployeeData.FirstOrDefault(o => o.Employeeid == Credentials.StaffId);

                List<int?> _employeeid = new List<int?>();
                List<int?> _departmentid = new List<int?>();
                List<int?> _jobtitleid = new List<int?>();

                _employeeid.Add(Credentials.StaffId);
                _departmentid.Add(_employeedetails.DepartmentId);
                _jobtitleid.Add(_employeedetails.JibTitleId);

                InputModel.Employeeid = _employeeid.ToArray();
                InputModel.DepartmentId = _departmentid.ToArray();
                InputModel.JobTitleId = _jobtitleid.ToArray();
            }
        }
    }

    private void OnDepartmentChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            JobTitleDD = true;
            IndicatorQuery = new Query();
            List<WhereFilter> filterList = new List<WhereFilter>();
            foreach (var item in args.Value)
            {
                filterList.Add(new WhereFilter() { Field = "DepartmentId", Operator = "equal", value = item, IgnoreCase = true });
            }

            var orWhere = WhereFilter.Or(filterList);
            IndicatorQuery = new Query().Where(orWhere);
        }
        else
        {
            IndicatorQuery = new Query();
        }
    }

    private async Task OnSearchSubmit()
    {
        filename = null;
        Downloadreport = true;
        await DownloadingSpinner.ShowAsync();
        try
        {
            var data = await reportservice.GetAppraisal(InputModel);
            var datatarget = await reportservice.GetAppraisalTargetGeneral(InputModel);
            var databehavioral = await reportservice.GetAppraisalBehavioralGeneral(InputModel);
            var datadevelopmentplan = await reportservice.GetDevelopmentPlan(InputModel);
            var dataappraiseecomments = await reportservice.GetAppraiseeComments(InputModel);
            var datasupervisorcomments = await reportservice.GetSupervisorComments(InputModel);
            var datahodcomments = await reportservice.GetHODComments(InputModel);
            var dataceocomments = await reportservice.GetCEOComments(InputModel);

            if (EmployeeData != null)
            {
                var _employeedata = EmployeeData.Where(o => InputModel.Employeeid == null || InputModel.Employeeid.Any(a => a == o.Employeeid)).ToList();
                if (data.Count > 0)
                {
                    using (ExcelEngine excelEngine = new ExcelEngine())
                    {
                        IApplication application = excelEngine.Excel;
                        application.DefaultVersion = ExcelVersion.Excel2013;
                        IWorkbook workbook = application.Workbooks.Create(1);
                        IWorksheet worksheet = workbook.Worksheets[0];
                        // worksheet.PageSetup.Orientation = ExcelPageOrientation.Landscape;
                        // worksheet.PageSetup.PaperSize = ExcelPaperSize.PaperA4;
                        // worksheet.PageSetup.Zoom = 65;
                        // IRange range = worksheet.Range["A13:K13"];
                        // range.Borders.LineStyle = ExcelLineStyle.Thick;
                        // range.Borders.ColorRGB = Syncfusion.Drawing.Color.Black;

                        //Setting the Border as Range
                        // worksheet.Range["G10:I16"].BorderAround();
                        // worksheet.Range["G10:I16"].BorderInside(ExcelLineStyle.Thick, ExcelKnownColors.Red);

                        // worksheet.Range["A13:K80"].BorderAround();
                        // worksheet.Range["A13:K80"].BorderInside(ExcelLineStyle.Thick, ExcelKnownColors.Black);

                        // worksheet.Name = "Employee Appraisal Report.xlsx";

                        #region Styles
                        var headerStyle = workbook.Styles.Add("headerStyle");

                        headerStyle.BeginUpdate();
                        headerStyle.Color = Syncfusion.Drawing.Color.FromArgb(217,225,242); 
                        headerStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        headerStyle.Font.Bold = true;
                        headerStyle.Font.FontName = "Arial";
                        headerStyle.Font.Size = 8f;
                        headerStyle.Font.Color = ExcelKnownColors.Black;

                        headerStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        headerStyle.Borders.Color = ExcelKnownColors.Black;
                        headerStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thick;
                        headerStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thick;
                        headerStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thick;
                        headerStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thick;
                        headerStyle.WrapText = true;

                        headerStyle.EndUpdate();

                        var Style = workbook.Styles.Add("bodyStyle");

                        Style.BeginUpdate();
                        Style.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        Style.VerticalAlignment = ExcelVAlign.VAlignTop;
                        Style.Font.Bold = false;
                        Style.Font.FontName = "Arial";
                        Style.Font.Size = 8f;
                        Style.Font.Color = ExcelKnownColors.Black;
                        Style.WrapText = true;
                        Style.Borders.Color = ExcelKnownColors.Black;
                        Style.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thick;
                        Style.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thick;
                        Style.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thick;
                        Style.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thick;
                        Style.EndUpdate();


                        var CategoryStyle = workbook.Styles.Add("CategoryStyle");

                        CategoryStyle.BeginUpdate();
                        CategoryStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 204, 0);
                        CategoryStyle.Font.Bold = true;
                        CategoryStyle.Font.FontName = "Arial";
                        CategoryStyle.Font.Size = 20f;
                        CategoryStyle.Font.Color = ExcelKnownColors.Brown;
                        CategoryStyle.WrapText = true;
                        CategoryStyle.Borders.Color = ExcelKnownColors.White;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.EndUpdate();

                        var DivisionStyle = workbook.Styles.Add("DivisionStyle");

                        DivisionStyle.BeginUpdate();
                        DivisionStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        DivisionStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 0, 0); //RED
                        DivisionStyle.Font.Bold = true;
                        DivisionStyle.Font.FontName = "Arial";
                        DivisionStyle.Font.Size = 8f;
                        DivisionStyle.Font.Color = ExcelKnownColors.White;
                        DivisionStyle.WrapText = true;
                        DivisionStyle.Borders.Color = ExcelKnownColors.White;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.None;
                        DivisionStyle.EndUpdate();

                        var PerspectiveStyle = workbook.Styles.Add("PerspectiveStyle");

                        PerspectiveStyle.BeginUpdate();
                        PerspectiveStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        PerspectiveStyle.Color = Syncfusion.Drawing.Color.FromArgb(128, 0, 128); //Purple
                        PerspectiveStyle.Font.Bold = true;
                        PerspectiveStyle.Font.FontName = "Arial";
                        PerspectiveStyle.Font.Size = 8f;
                        PerspectiveStyle.Font.Color = ExcelKnownColors.White;
                        PerspectiveStyle.WrapText = true;
                        PerspectiveStyle.Borders.Color = ExcelKnownColors.White;
                        PerspectiveStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.None;
                        PerspectiveStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.None;
                        PerspectiveStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.None;
                        PerspectiveStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.None;
                        PerspectiveStyle.EndUpdate();

                        #endregion



                        var _data = data.Select(o => new { o.Employeeid, o.EmployeeFullName }).ToList().Distinct().ToList();
                        for (var i = 0; i <= (_data.Count - 1); i++)
                        {

                            string Pillarname = "Sheet 1";
                            int? _employid = 0;
                            _employid = _data[i].Employeeid;

                            if (!string.IsNullOrEmpty(_data[i].EmployeeFullName) && _data[i].EmployeeFullName.Contains(":"))
                            {
                                var a = _data[i].EmployeeFullName.Split(":");
                                Pillarname = a[1].Replace("/", "");                                
                            }
                            else if (!string.IsNullOrEmpty(_data[i].EmployeeFullName))
                            {
                                Pillarname = _data[i].EmployeeFullName.Replace("/", ""); 
                            }
                            if (i == 0)
                            {
                                worksheet = workbook.Worksheets[0];
                                worksheet.Name = Pillarname;
                            }
                            else
                            {
                                if (workbook.Worksheets != null)
                                {
                                    //Pillarname = $"Sheet {workbook.Worksheets.Count+1}";
                                    workbook.Worksheets.Create(Pillarname);
                                    worksheet = workbook.Worksheets[i];
                                }
                                else
                                {
                                    Pillarname = "Error Sheet";
                                }

                            }

                            worksheet.PageSetup.Orientation = ExcelPageOrientation.Landscape;
                            worksheet.PageSetup.PaperSize = ExcelPaperSize.PaperA4;
                            worksheet.PageSetup.Zoom = 60;

                            //Borders for Employee Details
                            worksheet.Range["A3:C12"].BorderAround();
                            worksheet.Range["A3:C12"].BorderInside(ExcelLineStyle.Thick, ExcelKnownColors.Black);

                            worksheet.Range["E2:F4"].BorderAround();
                            worksheet.Range["E2:F4"].BorderInside(ExcelLineStyle.Thick, ExcelKnownColors.Black);

                            //Borders for data starting on Section 2
                            worksheet.Range["A13:K80"].BorderAround();
                            worksheet.Range["A13:K80"].BorderInside(ExcelLineStyle.Thick, ExcelKnownColors.Black);

                            //Logo

                            worksheet.Range["A1"].ColumnWidth = 9;
                            worksheet.Range["A1:A2"].Merge();

                            worksheet.Range["H3:I8"].Merge();
                            
                            var images = await UtilityRepo.GetLocalLogos();
                            byte[]? _imagebyte = null;
                            if (images != null && images.Count > 0)
                            {
                                var JMS = images.FirstOrDefault(o => o.ImageName.Contains("logonhcc"));
                                if (JMS != null)
                                {

                                    JMSLogo = JMS.ImageString;
                                    JMSLogoName = JMS.ImageName;
                                    if (!string.IsNullOrEmpty(JMS.ImageString))
                                    {
                                        var a = JMS.ImageString.Split(";base64,");
                                        _imagebyte = Convert.FromBase64String(a[1]);
                                    }

                                }
                            }
                            if (_imagebyte != null && _imagebyte.Length > 0)
                            {
                                MemoryStream _ms = new MemoryStream(_imagebyte);

                                IPictureShape shape = worksheet.Pictures.AddPicture(1, 1, _ms);
                                //Re-sizing a Picture
                                shape.Height = 60;
                                shape.Width = 60;
                                //shape.IsSizeWithCell = true;
                                //shape.IsMoveWithCell = true;
                                shape.Left = 5;
                                shape.Top = 2;
                            }
                            //Logo
                            
                            var mdata = data.Where(o => o.Employeeid == _data[i].Employeeid).ToList();
                            var _datatarget = datatarget.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _databehavioral = databehavioral.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _datadevelopmentplan = datadevelopmentplan.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _dataappraiseecomments = dataappraiseecomments.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _datasupervisorcomments = datasupervisorcomments.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _datahodcomments = datahodcomments.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();
                            var _dataceocomments = dataceocomments.Where(o => mdata.Any(x => x.BalanceScoreCardId == o.BalanceScoreCardId)).ToList();

                            CreateWorkSheet(workbook, worksheet, mdata, datatarget, databehavioral, datadevelopmentplan,
                                dataappraiseecomments, datasupervisorcomments, datahodcomments, dataceocomments, Pillarname, _employid);

                        }

                        MemoryStream ms = new MemoryStream();
                        // Save and close the document.
                        workbook.SaveAs(ms);
                        //Reset the memory stream position.
                        ms.Position = 0;
                        string _filename = "Employee Appraisal Report.xlsx";
                        filename = _filename;
                        JS.InvokeAsync<object>("saveAsFile", filename, Convert.ToBase64String(ms.ToArray()));
                        ms.Dispose();
                        workbook.Close();
                        Downloadreport = false;
                        InputModel.Response = "Report Downloaded Successfully";
                    }
                }

                else
                {
                    InputModel.Response = "There were no records found that match the given search parameters";
                    Downloadreport = false;
                    StateHasChanged();
                }

            }

            else if (EmployeeData == null)
            {
                toastService.ShowWarning("An issue has occurred while dowloading the report. Kindly refresh the system and try again");
            }

            else
            {
                InputModel.Response = "There were no records found that match the given search parameters";
                Downloadreport = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString());
        }
        finally
        {
            await DownloadingSpinner.HideAsync();
            StateHasChanged();
        }
    }

    private void ClearSearchBtnClick()
    {
        InputModel = new UtilitiesSearchPanel();
    }

    private async void CreateWorkSheet(IWorkbook workbook, IWorksheet worksheet, List<ViewBalanceScoreCardReport> data
        , List<BalanceScoreCardTargetSetting> datatarget, List<BalanceScoreCardBehavioral> databehavioral
        , List<BalanceScoreCardTargetDevelopmentPlan> datadevelopmentplan, List<BalanceScoreCardAppraiseeComments> dataappraiseecomments
        , List<BalanceScoreCardSupervisorComments> datasupervisorcomments, List<BalanceScoreCardHodcomments> datahodcomments,
         List<BalanceScoreCardCeocomments> dataceocomments, string name, int? employeeid)
    {
        try
        {
            var _empdetail = EmployeeData.FirstOrDefault(o => o.Employeeid == employeeid);
            
            DateTime? _reviewdate = null;

            var _bscdata = data.FirstOrDefault(o=>o.BalanceScoreCardId == data[0].BalanceScoreCardId);                       

            worksheet.Range["B1"].Text = "NATIONAL HOUSING & CONSTRUCTION COMPANY PERFORMANCE APPRAISAL FORM";
            worksheet.Range["B1"].CellStyleName = "CategoryStyle";
            worksheet.Range["B1"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["B1"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["B1"].RowHeight = 30;
            worksheet.Range["B1:K1"].Merge();

            worksheet.Range["B2"].Text = "SECTION 1. EMPLOYEE PARTICULARS ";
            worksheet.Range["B2"].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(142, 169, 219);
            worksheet.Range["B2"].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.White;
            worksheet.Range["B2"].CellStyle.Font.FontName = "cambria";
            worksheet.Range["B2"].CellStyle.Font.Size = 18;
            worksheet.Range["B2:K2"].Merge();

            int row = 1;

            row++;
            row++;

            @*
            #region Search Parameters

            int startingRange = row;
            worksheet.Range["A" + row].Text = "Search Parameters";
            worksheet.Range["A" + row].CellStyleName = "DivisionStyle";
            worksheet.Range["A" + row + ":K" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A" + row + ":K" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row].RowHeight = 15;
            worksheet.Range["A" + row + ":K" + row].Merge();
            row++;

            //Employee
            worksheet.Range["A" + row].Text = "Employee:";
            worksheet.Range["A" + row].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 204, 0);
            worksheet.Range["A" + row].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.White;
            worksheet.Range["A" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row + ":K" + row].Merge();
            
            //worksheet.Range["A" + row,"B" + row].Merge();

            worksheet.Range[row, 1, row, 11].Merge();
            worksheet.Range[row, 1, row, 11].WrapText = true;
            worksheet.Range[row, 1, row, 11].RowHeight = 19;
            worksheet.Range[row, 1, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(142, 169, 219);
            worksheet.Range[row, 1, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 1, row, 11].CellStyle.Font.FontName = "cambria";
            worksheet.Range[row, 1, row, 11].CellStyle.Font.Size = 18;
            worksheet.Range[row, 1, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

            if (InputModel.Employeeid != null)
            {
                var empdesc = string.Join(", ", EmployeeData.Where(o => InputModel.Employeeid.Any(a => a == o.Employeeid)).Select(o => o.EmployeeDetails).ToArray());

                worksheet.Range["B" + row].Text = empdesc;
                worksheet.Range["B" + row].WrapText = true;
                // worksheet.Range["B" + row + ":C" + row].Merge();
            }
            else
            {
                worksheet.Range["B" + row].Text = "None";
            }
            worksheet.Range["B" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;

            //Department
            worksheet.Range["D" + row].Text = "Department:";
            worksheet.Range["D" + row].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 204, 0);
            worksheet.Range["D" + row].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.White;
            worksheet.Range["D" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;

            if (InputModel.DepartmentId != null)
            {
                var depdesc = string.Join(", ", DepartmentData.Where(o => InputModel.DepartmentId.Any(a => a == o.DepartmentId)).Select(o => o.DepartmentDescription).ToArray());

                worksheet.Range["E" + row].Text = depdesc;
                worksheet.Range["E" + row].WrapText = true;
            }
            else
            {
                worksheet.Range["E" + row].Text = "None";
            }
            worksheet.Range["E" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;

            //Period

            worksheet.Range["G" + row].Text = "Period:";
            worksheet.Range["G" + row].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 204, 0);
            worksheet.Range["G" + row].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.White;
            worksheet.Range["G" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;

            if (InputModel.StartDate.HasValue && InputModel.EndDate.HasValue)
            {
                worksheet.Range["H" + row].Text = InputModel.StartDate.Value.ToString("dd-MMM-yy") + " - " + InputModel.EndDate.Value.ToString("dd-MMM-yy");
            }
            else
            {
                worksheet.Range["H" + row].Text = "None";
            }
            worksheet.Range["H" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;

            row++;
            row = row + 1;
            #endregion Search Parameters

            *@

            //Table on Left

            worksheet.Range["A" + row].Text = "Employees Name:";
            worksheet.Range["A" + row].ColumnWidth = 15;
            worksheet.Range["A" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A" + row].WrapText = true;

            worksheet.Range["B" + row].Text = name;
            worksheet.Range["B" + row].ColumnWidth = 15;
            worksheet.Range["B" + row].WrapText = true;
            worksheet.Range["B" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["B" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["B3:C3"].Merge();

            //Table on Right

            worksheet.Range["E" + row].Text = "Appraiser Name:";
            worksheet.Range["E" + row].ColumnWidth = 15;
            worksheet.Range["E" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["E" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["E" + row].WrapText = true;

            worksheet.Range["F" + row].Text = _bscdata.AppraiserFullName;;
            // worksheet.Range["F" + row].ColumnWidth = 15;
            worksheet.Range["F" + row].WrapText = true;
            worksheet.Range["F" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["F" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["F3:G3"].Merge();

            row++;

            worksheet.Range["A" + row].Text = "Employee Number:";
            worksheet.Range["A" + row].ColumnWidth = 15;
            worksheet.Range["A" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A" + row].WrapText = true;

            worksheet.Range["B" + row].Text = _empdetail.EmployeeNumber;
            worksheet.Range["B" + row].ColumnWidth = 15;
            worksheet.Range["B" + row].WrapText = true;
            worksheet.Range["B" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["B" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["B4:C4"].Merge();


            worksheet.Range["E" + row].Text = "Appraiser's Job Title:";
            worksheet.Range["E" + row].ColumnWidth = 15;
            worksheet.Range["E" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["E" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["E" + row].WrapText = true;

            worksheet.Range["F" + row].Text = name;
            worksheet.Range["F" + row].ColumnWidth = 15;
            worksheet.Range["F" + row].WrapText = true;
            worksheet.Range["F" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["F" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["F4:G4"].Merge();

            row++;

            worksheet.Range["A" + row].Text = "Employee's JobTitle:";
            worksheet.Range["A" + row].ColumnWidth = 15;
            worksheet.Range["A" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A" + row].WrapText = true;

            worksheet.Range["B" + row].Text = _empdetail.JobTitleDescription;
            worksheet.Range["B" + row].ColumnWidth = 15;
            worksheet.Range["B" + row].WrapText = true;
            worksheet.Range["B" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["B" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["B5:C5"].Merge();


            row++;

            worksheet.Range["A" + row].Text = "Department:";
            worksheet.Range["A" + row].ColumnWidth = 15;
            worksheet.Range["A" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A" + row].WrapText = true;

            worksheet.Range["B" + row].Text = _empdetail.DepartmentDescription;
            worksheet.Range["B" + row].ColumnWidth = 15;
            worksheet.Range["B" + row].WrapText = true;
            worksheet.Range["B" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["B" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["B6:C6"].Merge();

            row++;

            worksheet.Range["A" + row].Text = "Unit/Section:";
            worksheet.Range["A" + row].ColumnWidth = 15;
            worksheet.Range["A" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A" + row].WrapText = true;

            worksheet.Range["B" + row].Text = _empdetail.SectionDescription;
            worksheet.Range["B" + row].ColumnWidth = 15;
            worksheet.Range["B" + row].WrapText = true;
            worksheet.Range["B" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["B" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["B7:C7"].Merge();

            row++;

            worksheet.Range["A" + row].Text = "Date Joined:";
            worksheet.Range["A" + row].ColumnWidth = 15;
            worksheet.Range["A" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A" + row].WrapText = true;

            if (_empdetail.DateJoined.HasValue)
            {
                worksheet.Range["B" + row].Text = _empdetail.DateJoined.Value.ToString("dd-MMM-yy");
                worksheet.Range["B" + row].ColumnWidth = 15;
                worksheet.Range["B" + row].WrapText = true;
                worksheet.Range["B" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range["B" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                worksheet.Range["B8:C8"].Merge();
            }

            row++;

            worksheet.Range["A" + row].Text = "Date of Last Promotion:";
            worksheet.Range["A" + row].ColumnWidth = 15;
            worksheet.Range["A" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A" + row].WrapText = true;

            worksheet.Range["B" + row].Text = "N/A";
            worksheet.Range["B" + row].ColumnWidth = 15;
            worksheet.Range["B" + row].WrapText = true;
            worksheet.Range["B" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["B" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["B9:C9"].Merge();

            row++;

            worksheet.Range["A" + row].Text = "Date of Review:";
            worksheet.Range["A" + row].ColumnWidth = 15;
            worksheet.Range["A" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A" + row].WrapText = true;

            if (_bscdata.DateofReview.HasValue)
            {
                worksheet.Range["B" + row].Text = _bscdata.DateofReview.Value.ToString("dd-MMM-yy");
                worksheet.Range["B" + row].ColumnWidth = 15;
                worksheet.Range["B" + row].WrapText = true;
                worksheet.Range["B" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range["B" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                worksheet.Range["B10:C10"].Merge();
            }

            row++;

            worksheet.Range["A" + row].Text = "Duration in Organization - Yrs:";
            worksheet.Range["A" + row].ColumnWidth = 15;
            worksheet.Range["A" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A" + row].WrapText = true;
            worksheet.Range["A" + row].RowHeight = 44.5;

            if (_empdetail.DurationatWork.HasValue)
            {
                worksheet.Range["B" + row].Number = Convert.ToDouble(_empdetail.DurationatWork);
                worksheet.Range["B" + row].ColumnWidth = 15;
                worksheet.Range["B" + row].WrapText = true;
                worksheet.Range["B" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range["B" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                worksheet.Range["B11:C11"].Merge();
            }

            row++;

            worksheet.Range["A" + row].Text = "Reason for Appraisal Describe as Appropriate:";
            worksheet.Range["A" + row].ColumnWidth = 15;
            worksheet.Range["A" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["A" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A" + row].WrapText = true;

            worksheet.Range["B" + row].Text = _bscdata.AppraisalReason;
            worksheet.Range["B" + row].ColumnWidth = 15;
            worksheet.Range["B" + row].WrapText = true;
            worksheet.Range["B" + row].VerticalAlignment = ExcelVAlign.VAlignTop;
            worksheet.Range["B" + row].HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["B12:C12"].Merge();

            row++;


            // row = 16;

            worksheet.Range[row, 1].Text = "SECTION 2. TARGET SETTING AND EVALUATION /  EXPECTED  ROLE KPIs or DELIVERABLES";
            worksheet.Range[row, 1, row, 11].Merge();
            worksheet.Range[row, 1, row, 11].WrapText = true;
            worksheet.Range[row, 1, row, 11].RowHeight = 19;
            worksheet.Range[row, 1, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(142, 169, 219);
            worksheet.Range[row, 1, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 1, row, 11].CellStyle.Font.FontName = "cambria";
            worksheet.Range[row, 1, row, 11].CellStyle.Font.Size = 18;
            worksheet.Range[row, 1, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

            row++;

            worksheet.Range[row, 1].Text = "Employee performance will be assessed against set the agreed Targets and overall Role Deliverables. Supervisors will assess and comment with evidence the Appraisee's Performance /  Achievement and / or Non - Achievement during the Period.";
            worksheet.Range[row, 1, row, 11].Merge();
            worksheet.Range[row, 1, row, 11].WrapText = true;
            worksheet.Range[row, 1, row, 11].RowHeight = 15;
            worksheet.Range[row, 1, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 1, row, 11].CellStyle.Font.FontName = "cambria";
            worksheet.Range[row, 1, row, 11].CellStyle.Font.Size = 18;
            worksheet.Range[row, 1, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

            row++;

            worksheet.Range[row, 2].Text = "Employee Performance Setting";
            worksheet.Range[row, 2, row, 6].Merge();
            worksheet.Range[row, 2, row, 6].WrapText = true;
            worksheet.Range[row, 2, row, 6].RowHeight = 15;
            worksheet.Range[row, 2, row, 6].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            worksheet.Range[row, 2, row, 6].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            worksheet.Range[row, 2, row, 6].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
            worksheet.Range[row, 2, row, 6].CellStyle.Font.Size = 12f;
            worksheet.Range[row, 2, row, 6].CellStyle.Font.Bold = true;
            worksheet.Range[row, 2, row, 6].CellStyle.Font.Color = ExcelKnownColors.White;

            worksheet.Range[row, 7].Text = "Supervisor  Assessment";
            worksheet.Range[row, 7, row, 10].Merge();
            worksheet.Range[row, 7, row, 10].WrapText = true;
            worksheet.Range[row, 7, row, 10].RowHeight = 15;
            worksheet.Range[row, 7, row, 10].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            worksheet.Range[row, 7, row, 10].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            worksheet.Range[row, 7, row, 10].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(246, 185, 59);
            worksheet.Range[row, 7, row, 10].CellStyle.Font.Size = 12f;
            worksheet.Range[row, 7, row, 10].CellStyle.Font.Bold = true;
            worksheet.Range[row, 7, row, 10].CellStyle.Font.Color = ExcelKnownColors.White;

            row = row + 1;

            worksheet.Range[row, 1].Text = "BSC PERSPECTIVES";
            worksheet.Range[row, 1].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 1].CellStyleName = "headerStyle";
            //worksheet.Range[row, 1].ColumnWidth = 15;
            // worksheet.Range[row, 1].WrapText = true;
            // worksheet.Range[row, 1].VerticalAlignment = ExcelVAlign.VAlignTop;

            worksheet.Range[row, 2].Text = "PERSPECTIVE TOTAL WEIGHT";
            worksheet.Range[row, 2].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 2].CellStyleName = "headerStyle";
            //worksheet.Range[row, 2].ColumnWidth = 15;
            // worksheet.Range[row, 2].WrapText = true;
            // worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;

            worksheet.Range[row, 3].Text = "KEY PERFORMANCE INDICATOR (KPI)";
            worksheet.Range[row, 3].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 3].CellStyleName = "headerStyle";
            // worksheet.Range[row, 3].ColumnWidth = 15;
            // worksheet.Range[row, 3].WrapText = true;
            // worksheet.Range[row, 3].VerticalAlignment = ExcelVAlign.VAlignTop;

            worksheet.Range[row, 4].Text = "PERFORMANCE MEASUREMENT / METRIC";
            worksheet.Range[row, 4].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 4].CellStyleName = "headerStyle";
            // worksheet.Range[row, 4].ColumnWidth = 25;
            // worksheet.Range[row, 4].WrapText = true;
            // worksheet.Range[row, 4].VerticalAlignment = ExcelVAlign.VAlignTop;

            worksheet.Range[row, 5].Text = "INDIVIDUAL TARGET WEIGHT";
            worksheet.Range[row, 5].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 5].CellStyleName = "headerStyle";
            // worksheet.Range[row, 5].ColumnWidth = 15;
            // worksheet.Range[row, 5].WrapText = true;
            // worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;

            worksheet.Range[row, 6].Text = "EMPLOYEE EVIDENCE ";
            worksheet.Range[row, 6].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 6].CellStyleName = "headerStyle";


            worksheet.Range[row, 7].Text = "EMPLOYE SELF  ASSESSMENT  %  TARGET ACHIEVEMENT ";
            worksheet.Range[row, 7].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 7].CellStyleName = "headerStyle";
            // worksheet.Range[row, 7].ColumnWidth = 15;
            // worksheet.Range[row, 7].WrapText = true;
            // worksheet.Range[row, 7].VerticalAlignment = ExcelVAlign.VAlignTop;

            worksheet.Range[row, 8].Text = "SUPERVISOR  ASSESSMENT  %  TARGET ACHIEVEMENT ";
            worksheet.Range[row, 8].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 8].CellStyleName = "headerStyle";
            // worksheet.Range[row, 8].ColumnWidth = 10;
            // worksheet.Range[row, 8].WrapText = true;
            // worksheet.Range[row, 8].VerticalAlignment = ExcelVAlign.VAlignTop;

            worksheet.Range[row, 9].Text = "SUPERVISOR COMMENTS";
            worksheet.Range[row, 9].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 9].CellStyleName = "headerStyle";


            worksheet.Range[row, 10].Text = "INDIVIDUAL TARGET / OBJECTIVE SCORE";
            worksheet.Range[row, 10].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
            worksheet.Range[row, 10].CellStyleName = "headerStyle";


            row++;

            // row = 20;

            int balancescorecard = data[0].BalanceScoreCardId;

            int perspectivetypestartrow = row;
            int perspectivetypeendrow = row;
            int previousperspectiveid = 0;

            int perspectivetotalweightstartrow = row;
            int perspectivetotalweightendrow = row;
            int previoustotalweight = 0;

            double individualtargetscore = 0;
            double individualtargetobjectivescore = 0;

            foreach (var n in data)
            {
                int? _perspectiveid = null;

                //Section 2
                if (datatarget.Count > 0)
                {
                    var _datatarget = datatarget.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId).ToList();

                    foreach (var m in _datatarget)
                    {
                        if (_perspectiveid.HasValue)
                        {

                            if (_perspectiveid != m.BscPerspectiveTypeId)
                            {
                                var _perspectivetype = BscPerspectiveTypeData.FirstOrDefault(o => o.BscPerspectiveTypeId == _perspectiveid);
                                //Provide Sum for Perspectives
                                string perstype = string.Empty;
                                if (_perspectivetype != null)
                                {
                                    perstype = _perspectivetype.BscPerspectiveTypeDescription;
                                }
                                worksheet.Range[row, 4].Text = "Total Score : " + perstype;
                                worksheet.Range[row, 4].HorizontalAlignment = ExcelHAlign.HAlignRight;
                                worksheet.Range[row, 3, row, 4].Merge();
                                worksheet.Range[row, 3, row, 4].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);

                                worksheet.Range[row, 5].Text = individualtargetscore + "%";
                                worksheet.Range[row, 5].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                                worksheet.Range[row, 5].HorizontalAlignment = ExcelHAlign.HAlignRight;

                                //Provide Sum for Individual Target/Objective Score                              
                                worksheet.Range[row, 10].Text = individualtargetobjectivescore + "%";
                                worksheet.Range[row, 10].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                                worksheet.Range[row, 10].HorizontalAlignment = ExcelHAlign.HAlignRight;

                                row++;
                                individualtargetscore = 0;
                                individualtargetobjectivescore = 0;
                                _perspectiveid = m.BscPerspectiveTypeId;
                            }
                        }
                        else
                        {
                            _perspectiveid = m.BscPerspectiveTypeId;
                        }


                        perspectivetypeendrow = row;

                        if (m.BscPerspectiveTypeId.HasValue)
                        {
                            //Perspective Type Cell Merging
                            if (previousperspectiveid != m.BscPerspectiveTypeId)
                            {
                                previousperspectiveid = m.BscPerspectiveTypeId.Value;
                                if (perspectivetypestartrow < (perspectivetypeendrow - 1))
                                {
                                    worksheet.Range[perspectivetypestartrow, 1, (perspectivetypeendrow - 1), 1].Merge();
                                    worksheet.Range[perspectivetypestartrow, 2, (perspectivetypeendrow - 1), 2].Merge();
                                    perspectivetypestartrow = perspectivetypeendrow;
                                }
                            }
                            var _bscperspective = BscPerspectiveTypeData.FirstOrDefault(o => o.BscPerspectiveTypeId == m.BscPerspectiveTypeId);

                            string bscper = string.Empty;
                            if (_bscperspective != null)
                            {
                                bscper = _bscperspective.BscPerspectiveTypeDescription;
                            }

                            worksheet.Range[row, 1].Text = bscper;
                            worksheet.Range[row, 1].WrapText = true;
                            worksheet.Range[row, 1].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 1].HorizontalAlignment = ExcelHAlign.HAlignJustify;
                            worksheet.Range[row, 1].CellStyle.Rotation = 90;

                            if (PerspectivesDetailData != null)
                            {
                                // var _deptdataweight = PerspectivesDetailData.Where(o=>o.DepartmentId == _empdetail.DepartmentId && o.SectionId == _empdetail.SectionId && o.FinancialYearId == n.FinancialYearId).ToList();
                                var _deptdataweight = PerspectivesDetailData.FirstOrDefault(o => o.DepartmentId == _empdetail.DepartmentId &&
                                    o.SectionId == _empdetail.SectionId && o.FinancialYearId == n.FinancialYearId && o.BscPerspectiveTypeId == m.BscPerspectiveTypeId);

                                if (_deptdataweight != null && _deptdataweight.PerspectiveTotalWeight != null)
                                {
                                    worksheet.Range[row, 2].Text = $"{_deptdataweight.PerspectiveTotalWeight.Value}%";
                                    worksheet.Range[row, 2].WrapText = true;
                                    worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                                    worksheet.Range[row, 2].HorizontalAlignment = ExcelHAlign.HAlignRight;
                                }
                            }

                        }
                        if (m.BsckpidetailsId.HasValue)
                        {
                            string kpitargets = string.Empty;

                            var _kpi = KpiData.FirstOrDefault(o => o.BsckpidetailsId == m.BsckpidetailsId);

                            if(_kpi != null)
                            {
                                kpitargets = _kpi.Objective;
                            }
                            worksheet.Range[row, 3].Text = kpitargets;
                            worksheet.Range[row, 3].WrapText = true;
                            worksheet.Range[row, 3].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 3].HorizontalAlignment = ExcelHAlign.HAlignJustify;
                            worksheet.Range[row, 3].AutofitRows();
                            // worksheet.Range[row, 3].ColumnWidth = 35;
                        }

                        if (m.MeasurementMetricId.HasValue)
                        {
                            var _measurement = MeasurementUnitData.FirstOrDefault(o => o.MeasurementMetricId == m.MeasurementMetricId);
                            worksheet.Range[row, 4].Text = _measurement.MeasurementMetricDesc;
                            worksheet.Range[row, 4].WrapText = true;
                            worksheet.Range[row, 4].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 4].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (m.IndividualTargetWeight.HasValue)
                        {
                            worksheet.Range[row, 5].Text = $"{Convert.ToDouble(m.IndividualTargetWeight)}%";
                            worksheet.Range[row, 5].WrapText = true;
                            worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 5].HorizontalAlignment = ExcelHAlign.HAlignRight;

                            individualtargetscore += m.IndividualTargetWeight.Value;
                        }

                        worksheet.Range[row, 6].Text = m.EvidenceId;
                        worksheet.Range[row, 6].WrapText = true;
                        worksheet.Range[row, 6].ColumnWidth = 30.18;
                        worksheet.Range[row, 6].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        worksheet.Range[row, 6].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 6].AutofitRows();

                        if (m.EmployeeSelfAssessTgt.HasValue)
                        {
                            worksheet.Range[row, 7].Text = $"{Convert.ToDouble(m.EmployeeSelfAssessTgt)}%";
                            worksheet.Range[row, 7].WrapText = true;
                            worksheet.Range[row, 7].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 7].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                        if (m.SupervisorAssessTgt.HasValue)
                        {
                            worksheet.Range[row, 8].Text = $"{Convert.ToDouble(m.SupervisorAssessTgt)}%";
                            worksheet.Range[row, 8].WrapText = true;
                            worksheet.Range[row, 8].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 8].HorizontalAlignment = ExcelHAlign.HAlignRight;
                        }

                            worksheet.Range[row, 9].Text = m.SupervisorComments;
                            worksheet.Range[row, 9].WrapText = true;
                            worksheet.Range[row, 9].ColumnWidth = 32;
                            worksheet.Range[row, 9].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                            worksheet.Range[row, 9].VerticalAlignment = ExcelVAlign.VAlignTop;
                            // worksheet.Range[row, 9].AutofitRows();

                        if (m.IndividualTargetObjectiveScore.HasValue)
                        {
                            worksheet.Range[row, 10].Text = $"{Math.Round(m.IndividualTargetObjectiveScore.Value, 1)}%";
                            worksheet.Range[row, 10].WrapText = true;
                            worksheet.Range[row, 10].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 10].HorizontalAlignment = ExcelHAlign.HAlignRight;

                            targetvalue += m.IndividualTargetObjectiveScore.Value;
                            individualtargetobjectivescore += m.IndividualTargetObjectiveScore.Value;
                        }


                        row += 1;
                    }

                    //Put this to merge the last perspective type also
                    if (perspectivetypestartrow < perspectivetypeendrow)
                    {
                        worksheet.Range[perspectivetypestartrow, 1, perspectivetypeendrow, 1].Merge();
                        worksheet.Range[perspectivetypestartrow, 2, perspectivetypeendrow, 2].Merge();
                    }

                    var _perspectivetypelast = BscPerspectiveTypeData.FirstOrDefault(o => o.BscPerspectiveTypeId == 4);

                    //Provide Sum for Perspectives
                    worksheet.Range[row, 4].Text = "Total Score : " + _perspectivetypelast.BscPerspectiveTypeDescription;
                    worksheet.Range[row, 4].HorizontalAlignment = ExcelHAlign.HAlignRight;
                    worksheet.Range[row, 3, row, 4].Merge();
                    worksheet.Range[row, 3, row, 4].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);

                    //Provide Sum for Individual Target Score
                    worksheet.Range[row, 5].Text = individualtargetscore + "%";
                    worksheet.Range[row, 5].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                    worksheet.Range[row, 5].HorizontalAlignment = ExcelHAlign.HAlignRight;

                    //Provide Sum for Individual Target/Objective Score
                    worksheet.Range[row, 10].Text = individualtargetobjectivescore + "%";
                    worksheet.Range[row, 10].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                    worksheet.Range[row, 10].HorizontalAlignment = ExcelHAlign.HAlignRight;


                    row++;

                }

                row++;
                //row = 34;

                string tv = "0";
                string bv = "0";
                double? tvvalue = 0;
                double? bvvalue = 0;

                if (TargetSettingTotalData.Count > 0 && BehavioralTotalData.Count > 0)
                {
                    var _targetvalue = TargetSettingTotalData.FirstOrDefault(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                    var _behaviourvalue = BehavioralTotalData.FirstOrDefault(o => o.BalanceScoreCardId == n.BalanceScoreCardId);

                    tv = _targetvalue.TotalIndividualTargetObjectiveScore + "%";
                    tvvalue = _targetvalue.TotalIndividualTargetObjectiveScore;

                    bv = _behaviourvalue.TotalSupervisorAssessment + "%";
                    bvvalue = _behaviourvalue.TotalSupervisorAssessment;
                }


                worksheet.Range[row, 1].Text = "Overall 70% Maximum as a Technical Target Score ";
                worksheet.Range[row, 1, row, 7].Merge();
                worksheet.Range[row, 1, row, 7].WrapText = true;
                worksheet.Range[row, 1, row, 7].RowHeight = 18;
                worksheet.Range[row, 1, row, 7].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                worksheet.Range[row, 1, row, 7].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 1, row, 7].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 1, row, 7].CellStyle.Font.Size = 14;
                worksheet.Range[row, 1, row, 7].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                worksheet.Range[row, 8].Text = "70%";
                worksheet.Range[row, 8].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                //worksheet.Range[row, 8].CellStyleName = "headerStyle";
                worksheet.Range[row, 8].ColumnWidth = 15;
                worksheet.Range[row, 8].WrapText = true;

                worksheet.Range[row, 9].Text = "";
                //worksheet.Range[row, 9].CellStyleName = "headerStyle";
                worksheet.Range[row, 9].ColumnWidth = 15;
                worksheet.Range[row, 9].WrapText = true;

                worksheet.Range[row, 10].Text = tv /* _targetvalue.TotalIndividualTargetObjectiveScore + "%" */;
                //worksheet.Range[row, 10].CellStyleName = "headerStyle";
                worksheet.Range[row, 10].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                worksheet.Range[row, 10].ColumnWidth = 15;
                worksheet.Range[row, 10].WrapText = true;

                row++;

                worksheet.Range[row, 1].Text = "Values & Behavioral Competency";
                worksheet.Range[row, 1].ColumnWidth = 15;
                worksheet.Range[row, 1].WrapText = true;
                worksheet.Range[row, 1].RowHeight = 84.8;

                worksheet.Range[row, 2].Text = "30%";
                worksheet.Range[row, 2].ColumnWidth = 10;
                worksheet.Range[row, 2].WrapText = true;

                worksheet.Range[row, 3].Text = "Overall 30% Score as NH & CC Values / Behavior Competencies";
                worksheet.Range[row, 3, row, 7].Merge();
                worksheet.Range[row, 3, row, 7].WrapText = true;
                worksheet.Range[row, 3, row, 7].RowHeight = 44.5;
                //worksheet.Range[row, 1, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 255, 255);
                worksheet.Range[row, 2, row, 7].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 2, row, 7].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 2, row, 7].CellStyle.Font.Size = 14;
                worksheet.Range[row, 2, row, 7].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                worksheet.Range[row, 8].Text = "30%";
                worksheet.Range[row, 8].ColumnWidth = 10;
                worksheet.Range[row, 8].WrapText = true;
                worksheet.Range[row, 8].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);

                worksheet.Range[row, 9].Text = "";
                worksheet.Range[row, 9].ColumnWidth = 10;
                worksheet.Range[row, 9].WrapText = true;

                worksheet.Range[row, 10].Text = bv/* _behaviourvalue.TotalSupervisorAssessment + "%" */;
                worksheet.Range[row, 10].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                worksheet.Range[row, 10].ColumnWidth = 15;
                worksheet.Range[row, 10].WrapText = true;

                row++;


                worksheet.Range[row, 1].Text = "OVERALL SCORE 100% ( TECHNICAL 70%  + VALUES /  BEHAVIOUR 30%)";
                worksheet.Range[row, 1, row, 7].Merge();
                worksheet.Range[row, 1, row, 7].WrapText = true;
                worksheet.Range[row, 1, row, 7].RowHeight = 18;
                worksheet.Range[row, 1, row, 7].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                worksheet.Range[row, 1, row, 7].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 1, row, 7].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 1, row, 7].CellStyle.Font.Size = 14;
                worksheet.Range[row, 1, row, 7].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                worksheet.Range[row, 8].Text = "100%";
                worksheet.Range[row, 8].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                worksheet.Range[row, 8].ColumnWidth = 10;
                worksheet.Range[row, 8].WrapText = true;
                worksheet.Range[row, 8].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignRight;

                worksheet.Range[row, 9].Text = "";
                worksheet.Range[row, 9].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                worksheet.Range[row, 9].ColumnWidth = 10;
                worksheet.Range[row, 9].WrapText = true;

                worksheet.Range[row, 10].Text = Convert.ToDouble(tvvalue + bvvalue) + "%";
                worksheet.Range[row, 10].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(245, 205, 121);
                worksheet.Range[row, 10].ColumnWidth = 10;
                worksheet.Range[row, 10].WrapText = true;
                worksheet.Range[row, 10].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignRight;

                row++;
                // row = 38;

                worksheet.Range[row, 1, (row + 1), 6].Text = "";

                worksheet.Range[row, 1, (row + 1), 4].Merge();
                worksheet.Range[row, 1, (row + 1), 4].WrapText = true;
                worksheet.Range[row, 1, (row + 1), 4].RowHeight = 15;
                worksheet.Range[row, 1, (row + 1), 4].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                worksheet.Range[row, 1, (row + 1), 4].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                //worksheet.Range[row, 1, (row + 1), 4].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                worksheet.Range[row, 1, (row + 1), 4].CellStyle.Font.Size = 12f;
                worksheet.Range[row, 1, (row + 1), 4].CellStyle.Font.Bold = true;
                worksheet.Range[row, 1, (row + 1), 4].CellStyle.Font.Color = ExcelKnownColors.White;


                worksheet.Range[row, 5].Text = "OVERALL RATING ( TECHNICAL + VALUES /  BEHAVIOUR)";
                worksheet.Range[row, 5, row, 7].Merge();
                worksheet.Range[row, 5, row, 7].WrapText = true;
                worksheet.Range[row, 5, row, 7].RowHeight = 20.5;
                worksheet.Range[row, 5, row, 7].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                worksheet.Range[row, 5, row, 7].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 5, row, 7].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 5, row, 7].CellStyle.Font.Size = 11;
                worksheet.Range[row, 5, row, 7].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                worksheet.Range[row, 8].Text = Convert.ToDouble(tvvalue + bvvalue) + "%";
                worksheet.Range[row, 8, row, 9].Merge();
                worksheet.Range[row, 8, row, 9].WrapText = true;
                worksheet.Range[row, 8, row, 9].RowHeight = 20.5;
                worksheet.Range[row, 8, row, 9].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(237,125,49);
                worksheet.Range[row, 8, row, 9].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.White;
                worksheet.Range[row, 8, row, 9].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 8, row, 9].CellStyle.Font.Size = 11;
                worksheet.Range[row, 8, row, 9].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignRight;

                worksheet.Range[row, 10].Text = "";
                //worksheet.Range[row, 10].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                worksheet.Range[row, 10].ColumnWidth = 10;
                worksheet.Range[row, 10].WrapText = true;


                row++;

                double? scoredmark = tvvalue + bvvalue;
                string resultdescription = string.Empty;

                var _finaldesc = ScaleData.FirstOrDefault(o => scoredmark >= o.MinimumMark && scoredmark <= o.MaximumMark);

                if (_finaldesc != null && !string.IsNullOrEmpty(_finaldesc.PerformanceDescription))
                {
                    resultdescription = _finaldesc.PerformanceDescription;
                }
                // if (_finaldesc != null && !string.IsNullOrEmpty(_finaldesc.PerformanceDescription))
                // {
                //     resultdescription = _finaldesc.PerformanceDescription;

                //     //Poor Performance
                //     if (_finaldesc.ScaleId == 1)
                //     {
                //         worksheet.Range[row, 5, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(234, 32, 39);
                //     }
                //     //Fair Performance
                //     else if (_finaldesc.ScaleId == 2)
                //     {
                //         worksheet.Range[row, 5, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(6, 82, 221);
                //     }
                //     //Good Performance
                //     else if (_finaldesc.ScaleId == 4)
                //     {
                //         worksheet.Range[row, 5, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(111, 30, 81);
                //     }
                //     //Very Good Performance
                //     else if (_finaldesc.ScaleId == 5)
                //     {
                //         worksheet.Range[row, 5, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(95, 39, 205);
                //     }
                //     //Outstanding Performance
                //     else if (_finaldesc.ScaleId == 6)
                //     {
                //         worksheet.Range[row, 5, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 148, 50);
                //     }
                // }


                worksheet.Range[row, 5].Text = resultdescription.ToUpper();
                worksheet.Range[row, 5, row, 11].Merge();
                worksheet.Range[row, 5, row, 11].WrapText = true;
                worksheet.Range[row, 5, row, 11].RowHeight = 19;
                worksheet.Range[row, 5, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(169, 208, 142);
                worksheet.Range[row, 5, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 5, row, 11].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 5, row, 11].CellStyle.Font.Size = 18;
                worksheet.Range[row, 5, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;

                row++;
                //row = 40;


                worksheet.Range[row, 1, (row + 1), 6].Text = "Please note the Overall Assessment is derived from the Performance Descriptors below in relation to the Appraise Performance Achievement";

                worksheet.Range[row, 1, (row + 1), 6].Merge();
                worksheet.Range[row, 1, (row + 1), 6].WrapText = true;
                worksheet.Range[row, 1, (row + 1), 6].RowHeight = 15;
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 217, 102);
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.Font.Size = 12f;
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.Font.Bold = true;
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.Font.Color = ExcelKnownColors.Black;

                //Enter The Score Dissaggregations

                worksheet.Range[row, 7].Text = "Poor Performance";
                //worksheet.Range[row, 7].CellStyleName = "headerStyle";
                worksheet.Range[row, 7].ColumnWidth = 15;
                worksheet.Range[row, 7].WrapText = true;

                worksheet.Range[row, 8].Text = "Fair Performance";
                //worksheet.Range[row, 8].CellStyleName = "headerStyle";
                worksheet.Range[row, 8].ColumnWidth = 15;
                worksheet.Range[row, 8].WrapText = true;

                worksheet.Range[row, 9].Text = "Good Performance";
                //worksheet.Range[row, 9].CellStyleName = "headerStyle";
                worksheet.Range[row, 9].ColumnWidth = 15;
                worksheet.Range[row, 9].WrapText = true;

                worksheet.Range[row, 10].Text = "Very Good  Performance";
                //worksheet.Range[row, 10].CellStyleName = "headerStyle";
                worksheet.Range[row, 10].ColumnWidth = 15;
                worksheet.Range[row, 10].WrapText = true;

                worksheet.Range[row, 11].Text = "Outstanding Performance";
                //worksheet.Range[row, 11].CellStyleName = "headerStyle";
                worksheet.Range[row, 11].ColumnWidth = 15;
                worksheet.Range[row, 11].WrapText = true;

                row++;

                var _poor = ScaleData.FirstOrDefault(o => o.ScaleId == 1);
                var _fair = ScaleData.FirstOrDefault(o => o.ScaleId == 2);
                var _good = ScaleData.FirstOrDefault(o => o.ScaleId == 3);
                var _verygood = ScaleData.FirstOrDefault(o => o.ScaleId == 4);
                var _outstanding = ScaleData.FirstOrDefault(o => o.ScaleId == 5);

                worksheet.Range[row, 7].Text = "Below " + Convert.ToInt32(_poor.MaximumMark) + "%";
                //worksheet.Range[row, 7].CellStyleName = "headerStyle";
                worksheet.Range[row, 7].ColumnWidth = 15;
                worksheet.Range[row, 7].WrapText = true;

                worksheet.Range[row, 8].Text = Convert.ToInt32(_fair.MinimumMark) + "% - " + Convert.ToInt32(_fair.MaximumMark) + "%";
                //worksheet.Range[row, 8].CellStyleName = "headerStyle";
                worksheet.Range[row, 8].ColumnWidth = 15;
                worksheet.Range[row, 8].WrapText = true;

                worksheet.Range[row, 9].Text = Convert.ToInt32(_good.MinimumMark) + "% - " + Convert.ToInt32(_good.MaximumMark) + "%"; ;
                //worksheet.Range[row, 9].CellStyleName = "headerStyle";
                worksheet.Range[row, 9].ColumnWidth = 15;
                worksheet.Range[row, 9].WrapText = true;

                worksheet.Range[row, 10].Text = Convert.ToInt32(_verygood.MinimumMark) + "% - " + Convert.ToInt32(_verygood.MaximumMark) + "%"; ;
                //worksheet.Range[row, 10].CellStyleName = "headerStyle";
                worksheet.Range[row, 10].ColumnWidth = 15;
                worksheet.Range[row, 10].WrapText = true;

                worksheet.Range[row, 11].Text = Convert.ToInt32(_outstanding.MinimumMark) + "% - " + Convert.ToInt32(_outstanding.MaximumMark) + "%"; ;
                //worksheet.Range[row, 11].CellStyleName = "headerStyle";
                worksheet.Range[row, 11].ColumnWidth = 15;
                worksheet.Range[row, 11].WrapText = true;

                row++;
                //row = 42;

                worksheet.Range[row, 1].Text = "Please note each Value / Behavior  Assessment is derived from the Performance Descriptors selected from the Drop Down provided in Column F from 46 F - 55 F";
                worksheet.Range[row, 1].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;

                // worksheet.Range[row, 1, (row + 1), 6].Merge();
                // worksheet.Range[row, 1, (row + 1), 6].WrapText = true;
                // worksheet.Range[row, 1, (row + 1), 6].RowHeight = 15;
                // worksheet.Range[row, 1, (row + 1), 6].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                // worksheet.Range[row, 1, (row + 1), 6].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                // worksheet.Range[row, 1, (row + 1), 6].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(248, 203, 173);
                // worksheet.Range[row, 1, (row + 1), 6].CellStyle.Font.Size = 12f;
                // worksheet.Range[row, 1, (row + 1), 6].CellStyle.Font.Bold = true;
                // worksheet.Range[row, 1, (row + 1), 6].CellStyle.Font.Color = ExcelKnownColors.White;

                worksheet.Range[row, 8].Text = "Fair Conduct ";
                worksheet.Range[row, 8].ColumnWidth = 15;
                worksheet.Range[row, 8].WrapText = true;
                worksheet.Range[row, 8].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(248, 203, 173);

                worksheet.Range[row, 9].Text = "Good Conduct";
                worksheet.Range[row, 9].ColumnWidth = 15;
                worksheet.Range[row, 9].WrapText = true;
                worksheet.Range[row, 9].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(248, 203, 173);

                worksheet.Range[row, 10].Text = "Outstanding Conduct";
                worksheet.Range[row, 10].ColumnWidth = 15;
                worksheet.Range[row, 10].WrapText = true;
                worksheet.Range[row, 10].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(248, 203, 173);

                worksheet.Range[row, 1, (row + 1), 6].Merge();
                worksheet.Range[row, 1, (row + 1), 6].WrapText = true;
                worksheet.Range[row, 1, (row + 1), 6].RowHeight = 15;
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(248, 203, 173);
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.Font.Size = 12f;
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.Font.Bold = true;
                worksheet.Range[row, 1, (row + 1), 6].CellStyle.Font.Color = ExcelKnownColors.White;

                row++;
                row++;
                // row = 44;
                double? supervisorbehavioralcompetenciestotal = 0;
                double? employeebehavioralcompetenciestotal = 0;

                worksheet.Range[row, 1].Text = "SECTION 3. VALUES & BEHAVIORAL COMPETENCIES ( RATING USING A SCALE OF  1- 3  AS PER THE COMPETENCE GUIDE)";
                worksheet.Range[row, 1, row, 11].Merge();
                worksheet.Range[row, 1, row, 11].WrapText = true;
                worksheet.Range[row, 1, row, 11].RowHeight = 15;
                worksheet.Range[row, 1, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(142, 169, 219);
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 1, row, 11].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Size = 18;
                worksheet.Range[row, 1, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                row++;

                worksheet.Range[row, 1].Text = "";
                worksheet.Range[row, 1].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(217, 217, 217);
                worksheet.Range[row, 1].ColumnWidth = 15;
                worksheet.Range[row, 1].WrapText = true;

                worksheet.Range[row, 2].Text = "";
                worksheet.Range[row, 2].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(217, 217, 217);
                worksheet.Range[row, 2].ColumnWidth = 15;
                worksheet.Range[row, 2].WrapText = true;

                worksheet.Range[row, 6].Text = "Employee Performance Rating";
                worksheet.Range[row, 6].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(217, 217, 217);
                // worksheet.Range[row, 6].ColumnWidth = 15;
                worksheet.Range[row, 6].WrapText = true;

                worksheet.Range[row, 7].Text = "Employee Self Assessment";
                worksheet.Range[row, 7].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(217, 217, 217);
                worksheet.Range[row, 7].ColumnWidth = 25;
                worksheet.Range[row, 7].WrapText = true;

                worksheet.Range[row, 8].Text = "Employee Comment";
                worksheet.Range[row, 8].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(217, 217, 217);
                worksheet.Range[row, 8].ColumnWidth = 15;
                worksheet.Range[row, 8].WrapText = true;

                worksheet.Range[row, 9].Text = "Supervisor Performance Rating";
                worksheet.Range[row, 9].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(217, 217, 217);
                worksheet.Range[row, 9].ColumnWidth = 15;
                worksheet.Range[row, 9].WrapText = true;

                worksheet.Range[row, 10].Text = "Supervisor Assessment";
                worksheet.Range[row, 10].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(217, 217, 217);
                worksheet.Range[row, 10].ColumnWidth = 10;
                worksheet.Range[row, 10].WrapText = true;

                worksheet.Range[row, 11].Text = "Supervisor Comment";
                worksheet.Range[row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(217, 217, 217);               


                row++;
                // row = 46;

                //Section 3
                int sectionstartrow = row;
                int sectionendrow = row;

                if (databehavioral.Count > 0)
                {
                    var _databehavioral = databehavioral.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                    foreach (var m in _databehavioral)
                    {
                        sectionendrow = row;
                        worksheet.Range[row, 1].Text = "NH & CC CORE VALUES/BEHAVIOUR COMPETENCIES";
                        worksheet.Range[row, 1].ColumnWidth = 15;
                        worksheet.Range[row, 1].WrapText = true;
                        worksheet.Range[row, 1].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 1].CellStyle.Rotation = 90;

                        if (m.CompetenceId.HasValue)
                        {
                            var _competence = CompetenceData.FirstOrDefault(o => o.CompetenceId == m.CompetenceId);
                            worksheet.Range[row, 2].Text = _competence.CompetenceDescription;
                            worksheet.Range[row, 2].WrapText = true;
                            worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 2].HorizontalAlignment = ExcelHAlign.HAlignJustify;
                            worksheet.Range[row, 2].RowHeight = 47.5;
                            worksheet.Range[row, 2, row, 5].Merge();

                        }

                        if (m.EmployeePerformanceDescriptorId.HasValue)
                        {
                            var _perf = PerformanceDescriptorData.FirstOrDefault(o => o.PerformanceDescriptorId == m.EmployeePerformanceDescriptorId);
                            worksheet.Range[row, 6].Text = _perf.PerformanceDescriptor;
                            worksheet.Range[row, 6].WrapText = true;
                            worksheet.Range[row, 6].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 6].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                            // worksheet.Range[row, 6].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(241, 196, 15);
                        }

                        if (m.EmployeeSelfAssessment.HasValue)
                        {
                            worksheet.Range[row, 7].Text = $"{Convert.ToDouble(m.EmployeeSelfAssessment)}%";
                            worksheet.Range[row, 7].WrapText = true;
                            worksheet.Range[row, 7].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 7].HorizontalAlignment = ExcelHAlign.HAlignRight;
                            //worksheet.Range[row, 7].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(241, 196, 15);

                            employeebehavioralcompetenciestotal += m.EmployeeSelfAssessment;
                        }

                        worksheet.Range[row, 8].Text = m.EmployeeComment;
                        worksheet.Range[row, 8].WrapText = true;
                        worksheet.Range[row, 8].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 8].HorizontalAlignment = ExcelHAlign.HAlignJustify;

                        if (m.SupervisorPerformanceDescriptorId.HasValue)
                        {
                            var _perf = PerformanceDescriptorData.FirstOrDefault(o => o.PerformanceDescriptorId == m.SupervisorPerformanceDescriptorId);
                            worksheet.Range[row, 9].Text = _perf.PerformanceDescriptor;
                            worksheet.Range[row, 9].WrapText = true;
                            worksheet.Range[row, 9].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 9].HorizontalAlignment = ExcelHAlign.HAlignRight;
                            worksheet.Range[row, 9].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(241, 196, 15);
                        }

                        if (m.SupervisorAssessment.HasValue)
                        {
                            worksheet.Range[row, 10].Text = $"{Convert.ToDouble(m.SupervisorAssessment)}%";
                            worksheet.Range[row, 10].WrapText = true;
                            worksheet.Range[row, 10].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 10].HorizontalAlignment = ExcelHAlign.HAlignRight;
                            worksheet.Range[row, 10].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(241, 196, 15);

                            supervisorbehavioralcompetenciestotal += m.SupervisorAssessment;
                        }

                        worksheet.Range[row, 11].Text = m.SupervisorComment;
                        worksheet.Range[row, 11].WrapText = true;
                        worksheet.Range[row, 11].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 11].HorizontalAlignment = ExcelHAlign.HAlignJustify;
                        worksheet.Range[row, 11].ColumnWidth = 35;
                        worksheet.Range[row, 11].AutofitRows();

                        row += 1;
                    }

                    worksheet.Range[row, 3].Text = "Total Points - Values and Behavioral Competencies";
                    worksheet.Range[row, 3, row, 6].Merge();
                    worksheet.Range[row, 3, row, 6].WrapText = true;
                    worksheet.Range[row, 3, row, 6].RowHeight = 15;
                    worksheet.Range[row, 3, row, 6].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(241, 196, 15);
                    worksheet.Range[row, 3, row, 6].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                    worksheet.Range[row, 3, row, 6].CellStyle.Font.FontName = "cambria";
                    worksheet.Range[row, 3, row, 6].CellStyle.Font.Size = 11;
                    worksheet.Range[row, 3, row, 6].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                    //Employee Assessment Total
                    worksheet.Range[row, 7].Text = employeebehavioralcompetenciestotal + "%";
                    worksheet.Range[row, 7].WrapText = true;
                    worksheet.Range[row, 7].VerticalAlignment = ExcelVAlign.VAlignTop;
                    worksheet.Range[row, 7].HorizontalAlignment = ExcelHAlign.HAlignRight;
                    worksheet.Range[row, 7].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(241, 196, 15);

                    //Supervisor Assessment Total
                    worksheet.Range[row, 10].Text = supervisorbehavioralcompetenciestotal + "%";
                    worksheet.Range[row, 10].WrapText = true;
                    worksheet.Range[row, 10].VerticalAlignment = ExcelVAlign.VAlignTop;
                    worksheet.Range[row, 10].HorizontalAlignment = ExcelHAlign.HAlignRight;
                    worksheet.Range[row, 10].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(241, 196, 15);
                }
                worksheet.Range[sectionstartrow, 1, sectionendrow, 1].Merge();

                row++;
                // row = 57;

                worksheet.Range[row, 1].Text = "Record 2-3 Development goals for the next year in Section 4 below: These are individual learning needs to support one's  job Performance and Career development";
                worksheet.Range[row, 1, row, 11].Merge();
                worksheet.Range[row, 1, row, 11].WrapText = true;
                worksheet.Range[row, 1, row, 11].RowHeight = 15;
                //worksheet.Range[row, 1, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 255, 255);
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 1, row, 11].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Size = 10;
                worksheet.Range[row, 1, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                row++;
                worksheet.Range[row, 1].Text = "SECTION 4: INDIVIDUAL DEVELOPMENT PLAN";
                worksheet.Range[row, 1, row, 11].Merge();
                worksheet.Range[row, 1, row, 11].WrapText = true;
                worksheet.Range[row, 1, row, 11].RowHeight = 19;
                worksheet.Range[row, 1, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(142, 169, 219);
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 1, row, 11].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Size = 18;
                worksheet.Range[row, 1, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                row++;

                worksheet.Range[row, 1].Text = "Number";
                //worksheet.Range[row, 1].CellStyleName = "headerStyle";
                worksheet.Range[row, 1].ColumnWidth = 15;
                worksheet.Range[row, 1].WrapText = true;
                worksheet.Range[row, 1].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range[row, 1].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                worksheet.Range[row, 2].Text = "Development Need ";
                //worksheet.Range[row, 2].CellStyleName = "headerStyle";
                worksheet.Range[row, 2].ColumnWidth = 15;
                worksheet.Range[row, 2].WrapText = true;
                worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range[row, 2, row, 4].Merge();
                worksheet.Range[row, 2, row, 4].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                worksheet.Range[row, 5].Text = "Development Action ";
                //worksheet.Range[row, 5].CellStyleName = "headerStyle";
                worksheet.Range[row, 5].ColumnWidth = 15;
                worksheet.Range[row, 5].WrapText = true;
                worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;
                worksheet.Range[row, 5, row, 7].Merge();
                worksheet.Range[row, 5, row, 7].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                row ++;
                // row 
                int count = 1;

                if (datadevelopmentplan.Count > 0)
                {
                    var _datadevelopmentplan = datadevelopmentplan.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                    foreach (var m in _datadevelopmentplan)
                    {                            
                        worksheet.Range[row, 1].Text = count.ToString();
                        worksheet.Range[row, 1].VerticalAlignment = ExcelVAlign.VAlignTop;

                        worksheet.Range[row, 2].Text = m.DevelopmentNeed;
                        worksheet.Range[row, 2].WrapText = true;
                        worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 2].HorizontalAlignment = ExcelHAlign.HAlignJustify;

                        worksheet.Range[row, 5].Text = m.DevelopmentAction;
                        worksheet.Range[row, 5].WrapText = true;
                        worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 5].HorizontalAlignment = ExcelHAlign.HAlignJustify;

                        row += 1;
                        count++;
                    }
                    //}
                }

                row++;

                worksheet.Range[row, 1].Text = "SECTION 5: OVER ALL COMMENTS";
                worksheet.Range[row, 1, row, 11].Merge();
                worksheet.Range[row, 1, row, 11].WrapText = true;
                worksheet.Range[row, 1, row, 11].RowHeight = 19;
                worksheet.Range[row, 1, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 255, 255);
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 1, row, 11].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Size = 18;
                worksheet.Range[row, 1, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                worksheet.Range[row, 1].Text = "APPRAISEE’S COMMENTS";
                worksheet.Range[row, 1, row, 11].Merge();
                worksheet.Range[row, 1, row, 11].WrapText = true;
                worksheet.Range[row, 1, row, 11].RowHeight = 19;
                worksheet.Range[row, 1, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 255, 255);
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 1, row, 11].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Size = 11;
                worksheet.Range[row, 1, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                row++;

                //Appraisee Comments
                worksheet.Range[row, 1].Text = "Number";
                //worksheet.Range[row, 1].CellStyleName = "headerStyle";
                worksheet.Range[row, 1].ColumnWidth = 15;                
                worksheet.Range[row, 1].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                worksheet.Range[row, 2].Text = "Comment";
                //worksheet.Range[row, 2].CellStyleName = "headerStyle";
                worksheet.Range[row, 2, row, 4].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                worksheet.Range[row, 5].Text = "Date";
                //worksheet.Range[row, 5].CellStyleName = "headerStyle";
                worksheet.Range[row, 5, row, 7].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                row++;

                count = 1;

                if (dataappraiseecomments.Count > 0)
                {
                    var _dataappraiseecomments = dataappraiseecomments.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                    foreach (var m in _dataappraiseecomments)
                    {
                        worksheet.Range[row, 1].Text = count.ToString();
                        worksheet.Range[row, 1].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 1].WrapText = true;

                        worksheet.Range[row, 2].Text = m.AppraiseeComments;
                        worksheet.Range[row, 2].WrapText = true;
                        worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 2].HorizontalAlignment = ExcelHAlign.HAlignJustify;
                        worksheet.Range[row, 2].AutofitRows();
                        worksheet.Range[row, 2, row, 4].Merge();
                        

                        if (m.AppraiseeDate.HasValue)
                        {
                            worksheet.Range[row, 5].Text = m.AppraiseeDate.Value.ToString("dd-MMM-yy");
                            worksheet.Range[row, 5].ColumnWidth = 15;
                            worksheet.Range[row, 5].WrapText = true;
                            worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 5].HorizontalAlignment = ExcelHAlign.HAlignLeft;
                            worksheet.Range[row, 5, row, 7].Merge();
                        }

                        row += 1;
                        count++;
                    }
                    //}
                }

                row++;

                worksheet.Range[row, 1].Text = "SUPERVISOR’S COMMENTS";
                worksheet.Range[row, 1, row, 11].Merge();
                worksheet.Range[row, 1, row, 11].WrapText = true;
                worksheet.Range[row, 1, row, 11].RowHeight = 19;
                worksheet.Range[row, 1, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 255, 255);
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 1, row, 11].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Size = 11;
                worksheet.Range[row, 1, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                row++;
                //Supervisor Comments
                worksheet.Range[row, 1].Text = "Number";
                //worksheet.Range[row, 1].CellStyleName = "headerStyle";                
                worksheet.Range[row, 1].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                worksheet.Range[row, 2].Text = "Comment";
                //worksheet.Range[row, 2].CellStyleName = "headerStyle";               
                worksheet.Range[row, 2, row, 4].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                worksheet.Range[row, 5].Text = "Date";
                //worksheet.Range[row, 5].CellStyleName = "headerStyle";
                //worksheet.Range[row, 5].ColumnWidth = 15;
                
                worksheet.Range[row, 5, row, 7].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);


                row++;

                count = 1;

                if (datasupervisorcomments.Count > 0)
                {
                    var _datasupervisorcomments = datasupervisorcomments.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                    foreach (var m in _datasupervisorcomments)
                    {
                        worksheet.Range[row, 1].Text = count.ToString();
                        worksheet.Range[row, 1].VerticalAlignment = ExcelVAlign.VAlignTop;

                        worksheet.Range[row, 2].Text = m.SupervisorComments;
                        worksheet.Range[row, 2].WrapText = true;
                        worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 2].HorizontalAlignment = ExcelHAlign.HAlignJustify;
                        worksheet.Range[row, 2].AutofitRows();
                        worksheet.Range[row, 2, row, 4].Merge();

                        if (m.SupervisorDate.HasValue)
                        {
                            worksheet.Range[row, 5].Text = m.SupervisorDate.Value.ToString("dd-MMM-yy");
                            worksheet.Range[row, 5].ColumnWidth = 15;
                            worksheet.Range[row, 5].WrapText = true;
                            worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 5].HorizontalAlignment = ExcelHAlign.HAlignLeft;

                        }

                        row += 1;
                        count++;
                    }
                    //}
                }

                row++;

                worksheet.Range[row, 1].Text = "HEAD OF DEPARTMENT'S COMMENTS";
                worksheet.Range[row, 1, row, 11].Merge();
                worksheet.Range[row, 1, row, 11].WrapText = true;
                worksheet.Range[row, 1, row, 11].RowHeight = 19;
                worksheet.Range[row, 1, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 255, 255);
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 1, row, 11].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Size = 11;
                worksheet.Range[row, 1, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                row++;
                //HOD Comments
                worksheet.Range[row, 1].Text = "Number";
                //worksheet.Range[row, 1].CellStyleName = "headerStyle";                
                worksheet.Range[row, 1].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                worksheet.Range[row, 2].Text = "Comment";
                //worksheet.Range[row, 2].CellStyleName = "headerStyle";                
                worksheet.Range[row, 2, row, 4].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                worksheet.Range[row, 5].Text = "Date";
                //worksheet.Range[row, 5].CellStyleName = "headerStyle";                
                worksheet.Range[row, 5, row, 7].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                row++;

                count = 1;

                if (datahodcomments.Count > 0)
                {
                    var _datahodcomments = datahodcomments.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                    foreach (var m in _datahodcomments)
                    {
                        worksheet.Range[row, 1].Text = count.ToString();
                        worksheet.Range[row, 1].VerticalAlignment = ExcelVAlign.VAlignTop;

                        worksheet.Range[row, 2].Text = m.Hodcomments;
                        worksheet.Range[row, 2].WrapText = true;
                        worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 2].HorizontalAlignment = ExcelHAlign.HAlignJustify;
                        worksheet.Range[row, 2].AutofitRows();
                        worksheet.Range[row, 2, row, 4].Merge();

                        if (m.Hoddate.HasValue)
                        {
                            worksheet.Range[row, 5].Text = m.Hoddate.Value.ToString("dd-MMM-yy");
                            worksheet.Range[row, 5].ColumnWidth = 15;
                            worksheet.Range[row, 5].WrapText = true;
                            worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 5].HorizontalAlignment = ExcelHAlign.HAlignLeft;

                        }

                        row += 1;
                        count++;
                    }
                    //}
                }

                row++;

                worksheet.Range[row, 1].Text = "CHIEF EXCECUTIVE OFFICER'S COMMENTS";
                worksheet.Range[row, 1, row, 11].Merge();
                worksheet.Range[row, 1, row, 11].WrapText = true;
                worksheet.Range[row, 1, row, 11].RowHeight = 19;
                worksheet.Range[row, 1, row, 11].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(0, 255, 255);
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Color = Syncfusion.XlsIO.ExcelKnownColors.Black;
                worksheet.Range[row, 1, row, 11].CellStyle.Font.FontName = "cambria";
                worksheet.Range[row, 1, row, 11].CellStyle.Font.Size = 11;
                worksheet.Range[row, 1, row, 11].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;

                row++;

                //CEO Comments

                worksheet.Range[row, 1].Text = "Number";
                //worksheet.Range[row, 1].CellStyleName = "headerStyle";                
                worksheet.Range[row, 1].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                worksheet.Range[row, 2].Text = "Comment";
                //worksheet.Range[row, 2].CellStyleName = "headerStyle";                
                worksheet.Range[row, 2, row, 4].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                worksheet.Range[row, 5].Text = "Date";
                //worksheet.Range[row, 5].CellStyleName = "headerStyle";               
                worksheet.Range[row, 5, row, 7].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(189, 195, 199);

                row++;
                //CEO Comments
                count = 1;

                if (dataceocomments.Count > 0)
                {
                    var _dataceocomments = dataceocomments.Where(o => o.BalanceScoreCardId == n.BalanceScoreCardId);
                    foreach (var m in _dataceocomments)
                    {
                        worksheet.Range[row, 1].Text = count.ToString();
                        worksheet.Range[row, 1].VerticalAlignment = ExcelVAlign.VAlignTop;

                        worksheet.Range[row, 2].Text = m.Ceocomments;
                        worksheet.Range[row, 2].WrapText = true;
                        worksheet.Range[row, 2].VerticalAlignment = ExcelVAlign.VAlignTop;
                        worksheet.Range[row, 2].HorizontalAlignment = ExcelHAlign.HAlignJustify;
                        worksheet.Range[row, 2].AutofitRows();
                        worksheet.Range[row, 2, row, 4].Merge();

                        if (m.Ceodate.HasValue)
                        {
                            worksheet.Range[row, 5].Text = m.Ceodate.Value.ToString("dd-MMM-yy");
                            worksheet.Range[row, 5].ColumnWidth = 15;
                            worksheet.Range[row, 5].WrapText = true;
                            worksheet.Range[row, 5].VerticalAlignment = ExcelVAlign.VAlignTop;
                            worksheet.Range[row, 5].HorizontalAlignment = ExcelHAlign.HAlignLeft;

                        }

                        row += 1;
                        count++;
                    }
                    //}
                }
                
                
                // worksheet.Range["A" + row + ":CA" + row].CellStyle = Style;
            }
        }

        catch (Exception ex)
        {
            throw ex;
        }
    }
}
