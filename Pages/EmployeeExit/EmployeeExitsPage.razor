@page "/EmployeeExitsPage"
@using HCMIS.Interface
@using HCMIS.Model
@using HCMIS.SHARED;
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Text.RegularExpressions
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings
@using System.Collections;
@inject IToastService toastService;
@inject IAuthenticationService AuthService;
@inject NavigationManager navManager;

@using Syncfusion.Blazor.Notifications;

<style>
    /*Manage Records Buttons*/
    /*.e-btn.e-flat, .e-css.e-btn.e-flat {
        background: #00cc00;
    border-color: black;
    box-shadow: none;
    color: white;
    font-weight: 600;*/
}
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| SEPARATION OF SERVICE FORM
    </li>
</ol>

<SfGrid @ref="@DataGrid" TValue="EmployeeExitInterview" GridLines="GridLine.Both" ID="Grid" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Cancel", "Update","ExcelExport"})">
    <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog"  Dialog="AttachmentDialog">
        <HeaderTemplate>
            @{
                var text = GetExitHeader((context as EmployeeExitInterview));
                <div class="headerbandimg">
                    <span>@text</span>
                </div>
            }
        </HeaderTemplate>
        <Template>
            @{
                <center>
                    <h5>
                        <strong>EXIT INTERVIEW FORM</strong>
                    </h5>
                </center>
                ExitData = (context as EmployeeExitInterview);

                <div class="row">
                    <h4 style="color:blueviolet;">
                        <strong>Introduction:</strong> <br/>
                        In line with the provisions of the 
                        Human Resource Management Manual and 
                        in the interest of continuously improving 
                        the work experience in NHCC as it forges 
                        ahead to recruit, motivate and retain talented 
                        individuals. This Exit interview form has been 
                        designed for this purpose. Your thoughts and 
                        ideas would be appreciated and confidentiality 
                        is guaranteed.
                    </h4>
                    <h4>
                        <strong>Personal Details</strong>:
                    </h4>
                    <table class="table table-bordered">
                        <tr>
                            <td style="font-weight:bold">
                                Name:
                            </td>
                            <td>
                                <SfDropDownList @bind-Value="@(ExitData.EmployeeId)" Enabled="false" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                    <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnEmployeeChange"></DropDownListEvents>
                                </SfDropDownList>
                            </td>
                            <td style="font-weight:bold">
                                Designation:
                            </td>
                            <td>
                                @if (employeeno != null)
                                {
                                    @employeeno.JobTitleDescription
                                }
                            </td>
                        </tr>
                        <tr>
                            <td style="font-weight:bold">
                                Last Day Worked:
                            </td>
                            <td>
                                <SfDatePicker @bind-Value="@(ExitData.DateToExit)" ID="DateToExit" Format="dd-MM-yyyy" FloatLabelType="FloatLabelType.Always" Enabled="OnSubmitButtonsBool">
                                    <DatePickerEvents TValue="DateTime?" ValueChange="OnEndDateChange"></DatePickerEvents>
                                </SfDatePicker>
                            </td>

                            <td style="font-weight:bold">
                                Period of Service:
                            </td>
                            <td>
                                <p><strong>Years</strong> : @_PeriodofServiceYears || <strong>Months</strong>: @_PeriodofServiceMonths || <strong>Days</strong>: @_PeriodofServiceDays</p>
                            </td>                            
                        </tr>
                    </table>

                    <h4>
                        <strong>Other Details</strong>:
                    </h4>

                    <div class="col-md-12">
                        <p>1.Briefly explain the primary reasons for leaving the Company</p>
                        <SfTextBox Multiline="true" @bind-Value="@(ExitData.ReasonsForLeavingTheCompany)" Enabled="OnSubmitButtonsBool" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                    </div>

                    <div class="col-md-12">
                        <p>2.What did you find most satisfying about your job?</p>
                        <SfTextBox Multiline="true" @bind-Value="@(ExitData.SatisfyingAboutYourJob)" Enabled="OnSubmitButtonsBool" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                    </div>

                    <div class="col-md-12">
                        <p>3.Please rate the following aspects of the Company overall. Use the 1 – 5 scale below.</p>
                        
                        @if(ExitRatingData != null)
                        {
                            <table class="table table-bordered">
                                <tr>
                                    <td style="background-color:bisque;font-weight:bold">
                                        Poor
                                    </td>
                                    <td style="font-weight:bold;">
                                        @{
                                            var Poor = ExitRatingData.FirstOrDefault(o => o.ExitRatingId == 1);
                                        }
                                          @Poor.RatingValue  
                                    </td>
                                    <td style="background-color:bisque;font-weight:bold">
                                    Fair
                                    </td>
                                    <td style="font-weight:bold;">
                                        @{
                                            var Fair = ExitRatingData.FirstOrDefault(o => o.ExitRatingId == 2);
                                        }
                                          @Fair.RatingValue  
                                    </td>
                                    <td style="background-color:bisque;font-weight:bold">
                                    Good
                                    </td>
                                    <td style="font-weight:bold;">
                                        @{
                                            var Good = ExitRatingData.FirstOrDefault(o => o.ExitRatingId == 3);
                                        }
                                        @Good.RatingValue
                                    </td>
                                    <td style="background-color:bisque;font-weight:bold">
                                    Very Good
                                    </td>
                                    <td style="font-weight:bold;">
                                        @{
                                            var VeryGood = ExitRatingData.FirstOrDefault(o => o.ExitRatingId == 4);
                                        }
                                          @VeryGood.RatingValue  
                                    </td>
                                    <td style="background-color:bisque;font-weight:bold">
                                    Excellent
                                    </td>
                                    <td style="font-weight:bold;">
                                        @{
                                            var Excellent = ExitRatingData.FirstOrDefault(o => o.ExitRatingId == 5);
                                        }
                                        @Excellent.RatingValue
                                    </td>
                                </tr>
                            </table>                        
                            }
                        
                        <SfGrid @ref="ExitRatingGrid"
                                DataSource="@ExitData.EmployeeExitRating"
                                EnableStickyHeader=true
                                TValue="EmployeeExitRating"
                                AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                                AllowPaging="true"
                                AllowFiltering="false"
                                GridLines="GridLine.Both"
                                AllowSelection="true"
                                Height="400px">
                            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both"
                                                   Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
                            <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="OnSubmitButtonsBool"
                                              ShowConfirmDialog="false" Mode="@EditMode.Batch">
                            </GridEditSettings>
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                            <GridPageSettings PageSize="20"></GridPageSettings>

                            <GridEvents CellSelected="CellSelectHandler"
                                        TValue="EmployeeExitRating">
                            </GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(EmployeeExitRating.EmployeExitRatingId)
                                            HeaderText="#"
                                            TextAlign="TextAlign.Left"
                                            IsPrimaryKey="true"
                                            IsIdentity="true"
                                            Visible="false"
                                            Width="50"
                                            CustomAttributes="@(new Dictionary<string,
                                            object>(){ { "class", "e-attr1" }})">
                                </GridColumn>
                                <GridColumn Type="ColumnType.Number" AllowFiltering="false" AllowEditing="false" AllowSorting="false" HeaderText="#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="40" AutoFit="false" Visible="false"
                                    CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"> 
                                    <Template Context="RowCounterContext">
                                        @{
                                            var val = GetRowCounter(RowCounterContext as EmployeeExitRating);
                                            @val.Result
                                        }
                                    </Template> 
                                </GridColumn> 
                                <GridForeignColumn Field=@nameof(EmployeeExitRating.ExitRatingAspectId)
                                                   HeaderText="Exit Rating Aspect"
                                                   Width="80"
                                                   AllowEditing="true"
                                                   ForeignKeyField="@(nameof(AExitRatingAspects.ExitRatingAspectId))"
                                                   ForeignKeyValue="@(nameof(AExitRatingAspects.AspectDescription))"
                                                   ForeignDataSource="@ExitRatingAspectsData" AllowFiltering="true"
                                                   CustomAttributes="@(new Dictionary<string,
                                                   object>(){ { "class", "e-attr1" }})">
                                </GridForeignColumn>
                                <GridForeignColumn Field=@nameof(EmployeeExitRating.ExitRatingId)
                                                   HeaderText="Rating"
                                                   Width="80"
                                                   AllowEditing="true"
                                                   ForeignKeyField="@(nameof(AExitRating.ExitRatingId))"
                                                   ForeignKeyValue="@(nameof(AExitRating.RatingDescription))"
                                                   ForeignDataSource="@ExitRatingData" AllowFiltering="true"
                                                   CustomAttributes="@(new Dictionary<string,
                                                   object>(){ { "class", "e-attr1" }})">
                                </GridForeignColumn>
                                @*<GridColumn HeaderText="Rating" TextAlign="TextAlign.Center" Width="150">
                                    <Template Context="RadioContext"> 
                                        @{
                                            var employee = (RadioContext as EmployeeExitRating);
                                            
                                            <div class="col-md-12">
                                                <SfRadioButton Name="selection" ValueChange="@((args)=>OnValueChange1(args,employee))" TChecked="bool"></SfRadioButton>
                                                <SfRadioButton Label="Poor" Name="options" Value=1 TChecked="int?" @bind-Checked="@(employee.ExitRatingId)" ValueChange="OnValueChange"></SfRadioButton>
                                                <SfRadioButton Label="Fair" Name="options" Value=2 TChecked="int?" @bind-Checked="@(employee.ExitRatingId)" ValueChange="OnValueChange"></SfRadioButton>
                                                <SfRadioButton Label="Good" Name="options" Value=3 TChecked="int?" @bind-Checked="@(employee.ExitRatingId)" ValueChange="OnValueChange"></SfRadioButton>
                                                <SfRadioButton Label="Very Good" Name="options" Value=4 TChecked="int?" @bind-Checked="@(employee.ExitRatingId)" ValueChange="OnValueChange"></SfRadioButton>
                                                <SfRadioButton Label="Excellent" Name="options" Value=5 TChecked="int?" @bind-Checked="@(employee.ExitRatingId)" ValueChange="OnValueChange"></SfRadioButton>
                                            </div>
                                        } 
                                    </Template> 
                                </GridColumn>*@
                            </GridColumns>
                        </SfGrid>
                    </div>

                    <div class="col-md-12">
                        <p>4.Were there any company policies or procedures that made your work more difficult?</p>
                        <SfDropDownList @bind-Value="@(ExitData.CompanyPoliciesMadeWorkDifficultyYesNoId)" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Enabled="OnSubmitButtonsBool">
                            <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDesc)"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>

                    @if (ExitData.CompanyPoliciesMadeWorkDifficultyYesNoId == 1)
                    {
                        <div class="col-md-12">
                         <p>If any please elaborate</p>
                            <SfTextBox Multiline="true" @bind-Value="@(ExitData.CompanyPoliciesMadeWorkDifficult)" Enabled="OnSubmitButtonsBool" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                        </div>
                    }                    

                    <div class="col-md-12">
                        <p>5.Would you recommend this company to a friend as a good place to work?</p>
                        <SfDropDownList @bind-Value="@(ExitData.RecommendThisCompanyToAFriendYesNoId)" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Enabled="OnSubmitButtonsBool">
                            <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDesc)"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>

                    <div class="col-md-12">
                        <p>5.What would you like to see changed that in your view would make the company a better place to be.</p>
                        <SfTextBox Multiline="true" @bind-Value="@(ExitData.ChangesToMakeCompanyABetterPlaceToBe)" Enabled="OnSubmitButtonsBool" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                    </div>

                    <div class="col-md-12">
                        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                            <MudTabPanel Text="Reason for Fill">
                                <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;">REASON FOR FILLING FORM</h6>

                                    <div class="row">
                                        <div class="col-md-12">                                                                
                                            <SfDropDownList @bind-Value="@(ExitData.DutyReasonId)" Enabled="false" TItem="ASeparationofDuty" TValue="int?" DataSource="@DutyReasonData" Placeholder="Please Select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                <DropDownListFieldSettings Value="@nameof(ASeparationofDuty.DutyReasonId)" Text="@nameof(ASeparationofDuty.DutyReason)"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    </div>
                            </MudTabPanel>
                            <MudTabPanel Text="Rejection Comments">
                                <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;">REJECTION COMMENTS</h6>
                                    <div class="row">
                                        <div class="col-md-12">
                                        <HCMIS.Pages.EmployeeExit.PartialView.ExitRejectionCommentsPage 
                                            ExitInterviewId="@ExitData.ExitInterviewId"
                                            onscorecardtoggle="@ToggleRejectionComments" 
                                            hodcommentsdata="@ExitData.EmployeeExitInterviewRejectionComments.ToList()">                                        
                                        </HCMIS.Pages.EmployeeExit.PartialView.ExitRejectionCommentsPage>
                                        </div>
                                    </div>
                            </MudTabPanel>
                        </MudTabs>
                    </div>
                </div>

            }
        </Template>
        <FooterTemplate>  
            <button @onclick="@onSaveDraftForm" disabled=@IsDraftDisabled hidden=@IsHiddenDraft class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Save Draft</button>
            <button @onclick="@onSubmitForm" disabled=@IsSubmitDisabled hidden=@IsHiddenPersonSubmit class="btn btn-success" data-ripple="true" style="margin-right:10px;">Submit Request</button>
            <button @onclick="@onApproveForm" disabled=@IsApproveDisabled hidden=@IsHiddenApprove class="btn btn-success" data-ripple="true" style="margin-right:10px;">Approve</button>
            <button @onclick="@onRejectForm" disabled=@IsRejectDisabled hidden=@IsHiddenRejected class="btn btn-warning" data-ripple="true" style="margin-right:10px;">Reject</button>
            <button @onclick="@DialogCancelBtnclicked" class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Cancel</button>
        </FooterTemplate>
    </GridEditSettings>
    <GridEvents OnToolbarClick="@GridToolbarClick"
                OnActionComplete="ActionCompleteMain"
                OnActionBegin="ActionBeginMain"
                TValue="EmployeeExitInterview">
    </GridEvents>
    <SfDataManager AdaptorInstance="@typeof(EmployeeExitAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridColumns>
        @*<GridColumn Type="ColumnType.CheckBox" Width="30"></GridColumn>*@
        <GridColumn HeaderText="Edit"
                    TextAlign="TextAlign.Center"
                    Width="50"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-edit", CssClass = "e-flat"})"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeExitInterview.ExitInterviewId) HeaderText="Exit Interview Id" AllowEditing="false" IsPrimaryKey="true" Width="40" Visible="false"></GridColumn>
        <GridColumn Type="ColumnType.Number" AllowFiltering="false" AllowEditing="false" AllowSorting="false" HeaderText="#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="40" AutoFit="false" Visible="false"
        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"> 
             <Template Context="RowCounterContext">
             @{
                 var val = GetRowCounter1(RowCounterContext as EmployeeExitInterview);
                 @val.Result
             }
             </Template> 
        </GridColumn> 
        <GridForeignColumn Field=@nameof(EmployeeExitInterview.EmployeeId)
                           HeaderText="Employee"
                           Width="80"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ViewEmployeeDropDown.Employeeid))"
                           ForeignKeyValue="@(nameof(ViewEmployeeDropDown.EmployeeDetails))"
                           ForeignDataSource="@EmployeeData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>
        
        <GridColumn Field=@nameof(EmployeeExitInterview.DateToExit)
                    HeaderText="Exit Date"
                    Format="dd/MMMM/yyyy"
                    TextAlign="TextAlign.Justify"
                    Width="50"
                    ClipMode="ClipMode.EllipsisWithTooltip"
                    Type="ColumnType.Date"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
        </GridColumn>

        <GridForeignColumn Field=@nameof(EmployeeExitInterview.DutyReasonId)
                           HeaderText="Reason"
                           Width="50"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ASeparationofDuty.DutyReasonId))"
                           ForeignKeyValue="@(nameof(ASeparationofDuty.DutyReason))"
                           ForeignDataSource="@DutyReasonData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

        <GridForeignColumn Field=@nameof(EmployeeExitInterview.EmployeeExitStatusId)
                           HeaderText="Status"
                           Width="60"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(AEmployeeExitStatus.EmployeeExitStatusId))"
                           ForeignKeyValue="@(nameof(AEmployeeExitStatus.EmployeeExitStatusDescription))"
                           ForeignDataSource="@EmployeeExitStatusData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>
    </GridColumns>
</SfGrid>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="20%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        @*<div class="loader-Loading-text"></div>*@
                        <div class="loader-Saving-text"></div>
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

@*Submission*@

<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationSubmitDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationSubmitYes" />
            <DialogButton Content="No" OnClick="@ComfirmationSubmitNo" />
        </DialogButtons>
    </SfDialog>
</div>

@*Rejection*@
<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationYes" />
            <DialogButton Content="No" OnClick="@ComfirmationNo" />
        </DialogButtons>
    </SfDialog>
</div>

@*Reason for rejection - Supervisor*@
<div class="form-group col-md-12">
    <SfDialog @ref="@RejectLeaveDialogue" Width="80%" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @if (RejectionCommentsModel != null)
                {
                    <div class="form-row">
                        <div class="col-md-3">
                            <p>Provide Rejection Reason <span style="color:red;">*</span></p>
                        </div>
                        <div class="form-group col-md-12">
                            <SfTextBox Multiline="true" @bind-Value="@(RejectionCommentsModel.RejectionComments)" Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                        </div>
                    </div>
                }

            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton OnClick="@RejectReasonYes" Content="Confirm Rejection" IsPrimary="true" />
            <DialogButton OnClick="@RejectReasonNo" Content="Cancel" />
        </DialogButtons>
    </SfDialog>
</div>

@*Approval Confirmation*@
<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationApprovalDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationApprovalYes" />
            <DialogButton Content="No" OnClick="@ComfirmationApprovalNo" />
        </DialogButtons>
    </SfDialog>
</div>


@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 890000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters

    SfGrid<EmployeeExitInterview>? DataGrid { get; set; }
    SfGrid<EmployeeExitRating>? ExitRatingGrid { get; set; }
    private static EmployeeExitInterview? ExitData { get; set; }
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<AYesNo>? YesNoData { get; set; }
    List<AExitRating>? ExitRatingData { get; set; }
    List<AExitRatingAspects>? ExitRatingAspectsData { get; set; }
    List<EmployeeExitInterview>? ExitInterviewData { get; set; }
    List<AEmployeeExitStatus>? EmployeeExitStatusData { get; set; }
    List<ASeparationofDuty>? DutyReasonData { get; set; }
    private static ViewEmployeeDropDown? employeeno { get; set; }
    string UserJobTitle { get; set; }
    string UserRole { get; set; }    
    public static int UserJobTitleId { get; set; } = 0;
    public static int UserLevelId { get; set; } = 0;
    public bool EmployeeDD = true;
    public int? radiovalue;
    SfDialog? LoadingDialogue;
    public int RowCounter = 0;
    private DialogSettings AttachmentDialog = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "95%" };
    LoginResultModel? Credentials { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    public int _PeriodofServiceYears { get; set; } = 0;
    public double _PeriodofServiceDays { get; set; } = 0;
    public int _PeriodofServiceMonths { get; set; } = 0;
    bool IsHiddenPersonSubmit;
    bool IsHiddenDraft;
    bool IsDraftDisabled;
    bool IsSubmitDisabled;
    bool IsHiddenRejected;
    bool IsRejectDisabled;
    bool IsHiddenApprove;
    bool IsApproveDisabled;
    SfDialog ConfirmationSubmitDialogue;
    SfDialog ConfirmationApprovalDialogue;
    string ConfirmationText { get; set; }
    Syncfusion.Blazor.Grids.Action _previous { get; set; }
    SfDialog ConfirmationDialogue;
    SfDialog RejectLeaveDialogue;
    EmployeeExitInterviewRejectionComments? RejectionCommentsModel { get; set; }
    private List<ExitRatingClass> ExitRatingList = new List<ExitRatingClass>();
    public bool OnSubmitButtonsBool { get; set; }

    public class  ExitRatingClass
    {
        public int EmployeExitRatingId { get; set; }
        public int? ExitInterviewId { get; set; }
        public int? ExitRatingId { get; set; }
        public int ExitRatingAspectId { get; set; }
        public string? AspectDescription { get; set; }
        public string? RatingDescription { get; set; }
        public double? RatingValue { get; set; }
    }

    private void ToggleRejectionComments(List<EmployeeExitInterviewRejectionComments>? HODCommentsChange)
    {
        if (ExitData != null && HODCommentsChange != null)
        {
            if (ExitData.EmployeeExitInterviewRejectionComments == null)
            {
                ExitData.EmployeeExitInterviewRejectionComments = new List<EmployeeExitInterviewRejectionComments>();
            }
            ExitData.EmployeeExitInterviewRejectionComments = HODCommentsChange;
        }
    }

   
    private async void GenerateAssociationList()
    {
        try
        {
            if (ExitRatingAspectsData == null)
            {
                return;
            }

            if (ExitData != null && ExitData.EmployeeExitRating == null)
            {
                List<EmployeeExitRating> m = new List<EmployeeExitRating>();

                foreach (var n in ExitRatingAspectsData)
                {
                    Random random = new Random();
                    m.Add(new EmployeeExitRating
                        {
                            EmployeExitRatingId = random.Next(1000, 10000),
                            ExitRatingAspectId = n.ExitRatingAspectId
                        });
                }
                ExitData.EmployeeExitRating = m;
            }

            else
            {
                foreach (var n in ExitRatingAspectsData)
                {
                    var x = ExitData.EmployeeExitRating.FirstOrDefault(o => o.ExitRatingAspectId == n.ExitRatingAspectId);
                    if (x == null)
                    {
                        Random random = new Random();
                        ExitData.EmployeeExitRating.Add(new EmployeeExitRating
                            {
                                EmployeExitRatingId = random.Next(1000, 10000),
                                ExitRatingAspectId = n.ExitRatingAspectId
                            });
                    }
                }
            }

        }
        catch (Exception ex)
        {

        }

        finally
        {

        }
    }

    protected override async Task OnParametersSetAsync()
    {
        GenerateAssociationList();
    }

    //To number grid rows
    public async Task<int> GetRowCounter1(EmployeeExitInterview val)
    { 
        RowCounter = (int)await DataGrid.GetRowIndexByPrimaryKey(val.ExitInterviewId);
        return RowCounter + 1 ; 
    } 

    public async Task<int> GetRowCounter(EmployeeExitRating val) 
    { 
        RowCounter = (int)await ExitRatingGrid.GetRowIndexByPrimaryKey(val.EmployeExitRatingId);
        return RowCounter + 1 ; 
    } 

    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "//IDValue###_excelexport")
        {
            this.DataGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "//IDValue###_pdfexport")
        {
            this.DataGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "//IDValue###_csvexport")
        {
            this.DataGrid.ExportToCsvAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            await base.OnInitializedAsync();
            var isAuthenticated = await AuthService.CheckAuthenticationStatus();
            if (isAuthenticated == false)
            {
                navManager.NavigateTo("/LoginPage", true);
            }
            else
            {
                employeeno = null;
                if (ExitRatingList != null)
                {
                    ExitRatingList.Clear();
                }
                Credentials = await AuthService.GetUserCredentials();

                List<Task> t = new List<Task>();

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"BalanceScoreCard/GetEmployeeData");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetYesNo");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        YesNoData = JsonSerializer.Deserialize<List<AYesNo>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetExitRating");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        ExitRatingData = JsonSerializer.Deserialize<List<AExitRating>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetExitRatingAspects");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        ExitRatingAspectsData = JsonSerializer.Deserialize<List<AExitRatingAspects>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetExitRatingAspects");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        ExitRatingAspectsData = JsonSerializer.Deserialize<List<AExitRatingAspects>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responseseparationreason = await Http.GetAsync($"Utilities/GetSeparationReason");
                    if (responseseparationreason.IsSuccessStatusCode)
                    {
                        var contentseparationreason = await responseseparationreason.Content.ReadAsStringAsync();
                        DutyReasonData = JsonSerializer.Deserialize<List<ASeparationofDuty>>(contentseparationreason, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetEmployeeExitStatus");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        EmployeeExitStatusData = JsonSerializer.Deserialize<List<AEmployeeExitStatus>>(content, _options);
                    }
                }));

                Task _t = Task.WhenAll(t);
                await _t;
            }

        }
        catch (Exception ex)
        {

        }
    }

    protected async Task OnEndDateChange(ChangedEventArgs<DateTime?> value)
    {

        try
        {
            var _employee = EmployeeData.FirstOrDefault(o=>o.Employeeid == ExitData.EmployeeId);
            if(_employee != null && _employee.DateJoined != null)
            {
                _PeriodofServiceYears = Convert.ToDateTime(ExitData.DateToExit).Year - Convert.ToDateTime(_employee.DateJoined).Year;
                _PeriodofServiceMonths = ((ExitData.DateToExit.Value.Year - _employee.DateJoined.Value.Year) * 12) + ExitData.DateToExit.Value.Month - _employee.DateJoined.Value.Month;
                _PeriodofServiceDays = (ExitData.DateToExit.Value - _employee.DateJoined.Value).TotalDays;

            }
        }
        catch(Exception ex)
        {

        }
        finally
        {

        }
    }

    public async Task onSaveDraftForm()
    {
        try
        {
            if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                ExitData.EmployeeExitStatusId = 1;
                ExitData.DateCreated = DateTime.Now;
                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ClearAll();
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    #region submission

    public async Task onSubmitForm()
    {
        try
        {
            if (ExitData.EmployeeId == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the employee");
            }
            else if(ExitData.DateToExit == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please enter the last date worked for");
            }
            else
            {
                ConfirmationText = "<p>Are you sure you want to submit this record? </p>";
                await this.ConfirmationSubmitDialogue.ShowAsync();
            }            
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    public async Task ComfirmationSubmitYes()
    {
        try
        {
            if (DataGrid != null)
            {
                if (ExitRatingGrid != null)
                {
                    await ExitRatingGrid.EndEditAsync();
                }

                //For a new record
                if(_previous == Syncfusion.Blazor.Grids.Action.Add)
                {
                    ExitData.EmployeeExitStatusId = 2;
                    ExitData.DateCreated = DateTime.Now;
                }
                //Employee Editing - Draft
                else if((_previous == Syncfusion.Blazor.Grids.Action.BeginEdit) && ExitData.EmployeeExitStatusId == 1)
                {
                    ExitData.EmployeeExitStatusId = 3;
                    ExitData.DateSubmitted = DateTime.Now;
                }

                //Employee Editing Under Employee Section
                else if((_previous == Syncfusion.Blazor.Grids.Action.BeginEdit) && ExitData.EmployeeExitStatusId == 2)
                {
                    ExitData.EmployeeExitStatusId = 3;
                    ExitData.DateSubmitted = DateTime.Now;
                }
                //HR Returning
                else if((_previous == Syncfusion.Blazor.Grids.Action.BeginEdit) && ExitData.EmployeeExitStatusId == 3)
                {
                    ExitData.EmployeeExitStatusId = 4;
                    ExitData.DateReturned = DateTime.Now;
                }
                
                await DataGrid.EndEditAsync();


            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            await this.ConfirmationSubmitDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void ComfirmationSubmitNo()
    {
        this.ConfirmationSubmitDialogue.HideAsync();
    }

    #endregion submission

    #region rejection

    public async Task onRejectForm()
    {
        try
        {
            ConfirmationText = "<p>Are you sure you want to return this form to the employee! </p>";
            await this.ConfirmationDialogue.ShowAsync();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }


    private async void ComfirmationYes()
    {
        try
        {
            RejectionCommentsModel = new EmployeeExitInterviewRejectionComments();
            if (ExitData != null)
            {
                RejectionCommentsModel.ExitInterviewId = ExitData.ExitInterviewId;
            }

            if (Credentials != null)
            {
                RejectionCommentsModel.AddedBy = Credentials.AccountHolderName;
            }
            RejectionCommentsModel.AddedDate = DateTime.Now;

            if (ConfirmationDialogue != null)
            {
                await ConfirmationDialogue.HideAsync();
            }

            if (RejectLeaveDialogue != null)
            {
                await RejectLeaveDialogue.ShowAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            ///DataGrid.Refresh();
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void ComfirmationNo()
    {
        this.ConfirmationDialogue.HideAsync();
    }

    //Rejection Reason
    private async Task RejectReasonYes()
    {
        try
        {
            if (string.IsNullOrEmpty(RejectionCommentsModel.RejectionComments))
            {
                toastService.ShowWarning("Please enter a reason as to why you are returning this");
            }
            else
            {
                await LoadingDialogue.ShowAsync();
                if (ExitData.EmployeeExitInterviewRejectionComments == null)
                {
                    ExitData.EmployeeExitInterviewRejectionComments = new List<EmployeeExitInterviewRejectionComments>();
                }
                ExitData.EmployeeExitInterviewRejectionComments.Add(RejectionCommentsModel);

                //HR Review
                if (ExitData.EmployeeExitStatusId == 3)
                {
                    ExitData.EmployeeExitStatusId = 4;
                    ExitData.DateReturned = DateTime.Now;
                }

                if (RejectLeaveDialogue != null)
                {
                    await RejectLeaveDialogue.HideAsync();
                }

                if(DataGrid != null)
                {
                    await DataGrid.EndEditAsync();
                }
                
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            ///await DataGrid.Refresh();
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void RejectReasonNo()
    {
        DataGrid.Refresh();
        this.RejectLeaveDialogue.HideAsync();
    }
    #endregion rejection

    #region approve

    public async Task onApproveForm()
    {
        try
        {
            ConfirmationText = "<p>Are you sure you want to approve this employee exit record! </p>";
            await this.ConfirmationApprovalDialogue.ShowAsync();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void ComfirmationApprovalYes()
    {
        try
        {
            if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                ExitData.EmployeeExitStatusId = 5;
                ExitData.DateApproved = DateTime.Now;

                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            await this.ConfirmationApprovalDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void ComfirmationApprovalNo()
    {
        this.ConfirmationApprovalDialogue.HideAsync();
    }

    #endregion approve


    public async void DialogCancelBtnclicked()
    {        
        if (DataGrid != null)
        {
            if (ExitRatingGrid != null)
            {
                await ExitRatingGrid.CloseEditAsync();
            }
            await DataGrid.CloseEditAsync();
        }
    }

    private void OnValueChange(ChangeArgs<int?> args)
    {
        radiovalue = args.Value;
    }

    public async Task OnValueChange1(ChangeArgs<bool> Args, EmployeeExitRating val)
    {
        //to find the row index
        var rowIndex = ExitRatingGrid.CurrentViewData.ToList().IndexOf(val);
        //select the record using index and SelectRow method
        await ExitRatingGrid.SelectRow((int)rowIndex, false);
    }

    public async void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeeno = args.ItemData;
    }


    public async void ActionCompleteMain(ActionEventArgs<EmployeeExitInterview> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) ||
        args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            DataGrid.PreventRender(false);
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            
        }
    }

    public async void ActionBeginMain(ActionEventArgs<EmployeeExitInterview> Args)
    {
        var data = Args.Data;
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            _previous = Args.RequestType;

        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            _previous = Args.RequestType;
            employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.EmployeeId);

            if (Args.RowData.EmployeeExitRating == null)
            {
                Args.RowData.EmployeeExitRating = new List<EmployeeExitRating>();
            }

            if (ExitRatingAspectsData != null)
            {
                foreach (var n in ExitRatingAspectsData)
                {
                    var x = Args.RowData.EmployeeExitRating.FirstOrDefault(o => o.ExitRatingAspectId == n.ExitRatingAspectId);
                    if (x == null)
                    {
                        Random random = new Random();
                        Args.RowData.EmployeeExitRating.Add(new EmployeeExitRating
                            {
                                EmployeExitRatingId = random.Next(1000, 10000),
                                ExitRatingAspectId = n.ExitRatingAspectId
                            });
                    }
                }
            }        
        
            //Draft
            if (Args.RowData.EmployeeExitStatusId == 1)
            {
                IsHiddenRejected = true;
                IsHiddenApprove = true;

                //If person editing is the same as the employee, hide buttons and not draft
                if (Args.RowData.EmployeeId == Credentials.StaffId)
                {
                    //Buttons
                    IsHiddenDraft = false;
                    IsHiddenPersonSubmit = false;                    
                    OnSubmitButtonsBool = true;
                }
                else
                {
                    IsHiddenDraft = true;
                    IsHiddenPersonSubmit = true;
                    OnSubmitButtonsBool = false;
                }
            }

            //Under Employee Section
            else if (Args.RowData.EmployeeExitStatusId == 2)
            {
                IsHiddenRejected = true;
                IsHiddenApprove = true;

                //If person editing is the same as the employee, hide buttons and not draft
                if (Args.RowData.EmployeeId == Credentials.StaffId)
                {
                    //Buttons
                    IsHiddenDraft = false;
                    IsHiddenPersonSubmit = false;                    
                    OnSubmitButtonsBool = true;
                }
                else
                {
                    IsHiddenDraft = true;
                    IsHiddenPersonSubmit = true;
                    OnSubmitButtonsBool = false;
                }
            }

            //Submitted to HR
            else if (Args.RowData.EmployeeExitStatusId == 3)
            {
                OnSubmitButtonsBool = false;
                IsHiddenDraft = true;
                IsHiddenPersonSubmit = true;

                //If person editing is the same as the employee, hide buttons and not draft
                if (Args.RowData.EmployeeId == Credentials.StaffId)
                {
                    //Buttons                    
                    IsHiddenRejected = true;  
                    IsHiddenApprove = true;
                }
                else
                {
                    IsHiddenRejected = false;
                    IsHiddenApprove = false;
                }
            }

            //Returned to Employee
            else if (Args.RowData.EmployeeExitStatusId == 4)
            {
                IsHiddenApprove = true;
                IsHiddenRejected = true;

                //If person editing is the same as the employee, hide buttons and not draft
                if (Args.RowData.EmployeeId == Credentials.StaffId)
                {
                    //Buttons
                    IsHiddenDraft = false;
                    IsHiddenPersonSubmit = false;
                    OnSubmitButtonsBool = true;
                }
                else
                {
                    IsHiddenDraft = true;
                    IsHiddenPersonSubmit = true;
                    OnSubmitButtonsBool = false;
                }
            }

            //Approved
            else if (Args.RowData.EmployeeExitStatusId == 5)
            {
                IsHiddenApprove = true;
                IsHiddenRejected = true;
                IsHiddenDraft = true;
                IsHiddenPersonSubmit = true;
                OnSubmitButtonsBool = false;
            }


            if (employeeno != null && employeeno.DateJoined != null && Args.RowData.DateToExit != null)
            {
                _PeriodofServiceYears = Convert.ToDateTime(Args.RowData.DateToExit).Year - Convert.ToDateTime(employeeno.DateJoined).Year;
                _PeriodofServiceMonths = ((Args.RowData.DateToExit.Value.Year - employeeno.DateJoined.Value.Year) * 12) + Args.RowData.DateToExit.Value.Month - employeeno.DateJoined.Value.Month;
                _PeriodofServiceDays = (Args.RowData.DateToExit.Value - employeeno.DateJoined.Value).TotalDays;

            }
        
        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            _previous = Args.RequestType;
            employeeno = null;
            OnSubmitButtonsBool = true;

            //Show buttons on add
            IsHiddenDraft = false;
            IsHiddenPersonSubmit = false;
            IsHiddenRejected = true;
            IsHiddenApprove = true;

            Args.RowData.EmployeeExitRating = new List<EmployeeExitRating>();

            if (ExitRatingAspectsData != null)
            {
                foreach (var n in ExitRatingAspectsData)
                {
                    Random random = new Random();
                    Args.RowData.EmployeeExitRating.Add(new EmployeeExitRating
                        {
                            EmployeExitRatingId = random.Next(1000, 10000),
                            ExitRatingAspectId = n.ExitRatingAspectId
                        });
                }
            }
        }
    }

    //Enable cell edit on single click
    public async Task CellSelectHandler(CellSelectEventArgs<EmployeeExitRating> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await ExitRatingGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await ExitRatingGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await ExitRatingGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    public string GetExitHeader(EmployeeExitInterview Value)
    {
        if (Value.ExitInterviewId == 0)
        {
            return "New Record";
        }
        else
        {
            return "Editing Record ";

            // if(EmployeeData != null)
            // {
            //     var empdetail = EmployeeData.FirstOrDefault(o => o.Employeeid == Value.EmployeeId);
            //     return "Edit " + empdetail.EmployeeDetails + "'s Record";
            // }             

        }
    }

    #region EmployeeExitAdapter

    public class EmployeeExitAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public EmployeeExitAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _SystemSettings = systemSettings;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            

            var data = new List<EmployeeExitInterview>();

            string? AccessToken = _SystemSettings.AccessToken;
            string? BaseUrl = _ApiConfig.BaseUrl;

            try
            {
                 
                var response = await Http.GetAsync($"EmployeeExit/GetEmployeeExitData");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<EmployeeExitInterview>>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<EmployeeExitInterview>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as EmployeeExitInterview);
                if (val != null)
                {
                    if (val.ExitInterviewId == 0)
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"EmployeeExit/CreateExitInterview", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"EmployeeExit/UpdateExitInterview", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as EmployeeExitInterview);
                if (val != null)
                {
                    if (val.ExitInterviewId == 0)
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"EmployeeExit/CreateExitInterview", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"EmployeeExit/UpdateExitInterview?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }

    }
    #endregion EmployeeExitAdapter
}
