@page "/SectionTwoPage"
@using HCMIS.Interface;
@using HCMIS.SHARED.DTOs.Utilities;
@using System.Text.Json;
@using System.Collections;
@inject HttpClient Http;
@inject IToastService toastService;
@inject IAuthenticationService AuthService;

<h3>SectionTwo</h3>

@* @{
    var Div = (new string[] { "BscPerspectiveTypeId"});
    DataSource="@BscData.BalanceScoreCardTargetSetting"
}
 *@

 @if(BscData != null 
 && BscData.BalanceScoreCardTargetSetting != null 
&& BscData.BalanceScoreCardTargetSetting.Count > 0)
{
    <SfGrid @ref="@TargetsettingGrid"  GridLines="GridLine.Both"
            TValue="BalanceScoreCardTargetSettingDto" ID="Grid1" AllowTextWrap="true" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true">
        <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
        @*<GridGroupSettings Columns="@Div" ShowDropArea="false">
    <CaptionTemplate Context="HeaderCaptionTemplateContext">
    @{
    // var dvn = (HeaderCaptionTemplateContext as CaptionTemplateContext);

    // string text = string.Empty;
    // if (dvn.Field == "BscPerspectiveTypeId" && BscPerspectiveTypeData != null)
    // {
    //     var data = BscPerspectiveTypeData.FirstOrDefault(o => o.BscPerspectiveTypeId.ToString() == dvn.Key);
    //     if (data != null)
    //     {
    //         text = data.BscPerspectiveTypeDescription;
    //     }
    // // }
    // //if (dvn.Field == "PerspectiveTotalWeight")
    // //{
    // //    text = "Perspective Total Weight: " + dvn.Key;
    // //}
    // <div><p class="pp"><strong>@text</strong></p></div>
    }
    </CaptionTemplate>
    </GridGroupSettings>*@
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                    <GridAggregateColumn Field=@nameof(BalanceScoreCardTargetSettingDto.IndividualTargetWeight) Type="Syncfusion.Blazor.Grids.AggregateType.Sum">
                        <GroupFooterTemplate Context="GFTemplateContext">
                            @{
                                aggregate = (GFTemplateContext as AggregateTemplateContext);
                                <div>
                                    <p span style="color:Purple;">Total: @aggregate.Sum</p>
                                </div>
                            }
                        </GroupFooterTemplate>
                    </GridAggregateColumn>

                    <GridAggregateColumn Field=@nameof(BalanceScoreCardTargetSettingDto.IndividualTargetObjectiveScore) Type="Syncfusion.Blazor.Grids.AggregateType.Sum">
                        <GroupFooterTemplate Context="FTemplateContext">
                            @{
                                aggregate = (FTemplateContext as AggregateTemplateContext);
                                <div>
                                    @if (@aggregate != null)
                                    {
                                        <p style="color:purple;">@aggregate.Sum %</p>
                                    }
                                </div>
                            }
                        </GroupFooterTemplate>
                    </GridAggregateColumn>

                    <GridAggregateColumn Field=@nameof(BalanceScoreCardTargetSettingDto.SupervisorAssessTgt) Type="Syncfusion.Blazor.Grids.AggregateType.Sum">
                        <FooterTemplate Context="FooterTemplateContext">
                            @{
                                aggregate = (FooterTemplateContext as AggregateTemplateContext);
                                <div>
                                    @if (@aggregate != null)
                                    {
                                        <p style="color:purple;">Target Score: @aggregate.Sum %</p>
                                    }
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>

                    <GridAggregateColumn Field=@nameof(BalanceScoreCardTargetSettingDto.IndividualTargetObjectiveScore) Type="Syncfusion.Blazor.Grids.AggregateType.Sum">
                        <FooterTemplate Context="Footer2TemplateContext">
                            @{
                                aggregate = (Footer2TemplateContext as AggregateTemplateContext);
                                <div>
                                    @if (@aggregate != null)
                                    {
                                        <p style="color:purple;">Individual Score: @aggregate.Sum %</p>
                                    }
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>

                </GridAggregateColumns>



            </GridAggregate>
        </GridAggregates>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
        <GridEvents CellSelected="CellSelectHandler"
                    CellSaved="CellSavedHandler"
                    OnCellSave="CellSaveHandler"
                    QueryCellInfo="QueryCellInfoHandlerTargets"
                    OnCellEdit="CellEditHandlerTargets"
                    TValue="BalanceScoreCardTargetSettingDto">
        </GridEvents>
        <SfDataManager AdaptorInstance="@typeof(TargetsAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
        <GridColumns>
            <GridColumn Type="ColumnType.CheckBox" Width="50" Visible=false></GridColumn>
            <GridColumn Field=@nameof(BalanceScoreCardTargetSettingDto.TargetSettingId) HeaderText="TargetSettingId" Visible=false IsPrimaryKey="true" Width="150"></GridColumn>
            <GridColumn Field=@nameof(BalanceScoreCardTargetSettingDto.BalanceScoreCardId) HeaderText="BalanceScoreCardId" TextAlign="TextAlign.Right" AllowEditing="false" ValidationRules="@(new ValidationRules { Required = false })" EditType="EditType.NumericEdit" Visible=false Width="180" IsFrozen="false"></GridColumn>
            <GridForeignColumn Field=@nameof(BalanceScoreCardTargetSettingDto.BscPerspectiveTypeId)
                               HeaderText="Perspective"
                               Width="100"
                               AllowEditing="false"
                               ForeignKeyField="@(nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeId))"
                               ForeignKeyValue="@(nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeDescription))"
                               ForeignDataSource="@BscPerspectiveTypeData"
                               AllowFiltering="false"
                               IsFrozen="false"
                               Visible=true
                               CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
            </GridForeignColumn>
            <GridColumn HeaderText="Perspective Total Weight"
                        Width="60"
                        AllowEditing="false"
                        Field=@nameof(BalanceScoreCardTargetSettingDto.PerspectiveTotalWeight)
                        EditType="EditType.NumericEdit"
                        IsFrozen="false"
                        Format="N1"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
            </GridColumn>


            @*Employee Performance Setting*@
            <GridColumn HeaderText="Employee Performance Setting"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                <GridColumns>
                    <GridForeignColumn Field=@nameof(BalanceScoreCardTargetSettingDto.BsckpidetailsId)
                                       HeaderText="Key Performance Indicator (KPI)"
                                       TextAlign="TextAlign.Justify"
                                       Width="80"
                                       AllowEditing="false"
                                       ForeignKeyField="@(nameof(ABscKpidetailsDto.BsckpidetailsId))"
                                       ForeignKeyValue="@(nameof(ABscKpidetailsDto.Objective))"
                                       ForeignDataSource="@KpiDetailsData"
                                       IsFrozen="false"
                                       CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                    </GridForeignColumn>
                    <GridForeignColumn Field=@nameof(BalanceScoreCardTargetSettingDto.MeasurementMetricId)
                                       HeaderText="Performance Measurement/Metric"
                                       TextAlign="TextAlign.Justify"
                                       Width="70"
                                       AllowEditing="false"
                                       ForeignKeyField="@(nameof(AMeasurementMetricDto.MeasurementMetricId))"
                                       ForeignKeyValue="@(nameof(AMeasurementMetricDto.MeasurementMetricDesc))"
                                       ForeignDataSource="@MeasurementUnitData"
                                       ClipMode="ClipMode.EllipsisWithTooltip"
                                       CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                    </GridForeignColumn>

                    <GridColumn Field=@nameof(BalanceScoreCardTargetSettingDto.IndividualTargetWeight)
                                HeaderText="Individual Target Weight (%)"
                                TextAlign="TextAlign.Justify"
                                AllowEditing="false"
                                ValidationRules="@(new ValidationRules { Required = false })"
                                EditType="EditType.NumericEdit"
                                Format="###.##"
                                Width="50"
                                IsFrozen="false"
                                ClipMode="ClipMode.EllipsisWithTooltip"
                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                    </GridColumn>

                    <GridColumn Field=@nameof(BalanceScoreCardTargetSettingDto.EvidenceId)
                                HeaderText="Evidence"
                                TextAlign="TextAlign.Justify"
                                AllowEditing="@IsEmployeeEnabledColumn"
                                ValidationRules="@(new ValidationRules { Required = false })"
                                Width="80"
                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                    </GridColumn>

                    <GridColumn Field=@nameof(BalanceScoreCardTargetSettingDto.EmployeeSelfAssessTgt)
                                HeaderText="Employee Self Assessment % Target Achievement"
                                TextAlign="TextAlign.Justify"
                                AllowEditing="@IsEmployeeEnabledColumn"
                                ValidationRules="@(new ValidationRules { Required = false })"
                                EditType="EditType.NumericEdit"
                                Format="###.##"
                                Width="70"
                                ClipMode="ClipMode.EllipsisWithTooltip"
                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                    </GridColumn>

                </GridColumns>
            </GridColumn>

            <GridColumn HeaderText="Supervisor Assessment"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                <GridColumns>
                    <GridColumn Field=@nameof(BalanceScoreCardTargetSettingDto.SupervisorAssessTgt)
                                HeaderText="Supervisor Assessment % Target Achievement"
                                TextAlign="TextAlign.Justify"
                                AllowEditing="@IsSupervisorEnabledColumn"
                                ValidationRules="@(new ValidationRules { Required = false })"
                                EditType="EditType.NumericEdit"
                                Format="###.##"
                                Width="70"
                                ClipMode="ClipMode.EllipsisWithTooltip"
                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                    </GridColumn>
                    <GridColumn Field=@nameof(BalanceScoreCardTargetSettingDto.SupervisorComments)
                                HeaderText="Supervisor Comments"
                                TextAlign="TextAlign.Justify"
                                AllowEditing="@IsSupervisorEnabledColumn"
                                ValidationRules="@(new ValidationRules { Required = false })"
                                Width="60"
                                ClipMode="ClipMode.EllipsisWithTooltip"
                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                    </GridColumn>
                    <GridColumn Field="@(nameof(BalanceScoreCardTargetSettingDto.IndividualTargetObjectiveScore))"
                                Format="N1"
                                AllowEditing=false
                                HeaderText="Individual Target/Objective Score (%)"
                                TextAlign="TextAlign.Justify"
                                Visible=true
                                Width="60"
                                ClipMode="ClipMode.EllipsisWithTooltip"
                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                    </GridColumn>
                </GridColumns>
            </GridColumn>

        </GridColumns>
    </SfGrid>

}

@code 
{
    SfGrid<BalanceScoreCardTargetSettingDto>? TargetsettingGrid { get; set; }
    List<ViewBscPerspectiveperformanceIndicatorDto>? PopulatedData { get; set; }
    List<ABscPerspectivesTypeDto>? BscPerspectiveTypeData { get; set; }
    List<ABscKpidetailsDto>? KpiDetailsData { get; set; }
    List<AMeasurementMetricDto>? MeasurementUnitData { get; set; }
    bool IsEmployeeEnabledColumn = true;
    bool IsSupervisorEnabledColumn = true;
    Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    Syncfusion.Blazor.Grids.Action _previous { get; set; }
    private static BalanceScoreCardDto? BscData { get; set; }


    protected override async Task OnInitializedAsync()
    {    
        int? finyear = null;

        
        List<Task> t = new List<Task>();
        t.Add(Task.Run(async () =>
        {
            var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
            if (responsemetric.IsSuccessStatusCode)
            {
                var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetricDto>>(contentmetric, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseKpi = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicatorDetails");
            if (responseKpi.IsSuccessStatusCode)
            {
                var contentKpi = await responseKpi.Content.ReadAsStringAsync();
                KpiDetailsData = JsonSerializer.Deserialize<List<ABscKpidetailsDto>>(contentKpi, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsetargetpopulated = await Http.GetAsync($"TargetSetting/GetPopulatedData");
            if (responsetargetpopulated.IsSuccessStatusCode)
            {
                var contenttargetpopulated = await responsetargetpopulated.Content.ReadAsStringAsync();
                PopulatedData = JsonSerializer.Deserialize<List<ViewBscPerspectiveperformanceIndicatorDto>>(contenttargetpopulated, _options);
            }
        }));

        Task _t = Task.WhenAll(t);
        await _t;
    }

    #region TargetsAdapter

    public class TargetsAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        IAuthenticationService _AuthService;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public TargetsAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , IAuthenticationService authservice, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<BalanceScoreCardDto>();
            try
            {

                var response = await Http.GetAsync($"BalanceScoreCard/GetBSCData");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<BalanceScoreCardDto>>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<BalanceScoreCardDto>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        // public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        // {
        //     try
        //     {
        //         string? _baseurl = Navigation.BaseUri;
        //         var val = (value as BalanceScoreCardDto);
        //         if (val != null)
        //         {
        //             if (val.BalanceScoreCardId == 0)
        //             {

        //                 string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
        //                 StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

        //                 var result = await Http.PostAsync($"BalanceScoreCard/CreateAppraisal?_baseurl={_baseurl}", httpContent);
        //                 if (result.IsSuccessStatusCode)
        //                 {
        //                     var content = await result.Content.ReadAsStringAsync();
        //                     var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
        //                     if (data != null)
        //                     {
        //                         if (data.IsSuccess)
        //                         {
        //                             toastService.ShowSuccess(data.Message);
        //                         }
        //                         else
        //                         {
        //                             toastService.ShowError(data.Message);
        //                         }
        //                     }
        //                 }
        //                 else
        //                 {
        //                     toastService.ShowError(result.ReasonPhrase);
        //                 }

        //             }
        //             else
        //             {

        //                 string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
        //                 StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

        //                 var result = await Http.PutAsync($"BalanceScoreCard/UpdateAppraisal?_baseurl={_baseurl}", httpContent);
        //                 if (result.IsSuccessStatusCode)
        //                 {
        //                     var content = await result.Content.ReadAsStringAsync();
        //                     var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
        //                     if (data != null)
        //                     {
        //                         if (data.IsSuccess)
        //                         {
        //                             toastService.ShowSuccess(data.Message);
        //                         }
        //                         else
        //                         {
        //                             toastService.ShowError(data.Message);
        //                         }
        //                     }
        //                 }
        //                 else
        //                 {
        //                     toastService.ShowError(result.ReasonPhrase);
        //                 }
        //             }
        //         }
        //     }
        //     catch (Exception ex)
        //     {
        //         toastService.ShowError(ex.Message.ToString());
        //     }
        //     return value;
        // }

        // public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        // {
        //     try
        //     {
        //         string? _baseurl = Navigation.BaseUri;
        //         var val = (value as BalanceScoreCardDto);
        //         if (val != null)
        //         {
        //             if (val.BalanceScoreCardId == 0)
        //             {

        //                 string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
        //                 StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

        //                 var result = await Http.PostAsync($"BalanceScoreCard/CreateAppraisal?_baseurl={_baseurl}", httpContent);
        //                 if (result.IsSuccessStatusCode)
        //                 {
        //                     var content = await result.Content.ReadAsStringAsync();
        //                     var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
        //                     if (data != null)
        //                     {
        //                         if (data.IsSuccess)
        //                         {
        //                             toastService.ShowSuccess(data.Message);
        //                         }
        //                         else
        //                         {
        //                             toastService.ShowError(data.Message);
        //                         }
        //                     }
        //                 }
        //                 else
        //                 {
        //                     toastService.ShowError(result.ReasonPhrase);
        //                 }

        //             }
        //             else
        //             {

        //                 string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
        //                 StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

        //                 var result = await Http.PutAsync($"BalanceScoreCard/UpdateAppraisal?_baseurl={_baseurl}", httpContent);
        //                 if (result.IsSuccessStatusCode)
        //                 {
        //                     var content = await result.Content.ReadAsStringAsync();
        //                     var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
        //                     if (data != null)
        //                     {
        //                         if (data.IsSuccess)
        //                         {
        //                             toastService.ShowSuccess(data.Message);
        //                         }
        //                         else
        //                         {
        //                             toastService.ShowError(data.Message);
        //                         }
        //                     }
        //                 }
        //                 else
        //                 {
        //                     toastService.ShowError(result.ReasonPhrase);
        //                 }
        //             }
        //         }
        //     }
        //     catch (Exception ex)
        //     {
        //         toastService.ShowError(ex.Message.ToString());
        //     }

        //     return value;
        // }

    }


    #endregion TargetsAdapter


    //For Target Grid
    //Enable cell edit on single click
    public async Task CellSelectHandler(CellSelectEventArgs<BalanceScoreCardTargetSettingDto> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await TargetsettingGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await TargetsettingGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await TargetsettingGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    private async Task CellSavedHandler(CellSaveArgs<BalanceScoreCardTargetSettingDto> args)
    {
        try
        {
            var index = await TargetsettingGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.TargetSettingId);
            if (args.ColumnName == nameof(BalanceScoreCardTargetSettingDto.IndividualTargetWeight) || args.ColumnName == nameof(BalanceScoreCardTargetSettingDto.SupervisorAssessTgt))
            {
                double targetobjectivescore = 0;
                double individualtargetweight = 0;
                double supervisorassesstarget = 0;

                if (args.Data.IndividualTargetWeight.HasValue)
                {
                    individualtargetweight = args.Data.IndividualTargetWeight.Value;
                }
                if (args.Data.SupervisorAssessTgt.HasValue)
                {
                    supervisorassesstarget = args.Data.SupervisorAssessTgt.Value;
                }

                //targetobjectivescore = (((double)individualtargetweight) * ((double)supervisorassesstarget));
                targetobjectivescore = ((((double)individualtargetweight) / 100 * ((double)supervisorassesstarget) / 100) * 100);
                await TargetsettingGrid.UpdateCellAsync(index, nameof(BalanceScoreCardTargetSettingDto.IndividualTargetObjectiveScore), targetobjectivescore);
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await TargetsettingGrid.EndEditAsync();
        }
    }

    public void CellSaveHandler(CellSaveArgs<BalanceScoreCardTargetSettingDto> args)
    {
        //Disable editing next cell if value in previous cell is greater than 100%
        if (Convert.ToInt32(args.Value) > 100)
        {
            toastService.ShowWarning("You cannot enter a % greater than 100 %");
            args.Cancel = true;
        }
        else
        {
            args.Cancel = false;
        }
        // Here, you can customize your code.
    }

    public void QueryCellInfoHandlerTargets(QueryCellInfoEventArgs<BalanceScoreCardTargetSettingDto> Args)
    {
        //if (_previous == Syncfusion.Blazor.Grids.Action.Add)
        //{
        //    if (Args.Column.Field == nameof(BalanceScoreCardTargetSettingDto.SupervisorAssessTgt))
        //    {
        //        Args.Cell.AddClass(new string[] { "disablecolumn" });
        //    }
        //}
        //else if(_previous == Syncfusion.Blazor.Grids.Action.BeginEdit)
        //{

        //}
    }

    public void CellEditHandlerTargets(CellEditArgs<BalanceScoreCardTargetSettingDto> args)
    {
        //if(IsSupervisorEnabledColumn == false)
        //{
        //    toastService.ShowWarning("Sorry ! You are not permitted to capture details here !");
        //    args.Cancel = true;
        //}
        //else
        //{
        //    args.Cancel = false;
        //}
    }
}
