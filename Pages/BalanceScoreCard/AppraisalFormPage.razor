@page "/AppraisalFormPage"
@using HCMIS.Data;
@using HCMIS.Model
@using HCMIS.Pages.BalanceScoreCard.PartialViews
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Text.RegularExpressions
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Collections;
@inject IToastService toastService;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;
@inject NavigationManager navManager;

<meta charset="UTF-8">

<style>
    /*Manage Records Button*/
    .e-grid .e-icons:not(.e-btn-icon) {
        color: #00cc00;
        color: floralwhite;
        font-size: smaller;
        font-weight: bolder;
    }

    /*Manage Records Button*/

    .e-grid .e-unboundcelldiv .e-icons:not(.e-btn-icon) {
        color: whitesmoke;
    }
    /*Disable select all on grid checkbox*/
    .e-headercelldiv.e-headerchkcelldiv .e-checkbox-wrapper.e-css {
        pointer-events: none;
        opacity: 0.5;
    }

    /*Change font size in grid elements*/
    .e-grid .e-rowcell {
        font-size: larger;
    }

    /*Shade Grid Cells Across Grouping in hierarchical Trees*/
    /* .e-grid .e-summarycell {
                background-color: lightgrey;
                border-color: #edebe9;
                color: #201f1e;
            } */

    /*Customize Scroll Bars*/
    ::-webkit-scrollbar-thumb {
        background-color: #888;
        border-radius: 10px
    }

    ::-webkit-scrollbar {
        background-color: white;
    }

    ::-webkit-scrollbar-button {
        background-color: #bbbbbb;
    }
    /*Customize Scroll Bars*/

    /*stick grid headers*/
    .e-gridheader {
        position: -webkit-sticky;
        position: sticky;
        top: 56px;
        z-index: 1;
    }
    /*stick grid headers*/

    /*Disable Grid on Load and Enable it on DataBound*/
    .e-grid[disable="yes"] {
        opacity: .5;
        pointer-events: none;
        -ms-touch-action: none;
        touch-action: none;
        cursor: no-drop;
    }

    /*hide the Default Grid spinner */
    .e-grid .e-spinner-pane {
        display: none;
    }

    h6 {
        color: black;
        background-color: white;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        background-color: darkorange;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #ff4d00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    /**/
    #container {
        position: relative;
        height: 550px;
    }

    .e-spinner-pane.e-spin-overlay {
        background-color: rgb(192,192,192);
    }

    .pp {
        color: ghostwhite;
        background-color: #00cc00;
        padding: 10px;
        margin-top: 40px;
        text-wrap: wrap;
    }

    .disablecolumn {
        background-color: lightgrey;
        pointer-events: none;
        display: none;
    }

</style>


@{
    var Div = (new string[] { "Employeeid" });
}

<BreadCrumbPage Module="HCMIS" Submodule="PERFORMANCE APPRAISAL FORM"/>

<SfSpinner @ref="SpinnerObj" Label="Loading Please Wait....." Size="50">
    @*Render custom spinner component.*@
</SfSpinner>


<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="@ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false" CssClass="const">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <HCMIS.Pages.BalanceScoreCard.PartialViews.SearchAppraisalPage FinancialYearData="@FinancialYearData"
                                                                                       finyearid="@finyearid"
                                                                                       onsearchtoggle="@ToggleSearchQuery">

                        </HCMIS.Pages.BalanceScoreCard.PartialViews.SearchAppraisalPage>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>
    </div>
</div>

<div class="form-group col-md-12">
    <SfGrid @ref="@DataGrid" TValue="BalanceScoreCard" GridLines="GridLine.Both" ID="Grid" @attributes="@GridAttributes"
            AllowTextWrap="true" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true"
            AllowGrouping="true" AllowExcelExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@ToolbarMenu" Query="@MainQuery">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="AttachmentDialog">
            <HeaderTemplate>
                @{
                    var text = GetEmployeeHeader((context as BalanceScoreCard));
                    <div  id="identifier" class="headerbandimg">
                        <span>@text</span>
                    </div>
                }
            </HeaderTemplate>
            <Template>
                @{
                    <div class="row">
                        <div class="col-md-4">
                            <center>
                                <h5>
                                    <strong>PERFORMANCE APPRAISAL FORM</strong>
                                </h5>
                            </center>
                        </div>

                        @if (BscData != null && BscData.AppraisalNo != null)
                        {
                            <div class="col-md-4">
                                <h5 style="color:green;">
                                    <strong>Appraisal No: @(BscData.AppraisalNo)</strong>
                                </h5>
                            </div>
                        }

                        @if (statusdecsription != null)
                        {
                            <div class="col-md-4">
                                <h5 style="color:green;">
                                    <strong>Appraisal Status: @statusdecsription.LeaveApprovalStatus</strong>
                                </h5>
                            </div>
                        }
                    </div>

                    @*<MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ShoppingCart" DisableElevation="true" Label="Scores" />*@

                    @*<div id="target" style="min-height:200px; position:relative; width:300px; border:1px solid;">
                        <SfFab Target="#target" Content="Add"></SfFab>
                    </div>*@

                    @*<SfFab Target="#identifier" Content="Add"></SfFab>*@

                    BscData = (context as BalanceScoreCard);

                    <SfAccordion ExpandMode="ExpandMode.Single">
                        <AccordionItems>
                            <AccordionItem Expanded="true">
                                <HeaderTemplate><strong>SECTION 1: EMPLOYEE PARTICULARS</strong></HeaderTemplate>
                                <ContentTemplate>
                                    <div class="row">
                                        <div class="col-md-7">
                                            <div class="row">
                                                <div class="col-md-5">
                                                    <p>Employee Name:<span style="color:red;">*</span></p>
                                                </div>
                                                <div class="col-md-7">
                                                    <SfDropDownList @bind-Value="@(BscData.Employeeid)" Width="350px" Enabled="false" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnEmployeeChange"></DropDownListEvents>
                                                    </SfDropDownList>
                                                </div>
                                                @if (employeeno != null)
                                                {
                                                    <div class="col-md-5">
                                                        <p>Official Email:</p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        @if (@employeeno.EmailAddress != null)
                                                        {
                                                            @employeeno.EmailAddress
                                                        }
                                                        else
                                                        {
                                                            <p style="color:red; font-weight:bold;">Not Provided</p>
                                                        }
                                                    </div>

                                                    <div class="col-md-5">
                                                        <p>Employee Number:</p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        @employeeno.EmployeeNumber
                                                    </div>
                                                    <div class="col-md-5">
                                                        <p>Employee Job Title:</p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        @employeeno.JobTitleDescription
                                                    </div>
                                                    <div class="col-md-5">
                                                        <p>Department:</p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        @employeeno.DepartmentDescription
                                                    </div>
                                                    <div class="col-md-5">
                                                        <p>Unit/Section:</p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        @employeeno.DepartmentDescription
                                                    </div>
                                                    <div class="col-md-5">
                                                        <p>Date Joined:</p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        @if (employeeno.DateJoined.HasValue)
                                                        {
                                                            @employeeno.DateJoined.Value.ToString("dd-MMM-yy")
                                                        }
                                                    </div>
                                                    <div class="col-md-5">
                                                        <p>Date of Last Promotion:</p>
                                                    </div>
                                                    <div class="col-md-7">
                                                    </div>
                                                    <div class="col-md-5">
                                                        <p>Date of Review:<span style="color:red;">*</span></p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        <SfDatePicker @bind-Value="@(BscData.DateofReview)" Enabled="false" Placeholder="Select Date" Format="dd-MMM-yy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                    </div>
                                                    <div class="col-md-5">
                                                        <p>Duration in Organization (Yrs):</p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        @employeeno.DurationatWork
                                                    </div>
                                                    <div class="col-md-5">
                                                        <p>Reason for Appraisal :<span style="color:red;">*</span></p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        <SfDropDownList @bind-Value="@(BscData.AppraisalReasonId)" Enabled="OnSubmitButtonsBool"
                                                                        TItem="AAppraisalReason" TValue="int?" DataSource="@AppraisalData"
                                                                        Placeholder="Please select" FloatLabelType="FloatLabelType.Never"
                                                                        AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                            <DropDownListFieldSettings Value="@nameof(AAppraisalReason.AppraisalReasonId)"
                                                                                       Text="@nameof(AAppraisalReason.AppraisalReason)"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </div>
                                                }
                                            </div>
                                        </div>

                                        <div class="col-md-5">
                                            <div class="row">
                                                <div class="row">
                                                    <div class="col-md-5">
                                                        <p>Appraiser Name:<span style="color:red;">*</span></p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        <SfDropDownList @bind-Value="@(BscData.AppraiserName)" Enabled="OnSubmitButtonsBool" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                            <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                            <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnAppraiserChange"></DropDownListEvents>
                                                        </SfDropDownList>

                                                    </div>

                                                    @if (appraiserdetails != null)
                                                    {
                                                        <div class="col-md-5">
                                                            <p>Appraiser's Job Title:</p>
                                                        </div>
                                                        <div class="col-md-7">
                                                            @if (@appraiserdetails.JobTitleDescription != null)
                                                            {
                                                                @appraiserdetails.JobTitleDescription
                                                            }
                                                            else
                                                            {
                                                                <p>Not Available</p>
                                                            }

                                                        </div>

                                                        <div class="col-md-5">
                                                            <p>Official Email:</p>
                                                        </div>
                                                        <div class="col-md-7">
                                                            @if (@appraiserdetails.EmailAddress != null)
                                                            {
                                                                @appraiserdetails.EmailAddress
                                                            }
                                                            else
                                                            {
                                                                <p style="color:red; font-weight:bold;">Not Provided</p>
                                                            }
                                                        </div>
                                                    }

                                                    <div class="col-md-5">
                                                        <p>Financial Year:<span style="color:red;">*</span></p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        <SfDropDownList @bind-Value="@(BscData.FinancialYearId)" TItem="AFinancialYear" TValue="int?"
                                                                        DataSource="@FinancialYearData" Placeholder="Please select"
                                                                        FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                                                        FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                                                        Enabled="false">
                                                            <DropDownListFieldSettings Value="@nameof(AFinancialYear.Id)"
                                                                                       Text="@nameof(AFinancialYear.FinancialYear)">
                                                            </DropDownListFieldSettings>
                                                            <DropDownListEvents TValue="int?"
                                                                                TItem="AFinancialYear" ValueChange="OnFinancialYearChange">
                                                            </DropDownListEvents>
                                                        </SfDropDownList>
                                                    </div>

                                                    @*<div class="col-md-5">
                                                <p>Emojis</p>
                                                <p style="font-size:48px">
                                                &#128512; &#128516; &#128525; &#128151;
                                                </p>
                                                </div>*@

                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </ContentTemplate>
                            </AccordionItem>
                            <AccordionItem Expanded="false">
                                <HeaderTemplate><strong>SECTION 2: TARGET SETTING AND EVALUATION /  EXPECTED  ROLE KPIs or DELIVERABLES</strong></HeaderTemplate>
                                <ContentTemplate>
                                    <HCMIS.Pages.BalanceScoreCard.PartialViews.SectionTwoPage BalanceScoreCardId="@BscData.BalanceScoreCardId" 
                                                                                              onscorecardtoggle="@ToggleBalanceScoreCardTarget" 
                                                                                              targetdata="@BscData.BalanceScoreCardTargetSetting.ToList()"
                                                                                              BscPerspectiveTypeData="@BscPerspectiveTypeData"
                                                                                              KpiDetailsData="@KpiDetailsData"
                                                                                              MeasurementUnitData="@MeasurementUnitData"
                                                                                              PopulatedData="@PopulatedData"
                                                                                              FinancialYearData="@FinancialYearData"
                                                                                              PerspectivesDetailData="@PerspectivesDetailData"
                                                                                              finyearid="@finyearid"
                                                                                              IsSupervisorEnabledColumn="@IsSupervisorEnabledColumn"
                                                                                              IsEmployeeEnabledColumn="@IsEmployeeEnabledColumn"
                                                                                              @ref="targetsettingref"
                                                                                              perspweightscustomer="@perspweightscustomer"
                                                                                              perspweightsfinancial="@perspweightsfinancial"
                                                                                              perspweightsinternal="@perspweightsinternal"
                                                                                              perspweightslearning="@perspweightslearning">
                                    </HCMIS.Pages.BalanceScoreCard.PartialViews.SectionTwoPage>
                                </ContentTemplate>
                            </AccordionItem>

                            <AccordionItem Expanded="false">
                                <HeaderTemplate><strong>SECTION 3.VALUES & BEHAVIORAL COMPETENCIES ( RATING USING A SCALE OF 1- 3 AS PER THE COMPETENCE GUIDE)</strong></HeaderTemplate>
                                <ContentTemplate>
                                    <HCMIS.Pages.BalanceScoreCard.PartialViews.SectionThreePage BalanceScoreCardId="@BscData.BalanceScoreCardId" onscorecardtoggle="@ToggleBalanceScoreCardBehaviour"
                                                                                                behaviourdata="@BscData.BalanceScoreCardBehavioral.ToList()" CompetenceData="@CompetenceData" FinancialYearData="@FinancialYearData"
                                                                                                PerformanceDescriptorData="@PerformanceDescriptorData" finyearid="@finyearid" IsEmployeeEnabledColumn="@IsEmployeeEnabledColumn"
                                                                                                IsSupervisorEnabledColumn="@IsSupervisorEnabledColumn" approvalstatsid="@approvalstatsid"
                                                                                                _previous="@_previous" @ref="behavioralcompetenciesref">
                                    </HCMIS.Pages.BalanceScoreCard.PartialViews.SectionThreePage>
                                </ContentTemplate>
                            </AccordionItem>

                            @if (_previous == Syncfusion.Blazor.Grids.Action.BeginEdit)
                            {
                                <div class="row">
                                    <div class="col-md-12">
                                        <HCMIS.Pages.BalanceScoreCard.PartialViews.SummaryPage BalanceScoreCardId="@BscData.BalanceScoreCardId"
                                                                                               BehavioralTotalData="@BehavioralTotalData"
                                                                                               PerformanceDescriptorData="@PerformanceDescriptorData"
                                                                                               ScaleData="@ScaleData"
                                                                                               TargetSettingTotalData="@TargetSettingTotalData">
                                        </HCMIS.Pages.BalanceScoreCard.PartialViews.SummaryPage>
                                    </div>
                                </div>
                            }
                            
                            <h6>
                                Record 2-3 Development
                                goals for the next year
                                in Section 4 below: These
                                are individual learning needs
                                to support one's
                                job Performance and Career
                                development
                            </h6>
                            <AccordionItem Expanded="false">
                                <HeaderTemplate><strong>SECTION 4: INDIVIDUAL DEVELOPMENT PLAN</strong></HeaderTemplate>
                                <ContentTemplate>
                                    <HCMIS.Pages.BalanceScoreCard.PartialViews.SectionFourPage BalanceScoreCardId="@BscData.BalanceScoreCardId" onscorecardtoggle="@ToggleBalanceScoreCardPlan" plandata="@BscData.BalanceScoreCardTargetDevelopmentPlan.ToList()"
                                                                                               _previous="@_previous" @ref="individualdevelopmentplanref" IsEmployeeEnabledColumn="@IsEmployeeEnabledColumn" developmentgridenabled="developmentgridenabled"
                                                                                               selectebscid="@selectebscid"></HCMIS.Pages.BalanceScoreCard.PartialViews.SectionFourPage>
                                </ContentTemplate>
                            </AccordionItem>

                            @*<h6 style="background-color:#636e72; color:ghostwhite;font-weight:bolder;font-size:large;">SECTION 5: OVER ALL COMMENTS</h6>*@

                            <AccordionItem Expanded="false">
                                <HeaderTemplate><strong>SECTION 5: COMMENTS</strong></HeaderTemplate>
                                <ContentTemplate>
                                    <SfAccordion ExpandMode="@ExpandMode.Single">
                                        <AccordionItems>
                                            <AccordionItem Expanded="false" CssClass="const">
                                                <HeaderTemplate>5.1: Appraisee Comments</HeaderTemplate>
                                                <ContentTemplate>
                                                    <div style="margin:10px; padding:10px; background-color:aliceblue;">
                                                        <div class="row">
                                                            <div class="col-md-3">
                                                            <p style="font-weight: bolder;">Appraisee</p>
                                                                <SfDropDownList @bind-Value="@(BscData.Employeeid)" Enabled="false" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                    <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                                </SfDropDownList>
                                                            </div>

                                                            <div class="col-md-9">
                                                            <p style="font-weight: bolder;">Comments</p>
                                                                <HCMIS.Pages.BalanceScoreCard.PartialViews.AppraiseeCommentsPage @ref="AppraiseeCommentsref" BalanceScoreCardId="@BscData.BalanceScoreCardId" onscorecardtoggle="@ToggleBalanceScoreCardAppraiseeComments" selectebscid="@selectebscid"
                                                                                                                                 _previous="@_previous" appraiseegridenabled="appraiseegridenabled"></HCMIS.Pages.BalanceScoreCard.PartialViews.AppraiseeCommentsPage>
                                                            </div>
                                                        </div>
                                                    </div>                                                    
                                                </ContentTemplate>
                                            </AccordionItem>

                                            <AccordionItem Expanded="false">
                                                <HeaderTemplate><strong>5.2: Supervisor Comments</strong></HeaderTemplate>
                                                <ContentTemplate>
                                                    <div style="margin:10px; padding:10px; background-color:aliceblue;">
                                                        <div class="row">
                                                            <div class="col-md-3">
                                                                <p style="font-weight: bolder;">Supervisor:<span style="color:red;">*</span></p>
                                                                <SfDropDownList @bind-Value="@(BscData.AppraiserName)" Enabled="false" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                    <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                                </SfDropDownList>

                                                                @if (employeenosupervisorchange != null && !string.IsNullOrEmpty(employeenosupervisorchange.EmailAddress) && BscData.AppraiserName != null)
                                                                {
                                                                    <p style="color:forestgreen; font-weight:bold">Email: @employeenosupervisorchange.EmailAddress</p>
                                                                }
                                                                else if (employeenosupervisorchange != null && (BscData != null && BscData.Hod != null)
                                                                && (employeenosupervisorchange != null && string.IsNullOrEmpty(employeenosupervisorchange.EmailAddress)))
                                                                {
                                                                    <p style="color:red; font-weight:bold">Email Not Provided</p>
                                                                }
                                                                else
                                                                {

                                                                }
                                                            </div>

                                                            <div class="col-md-9">
                                                                <p style="font-weight: bolder;">Comments</p>
                                                                <HCMIS.Pages.BalanceScoreCard.PartialViews.SupervisorCommentsPage BalanceScoreCardId="@BscData.BalanceScoreCardId" onscorecardtoggle="@ToggleBalanceScoreCardSupervisorComments" supervisorcommentsdata="@BscData.BalanceScoreCardSupervisorComments.ToList()"
                                                                                                                                  _previous="@_previous" supervisorgridenabled="supervisorgridenabled" selectebscid="@selectebscid"></HCMIS.Pages.BalanceScoreCard.PartialViews.SupervisorCommentsPage>
                                                            </div>
                                                        </div>
                                                    </div>                                                    
                                                </ContentTemplate>
                                            </AccordionItem>

                                            <AccordionItem Expanded="false">
                                                <HeaderTemplate><strong>5.3: HOD Comments</strong></HeaderTemplate>
                                                <ContentTemplate>
                                                    <div style="margin:10px; padding:10px; background-color:aliceblue;">
                                                        <div class="row">
                                                            <div class="col-md-3">
                                                                <p style="font-weight: bolder;">HOD:<span style="color:red;">*</span></p>
                                                                <SfDropDownList @bind-Value="@(BscData.Hod)" Enabled="OnSubmitButtonsBool" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                    <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                                    <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnHODChange"></DropDownListEvents>
                                                                </SfDropDownList>

                                                                @if (employeenohodchange != null && !string.IsNullOrEmpty(employeenohodchange.EmailAddress) && BscData.Hod != null)
                                                                {
                                                                    <p style="color:forestgreen; font-weight:bold">Email: @employeenohodchange.EmailAddress</p>
                                                                }
                                                                else if (employeenohodchange != null && (BscData != null && BscData.Hod != null)
                                                                && (employeenohodchange != null && string.IsNullOrEmpty(employeenohodchange.EmailAddress)))
                                                                {
                                                                    <p style="color:red; font-weight:bold">Email Not Provided</p>
                                                                }
                                                                else
                                                                {

                                                                }
                                                            </div>

                                                            <div class="col-md-9">
                                                                <p style="font-weight: bolder;">Comments</p>
                                                                <HCMIS.Pages.BalanceScoreCard.PartialViews.HODCommentsPage BalanceScoreCardId="@BscData.BalanceScoreCardId" onscorecardtoggle="@ToggleBalanceScoreCardHODComments" hodcommentsdata="@BscData.BalanceScoreCardHodcomments.ToList()"
                                                                                                                           _previous="@_previous" hodgridenabled="hodgridenabled" selectebscid="@selectebscid"></HCMIS.Pages.BalanceScoreCard.PartialViews.HODCommentsPage>
                                                            </div>
                                                        </div>
                                                    </div>                                                    
                                                </ContentTemplate>
                                            </AccordionItem>

                                            <AccordionItem Expanded="false">
                                                <HeaderTemplate><strong>5.4: CEO Comments</strong></HeaderTemplate>
                                                <ContentTemplate>
                                                    <div style="margin:10px; padding:10px; background-color:aliceblue;">
                                                        <div class="row">
                                                            <div class="col-md-3">
                                                                <p style="font-weight: bolder;">CEO:<span style="color:red;">*</span></p>
                                                                <SfDropDownList @bind-Value="@(BscData.Ceo)" Enabled="OnSubmitButtonsBool" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                    <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                                    <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnCEOChange"></DropDownListEvents>
                                                                </SfDropDownList>

                                                                @if (employeenoceochange != null && !string.IsNullOrEmpty(employeenoceochange.EmailAddress) && BscData.Hod != null)
                                                                {
                                                                    <p style="color:forestgreen; font-weight:bold">Email: @employeenoceochange.EmailAddress</p>
                                                                }
                                                                else if (employeenoceochange != null && (BscData != null && BscData.Hod != null)
                                                                && (employeenoceochange != null && string.IsNullOrEmpty(employeenoceochange.EmailAddress)))
                                                                {
                                                                    <p style="color:red; font-weight:bold">Email Not Provided</p>
                                                                }
                                                                else
                                                                {

                                                                }
                                                            </div>

                                                            <div class="col-md-9">
                                                                <p style="font-weight: bolder;">Comments</p>
                                                                <HCMIS.Pages.BalanceScoreCard.PartialViews.CEOCommentsPage BalanceScoreCardId="@BscData.BalanceScoreCardId" onscorecardtoggle="@ToggleBalanceScoreCardCEOComments" ceocommentsdata="@BscData.BalanceScoreCardCeocomments.ToList()"
                                                                                                               _previous="@_previous" ceogridenabled="ceogridenabled" selectebscid="@selectebscid"></HCMIS.Pages.BalanceScoreCard.PartialViews.CEOCommentsPage>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </ContentTemplate>
                            </AccordionItem>

                            <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;margin-top: 10px;">OTHER SECTIONS</h6>

                            <div class="col-md-12" style="margin-top:10px">
                                    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                                            <MudTabPanel Text="Attachment(s)">
                                                <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;">UPLOAD ATTACHMENT (Including any Evidence you have)</h6>

                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <HCMIS.Pages.BalanceScoreCard.PartialViews.BSCAttachmentPage BalanceScoreCardId="@BscData.BalanceScoreCardId"
                                                                                                 OnHeaderAttachmentToggled="@ToggleBalanceScoreCardAttachment"
                                                                                                 HeaderAttachmentData="@BscData.BalanceScoreCardAttachment.ToList()"
                                                                                                 BSCAttachmentToolbarItems="@BSCAttachmentToolbarItems" 
                                                                                                 attachmentgridenabled="attachmentgridenabled"
                                                                                                  selectebscid="@selectebscid">
                                                        </HCMIS.Pages.BalanceScoreCard.PartialViews.BSCAttachmentPage>
                                                    </div>
                                                </div>
                                            </MudTabPanel>

                                            <MudTabPanel Text="Rejection Comments">
                                                <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;">REJECTION COMMENTS</h6>
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <RejectionReasonsPage BalanceScoreCardId="@BscData.BalanceScoreCardId"
                                                                              AllowAddingValue="@AllowAddingValue"
                                                                              AllowEditingValue="@AllowEditingValue"
                                                                              reasondata="@BscData.BalanceScoreCardRejectionReasons.ToList()"
                                                                               selectebscid="@selectebscid">
                                                        </RejectionReasonsPage>
                                                    </div>
                                                </div>
                                            </MudTabPanel>
                                    </MudTabs>
                                </div>

                        </AccordionItems>
                    </SfAccordion>
                    // AccessToken="@AccessToken"
                }


            </Template>
            <FooterTemplate>
                <button type="button" @onclick="@onSaveDraftForm" hidden=@IsHiddenDraft disabled=@IsDraftDisabled class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Save Draft</button>
                <button @onclick="@onSubmitForm" hidden=@IsSubmitHidden disabled=@IsSubmitDisabled class="btn btn-success" data-ripple="true" style="margin-right:10px;">@SaveText</button>    
                <button @onclick="@onRejectForm" disabled=@IsRejectDisabled hidden=@IsRejectedHidden class="btn btn-warning" data-ripple="true" style="margin-right:10px;">Reject</button>
                <button @onclick="@DialogCancelBtnclicked" disabled=@IsCancelDisabled class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Cancel</button>
                
            </FooterTemplate>
        </GridEditSettings>

        <GridGroupSettings Columns="@Div" ShowDropArea="false">
            <CaptionTemplate Context="HeaderCaptionTemplateContext">
                @{
                    var dvn = (HeaderCaptionTemplateContext as CaptionTemplateContext);

                    string text = string.Empty;
                    if (dvn.Field == "Employeeid" && EmployeeData != null)
                    {
                        var data = EmployeeData.FirstOrDefault(o => o.Employeeid.ToString() == dvn.Key);
                        if (data != null)
                        {
                            text = data.EmployeeDetails;
                        }
                    }
                    <div><p class="pp"><strong>@text</strong></p></div>
                }
            </CaptionTemplate>
        </GridGroupSettings>

        <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
        <GridEvents OnActionComplete="ActionCompleteMain"
                    OnActionBegin="ActionBeginMain"
                    OnLoad="LoadHandler"
                    DataBound="DataBound"
                    QueryCellInfo="QueryCellInfoHandler"
                    RowSelecting="RowSelectingHandler"
                    TValue="BalanceScoreCard">
        </GridEvents>
        <SfDataManager AdaptorInstance="@typeof(BSCAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
        <GridColumns>
            @* <GridColumn Type="ColumnType.CheckBox" Width="20" CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn> *@
            <GridColumn HeaderText="Manage"
                        Width="30"
                        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Left">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-edit", CssClass = "e-flat"})"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>

            <GridColumn Field=@nameof(BalanceScoreCard.BalanceScoreCardId) HeaderText="BalanceScoreCardId" AllowEditing="false" Visible="false" IsPrimaryKey="true" Width="150"></GridColumn>
            
            
            <GridForeignColumn Field=@nameof(BalanceScoreCard.Employeeid)
                               HeaderText="Employee"
                               Width="100"
                               AllowEditing="true"
                               ForeignKeyField="@(nameof(ViewEmployeeDropDown.Employeeid))"
                               ForeignKeyValue="@(nameof(ViewEmployeeDropDown.EmployeeDetails))"
                               ForeignDataSource="@EmployeeData" AllowFiltering="false"
                               CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>

            <GridForeignColumn Field=@nameof(BalanceScoreCard.AppraisalReasonId)
                               HeaderText="Appraisal Reason"
                               Width="100"
                               AllowEditing="true"
                               ForeignKeyField="@(nameof(AAppraisalReason.AppraisalReasonId))"
                               ForeignKeyValue="@(nameof(AAppraisalReason.AppraisalReason))"
                               ForeignDataSource="@AppraisalData" AllowFiltering="false"
                               CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>
            <GridForeignColumn Field=@nameof(BalanceScoreCard.AppraiserName)
                               HeaderText="Appraiser Name"
                               Width="100"
                               AllowEditing="true"
                               ForeignKeyField="@(nameof(ViewEmployeeDropDown.Employeeid))"
                               ForeignKeyValue="@(nameof(ViewEmployeeDropDown.EmployeeDetails))"
                               ForeignDataSource="@EmployeeData" AllowFiltering="false"
                               CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>

            <GridForeignColumn Field=@nameof(BalanceScoreCard.LeaveApprovalStatusId)
                               HeaderText="Approval Status"
                               Width="100"
                               AllowEditing="true"
                               ForeignKeyField="@(nameof(ALeaveApprovalStatus.LeaveApprovalStatusId))"
                               ForeignKeyValue="@(nameof(ALeaveApprovalStatus.LeaveApprovalStatus))"
                               ForeignDataSource="@ApprovalStatusData" AllowFiltering="false"
                               CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>

            <GridColumn Field=@nameof(BalanceScoreCard.AddedDate)
                        HeaderText="Submission Date"
                        Format="dd/MMMM/yyyy HH:mm:ss"
                        TextAlign="TextAlign.Justify"
                        Width="80"
                        ClipMode="ClipMode.EllipsisWithTooltip"
                        Type="ColumnType.Date"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            </GridColumn>
        </GridColumns>

    </SfGrid>

</div>

@*Submission Confirmation Dialogue*@
<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationSubmissionDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationSubmissionYes" />
            <DialogButton Content="No" OnClick="@ComfirmationSubmissionNo" />
        </DialogButtons>
    </SfDialog>
</div>

@*Approval Confirmation Dialogue*@
<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationApproveDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationApproveYes" />
            <DialogButton Content="No" OnClick="@ComfirmationApproveNo" />
        </DialogButtons>
    </SfDialog>
</div>

@*Reject Confirmation Dialogue*@
<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationRejectDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationRejectYes" />
            <DialogButton Content="No" OnClick="@ComfirmationRejectNo" />
        </DialogButtons>
    </SfDialog>
</div>

@*Reason for rejection*@
<div class="form-group col-md-12">
    <SfDialog @ref="@RejectLeaveDialogue" Width="80%" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @if(RejectionCommentsModel != null)
                {
                    <div class="form-row">
                        <div class="col-md-3">
                            <p>Provide Rejection Reason <span style="color:red;">*</span></p>
                        </div>
                        <div class="form-group col-md-12">
                            <SfTextBox Multiline="true" @bind-Value="@(RejectionCommentsModel.RejectionReason)" Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                        </div>
                    </div>
                }
                
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton OnClick="@RejectReasonYes" Content="Confirm Rejection" IsPrimary="true" />
            <DialogButton OnClick="@RejectReasonNo" Content="Cancel" />
        </DialogButtons>
    </SfDialog>
</div>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="20%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader-Loading-text"></div>
                        @*<div class="loader-Saving-text"></div>*@
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

@code {

    public int? finyearid { get; set; }
    public int? approvalstatsid { get; set; } = null;

    SfGrid<BalanceScoreCard>? DataGrid { get; set; }
    DateTime currentdate = DateTime.Now;
    SfDialog? LoadingDialogue;
    Syncfusion.Blazor.Grids.Action _previous { get; set; }
    bool isFinancialYearEnabled { get; set; } = false;
    LoginResultModel? Credentials { get; set; }
    public AppraisalSearch searchpanel { get; set; } = new AppraisalSearch();

    Dictionary<string, object> ToastHtmlAttribute = new Dictionary<string, object>()
        {
            {"style", "z-index: 2000;" }
        };

    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    private BalanceScoreCard? BscData { get; set; }
    List<AJobTitle>? JobTitleData { get; set; }
    List<AFinancialYear>? FinancialYearData { get; set; }
    List<AAppraisalReason>? AppraisalData { get; set; }
    List<ABscKpi>? KpiData { get; set; }
    List<ABscKpidetails>? KpiDetailsData { get; set; }
    List<ABscPerspectives>? BscPerspectiveData { get; set; }
    List<APerformanceDescriptor>? PerformanceDescriptorData { get; set; }
    List<AEmployeeEvidence>? EvidenceData { get; set; }
    List<ABehavioralCompetencies>? CompetenceData { get; set; }
    List<BalanceScoreCardTargetSetting>? TargetData { get; set; }
    List<ViewABscKpidetails>? PopulatedData { get; set; }
    List<ABscPerspectivesType>? BscPerspectiveTypeData { get; set; }
    List<ALeaveApprovalStatus>? ApprovalStatusData { get; set; }
    List<AMeasurementMetric>? MeasurementUnitData { get; set; }
    List<APerformanceScale>? ScaleData { get; set; }
    List<ViewTargetSettingTotals>? TargetSettingTotalData { get; set; }
    List<ViewBehavioralTotals>? BehavioralTotalData { get; set; }
    List<ViewABscPerspectivesDetail>? PerspectivesDetailData { get; set; }

    bool reasonBool = true;
    bool AllowAddingValue { get; set; }
    bool AllowEditingValue { get; set; }
    bool OnSubmitButtonsBool;

    SfSpinner? SpinnerObj;
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    public Query MainQuery = new Query();
    private List<object>? BSCAttachmentToolbarItems { get; set; }
    private DialogSettings AttachmentDialog = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "98%" };

    AppraiseeCommentsPage AppraiseeCommentsref;
    SectionTwoPage targetsettingref;
    SectionThreePage behavioralcompetenciesref;
    SectionFourPage individualdevelopmentplanref;
    HODCommentsPage HODCommentsref;
    CEOCommentsPage CEOCommentsref;
    BalanceScoreCardRejectionReasons? RejectionCommentsModel { get; set; }

    private  ViewABscPerspectivesDetail? perspweightsfinancial { get; set; }
    private  ViewABscPerspectivesDetail? perspweightsinternal { get; set; }
    private  ViewABscPerspectivesDetail? perspweightscustomer { get; set; }
    private  ViewABscPerspectivesDetail? perspweightslearning { get; set; }
    private  ViewEmployeeDropDown? employeenohodchange { get; set; }
    private  ViewEmployeeDropDown? employeenoceochange { get; set; }
    private  ViewEmployeeDropDown? employeenosupervisorchange { get; set; }
    public string SaveText { get; set; } = string.Empty;
    bool supervisorgridenabled;
    bool hodgridenabled;
    bool ceogridenabled;
    bool appraiseegridenabled;
    bool attachmentgridenabled;
    bool developmentgridenabled;
    public int selectebscid { get; set; }

    // public void RowSelectedHandler(RowSelectEventArgs<BalanceScoreCard> Args)
    // {
    //     selectebscid = Args.Data.BalanceScoreCardId;
    // }

    private void ToggleSearchQuery(Query? DetailData)
    {
        try
        {
            if (DetailData != null)
            {
                MainQuery = DetailData;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            StateHasChanged();
        }

    }

    private void ToggleReasonsData(List<BalanceScoreCardRejectionReasons>? DetailData)
    {
        if (BscData != null && DetailData != null)
        {
            if (BscData.BalanceScoreCardRejectionReasons == null)
            {
                BscData.BalanceScoreCardRejectionReasons = new List<BalanceScoreCardRejectionReasons>();
            }
            BscData.BalanceScoreCardRejectionReasons = DetailData;
        }
    }

    private void ToggleBalanceScoreCardTarget(List<BalanceScoreCardTargetSetting>? TargetChange)
    {
        if (BscData != null && TargetChange != null)
        {
            if (BscData.BalanceScoreCardTargetSetting == null)
            {
                BscData.BalanceScoreCardTargetSetting = new List<BalanceScoreCardTargetSetting>();
            }
            BscData.BalanceScoreCardTargetSetting = TargetChange;
        }
    }

    private void ToggleBalanceScoreCardBehaviour(List<BalanceScoreCardBehavioral>? BehaviourChange)
    {
        if (BscData != null && BehaviourChange != null)
        {
            if (BscData.BalanceScoreCardBehavioral == null)
            {
                BscData.BalanceScoreCardBehavioral = new List<BalanceScoreCardBehavioral>();
            }
            BscData.BalanceScoreCardBehavioral = BehaviourChange;
        }
    }

    private void ToggleBalanceScoreCardPlan(List<BalanceScoreCardTargetDevelopmentPlan>? PlanChange)
    {
        if (BscData != null && PlanChange != null)
        {
            if (BscData.BalanceScoreCardTargetDevelopmentPlan == null)
            {
                BscData.BalanceScoreCardTargetDevelopmentPlan = new List<BalanceScoreCardTargetDevelopmentPlan>();
            }
            BscData.BalanceScoreCardTargetDevelopmentPlan = PlanChange;
        }
    }

    private void ToggleBalanceScoreCardAppraiseeComments(List<BalanceScoreCardAppraiseeComments>? AppraiseeCommentsChange)
    {
        if (BscData != null && AppraiseeCommentsChange != null)
        {
            if (BscData.BalanceScoreCardAppraiseeComments == null)
            {
                BscData.BalanceScoreCardAppraiseeComments = new List<BalanceScoreCardAppraiseeComments>();
            }
            BscData.BalanceScoreCardAppraiseeComments = AppraiseeCommentsChange;
        }
    }

    private void ToggleBalanceScoreCardSupervisorComments(List<BalanceScoreCardSupervisorComments>? SupervisorCommentsChange)
    {
        if (BscData != null && SupervisorCommentsChange != null)
        {
            if (BscData.BalanceScoreCardSupervisorComments == null)
            {
                BscData.BalanceScoreCardSupervisorComments = new List<BalanceScoreCardSupervisorComments>();
            }
            BscData.BalanceScoreCardSupervisorComments = SupervisorCommentsChange;
        }
    }

    private void ToggleBalanceScoreCardHODComments(List<BalanceScoreCardHodcomments>? HODCommentsChange)
    {
        if (BscData != null && HODCommentsChange != null)
        {
            if (BscData.BalanceScoreCardHodcomments == null)
            {
                BscData.BalanceScoreCardHodcomments = new List<BalanceScoreCardHodcomments>();
            }
            BscData.BalanceScoreCardHodcomments = HODCommentsChange;
        }
    }

    private void ToggleBalanceScoreCardCEOComments(List<BalanceScoreCardCeocomments>? CEOCommentsChange)
    {
        if (BscData != null && CEOCommentsChange != null)
        {
            if (BscData.BalanceScoreCardCeocomments == null)
            {
                BscData.BalanceScoreCardCeocomments = new List<BalanceScoreCardCeocomments>();
            }
            BscData.BalanceScoreCardCeocomments = CEOCommentsChange;
        }
    }

    private void ToggleBalanceScoreCardAttachment(List<BalanceScoreCardAttachment>? AttachmentChange)
    {
        if (BscData != null && AttachmentChange != null)
        {
            if (BscData.BalanceScoreCardAttachment == null)
            {
                BscData.BalanceScoreCardAttachment = new List<BalanceScoreCardAttachment>();
            }
            BscData.BalanceScoreCardAttachment = AttachmentChange;
        }
    }

    private  ViewEmployeeDropDown employeeno { get; set; }
    private  ViewEmployeeDropDown appraiserdetails { get; set; }
    private  ALeaveApprovalStatus statusdecsription { get; set; }

    bool IsSubmitDisabled = false;
    bool IsDraftDisabled = false;
    bool IsApproveDisabled = false;
    bool IsSupervisorsubmitDisabled = false;
    bool IsCancelDisabled = false;

    bool IsApproveHidden = false;
    bool IsHiddenSubmitEdit = false;
    bool IsRejectedHidden = false;
    bool IsRejectDisabled = false;
    bool IsHiddenDraft = false;
    bool IsSubmitHidden = false;
    bool IsEmployeeEnabledColumn;
    bool IsSupervisorEnabledColumn;

    SfDialog ConfirmationApproveDialogue;
    SfDialog ConfirmationSubmissionDialogue;
    SfDialog ConfirmationRejectDialogue;

    string ConfirmationText { get; set; }
    private Dictionary<string, object> GridAttributes { get; set; } = new Dictionary<string, object>();
    SfDialog RejectLeaveDialogue;
    SfDialog ConfirmationCHRODialogue;


    Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }


    private List<object> ToolbarMenu = new List<object>()
    {
            new ItemModel() { Text = "Add Appraisal", PrefixIcon = "e-add", Id = "Grid_add"}
            // ,new ItemModel(){ Text = "Edit Appraisal", PrefixIcon= "e-edit", Id="Grid_edit"},
            // new ItemModel(){ Text = "Delete Employee", PrefixIcon= "e-delete", Id="Grid_delete"},
            // new ItemModel(){ Text = "Update Appraisal", PrefixIcon= "e-update", Id="Grid_update"},
            // new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="Grid_cancel"}
    };

    int? finyear = null;


    int countid = -1000;

    #region Draft

    public async Task onSaveDraftForm()
    {
        try
        {
            if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                BscData.LeaveApprovalStatusId = 1;
                BscData.AddedDate = DateTime.Now;

                if (AppraiseeCommentsref != null && AppraiseeCommentsref.AppraiseeCommentsGrid != null)
                {
                    await AppraiseeCommentsref.AppraiseeCommentsGrid.EndEditAsync();
                }
                if (targetsettingref != null && targetsettingref.TargetsettingGrid != null)
                {
                    await targetsettingref.TargetsettingGrid.EndEditAsync();
                }
                if (behavioralcompetenciesref != null && behavioralcompetenciesref.BehavioralGrid != null)
                {
                    await behavioralcompetenciesref.BehavioralGrid.EndEditAsync();
                }
                if (individualdevelopmentplanref != null && individualdevelopmentplanref.DevelopmentPlanGrid != null)
                {
                    await individualdevelopmentplanref.DevelopmentPlanGrid.EndEditAsync();
                }
                if (HODCommentsref != null && HODCommentsref.HODCommentsGrid != null)
                {
                    await HODCommentsref.HODCommentsGrid.EndEditAsync();
                }
                if (CEOCommentsref != null && CEOCommentsref.CEOCommentsGrid != null)
                {
                    await CEOCommentsref.CEOCommentsGrid.EndEditAsync();
                }

                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            //toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }
    #endregion Draft

    #region Submission

    public async Task onSubmitForm()
    {
        try
        {
            if (BscData.Employeeid == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the employee.");
            }

            else if (BscData.DateofReview == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please enter the date of review.");
            }

            else if (BscData.AppraisalReasonId == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the reason for appraisal.");
            }

            else if (BscData.AppraiserName == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the appraiser.");
            }

            else if (BscData.FinancialYearId == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the financial year.");
            }
            else if (BscData.Hod == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the Head of Department in section 5.3.");
            }
            else if (BscData.Ceo == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the CEo in section 5.4.");
            }

            else
            {
                ConfirmationText = "<p>Are you sure you want to submit this appraisal! </p>";
                await this.ConfirmationSubmissionDialogue.ShowAsync();

            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private async void ComfirmationSubmissionYes()
    {
        try
        {
            await this.ConfirmationSubmissionDialogue.HideAsync();

            await LoadingDialogue.ShowAsync();

            if (DataGrid != null)
            {
                if (AppraiseeCommentsref != null && AppraiseeCommentsref.AppraiseeCommentsGrid != null)
                {
                    await AppraiseeCommentsref.AppraiseeCommentsGrid.EndEditAsync();
                }
                if (targetsettingref != null && targetsettingref.TargetsettingGrid != null)
                {
                    await targetsettingref.TargetsettingGrid.EndEditAsync();
                }
                if (behavioralcompetenciesref != null && behavioralcompetenciesref.BehavioralGrid != null)
                {
                    await behavioralcompetenciesref.BehavioralGrid.EndEditAsync();
                }
                if (individualdevelopmentplanref != null && individualdevelopmentplanref.DevelopmentPlanGrid != null)
                {
                    await individualdevelopmentplanref.DevelopmentPlanGrid.EndEditAsync();
                }
                if (HODCommentsref != null && HODCommentsref.HODCommentsGrid != null)
                {
                    await HODCommentsref.HODCommentsGrid.EndEditAsync();
                }
                if (CEOCommentsref != null && CEOCommentsref.CEOCommentsGrid != null)
                {
                    await CEOCommentsref.CEOCommentsGrid.EndEditAsync();
                }

                if (_previous == Syncfusion.Blazor.Grids.Action.Add)
                {
                    BscData.LeaveApprovalStatusId = 2;
                    BscData.AddedDate = DateTime.Now;
                }
                else if (_previous == Syncfusion.Blazor.Grids.Action.BeginEdit)
                {
                    if (BscData.LeaveApprovalStatusId == 1)
                    {
                        BscData.LeaveApprovalStatusId = 2;
                        BscData.AddedDate = DateTime.Now;
                    }
                    // else if (BscData.LeaveApprovalStatusId == 2)
                    // {
                    //     BscData.LeaveApprovalStatusId = 5;
                    //     BscData.SupervisorApprovalDate = DateTime.Now;
                    // } 

                    else if (BscData.LeaveApprovalStatusId == 2)
                    {
                        BscData.LeaveApprovalStatusId = 15;
                        BscData.SupervisorReturnDate = DateTime.Now;
                    }  

                    else if (BscData.LeaveApprovalStatusId == 15)
                    {
                        BscData.LeaveApprovalStatusId = 16;
                        BscData.SupervisorApprovalDate = DateTime.Now;
                    }  

                    else if (BscData.LeaveApprovalStatusId == 16)
                    {
                        BscData.LeaveApprovalStatusId = 5;
                        BscData.EmployeeReturnDate = DateTime.Now;
                    }

                    else if (BscData.LeaveApprovalStatusId == 5)
                    {
                        BscData.LeaveApprovalStatusId = 6;
                        BscData.HodApprovalDate = DateTime.Now;
                    }
                    else if (BscData.LeaveApprovalStatusId == 14)
                    {
                        BscData.LeaveApprovalStatusId = 11;
                        BscData.CeoApprovalDate = DateTime.Now;
                    }

                    //Rejected By Supervisor
                    else if (BscData.LeaveApprovalStatusId == 4)
                    {
                        BscData.LeaveApprovalStatusId = 2;
                        BscData.SupervisorReturnDate = DateTime.Now;
                    }  

                    //Rejected By HOD
                    else if (BscData.LeaveApprovalStatusId == 7)
                    {
                        BscData.LeaveApprovalStatusId = 2;
                        BscData.SupervisorReturnDate = DateTime.Now;
                    }
                    //Rejected By CEO
                    else if (BscData.LeaveApprovalStatusId == 12)
                    {
                        BscData.LeaveApprovalStatusId = 2;
                        BscData.SupervisorReturnDate = DateTime.Now;
                    }
                }   

                await DataGrid.EndEditAsync();

            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
            await LoadingDialogue.HideAsync();
        }
    }

    private void ComfirmationSubmissionNo()
    {
        this.ConfirmationSubmissionDialogue.HideAsync();
    }

    #endregion Submission

    #region Approval

    /*Approve Appraisal*/

    public async Task onApproveForm()
    {
        try
        {
            if (BscData.Employeeid == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the employee.");
            }

            else if (BscData.DateofReview == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please enter the date of review.");
            }

            else if (BscData.AppraisalReasonId == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the reason for appraisal.");
            }

            else if (BscData.AppraiserName == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the appraiser.");
            }

            else if (BscData.FinancialYearId == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the financial year.");
            }
            else
            {
                ConfirmationText = "<p>Are you sure you want to approve this appraisal! </p>";
                await this.ConfirmationApproveDialogue.ShowAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void ComfirmationApproveYes()
    {
        try
        {
            await this.ConfirmationApproveDialogue.HideAsync();


            if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                BscData.LeaveApprovalStatusId = 3;
                //BscData.AddedDate = DateTime.Now;
                if (AppraiseeCommentsref != null && AppraiseeCommentsref.AppraiseeCommentsGrid != null)
                {
                    await AppraiseeCommentsref.AppraiseeCommentsGrid.EndEditAsync();
                }
                if (targetsettingref != null && targetsettingref.TargetsettingGrid != null)
                {
                    await targetsettingref.TargetsettingGrid.EndEditAsync();
                }
                if (behavioralcompetenciesref != null && behavioralcompetenciesref.BehavioralGrid != null)
                {
                    await behavioralcompetenciesref.BehavioralGrid.EndEditAsync();
                }
                if (individualdevelopmentplanref != null && individualdevelopmentplanref.DevelopmentPlanGrid != null)
                {
                    await individualdevelopmentplanref.DevelopmentPlanGrid.EndEditAsync();
                }
                if (HODCommentsref != null && HODCommentsref.HODCommentsGrid != null)
                {
                    await HODCommentsref.HODCommentsGrid.EndEditAsync();
                }
                if (CEOCommentsref != null && CEOCommentsref.CEOCommentsGrid != null)
                {
                    await CEOCommentsref.CEOCommentsGrid.EndEditAsync();
                }

                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
            await LoadingDialogue.HideAsync();
        }
    }

    private void ComfirmationApproveNo()
    {
        this.ConfirmationApproveDialogue.HideAsync();
    }

    /*Approve Appraisal*/

    #endregion Approval

    public async void DialogCancelBtnclicked()
    {
        try
        {
            if (DataGrid != null)
            {
                await DataGrid.CloseEdit();
            }
        }
        catch (Exception ex)
        {

        }
        finally
        {
            await LoadingDialogue.HideAsync();
        }

    }

    /*Rejection Reasons*/


    public async Task onRejectForm()
    {
        try
        {
            ConfirmationText = "<p>Are you sure you want to reject this appraisal record! </p>";
            await this.ConfirmationRejectDialogue.ShowAsync();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void ComfirmationRejectYes()
    {
        try
        {
            RejectionCommentsModel = new BalanceScoreCardRejectionReasons();
            if (BscData != null)
            {
                RejectionCommentsModel.BalanceScoreCardId = BscData.BalanceScoreCardId;
            }

            if (Credentials != null)
            {
                RejectionCommentsModel.CapturedBy = Credentials.AccountHolderName;
            }
            RejectionCommentsModel.DateCaptured = DateTime.Now;

            if (ConfirmationRejectDialogue != null)
            {
                await ConfirmationRejectDialogue.HideAsync();
            }

            if (RejectLeaveDialogue != null)
            {
                await RejectLeaveDialogue.ShowAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void ComfirmationRejectNo()
    {
        this.ConfirmationRejectDialogue.HideAsync();
    }

    //Rejection Reason
    private async Task RejectReasonYes()
    {
        try
        {
            if (string.IsNullOrEmpty(RejectionCommentsModel.RejectionReason))
            {
                toastService.ShowWarning("Please enter a reason");
            }
            else
            {
                await LoadingDialogue.ShowAsync();
                if (BscData.BalanceScoreCardRejectionReasons == null)
                {
                    BscData.BalanceScoreCardRejectionReasons = new List<BalanceScoreCardRejectionReasons>();
                }
                BscData.BalanceScoreCardRejectionReasons.Add(RejectionCommentsModel);

                //Supervisor Review
                if (BscData.LeaveApprovalStatusId == 2)
                {
                    BscData.LeaveApprovalStatusId = 4;
                    BscData.SupervisorRejectionDate = DateTime.Now;
                }

                //Supervisor Review after Employee Agrees to Comments 
                else if (BscData.LeaveApprovalStatusId == 16)
                {
                    BscData.LeaveApprovalStatusId = 4;
                    BscData.CeoRejectionDate = DateTime.Now;
                }

                //HOD Review
                else if (BscData.LeaveApprovalStatusId == 5)
                {
                    BscData.LeaveApprovalStatusId = 7;
                    BscData.HodRejectionDate = DateTime.Now;
                }

                //CEO Review 
                else if (BscData.LeaveApprovalStatusId == 14)
                {
                    BscData.LeaveApprovalStatusId = 12;
                    BscData.CeoRejectionDate = DateTime.Now;
                }

                if (RejectLeaveDialogue != null)
                {
                    await RejectLeaveDialogue.HideAsync();
                }

                if (DataGrid != null)
                {
                    await DataGrid.EndEditAsync();
                }
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void RejectReasonNo()
    {
        this.RejectLeaveDialogue.HideAsync();
    }


    /*Rejection Reasons*/


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            var isAuthenticated = await AuthService.CheckAuthenticationStatus();
            if (isAuthenticated == false)
            {
                navManager.NavigateTo("/LoginPage", true);
            }

            else
            {
                Credentials = await AuthService.GetUserCredentials();
                MainQuery = new Query();
                //Set employeeno and appraiserdetails to null on initialize
                employeeno = null;
                appraiserdetails = null;

                List<Task> t = new List<Task>();
                t.Add(Task.Run(async () =>
                {
                    var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
                    if (responsemetric.IsSuccessStatusCode)
                    {
                        var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                        MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetric>>(contentmetric, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetEmployeeDD");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsejobtitle = await Http.GetAsync($"HumanResource/GetJobTitle");
                    if (responsejobtitle.IsSuccessStatusCode)
                    {
                        var contentjobtitle = await responsejobtitle.Content.ReadAsStringAsync();
                        JobTitleData = JsonSerializer.Deserialize<List<AJobTitle>>(contentjobtitle, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsefinyear = await Http.GetAsync($"FinancialYear/list");
                    if (responsefinyear.IsSuccessStatusCode)
                    {
                        var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
                        FinancialYearData = JsonSerializer.Deserialize<List<AFinancialYear>>(contentfinyear, _options);

                        DateTime currentdate = DateTime.Now;
                        string? financialyeardesc = null;
                        if (currentdate.Month >= 6)
                        {
                            financialyeardesc = $"{currentdate.Year}/{(currentdate.Year + 1)}";
                        }
                        else if (currentdate.Month < 6)
                        {
                            financialyeardesc = $"{(currentdate.Year - 1)}/{currentdate.Year}";
                        }

                        var b = FinancialYearData.FirstOrDefault(o => o.FinancialYear.Trim() == financialyeardesc.Trim());
                        if (b != null)
                        {
                            finyearid = b.Id;
                            List<int?> _finyearid = new List<int?>();
                            _finyearid.Add(finyearid);
                            searchpanel.FinancialYearId = _finyearid.ToArray();
                            MainQuery = new Query().AddParams("FinancialYearId", string.Join(",", searchpanel.FinancialYearId));

                            //Get Populated Date
                            var responsetargetpopulated = await Http.GetAsync($"TargetSetting/GetPopulatedData?YearId={finyearid}&ApprovalId={1}");
                            if (responsetargetpopulated.IsSuccessStatusCode)
                            {
                                var contenttargetpopulated = await responsetargetpopulated.Content.ReadAsStringAsync();
                                PopulatedData = JsonSerializer.Deserialize<List<ViewABscKpidetails>>(contenttargetpopulated, _options);
                            }

                            // //Get Perspective Type Details
                            // var responsebscperspectivedetail = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesDetail?YearId={finyearid}&EmployeeId={Credentials.StaffId}");
                            // if (responsebscperspectivedetail.IsSuccessStatusCode)
                            // {
                            //     var contentbscperspectivedetail = await responsebscperspectivedetail.Content.ReadAsStringAsync();
                            //     PerspectivesDetailData = JsonSerializer.Deserialize<List<ViewABscPerspectivesDetail>>(contentbscperspectivedetail, _options);
                            // }
                        }

                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responseappraisal = await Http.GetAsync($"AppraisalReason/GetAppraisalReason");
                    if (responseappraisal.IsSuccessStatusCode)
                    {
                        var contentappraisal = await responseappraisal.Content.ReadAsStringAsync();
                        AppraisalData = JsonSerializer.Deserialize<List<AAppraisalReason>>(contentappraisal, _options);
                    }
                }));


                t.Add(Task.Run(async () =>
                {
                    var responseKpi = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicator");
                    if (responseKpi.IsSuccessStatusCode)
                    {
                        var contentKpi = await responseKpi.Content.ReadAsStringAsync();
                        KpiData = JsonSerializer.Deserialize<List<ABscKpi>>(contentKpi, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responseKpi = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicatorDetails");
                    if (responseKpi.IsSuccessStatusCode)
                    {
                        var contentKpi = await responseKpi.Content.ReadAsStringAsync();
                        KpiDetailsData = JsonSerializer.Deserialize<List<ABscKpidetails>>(contentKpi, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
                    if (responsebscperspectivetype.IsSuccessStatusCode)
                    {
                        var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                        BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesType>>(contentbscperspectivetype, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responseevidence = await Http.GetAsync($"EmployeeEvidence/GetEmployeeEvidence");
                    if (responseevidence.IsSuccessStatusCode)
                    {
                        var contentevidence = await responseevidence.Content.ReadAsStringAsync();
                        EvidenceData = JsonSerializer.Deserialize<List<AEmployeeEvidence>>(contentevidence, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responseperformancedescriptor = await Http.GetAsync($"PerformanceDescriptor/GetPerformanceDescriptor");
                    if (responseperformancedescriptor.IsSuccessStatusCode)
                    {
                        var contentperformancedescriptor = await responseperformancedescriptor.Content.ReadAsStringAsync();
                        PerformanceDescriptorData = JsonSerializer.Deserialize<List<APerformanceDescriptor>>(contentperformancedescriptor, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsecompetence = await Http.GetAsync($"BehavioralCompetencies/GetCompetence");
                    if (responsecompetence.IsSuccessStatusCode)
                    {
                        var contentcompetence = await responsecompetence.Content.ReadAsStringAsync();
                        CompetenceData = JsonSerializer.Deserialize<List<ABehavioralCompetencies>>(contentcompetence, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsetarget = await Http.GetAsync($"TargetSetting/GetTargetMainData");
                    if (responsetarget.IsSuccessStatusCode)
                    {
                        var contenttarget = await responsetarget.Content.ReadAsStringAsync();
                        TargetData = JsonSerializer.Deserialize<List<BalanceScoreCardTargetSetting>>(contenttarget, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responseapprovalstatus = await Http.GetAsync($"Utilities/GetLeaveApprovalStatus");
                    if (responseapprovalstatus.IsSuccessStatusCode)
                    {
                        var contentapprovalstatus = await responseapprovalstatus.Content.ReadAsStringAsync();
                        ApprovalStatusData = JsonSerializer.Deserialize<List<ALeaveApprovalStatus>>(contentapprovalstatus, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsebscperspective = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
                    if (responsebscperspective.IsSuccessStatusCode)
                    {
                        var contentbscperspective = await responsebscperspective.Content.ReadAsStringAsync();
                        BscPerspectiveData = JsonSerializer.Deserialize<List<ABscPerspectives>>(contentbscperspective, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsetargettotal = await Http.GetAsync($"BalanceScoreCard/GetTargetTotal");
                    if (responsetargettotal.IsSuccessStatusCode)
                    {
                        var contenttargettotal = await responsetargettotal.Content.ReadAsStringAsync();
                        TargetSettingTotalData = JsonSerializer.Deserialize<List<ViewTargetSettingTotals>>(contenttargettotal, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsebehavioraltotal = await Http.GetAsync($"BalanceScoreCard/GetBehavioralTotal");
                    if (responsebehavioraltotal.IsSuccessStatusCode)
                    {
                        var contentbehavioraltotal = await responsebehavioraltotal.Content.ReadAsStringAsync();
                        BehavioralTotalData = JsonSerializer.Deserialize<List<ViewBehavioralTotals>>(contentbehavioraltotal, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsemetric = await Http.GetAsync($"Utilities/GetPerformanceScale");
                    if (responsemetric.IsSuccessStatusCode)
                    {
                        var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                        ScaleData = JsonSerializer.Deserialize<List<APerformanceScale>>(contentmetric, _options);
                    }
                }));

                Task _t = Task.WhenAll(t);
                await _t;

                BSCAttachmentToolbarItems = new List<object>() {
                            new ItemModel(){ Text = "Add new Attachment", PrefixIcon= "e-add", Id="BSCGrid_add"}
                            // ,new ItemModel(){ Text = "Edit Attachment", PrefixIcon= "e-edit", Id="BSCGrid_edit"},
                            // new ItemModel(){ Text = "Update Attachment", PrefixIcon= "e-update", Id="BSCGrid_update"},
                            ,new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="BSCGrid_cancel"}
                        };
            }
        }
        catch (Exception ex)
        {

        }

    }

    public async void OnHODChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeenohodchange = args.ItemData;
    }

    public async void OnCEOChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeenoceochange = args.ItemData;
    }

    public void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeeno = args.ItemData;
        isFinancialYearEnabled = true;
    }

    public void OnAppraiserChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        appraiserdetails = args.ItemData;
    }

    public async void OnFinancialYearChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AFinancialYear> args)
    {
        try
        {
            await LoadingDialogue.ShowAsync();
            finyear = args.ItemData.Id;

            List<Task> t = new List<Task>();

            t.Add(Task.Run(async () =>
            {
                var responsetarget = await Http.GetAsync($"TargetSetting/GetTargetMainData");
                if (responsetarget.IsSuccessStatusCode)
                {
                    var contenttarget = await responsetarget.Content.ReadAsStringAsync();
                    TargetData = JsonSerializer.Deserialize<List<BalanceScoreCardTargetSetting>>(contenttarget, _options);
                }
            }));

            Task _t = Task.WhenAll(t);
            await _t;

            if (TargetData != null)
            {
                BscData.BalanceScoreCardTargetSetting = TargetData;
            }
            if (BscData.BalanceScoreCardTargetSetting == null)
            {
                BscData.BalanceScoreCardTargetSetting = new List<BalanceScoreCardTargetSetting>();
            }

            foreach (var item in BscPerspectiveTypeData)
            {
                var exist = BscData.BalanceScoreCardTargetSetting
                .FirstOrDefault(o => o.BscPerspectiveTypeId == item.BscPerspectiveTypeId);

                if (exist == null)
                {
                    var m = new BalanceScoreCardTargetSetting();
                    //m.BscPerspectiveDetailId = countid;
                    //m.BscPerspectiveTypeId = item.BscPerspectiveTypeId;

                    //KpiData.ABscPerspectivesDetail.Add(m);
                    //countid++;
                }
            }
            BscData.BalanceScoreCardTargetSetting = BscData.BalanceScoreCardTargetSetting.OrderBy(o => o.BscPerspectiveTypeId).ToList();

        }
        catch (Exception ex)
        {
            throw ex;
        }

        finally
        {
            await LoadingDialogue.HideAsync();
        }

    }

    #region BSCAdapter

    public class BSCAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        IAuthenticationService _AuthService;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public BSCAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , IAuthenticationService authservice, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            string? _FinancialYearId = null;

            // string[] _FinancialYearId = new string[] { };
            // if (!string.IsNullOrEmpty(searchpanel.FinancialYearId))
            // {
            //     _FinancialYearId = searchpanel.FinancialYearId.Split(',');
            // }

            if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
            {
                var val = dataManagerRequest.Params;

                if (val.FirstOrDefault(o => o.Key == "FinancialYearId").Value != null)
                {
                    _FinancialYearId = val.FirstOrDefault(o => o.Key == "FinancialYearId").Value.ToString();
                }
            }
            //var _bscdata = new BalanceScoreCard();
            var data = new List<BalanceScoreCard>();
            try
            {
                var response = await Http.GetAsync($"BalanceScoreCard/GetBSCData?finyearid={_FinancialYearId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<BalanceScoreCard>>(content, _options);
                    // _bscdata = JsonSerializer.Deserialize<BalanceScoreCard>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            //data.Add(_bscdata);
            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<BalanceScoreCard>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }


        // public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        // {
        //     var data = new List<BalanceScoreCard>();
        //     bool returnvalidata = false;
        //     try
        //     {
        //         if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
        //         {
        //             AppraisalSearch paymentRequestModel = new AppraisalSearch();
        //             var val = dataManagerRequest.Params;
        //             int a;
        //             bool hasValue = val.TryGetValue("FinancialYearId", out object _FinancialYearId);
        //             if (hasValue)
        //             {
        //                 var res = int.TryParse(_FinancialYearId.ToString(), out a);
        //                 paymentRequestModel.finYrId = a;

        //                 var response = await Http.GetAsync($"BalanceScoreCard/GetBSCData?finyearid={a}");
        //                 var content = await response.Content.ReadAsStringAsync();
        //                 if (response.IsSuccessStatusCode)
        //                 {
        //                     data = JsonSerializer.Deserialize<List<BalanceScoreCard>>(content, _options);
        //                 }
        //             }
        //             else

        //             {
        //                 data = null;
        //             }


        //         }


        //     }
        //     catch (Exception ex)
        //     {
        //         toastService.ShowError(ex.ToString());
        //     }

        //     IEnumerable GridData = data;
        //     int _count = data.Count;
        //     if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
        //     {
        //         // Searching
        //         GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
        //     }
        //     if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
        //     {
        //         // Filtering
        //         GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
        //     }
        //     if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
        //     {
        //         GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
        //     }
        //     if (dataManagerRequest.Skip != 0)
        //     {
        //         GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
        //     }
        //     if (dataManagerRequest.Take != 0)
        //     {
        //         GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
        //     }
        //     IDictionary<string, object> aggregates = new Dictionary<string, object>();
        //     if (dataManagerRequest.Aggregates != null) // Aggregation
        //     {
        //         aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
        //     }
        //     if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
        //     {
        //         foreach (var group in dataManagerRequest.Group)
        //         {
        //             GridData = DataUtil.Group<BalanceScoreCard>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
        //         }
        //     }
        //     return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        // }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as BalanceScoreCard);
                if (val != null)
                {
                    if (val.BalanceScoreCardId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"BalanceScoreCard/CreateAppraisal?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"BalanceScoreCard/UpdateAppraisal?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as BalanceScoreCard);
                if (val != null)
                {
                    if (val.BalanceScoreCardId != 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"BalanceScoreCard/UpdateAppraisal?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }

    }








    public async void LoadHandler()
    {
        SpinnerObj.ShowAsync();
        GridAttributes.Add("disable", "yes");
    }
    public async void DataBound()
    {
        GridAttributes["disable"] = "no";
        SpinnerObj.HideAsync();
    }

    public void ActionCompleteMain(ActionEventArgs<BalanceScoreCard> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) ||
        args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            DataGrid.PreventRender(false);
        }
    }

    public async void ActionBeginMain(ActionEventArgs<BalanceScoreCard> Args)
    {
        var data = Args.Data;

        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {

        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            try
            {
                selectebscid = Args.RowData.BalanceScoreCardId;
                #region PrimaryData
                List<Task> t = new List<Task>();

                //Get Set Perspective Weights on Edit
                var responsebscperspectivedetail = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesDetail?YearId={Args.RowData.FinancialYearId}&EmployeeId={Args.RowData.Employeeid}");
                if (responsebscperspectivedetail.IsSuccessStatusCode)
                {
                    var contentbscperspectivedetail = await responsebscperspectivedetail.Content.ReadAsStringAsync();
                    PerspectivesDetailData = JsonSerializer.Deserialize<List<ViewABscPerspectivesDetail>>(contentbscperspectivedetail, _options);
                }


                t.Add(Task.Run(async () =>
                {
                    var responsetargettotal = await Http.GetAsync($"BalanceScoreCard/GetTargetTotal");
                    if (responsetargettotal.IsSuccessStatusCode)
                    {
                        var contenttargettotal = await responsetargettotal.Content.ReadAsStringAsync();
                        TargetSettingTotalData = JsonSerializer.Deserialize<List<ViewTargetSettingTotals>>(contenttargettotal, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsebehavioraltotal = await Http.GetAsync($"BalanceScoreCard/GetBehavioralTotal");
                    if (responsebehavioraltotal.IsSuccessStatusCode)
                    {
                        var contentbehavioraltotal = await responsebehavioraltotal.Content.ReadAsStringAsync();
                        BehavioralTotalData = JsonSerializer.Deserialize<List<ViewBehavioralTotals>>(contentbehavioraltotal, _options);
                    }
                }));

                Task _t = Task.WhenAll(t);
                await _t;

                #endregion PrimaryData

                if (PerspectivesDetailData != null && PerspectivesDetailData.Count > 0)
                {
                    perspweightsfinancial = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 1);
                    perspweightsinternal = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 2);
                    perspweightscustomer = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 3);
                    perspweightslearning = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 4);

                }

                if(EmployeeData != null)
                {
                    employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid);
                    appraiserdetails = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.AppraiserName);
                    statusdecsription = ApprovalStatusData.FirstOrDefault(o => o.LeaveApprovalStatusId == Args.RowData.LeaveApprovalStatusId);

                    employeenohodchange = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Hod);
                    employeenoceochange = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Ceo);
                    employeenosupervisorchange = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.AppraiserName);
                }

                //await LoadingDialogue.ShowAsync();
                _previous = Args.RequestType;
                isFinancialYearEnabled = true;
                finyearid = Args.RowData.FinancialYearId;
                approvalstatsid = Args.RowData.LeaveApprovalStatusId;
                IsSupervisorEnabledColumn = false;
                IsEmployeeEnabledColumn = false;

                //Enabling and Disabling Grid Columns
                //If person editing is the same as the employee, disable supervision


                if (Args.RowData.Employeeid == Credentials.StaffId)
                {

                    IsSupervisorEnabledColumn = false;
                    IsEmployeeEnabledColumn = true;
                }

                //If person editing is not the same as the employee and is selected as the appraiser, enable supervision
                else if ((Args.RowData.Employeeid != Credentials.StaffId)
                && (Args.RowData.AppraiserName == Credentials.StaffId))
                {

                    IsSupervisorEnabledColumn = true;
                    IsEmployeeEnabledColumn = false;
                }

                //Disable for all who have no rights
                else
                {
                    IsSupervisorEnabledColumn = false;
                    IsEmployeeEnabledColumn = false;
                }

                //Enabling Buttons according to status

                //Draft
                if (Args.RowData.LeaveApprovalStatusId == 1)
                {        
                    //For employee
                    if (Args.RowData.Employeeid == Credentials.StaffId)
                    {
                        OnSubmitButtonsBool = true;
                        IsSubmitDisabled = false;
                        IsSubmitHidden = false;
                        IsHiddenDraft = false;
                        IsDraftDisabled = false;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = true;
                        developmentgridenabled = true;
                        attachmentgridenabled = true;
                        SaveText = "Submit Reponse";
                    }

                    else
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                    }
                }

                //Submitted for Supervisor Review
                else if (Args.RowData.LeaveApprovalStatusId == 2)
                {
                    OnSubmitButtonsBool = false;
                    //For employee
                    if (Args.RowData.Employeeid == Credentials.StaffId)
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                        SaveText  = "Submit Reponse";
                    }
                    //For supervisor
                    else if (Args.RowData.AppraiserName == Credentials.StaffId)
                    {
                        IsSubmitDisabled = false;
                        IsSubmitHidden = false;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = false;
                        IsRejectDisabled = false;
                        supervisorgridenabled = true;
                        
                        SaveText  = "Submit Back for Employee Comments";

                        supervisorgridenabled = true;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;

                    }
                    else
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                    }
                }

                //Rejected by Supervisor
                else if (Args.RowData.LeaveApprovalStatusId == 4)
                {
                    //For employee
                    if (Args.RowData.Employeeid == Credentials.StaffId)
                    {
                        OnSubmitButtonsBool = true;
                        IsSubmitDisabled = false;
                        IsSubmitHidden = false;
                        IsHiddenDraft = false;
                        IsDraftDisabled = false;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = true;
                        developmentgridenabled = false;
                        attachmentgridenabled = true;
                        SaveText = "Submit Reponse";
                    }

                    else
                    {
                        OnSubmitButtonsBool = false;
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                    }
                }

                //Approved By HOD
                if (Args.RowData.LeaveApprovalStatusId == 6)
                {        
                    OnSubmitButtonsBool = true;
                    IsSubmitDisabled = true;
                    IsSubmitHidden = true;
                    IsHiddenDraft = true;
                    IsDraftDisabled = true;
                    IsRejectedHidden = true;
                    IsRejectDisabled = true;
                    supervisorgridenabled = false;
                    hodgridenabled = false;
                    ceogridenabled = false;
                    appraiseegridenabled = false;
                    developmentgridenabled = false;
                    attachmentgridenabled = false;
                }

                //Submitted for HOD Review
                else if (Args.RowData.LeaveApprovalStatusId == 5)
                {
                    OnSubmitButtonsBool = false;
                    //For employee
                    if (Args.RowData.Employeeid == Credentials.StaffId)
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                        SaveText  = "Submit Reponse";
                    }
                    //For HOD
                    else if (Args.RowData.Hod == Credentials.StaffId)
                    {
                        IsSubmitDisabled = false;
                        IsSubmitHidden = false;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = false;
                        IsRejectDisabled = false;
                        supervisorgridenabled = true;
                        SaveText  = "Approve Appraisal";

                        supervisorgridenabled = false;
                        hodgridenabled = true;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                    }
                    else
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                    }
                }

                //Rejected By HOD
                else if (Args.RowData.LeaveApprovalStatusId == 7)
                {
                    //For employee
                    if (Args.RowData.Employeeid == Credentials.StaffId)
                    {
                        OnSubmitButtonsBool = true;
                        IsSubmitDisabled = false;
                        IsSubmitHidden = false;
                        IsHiddenDraft = false;
                        IsDraftDisabled = false;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = true;
                        developmentgridenabled = false;
                        attachmentgridenabled = true;
                        SaveText = "Submit Reponse";
                    }

                    else
                    {
                        OnSubmitButtonsBool = false;
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                    }
                }

                //Rejected By CEO
                else if (Args.RowData.LeaveApprovalStatusId == 12)
                {
                    //For employee
                    if (Args.RowData.Employeeid == Credentials.StaffId)
                    {
                        OnSubmitButtonsBool = true;
                        IsSubmitDisabled = false;
                        IsSubmitHidden = false;
                        IsHiddenDraft = false;
                        IsDraftDisabled = false;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = true;
                        developmentgridenabled = false;
                        attachmentgridenabled = true;
                        SaveText = "Submit Reponse";
                    }

                    else
                    {
                        OnSubmitButtonsBool = false;
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                    }
                }

                //Submitted for CEO Review
                else if (Args.RowData.LeaveApprovalStatusId == 14)
                {
                    OnSubmitButtonsBool = false;
                    //For employee
                    if (Args.RowData.Employeeid == Credentials.StaffId)
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                        SaveText = "Submit Reponse";
                    }
                    //For CEO
                    else if (Args.RowData.Ceo == Credentials.StaffId)
                    {
                        IsSubmitDisabled = false;
                        IsSubmitHidden = false;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = false;
                        IsRejectDisabled = false;
                        supervisorgridenabled = true;
                        SaveText = "Approve Appraisal";

                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = true;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;

                    }
                    else
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                    }
                }

                //Sent Back For Employee Comments
                else if (Args.RowData.LeaveApprovalStatusId == 15)
                {
                    OnSubmitButtonsBool = false;
                    //For employee
                    if (Args.RowData.Employeeid == Credentials.StaffId)
                    {
                        IsSubmitDisabled = false;
                        IsSubmitHidden = false;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = true;
                        developmentgridenabled = false;
                        attachmentgridenabled = true;
                        SaveText  = "Submit Comments To Supervisor";
                    }
                    //For supervisor
                    else if (Args.RowData.AppraiserName == Credentials.StaffId)
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        
                        SaveText  = "Submit Back for Employee Comments";

                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;

                    }
                    else
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                    }
                }

                //Employee Comments Submitted
                else if (Args.RowData.LeaveApprovalStatusId == 16)
                {
                    OnSubmitButtonsBool = false;
                    //For employee
                    if (Args.RowData.Employeeid == Credentials.StaffId)
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                        SaveText = "Submit Comments To Supervisor";
                    }
                    //For supervisor
                    else if (Args.RowData.AppraiserName == Credentials.StaffId)
                    {
                        IsSubmitDisabled = false;
                        IsSubmitHidden = false;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = false;
                        IsRejectDisabled = false;
                        supervisorgridenabled = true;

                        SaveText = "Approve to HOD";

                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;

                    }
                    else
                    {
                        IsSubmitDisabled = true;
                        IsSubmitHidden = true;
                        IsHiddenDraft = true;
                        IsDraftDisabled = true;
                        IsRejectedHidden = true;
                        IsRejectDisabled = true;
                        supervisorgridenabled = false;
                        hodgridenabled = false;
                        ceogridenabled = false;
                        appraiseegridenabled = false;
                        developmentgridenabled = false;
                        attachmentgridenabled = false;
                    }
                }
            
            }
            catch (Exception ex)
            {

            }
            finally
            {
                await LoadingDialogue.HideAsync();
            }

            StateHasChanged();
        }

        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            SaveText = "Submit To Supervisor";

            Args.RowData.FinancialYearId = finyearid;
            Args.RowData.DateofReview = DateTime.Now;

            //Get set Perspective Weights on Add
            List<Task> t = new List<Task>();

            //Get Perspective Type Details
            var responsebscperspectivedetail = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesDetail?YearId={finyearid}&EmployeeId={Credentials.StaffId}");
            if (responsebscperspectivedetail.IsSuccessStatusCode)
            {
                var contentbscperspectivedetail = await responsebscperspectivedetail.Content.ReadAsStringAsync();
                PerspectivesDetailData = JsonSerializer.Deserialize<List<ViewABscPerspectivesDetail>>(contentbscperspectivedetail, _options);
            }

            Task _t = Task.WhenAll(t);
            await _t;

            if (PerspectivesDetailData != null)
            {
                perspweightsfinancial = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 1);
                perspweightsinternal = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 2);
                perspweightscustomer = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 3);
                perspweightslearning = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 4);

            }

            employeeno = null;
            _previous = Args.RequestType;
            statusdecsription = null;
            if (Credentials.StaffId > 0 && EmployeeData != null)
            {
                Args.Data.Employeeid = Credentials.StaffId;
                employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Credentials.StaffId);
                isFinancialYearEnabled = true;
            }

            if(EmployeeData != null)
            {
                employeenohodchange = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Hod);
                employeenoceochange = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Ceo);

                //Assign HOD on Add
                if (employeenohodchange != null && employeenohodchange.HoDemployeeId != null)
                {
                    Args.RowData.Hod = employeenohodchange.HoDemployeeId;
                }

                //Assign the CEO
                var _data = EmployeeData.FirstOrDefault(o => o.JibTitleId == 2);
                //Assign CEO on Add
                if (_data != null)
                {
                    Args.RowData.Ceo = _data.Employeeid;
                    employeenoceochange = EmployeeData.FirstOrDefault(o => o.Employeeid == _data.Employeeid);
                }
            }


            //Enable save buttons on add
            IsDraftDisabled = false;
            IsSubmitDisabled = false;
            IsHiddenDraft = false;
            IsSubmitHidden = false;
            IsRejectedHidden = true;
            IsRejectDisabled = true;
            //Enable Fields
            OnSubmitButtonsBool = true;

            //Disable All Supervisor fields on capturing a new record
            IsSupervisorEnabledColumn = false;
            IsEmployeeEnabledColumn = true;

            //Editing and Adding in Grids
            supervisorgridenabled = false;
            hodgridenabled = false;
            ceogridenabled = false;
            appraiseegridenabled = false;
            developmentgridenabled = true;
            attachmentgridenabled = true;

            StateHasChanged();
        }
    }

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<BalanceScoreCard> Args)
    {
        if (Args.Column.Field == "LeaveApprovalStatusId")
        {
            if (Args.Data.LeaveApprovalStatusId == 3)
            {
                Args.Cell.AddClass(new string[] { "Approved" });
            }
            if (Args.Data.LeaveApprovalStatusId == 4 || Args.Data.LeaveApprovalStatusId == 7)
            {
                Args.Cell.AddClass(new string[] { "Rejected" });
            }
            else
            {
                Args.Cell.AddClass(new string[] { "Draft" });
            }
        }
    }

    public string GetEmployeeHeader(BalanceScoreCard Value)
    {
        if (Value.Employeeid == 0)
        {
            return "Add a new Appraisal";
        }
        else
        {
            return "Edit Appraisal Details";
        }
    }


    public async Task RowSelectingHandler(RowSelectingEventArgs<BalanceScoreCard> args)
    {
        await DataGrid.ClearSelection();   //clear selection
    }

    #endregion BSCAdapter
}

<style>
    /*Define Colors for Cells*/
    .Draft {
        background-color: yellow;
    }

    .Approved {
        background-color: forestgreen;
    }

    .Rejected {
        background-color: red;
    }
    /*Change color for text in Grid*/
    /*QueryCellInfo*/
    /*.Draft*/
    .e-grid .e-gridcontent .e-rowcell.Draft {
        color: black;
    }

    /*.Approved*/
    .e-grid .e-gridcontent .e-rowcell.Approved {
        color: White;
    }

    /*.Rejected*/
    .e-grid .e-gridcontent .e-rowcell.Rejected {
        color: white;
    }

    /*.hiderecord*/
    .hiderecord {
        display: none;
    }

    .equal-5 {
        background-color: #336c12;
    }
    /*QueryCellInfo*/
</style>
