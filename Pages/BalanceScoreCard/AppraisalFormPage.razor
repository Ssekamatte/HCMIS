@page "/AppraisalFormPage"
@using HCMIS.Model
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Text.RegularExpressions
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Collections;
@using HCMIS.SHARED.DTOs.BSC;
@inject IToastService toastService;
@using HCMIS.SHARED.DTOs.Utilities;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;
<meta charset="UTF-8">


<style>
    /*Grid Aggregate Column Color*/
    .e-grid .e-summaryrow .e-summarycell, .e-grid .e-summaryrow .e-templatecell, .e-grid .e-summarycontent .e-indentcell, .e-grid .e-indentcell.e-detailindentcelltop, .e-grid .e-groupfooterrow.e-summaryrow .e-indentcell.e-indentcelltop {
        background-color: orange;
        border-color: black;
        color: #201f1e;
        border-bottom-color: black;
        font-size: large;
    }

    /*Disable select all on grid checkbox*/
    .e-headercelldiv.e-headerchkcelldiv .e-checkbox-wrapper.e-css {
        pointer-events: none;
        opacity: 0.5;
    }

    /*Change font size in grid elements*/
    .e-grid .e-rowcell {
        font-size: larger;
    }

    /*Shade Grid Cells Across Grouping in hierarchical Trees*/
    .e-grid .e-summarycell {
        background-color: lightgrey;
        border-color: #edebe9;
        color: #201f1e;
    }

    /*Customize Scroll Bars*/
    ::-webkit-scrollbar-thumb {
        background-color: #888;
        border-radius: 10px
    }

    ::-webkit-scrollbar {
        background-color: white;
    }

    ::-webkit-scrollbar-button {
        background-color: #bbbbbb;
    }
    /*Customize Scroll Bars*/

    /*stick grid headers*/
    .e-gridheader {
        position: -webkit-sticky;
        position: sticky;
        top: 56px;
        z-index: 1;
    }
    /*stick grid headers*/

    .e-edit-dialog {
        max-height: 98%;
        max-width: 98%;
        min-width: 98%;
        min-height: 98%;
    }

    /*Disable Grid on Load and Enable it on DataBound*/
    .e-grid[disable="yes"] {
        opacity: .5;
        pointer-events: none;
        -ms-touch-action: none;
        touch-action: none;
        cursor: no-drop;
    }

    /*hide the Default Grid spinner */
    .e-grid .e-spinner-pane {
        display: none;
    }

    h6 {
        color: ghostwhite;
        background-color: #268cff;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        background-color: darkorange;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #ff4d00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    /**/
    #container {
        position: relative;
        height: 550px;
    }

    .e-spinner-pane.e-spin-overlay {
        background-color: rgb(192,192,192);
    }

    .pp {
        color: ghostwhite;
        background-color: #00cc00;
        padding: 10px;
    }

    .disablecolumn {
        background-color: lightgrey;
        pointer-events: none;
        display: none;
    }

</style>

@{
    //var Div = (new string[] { "BscPerspectiveTypeId", "PerspectiveTotalWeight" });
    var Div = (new string[] { "BscPerspectiveTypeId" });
}

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| PERFORMANCE APPRAISAL FORM
    </li>
</ol>

<SfSpinner @ref="SpinnerObj" Label="Loading Please Wait....." Size="50">
    @*Render custom spinner component.*@
</SfSpinner>

<SfGrid @ref="@DataGrid" TValue="BalanceScoreCardDto" GridLines="GridLine.Both" ID="Grid" @attributes="@GridAttributes" AllowTextWrap="true" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@ToolbarMenu">
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
        <HeaderTemplate>
            @{
                var text = GetEmployeeHeader((context as BalanceScoreCardDto));
                <div class="headerbandimg">
                    <span>@text</span>
                </div>
            }
        </HeaderTemplate>
        <Template>
            @{
                <div class="row">
                    <div class="col-md-4">
                        <center>
                            <h5>
                                <strong>PERFORMANCE APPRAISAL FORM</strong>
                            </h5>
                        </center>
                    </div>

                    @*@if(BscData != null && BscData.AppraisalNo != null)
                {
                <div class="col-md-4">
                <h5 style="color:green;">
                <strong>Appraisal No: @(BscData.AppraisalNo)</strong>
                </h5>
                </div>
                }*@

                    @if (statusdecsription != null)
                    {
                        <div class="col-md-4">
                            <h5 style="color:green;">
                                <strong>Appraisal Status: @statusdecsription.LeaveApprovalStatus</strong>
                            </h5>
                        </div>
                    }
                </div>

                BscData = (context as BalanceScoreCardDto);

                <SfAccordion ExpandMode="ExpandMode.Single">
                    <AccordionItems>
                        <AccordionItem Expanded="true">
                            <HeaderTemplate><strong>SECTION 1: EMPLOYEE PARTICULARS</strong></HeaderTemplate>
                            <ContentTemplate>
                                <div class="row">
                                    <div class="col-md-7">
                                        <div class="row">
                                            <div class="col-md-7">
                                                <div class="row">
                                                    <div class="col-md-5">
                                                        <p>Employee Name:<span style="color:red;">*</span></p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        <SfDropDownList @bind-Value="@(BscData.Employeeid)" Enabled="EmployeeDDEnabled" TItem="ViewBscEmployeeDto" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                            <DropDownListFieldSettings Value="@nameof(ViewBscEmployeeDto.Employeeid)" Text="@nameof(ViewBscEmployeeDto.EmployeeDetails)"></DropDownListFieldSettings>
                                                            <DropDownListEvents TValue="int?" TItem="ViewBscEmployeeDto" ValueChange="OnEmployeeChange"></DropDownListEvents>
                                                        </SfDropDownList>
                                                    </div>
                                                    @if (employeeno != null)
                                                    {
                                                        <div class="col-md-5">
                                                            <p>Official Email:</p>
                                                        </div>
                                                        <div class="col-md-7">
                                                            @if (@employeeno.EmailAddress != null)
                                                            {
                                                                @employeeno.EmailAddress
                                                            }
                                                            else
                                                            {
                                                                <p style="color:red; font-weight:bold;">Not Provided</p>
                                                            }
                                                        </div>

                                                        <div class="col-md-5">
                                                            <p>Employee Number:</p>
                                                        </div>
                                                        <div class="col-md-7">
                                                            @employeeno.EmployeeNumber
                                                        </div>
                                                        <div class="col-md-5">
                                                            <p>Employee Job Title:</p>
                                                        </div>
                                                        <div class="col-md-7">
                                                            @employeeno.JobTitleDescription
                                                        </div>
                                                        <div class="col-md-5">
                                                            <p>Department:</p>
                                                        </div>
                                                        <div class="col-md-7">
                                                            @employeeno.DepartmentDescription
                                                        </div>
                                                        <div class="col-md-5">
                                                            <p>Unit/Section:</p>
                                                        </div>
                                                        <div class="col-md-7">
                                                            @employeeno.DepartmentDescription
                                                        </div>
                                                        <div class="col-md-5">
                                                            <p>Date Joined:</p>
                                                        </div>
                                                        <div class="col-md-7">
                                                            @if (employeeno.DateJoined.HasValue)
                                                            {
                                                                @employeeno.DateJoined.Value.ToString("dd/MM/yyyy")
                                                            }
                                                        </div>
                                                        <div class="col-md-5">
                                                            <p>Date of Last Promotion:</p>
                                                        </div>
                                                        <div class="col-md-7">
                                                        </div>
                                                        <div class="col-md-5">
                                                            <p>Date of Review:<span style="color:red;">*</span></p>
                                                        </div>
                                                        <div class="col-md-7">
                                                            <SfDatePicker @bind-Value="@(BscData.DateofReview)" Enabled="ReviewDateEnabled" Placeholder="Select Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                        </div>
                                                        <div class="col-md-5">
                                                            <p>Duration in Organization (Yrs):</p>
                                                        </div>
                                                        <div class="col-md-7">
                                                            @employeeno.DurationatWork
                                                        </div>
                                                        <div class="col-md-5">
                                                            <p>Reason for Appraisal :<span style="color:red;">*</span></p>
                                                        </div>
                                                        <div class="col-md-7">
                                                            <SfDropDownList @bind-Value="@(BscData.AppraisalReasonId)" Enabled="AppraisalReasonEnabled"
                                                                            TItem="AppraisalReasonDto" TValue="int?" DataSource="@AppraisalData"
                                                                            Placeholder="Please select" FloatLabelType="FloatLabelType.Never"
                                                                            AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                <DropDownListFieldSettings Value="@nameof(AAppraisalReason.AppraisalReasonId)"
                                                                                           Text="@nameof(AAppraisalReason.AppraisalReason)"></DropDownListFieldSettings>
                                                            </SfDropDownList>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-5">
                                        <div class="row">
                                            <div class="row">
                                                <div class="col-md-5">
                                                    <p>Appraiser Name:<span style="color:red;">*</span></p>
                                                </div>
                                                <div class="col-md-7">
                                                    <SfDropDownList @bind-Value="@(BscData.AppraiserName)" Enabled="AppraiserNameEnabled" TItem="ViewBscEmployeeDto" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(ViewBscEmployeeDto.Employeeid)" Text="@nameof(ViewBscEmployeeDto.EmployeeDetails)"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="int?" TItem="ViewBscEmployeeDto" ValueChange="OnAppraiserChange"></DropDownListEvents>
                                                    </SfDropDownList>

                                                </div>

                                                @if (appraiserdetails != null)
                                                {
                                                    <div class="col-md-5">
                                                        <p>Appraiser's Job Title:</p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        @if (@appraiserdetails.JobTitleDescription != null)
                                                        {
                                                            @appraiserdetails.JobTitleDescription
                                                        }
                                                        else
                                                        {
                                                            <p>Not Available</p>
                                                        }

                                                    </div>

                                                    <div class="col-md-5">
                                                        <p>Official Email:</p>
                                                    </div>
                                                    <div class="col-md-7">
                                                        @if (@appraiserdetails.EmailAddress != null)
                                                        {
                                                            @appraiserdetails.EmailAddress
                                                        }
                                                        else
                                                        {
                                                            <p style="color:red; font-weight:bold;">Not Provided</p>
                                                        }
                                                    </div>
                                                }

                                                <div class="col-md-5">
                                                    <p>Financial Year:<span style="color:red;">*</span></p>
                                                </div>
                                                <div class="col-md-7">
                                                    <SfDropDownList @bind-Value="@(BscData.FinancialYearId)" TItem="ViewFinancialYearDto" TValue="int?"
                                                                    DataSource="@FinancialYearData" Placeholder="Please select"
                                                                    FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                                                    Enabled="@isFinancialYearEnabled">
                                                        <DropDownListFieldSettings Value="@nameof(AFinancialYear.Id)"
                                                                                   Text="@nameof(AFinancialYear.FinancialYear)">
                                                        </DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="int?"
                                                                            TItem="ViewFinancialYearDto" ValueChange="OnFinancialYearChange">
                                                        </DropDownListEvents>
                                                    </SfDropDownList>
                                                </div>

                                                @*Reason for Rejection*@

                                                @if (BscData != null && !string.IsNullOrEmpty(BscData.RejectionReason) && BscData.LeaveApprovalStatusId == 4)
                                                {

                                                    <div class="col-md-12">
                                                        <h4 style="align-items:center; font-weight:bold">Reason for Rejection<span style="color:red;">*</span></h4>
                                                        <table style="width:100%;font-size:20px">
                                                            <tr>
                                                                <td style="border: 1px solid black;border-collapse: collapse;border-color:black; background-color:white; color:red;">
                                                                    @BscData.RejectionReason
                                                                </td>
                                                            </tr>
                                                        </table>
                                                    </div>
                                                }

                                                <div class="col-md-5">
                                                    <p>Emojis</p>
                                                    <p style="font-size:48px">
                                                        &#128512; &#128516; &#128525; &#128151;
                                                    </p>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </ContentTemplate>
                        </AccordionItem>
                        <AccordionItem Expanded="true">
                            <HeaderTemplate><strong>SECTION 2: TARGET SETTING AND EVALUATION /  EXPECTED  ROLE KPIs or DELIVERABLES</strong></HeaderTemplate>
                            <ContentTemplate>
                                <SectionTwoPage BalanceScoreCardId="@BscData.BalanceScoreCardId" onscorecardtoggle="@ToggleBalanceScoreCardTarget" targetdata="@BscData.BalanceScoreCardTargetSetting.ToList()"
                                 BscPerspectiveTypeData="@BscPerspectiveTypeData" KpiDetailsData="@KpiDetailsData" MeasurementUnitData="@MeasurementUnitData"
                                                PopulatedData="@PopulatedData" FinancialYearData="@FinancialYearData" finyearid="@finyearid"></SectionTwoPage>
                            </ContentTemplate>
                        </AccordionItem>
                        <h6>
                            Please note each Value / Behavior
                            Assessment is derived from the "Performance
                            Descriptors" selected from the Drop Down
                            Fair Conduct  || Good Conduct || Outstanding Conduct
                        </h6>

                        @*

                        <AccordionItem Expanded="false">
                            <HeaderTemplate><strong>SECTION 3.VALUES & BEHAVIORAL COMPETENCIES ( RATING USING A SCALE OF 1- 3 AS PER THE COMPETENCE GUIDE)</strong></HeaderTemplate>
                            <ContentTemplate>
                                <SfGrid @ref="@BehavioralGrid" DataSource="@BscData.BalanceScoreCardBehavioral" GridLines="GridLine.Both"
                                        TValue="BalanceScoreCardBehavioralDto" ID="Grid1" AllowTextWrap="true" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true">
                                    <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                    <GridPageSettings PageSizes="true"></GridPageSettings>
                                    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
                                    <GridEvents CellSelected="BehavioralCellSelectHandler"
                                                CellSaved="BehavioralCellSavedHandler"
                                                TValue="BalanceScoreCardBehavioralDto">
                                    </GridEvents>

                                    <GridColumns>
                                        <GridColumn Type="ColumnType.CheckBox" Width="50" Visible=false></GridColumn>
                                        <GridColumn Field=@nameof(BalanceScoreCardBehavioralDto.BehavioralId) HeaderText="BehavioralId" Visible=false IsPrimaryKey="true" Width="150"></GridColumn>
                                        <GridColumn Field=@nameof(BalanceScoreCardBehavioralDto.BalanceScoreCardId) HeaderText="BalanceScoreCardId" TextAlign="TextAlign.Right" AllowEditing="false" ValidationRules="@(new ValidationRules { Required = false })" EditType="EditType.NumericEdit" Visible=false Width="180" IsFrozen="true"></GridColumn>
                                        <GridForeignColumn Field=@nameof(BalanceScoreCardBehavioralDto.CompetenceId)
                                                           HeaderText="#"
                                                           Width="350"
                                                           AllowEditing="false"
                                                           ForeignKeyField="@(nameof(BehavioralCompetenciesDto.CompetenceId))"
                                                           ForeignKeyValue="@(nameof(BehavioralCompetenciesDto.CompetenceDescription))"
                                                           ForeignDataSource="@CompetenceData"
                                                           AllowFiltering="true"
                                                           IsFrozen="true"
                                                           TextAlign="TextAlign.Justify"
                                                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                                        </GridForeignColumn>
                                        <GridForeignColumn Field=@nameof(BalanceScoreCardBehavioralDto.PerformanceDescriptorId)
                                                           HeaderText="Performance Rating"
                                                           Width="180"
                                                           AllowEditing="true"
                                                           ForeignKeyField="@(nameof(APerformanceDescriptor.PerformanceDescriptorId))"
                                                           ForeignKeyValue="@(nameof(APerformanceDescriptor.PerformanceDescriptor))"
                                                           ForeignDataSource="@PerformanceDescriptorData"
                                                           AllowFiltering="true"
                                                           IsFrozen="false"
                                                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                                        </GridForeignColumn>
                                        <GridColumn Field=@nameof(BalanceScoreCardBehavioralDto.EmployeeSelfAssessment)
                                                    HeaderText="Employee Self Assessment"
                                                    TextAlign="TextAlign.Right"
                                                    AllowEditing="true"
                                                    ValidationRules="@(new ValidationRules { Required = false })"
                                                    EditType="EditType.NumericEdit"
                                                    Format="###.##"
                                                    Width="180"
                                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                                        </GridColumn>
                                        <GridColumn Field=@nameof(BalanceScoreCardBehavioralDto.EmployeeComment)
                                                    HeaderText="Employee Comment"
                                                    TextAlign="TextAlign.Right"
                                                    AllowEditing="true"
                                                    ValidationRules="@(new ValidationRules { Required = false })"
                                                    Width="180"
                                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                                        </GridColumn>
                                        <GridColumn Field=@nameof(BalanceScoreCardBehavioralDto.SupervisorAssessment)
                                                    HeaderText="Supervisor Assessment"
                                                    AllowEditing="false"
                                                    TextAlign="TextAlign.Right"
                                                    EditType="EditType.NumericEdit"
                                                    Width="180"
                                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                                        </GridColumn>
                                        <GridColumn Field=@nameof(BalanceScoreCardBehavioralDto.SupervisorComment)
                                                    HeaderText="Supervisor Comment"
                                                    TextAlign="TextAlign.Right"
                                                    AllowEditing="true"
                                                    ValidationRules="@(new ValidationRules { Required = false })"
                                                    Width="180"
                                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                                        </GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </ContentTemplate>
                        </AccordionItem>
                        
                        *@

                        <h6>
                            Record 2-3 Development
                            goals for the next year
                            in Section 4 below: These
                            are individual learning needs
                            to support one's
                            job Performance and Career
                            development
                        </h6>
                        <AccordionItem Expanded="false">
                            <HeaderTemplate><strong>SECTION 4: INDIVIDUAL DEVELOPMENT PLAN</strong></HeaderTemplate>
                            <ContentTemplate>
                                <SfGrid @ref="@DevelopmentPlanGrid" DataSource="@BscData.BalanceScoreCardTargetDevelopmentPlan" GridLines="GridLine.Both"
                                        TValue="BalanceScoreCardTargetDevelopmentPlanDto" ID="GridDevelopmentPlan" AllowTextWrap="true" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Cancel", "Update"})">
                                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                    <GridPageSettings PageSizes="true"></GridPageSettings>
                                    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
                                    <GridEvents CellSelected="CellSelectHandlerDevelopment"
                                                TValue="BalanceScoreCardTargetDevelopmentPlanDto">
                                    </GridEvents>

                                    <GridColumns>
                                        <GridColumn Field=@nameof(BalanceScoreCardTargetDevelopmentPlanDto.DevelopmentPlanId)
                                                    HeaderText="Development Plan Id"
                                                    TextAlign="TextAlign.Justify"
                                                    IsPrimaryKey="true"
                                                    IsIdentity="true"
                                                    Visible="false"
                                                    Width="180"
                                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                        </GridColumn>
                                        <GridColumn Field=@nameof(BalanceScoreCardTargetDevelopmentPlanDto.DevelopmentNeed)
                                                    HeaderText="Development Need"
                                                    TextAlign="TextAlign.Justify"
                                                    AllowEditing="true"
                                                    ValidationRules="@(new ValidationRules { Required = false })"
                                                    Width="180"
                                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                        </GridColumn>
                                        <GridColumn Field=@nameof(BalanceScoreCardTargetDevelopmentPlanDto.DevelopmentAction)
                                                    HeaderText="Development Action"
                                                    TextAlign="TextAlign.Justify"
                                                    AllowEditing="true"
                                                    ValidationRules="@(new ValidationRules { Required = false })"
                                                    Width="180"
                                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                        </GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </ContentTemplate>
                        </AccordionItem>
                        <AccordionItem Expanded="false">
                            <HeaderTemplate><strong>SECTION 5: OVER ALL COMMENTS</strong></HeaderTemplate>
                            <ContentTemplate>
                                <SfAccordion>
                                    <AccordionItem Expanded="false">
                                        <HeaderTemplate>APPRAISEE'S COMMENTS</HeaderTemplate>
                                        <ContentTemplate>
                                            <SfGrid @ref="@AppraiseeCommentsGrid" DataSource="@BscData.BalanceScoreCardAppraiseeComments" GridLines="GridLine.Both"
                                                    TValue="BalanceScoreCardAppraiseeCommentsDto" ID="Grid1" AllowTextWrap="true" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit","Cancel", "Update"})">
                                                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
                                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                <GridPageSettings PageSizes="true"></GridPageSettings>
                                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
                                                <GridEvents CellSelected="CellSelectHandlerAppraiseeComments"
                                                            CellSaved="AppraiseeCommentsCellSavedHandler"
                                                            TValue="BalanceScoreCardAppraiseeCommentsDto">
                                                </GridEvents>

                                                <GridColumns>
                                                    <GridColumn Field=@nameof(BalanceScoreCardAppraiseeCommentsDto.AppraiseeCommentsId)
                                                                HeaderText="Appraisee Comments Id"
                                                                TextAlign="TextAlign.Justify"
                                                                IsPrimaryKey="true"
                                                                IsIdentity="true"
                                                                Visible="false"
                                                                Width="180"
                                                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                    </GridColumn>
                                                    <GridColumn Field=@nameof(BalanceScoreCardAppraiseeCommentsDto.AppraiseeComments)
                                                                HeaderText="Appraisee Comments"
                                                                TextAlign="TextAlign.Justify"
                                                                AllowEditing="true"
                                                                ValidationRules="@(new ValidationRules { Required = false })"
                                                                Width="180"
                                                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                    </GridColumn>
                                                    <GridColumn Field=@nameof(BalanceScoreCardAppraiseeCommentsDto.AppraiseeDate)
                                                                DefaultValue="@(DateTime.Now)"
                                                                HeaderText="Appraisee Date"
                                                                EditType="EditType.DatePickerEdit"
                                                                Format="dd/MM/yyyy"
                                                                Type="ColumnType.Date"
                                                                Width="160"
                                                                AllowEditing="false"
                                                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                    </GridColumn>
                                                </GridColumns>
                                            </SfGrid>
                                        </ContentTemplate>
                                    </AccordionItem>
                                    <AccordionItem Expanded="false">
                                        <HeaderTemplate>SUPERVISOR'S COMMENTS</HeaderTemplate>
                                        <ContentTemplate>
                                            <SfGrid @ref="@SupervisorCommentsGrid" DataSource="@BscData.BalanceScoreCardSupervisorComments" GridLines="GridLine.Both"
                                                    TValue="BalanceScoreCardSupervisorCommentsDto" ID="Grid1" AllowTextWrap="true" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit","Cancel", "Update","ExcelExport","PdfExport","CsvExport", "Search"})">
                                                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
                                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                <GridPageSettings PageSizes="true"></GridPageSettings>
                                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
                                                <GridEvents CellSelected="CellSelectHandlerSupervisorComments"
                                                            CellSaved="SupervisorCommentsCellSavedHandler"
                                                            TValue="BalanceScoreCardSupervisorCommentsDto">
                                                </GridEvents>

                                                <GridColumns>
                                                    <GridColumn Field=@nameof(BalanceScoreCardSupervisorCommentsDto.SupervisorCommentId)
                                                                HeaderText="Supervisor Comment Id"
                                                                TextAlign="TextAlign.Justify"
                                                                IsPrimaryKey="true"
                                                                IsIdentity="true"
                                                                Visible="false"
                                                                Width="180"
                                                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                    </GridColumn>
                                                    <GridColumn Field=@nameof(BalanceScoreCardSupervisorCommentsDto.SupervisorComments)
                                                                HeaderText="Supervisor Comments"
                                                                TextAlign="TextAlign.Justify"
                                                                AllowEditing="true"
                                                                ValidationRules="@(new ValidationRules { Required = false })"
                                                                Width="180"
                                                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                    </GridColumn>
                                                    <GridColumn Field=@nameof(BalanceScoreCardSupervisorCommentsDto.SupervisorDate)
                                                                DefaultValue="@(DateTime.Now)"
                                                                HeaderText="Supervisor Date"
                                                                EditType="EditType.DatePickerEdit"
                                                                Format="dd/MM/yyyy"
                                                                Type="ColumnType.Date"
                                                                Width="160"
                                                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                    </GridColumn>
                                                </GridColumns>
                                            </SfGrid>
                                        </ContentTemplate>
                                    </AccordionItem>
                                    <AccordionItem Expanded="false">
                                        <HeaderTemplate>HEAD OF DEPARTMENT'S COMMENTS</HeaderTemplate>
                                        <ContentTemplate>
                                            <SfGrid @ref="@HODCommentsGrid" DataSource="@BscData.BalanceScoreCardHodcomments" GridLines="GridLine.Both"
                                                    TValue="BalanceScoreCardHODCommentsDto" ID="Grid1" AllowTextWrap="true" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Cancel", "Update","ExcelExport","PdfExport","CsvExport", "Search"})">
                                                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
                                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                <GridPageSettings PageSizes="true"></GridPageSettings>
                                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
                                                <GridEvents CellSelected="CellSelectHandlerHODComments"
                                                            CellSaved="HODCommentsCellSavedHandler"
                                                            TValue="BalanceScoreCardHODCommentsDto">
                                                </GridEvents>

                                                <GridColumns>
                                                    <GridColumn Field=@nameof(BalanceScoreCardHODCommentsDto.HodcommentId)
                                                                HeaderText="HOD Comment Id"
                                                                TextAlign="TextAlign.Justify"
                                                                IsPrimaryKey="true"
                                                                IsIdentity="true"
                                                                Visible="false"
                                                                Width="180"
                                                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                    </GridColumn>
                                                    <GridColumn Field=@nameof(BalanceScoreCardHODCommentsDto.Hodcomments)
                                                                HeaderText="HOD Comments"
                                                                TextAlign="TextAlign.Justify"
                                                                AllowEditing="true"
                                                                ValidationRules="@(new ValidationRules { Required = false })"
                                                                Width="180"
                                                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                    </GridColumn>
                                                    <GridColumn Field=@nameof(BalanceScoreCardHODCommentsDto.Hoddate)
                                                                DefaultValue="@(DateTime.Now)"
                                                                HeaderText="HOD Date"
                                                                EditType="EditType.DatePickerEdit"
                                                                Format="dd/MM/yyyy"
                                                                Type="ColumnType.Date"
                                                                Width="160"
                                                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                    </GridColumn>
                                                </GridColumns>

                                            </SfGrid>
                                        </ContentTemplate>
                                    </AccordionItem>

                                    @if (Credentials != null && !string.IsNullOrEmpty(Credentials.UserRole) &&
                                Credentials.UserRole.Contains("Administrator"))
                                    {
                                        <AccordionItem Expanded="false">
                                            <HeaderTemplate>CHIEF EXECUTIVE OFFICER COMMENTS</HeaderTemplate>
                                            <ContentTemplate>
                                                <SfGrid @ref="@CEOCommentsGrid" DataSource="@BscData.BalanceScoreCardCeocomments" GridLines="GridLine.Both"
                                                        TValue="BalanceScoreCardCEOCommentsDto" ID="Grid1" AllowTextWrap="true" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Cancel", "Update","ExcelExport","PdfExport","CsvExport", "Search"})">
                                                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
                                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                    <GridPageSettings PageSizes="true"></GridPageSettings>
                                                    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
                                                    <GridEvents CellSelected="CellSelectHandlerCEOComments"
                                                                CellSaved="CEOCommentsCellSavedHandler"
                                                                TValue="BalanceScoreCardCEOCommentsDto">
                                                    </GridEvents>

                                                    <GridColumns>
                                                        <GridColumn Field=@nameof(BalanceScoreCardCEOCommentsDto.CeocommentId)
                                                                    HeaderText="CEO Comment Id"
                                                                    TextAlign="TextAlign.Justify"
                                                                    IsPrimaryKey="true"
                                                                    IsIdentity="true"
                                                                    Visible="false"
                                                                    Width="180"
                                                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                        </GridColumn>
                                                        <GridColumn Field=@nameof(BalanceScoreCardCEOCommentsDto.Ceocomments)
                                                                    HeaderText="CEO Comments"
                                                                    TextAlign="TextAlign.Justify"
                                                                    AllowEditing="true"
                                                                    ValidationRules="@(new ValidationRules { Required = false })"
                                                                    Width="180"
                                                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                        </GridColumn>
                                                        <GridColumn Field=@nameof(BalanceScoreCardCEOCommentsDto.Ceodate)
                                                                    DefaultValue="@(DateTime.Now)"
                                                                    HeaderText="CEO Date"
                                                                    EditType="EditType.DatePickerEdit"
                                                                    Format="dd/MM/yyyy"
                                                                    Type="ColumnType.Date"
                                                                    Width="160"
                                                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                                                        </GridColumn>
                                                    </GridColumns>

                                                </SfGrid>
                                            </ContentTemplate>
                                        </AccordionItem>
                                    }
                                </SfAccordion>
                            </ContentTemplate>
                        </AccordionItem>
                    </AccordionItems>
                </SfAccordion>

            }


        </Template>
        <FooterTemplate>
            <button type="button" @onclick="@onSaveDraftForm" hidden=@IsHiddenDraft disabled=@IsDraftDisabled class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Save Draft</button>

            @if (_previous == Syncfusion.Blazor.Grids.Action.Add)
            {
                <button @onclick="@onSubmitForm" hidden=@IsHiddenPersonSubmit disabled=@IsSubmitDisabled class="btn btn-success" data-ripple="true" style="margin-right:10px;">Submit</button>
            }
            else if (_previous == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                <button @onclick="@onApproveForm" hidden=@IsHiddenApprove disabled=@IsHiddenApproveDisabled class="btn btn-info" data-ripple="true" style="margin-right:10px;">Approve</button>
                <button @onclick="@onRejectForm" hidden=@IsHiddenRejected disabled=@IsRejectedDisabled class="btn btn-warning" data-ripple="true" style="margin-right:10px;">Reject</button>
                <button @onclick="@onSubmitForm" hidden=@IsHiddenSubmitEdit disabled=@IsHiddenDisabled class="btn btn-success" data-ripple="true" style="margin-right:10px;">Submit</button>
            }
            <button @onclick="@DialogCancelBtnclicked" disabled=@IsCancelDisabled class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Cancel</button>
        </FooterTemplate>
    </GridEditSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
    <GridEvents OnActionComplete="ActionCompleteMain"
                OnActionBegin="ActionBeginMain"
                OnLoad="LoadHandler"
                DataBound="DataBound"
                QueryCellInfo="QueryCellInfoHandler"
                RowSelecting="RowSelectingHandler"
                TValue="BalanceScoreCardDto">
    </GridEvents>
    <SfDataManager AdaptorInstance="@typeof(BSCAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50" CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>
        <GridColumn Field=@nameof(BalanceScoreCardDto.BalanceScoreCardId) HeaderText="BalanceScoreCardId" AllowEditing="false" Visible="false" IsPrimaryKey="true" Width="150"></GridColumn>
        <GridForeignColumn Field=@nameof(BalanceScoreCardDto.Employeeid)
                           HeaderText="Employee"
                           Width="100"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ViewBscEmployee.Employeeid))"
                           ForeignKeyValue="@(nameof(ViewBscEmployee.EmployeeDetails))"
                           ForeignDataSource="@EmployeeData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

        <GridForeignColumn Field=@nameof(BalanceScoreCardDto.AppraisalReasonId)
                           HeaderText="Appraisal Reason"
                           Width="100"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(AppraisalReasonDto.AppraisalReasonId))"
                           ForeignKeyValue="@(nameof(AppraisalReasonDto.AppraisalReason))"
                           ForeignDataSource="@AppraisalData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>
        <GridForeignColumn Field=@nameof(BalanceScoreCardDto.AppraiserName)
                           HeaderText="Appraiser Name"
                           Width="100"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ViewBscEmployeeDto.Employeeid))"
                           ForeignKeyValue="@(nameof(ViewBscEmployeeDto.EmployeeDetails))"
                           ForeignDataSource="@EmployeeData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

        <GridForeignColumn Field=@nameof(BalanceScoreCardDto.LeaveApprovalStatusId)
                           HeaderText="Approval Status"
                           Width="100"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ALeaveApprovalStatusDto.LeaveApprovalStatusId))"
                           ForeignKeyValue="@(nameof(ALeaveApprovalStatusDto.LeaveApprovalStatus))"
                           ForeignDataSource="@ApprovalStatusData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>
    </GridColumns>

</SfGrid>

@*Approval Confirmation Dialogue*@
<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationApproveDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationApproveYes" />
            <DialogButton Content="No" OnClick="@ComfirmationApproveNo" />
        </DialogButtons>
    </SfDialog>
</div>

@*Reason for rejection - CHRO*@
<div class="form-group col-md-12">
    <SfDialog @ref="@RejectLeaveDialogueCHRO" Width="80%" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                <div class="form-row">
                    <div class="col-md-3">
                        <p>Provide Rejection Reason<span style="color:red;">*</span></p>
                    </div>
                    <div class="form-group col-md-12">
                        <SfTextBox Multiline="true" @bind-Value="@(BscData.RejectionReason)" Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                    </div>
                </div>

            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton OnClick="@RejectReasonYesCHRO" Content="Confirm Rejection" IsPrimary="true" />
            <DialogButton OnClick="@RejectReasonNoCHRO" Content="Cancel" />
        </DialogButtons>
    </SfDialog>
</div>

@*<div class="form-group col-md-12">
                    <SfDialog @ref="@ConfirmationCHRODialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
                        <DialogTemplates>
                            <Content>
                                @((MarkupString)@ConfirmationText)
                            </Content>
                        </DialogTemplates>
                        <DialogButtons>
                            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationYesCHRO" />
                            <DialogButton Content="No" OnClick="@ComfirmationNoCHRO" />
                        </DialogButtons>
                    </SfDialog>
                    </div>*@

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="20%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader-Loading-text"></div>
                        @*<div class="loader-Saving-text"></div>*@
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

@code {
    private List<BalanceScoreCardTargetSettingDto> gridData = new List<BalanceScoreCardTargetSettingDto>();
    SfGrid<BalanceScoreCardTargetSettingDto>? TargetsettingGrid { get; set; }
    SfGrid<BalanceScoreCardBehavioralDto>? BehavioralGrid { get; set; }
    SfGrid<BalanceScoreCardTargetDevelopmentPlanDto>? DevelopmentPlanGrid { get; set; }
    SfGrid<BalanceScoreCardAppraiseeCommentsDto>? AppraiseeCommentsGrid { get; set; }
    SfGrid<BalanceScoreCardSupervisorCommentsDto>? SupervisorCommentsGrid { get; set; }
    SfGrid<BalanceScoreCardHODCommentsDto>? HODCommentsGrid { get; set; }
    SfGrid<BalanceScoreCardCEOCommentsDto>? CEOCommentsGrid { get; set; }
    SfGrid<BalanceScoreCardDto>? DataGrid { get; set; }
    DateTime currentdate = DateTime.Now;
    SfDialog? LoadingDialogue;
    Syncfusion.Blazor.Grids.Action _previous { get; set; }
    bool isFinancialYearEnabled { get; set; } = false;
    LoginResultModel? Credentials { get; set; }

    Dictionary<string, object> ToastHtmlAttribute = new Dictionary<string, object>()
        {
            {"style", "z-index: 2000;" }
        };

    List<ViewBscEmployeeDto>? EmployeeData { get; set; }
    private static BalanceScoreCardDto? BscData { get; set; }
    List<JobTitleDto>? JobTitleData { get; set; }
    List<ViewFinancialYearDto>? FinancialYearData { get; set; }
    List<AppraisalReasonDto>? AppraisalData { get; set; }
    List<BscKpiDto>? KpiData { get; set; }
    List<ABscKpidetailsDto>? KpiDetailsData { get; set; }
    List<BscPerspectivesDto>? BscPerspectiveData { get; set; }
    List<PerformanceDescriptorDto>? PerformanceDescriptorData { get; set; }
    List<EmployeeEvidenceDto>? EvidenceData { get; set; }
    List<BehavioralCompetenciesDto>? CompetenceData { get; set; }
    List<BalanceScoreCardTargetSettingDto>? TargetData { get; set; }
    List<ViewBscPerspectiveperformanceIndicatorDto>? PopulatedData { get; set; }
    List<ABscPerspectivesTypeDto>? BscPerspectiveTypeData { get; set; }
    List<ALeaveApprovalStatusDto>? ApprovalStatusData { get; set; }
    List<AMeasurementMetricDto>? MeasurementUnitData { get; set; }
    SfSpinner? SpinnerObj;
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

    private void ToggleBalanceScoreCardTarget(List<BalanceScoreCardTargetSettingDto>? TargetChange)
    {
        if(BscData != null && TargetChange != null)
        {
            if(BscData.BalanceScoreCardTargetSetting == null)
            {
                BscData.BalanceScoreCardTargetSetting = new List<BalanceScoreCardTargetSettingDto>();
            }
            BscData.BalanceScoreCardTargetSetting = TargetChange;
        }
    }

    private static ViewBscEmployeeDto employeeno { get; set; }
    private static ViewBscEmployeeDto appraiserdetails { get; set; }
    private static ALeaveApprovalStatusDto statusdecsription { get; set; }

    bool IsSubmitDisabled = false;
    bool IsDraftDisabled = false;
    bool IsHiddenApproveDisabled = false;
    bool IsRejectedDisabled = false;
    bool IsHiddenDisabled = false;
    bool IsCancelDisabled = false;

    bool IsHiddenApprove = false;
    bool IsHiddenSubmitEdit = false;
    bool IsHiddenRejected = false;
    bool IsHiddenDraft = false;
    bool IsHiddenPersonSubmit = false;
    bool IsEmployeeEnabledColumn = true;
    bool IsSupervisorEnabledColumn = true;


    SfDialog ConfirmationApproveDialogue;
    string ConfirmationText { get; set; }
    private Dictionary<string, object> GridAttributes { get; set; } = new Dictionary<string, object>();
    SfDialog RejectLeaveDialogueCHRO;
    SfDialog ConfirmationCHRODialogue;

    public bool EmployeeDDEnabled = false;
    public bool ReviewDateEnabled = false;
    public bool AppraisalReasonEnabled = true;
    public bool AppraiserNameEnabled = true;
    Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }


    private List<object> ToolbarMenu = new List<object>()
    {
            new ItemModel() { Text = "Add Appraisal", PrefixIcon = "e-add", Id = "Grid_add"},
            new ItemModel(){ Text = "Edit Appraisal", PrefixIcon= "e-edit", Id="Grid_edit"},
            //new ItemModel(){ Text = "Delete Employee", PrefixIcon= "e-delete", Id="Grid_delete"},
            new ItemModel(){ Text = "Update Appraisal", PrefixIcon= "e-update", Id="Grid_update"},
            new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="Grid_cancel"}
    };

    int? finyear = null;
    int? finyearid = null;
    int countid = -1000;

    //Section 2 Class
    public class TargetSettingEvaluation
    {
        public int BehavioralId { get; set; }
        public int? BalanceScoreCardId { get; set; }
        public int? CompetenceId { get; set; }
        public int? PerformanceDescriptorId { get; set; }
        public double? SupervisorAssessment { get; set; }
        public double? EmployeeSelfAssessment { get; set; }
        public string? EmployeeComment { get; set; }
        public string? SupervisorComment { get; set; }
        public int BscPerspectiveId { get; set; }
        public string? BscPerspectiveDescription { get; set; }
        public double? PerspectiveTotalWeight { get; set; }
        public int? DepartmentId { get; set; }
        public int? FinancialYearId { get; set; }
        public string? UserId { get; set; }
        public int Bsckpiid { get; set; }
        public string? Bsckpidescription { get; set; }
        public int MeasurementMetricId { get; set; }
        public string? MeasurementMetricDescription { get; set; }
    }

    //Section 3 Class
    public class ValuesBehavioralCompetencies
    {
        public int BehavioralId { get; set; }
        public int? BalanceScoreCardId { get; set; }
        public int? CompetenceId { get; set; }
        public string? CompetenceDescription { get; set; }
        public int? PerformanceDescriptorId { get; set; }
        public double? SupervisorAssessment { get; set; }
        public double? EmployeeSelfAssessment { get; set; }
        public string? EmployeeComment { get; set; }
        public string? SupervisorComment { get; set; }
    }

    private List<TargetSettingEvaluation> TargetSettingEvaluationList = new List<TargetSettingEvaluation>();
    private List<ValuesBehavioralCompetencies> BehavioralCompetenciesList = new List<ValuesBehavioralCompetencies>();

    public async Task onSaveDraftForm()
    {
        try
        {
            if (TargetsettingGrid != null)
            {
                await TargetsettingGrid.EndEditAsync();
                //BscData.BalanceScoreCardTargetSetting = gridData;
            }

            if (BehavioralGrid != null)
            {
                await BehavioralGrid.EndEditAsync();
            }

            if (DevelopmentPlanGrid != null)
            {
                await DevelopmentPlanGrid.EndEditAsync();
            }

            if (AppraiseeCommentsGrid != null)
            {
                await AppraiseeCommentsGrid.EndEditAsync();
            }

            if (SupervisorCommentsGrid != null)
            {
                await SupervisorCommentsGrid.EndEditAsync();
            }

            if (HODCommentsGrid != null)
            {
                await HODCommentsGrid.EndEditAsync();
            }

            if (CEOCommentsGrid != null)
            {
                await CEOCommentsGrid.EndEditAsync();
            }

            if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                BscData.LeaveApprovalStatusId = 1;
                BscData.AddedDate = DateTime.Now;
                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            //toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    public async Task onSubmitForm()
    {
        try
        {
            if (BscData.Employeeid == null)
            {
                toastService.ShowWarning("Please select the employee.");
            }

            else if (BscData.DateofReview == null)
            {
                toastService.ShowWarning("Please enter the date of review.");
            }

            else if (BscData.AppraisalReasonId == null)
            {
                toastService.ShowWarning("Please select the reason for appraisal.");
            }

            else if (BscData.AppraiserName == null)
            {
                toastService.ShowWarning("Please select the appraiser.");
            }

            else if (BscData.FinancialYearId == null)
            {
                toastService.ShowWarning("Please select the financial year.");
            }

            else
            {
                await LoadingDialogue.ShowAsync();
                if (BehavioralGrid != null)
                {
                    await BehavioralGrid.EndEditAsync();
                }

                if (DevelopmentPlanGrid != null)
                {
                    await DevelopmentPlanGrid.EndEditAsync();
                }

                if (AppraiseeCommentsGrid != null)
                {
                    await AppraiseeCommentsGrid.EndEditAsync();
                }

                if (SupervisorCommentsGrid != null)
                {
                    await SupervisorCommentsGrid.EndEditAsync();
                }

                if (HODCommentsGrid != null)
                {
                    await HODCommentsGrid.EndEditAsync();
                }

                if (CEOCommentsGrid != null)
                {
                    await CEOCommentsGrid.EndEditAsync();
                }

                if (DataGrid != null)
                {
                    BscData.LeaveApprovalStatusId = 2;
                    BscData.AddedDate = DateTime.Now;
                    await DataGrid.EndEditAsync();
                }

            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    /*Approve Appraisal*/

    public async Task onApproveForm()
    {
        try
        {
            if (BscData.Employeeid == null)
            {
                toastService.ShowWarning("Please select the employee.");
            }

            else if (BscData.DateofReview == null)
            {
                toastService.ShowWarning("Please enter the date of review.");
            }

            else if (BscData.AppraisalReasonId == null)
            {
                toastService.ShowWarning("Please select the reason for appraisal.");
            }

            else if (BscData.AppraiserName == null)
            {
                toastService.ShowWarning("Please select the appraiser.");
            }

            else if (BscData.FinancialYearId == null)
            {
                toastService.ShowWarning("Please select the financial year.");
            }
            else
            {
                ConfirmationText = "<p>Are you sure you want to approve this appraisal! </p>";
                await this.ConfirmationApproveDialogue.Show();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void ComfirmationApproveYes()
    {
        try
        {
            await this.ConfirmationApproveDialogue.HideAsync();
            if (TargetsettingGrid != null)
            {
                await TargetsettingGrid.EndEditAsync();
                //BscData.BalanceScoreCardTargetSetting = gridData;
            }

            if (BehavioralGrid != null)
            {
                await BehavioralGrid.EndEditAsync();
            }

            if (DevelopmentPlanGrid != null)
            {
                await DevelopmentPlanGrid.EndEditAsync();
            }

            if (AppraiseeCommentsGrid != null)
            {
                await AppraiseeCommentsGrid.EndEditAsync();
            }

            if (SupervisorCommentsGrid != null)
            {
                await SupervisorCommentsGrid.EndEditAsync();
            }

            if (HODCommentsGrid != null)
            {
                await HODCommentsGrid.EndEditAsync();
            }

            if (CEOCommentsGrid != null)
            {
                await CEOCommentsGrid.EndEditAsync();
            }

            if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                BscData.LeaveApprovalStatusId = 3;
                //BscData.AddedDate = DateTime.Now;
                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
            await LoadingDialogue.HideAsync();

            string? _baseurl = Navigation.BaseUri;

            string json = Newtonsoft.Json.JsonConvert.SerializeObject(BscData);
            StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var result = await Http.PostAsync($"BalanceScoreCard/ApprovedAppraisalMail?_baseurl={_baseurl}", httpContent);
        }
    }

    private void ComfirmationApproveNo()
    {
        this.ConfirmationApproveDialogue.Hide();
    }

    /*Approve Appraisal*/

    public async void DialogCancelBtnclicked()
    {
        try
        {
            if (DataGrid != null)
            {
                await DataGrid.CloseEdit();
            }
        }
        catch(Exception ex)
        {

        }
        finally
        {
            await LoadingDialogue.HideAsync();
        }

    }

    /*Rejection Reasons*/

    public async Task onRejectForm()
    {
        try
        {
            if (BscData.Employeeid == null)
            {
                toastService.ShowWarning("Please select the employee.");
            }

            else if (BscData.DateofReview == null)
            {
                toastService.ShowWarning("Please enter the date of review.");
            }

            else if (BscData.AppraisalReasonId == null)
            {
                toastService.ShowWarning("Please select the reason for appraisal.");
            }

            else if (BscData.AppraiserName == null)
            {
                toastService.ShowWarning("Please select the appraiser.");
            }

            else if (BscData.FinancialYearId == null)
            {
                toastService.ShowWarning("Please select the financial year.");
            }
            else
            {
                ConfirmationText = "<p>Are you sure you want to reject this appraisal! </p>";
                await this.RejectLeaveDialogueCHRO.Show();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task RejectReasonYesCHRO()
    {
        try
        {
            if (TargetsettingGrid != null)
            {
                await TargetsettingGrid.EndEditAsync();
                //BscData.BalanceScoreCardTargetSetting = gridData;
            }

            if (BehavioralGrid != null)
            {
                await BehavioralGrid.EndEditAsync();
            }

            if (DevelopmentPlanGrid != null)
            {
                await DevelopmentPlanGrid.EndEditAsync();
            }

            if (AppraiseeCommentsGrid != null)
            {
                await AppraiseeCommentsGrid.EndEditAsync();
            }

            if (SupervisorCommentsGrid != null)
            {
                await SupervisorCommentsGrid.EndEditAsync();
            }

            if (HODCommentsGrid != null)
            {
                await HODCommentsGrid.EndEditAsync();
            }

            if (CEOCommentsGrid != null)
            {
                await CEOCommentsGrid.EndEditAsync();
            }

            if (DataGrid != null)
            {
                if (string.IsNullOrEmpty(BscData.RejectionReason))
                {
                    toastService.ShowWarning("Please enter the reason why you are rejecting this appraisal.");
                }
                else
                {
                    await LoadingDialogue.ShowAsync();
                    BscData.LeaveApprovalStatusId = 4;
                    await DataGrid.EndEditAsync();
                }
            }
        }
        catch (Exception ex)
        {
            //toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            DataGrid.Refresh();
            await this.RejectLeaveDialogueCHRO.Hide();
            await LoadingDialogue.HideAsync();
            StateHasChanged();

            string? _baseurl = Navigation.BaseUri;

            string json = Newtonsoft.Json.JsonConvert.SerializeObject(BscData);
            StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var result = await Http.PostAsync($"BalanceScoreCard/RejectedAppraisalMail?_baseurl={_baseurl}", httpContent);
        }
    }

    private void RejectReasonNoCHRO()
    {
        DataGrid.Refresh();
        this.RejectLeaveDialogueCHRO.Hide();
    }


    protected override async Task OnInitializedAsync()
    {
        Credentials = await AuthService.GetUserCredentials();

        //Set employeeno and appraiserdetails to null on initialize
        employeeno = null;
        appraiserdetails = null;

        int? finyear = null;

        if (TargetSettingEvaluationList != null)
        {
            TargetSettingEvaluationList.Clear();
        }

        if (BehavioralCompetenciesList != null)
        {
            BehavioralCompetenciesList.Clear();
        }

        List<Task> t = new List<Task>();
        t.Add(Task.Run(async () =>
        {
            var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
            if (responsemetric.IsSuccessStatusCode)
            {
                var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetricDto>>(contentmetric, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseemployee = await Http.GetAsync($"BalanceScoreCard/GetEmployeeData");
            if (responseemployee.IsSuccessStatusCode)
            {
                var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                EmployeeData = JsonSerializer.Deserialize<List<ViewBscEmployeeDto>>(contentemployee, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsejobtitle = await Http.GetAsync($"HumanResource/GetJobTitle");
            if (responsejobtitle.IsSuccessStatusCode)
            {
                var contentjobtitle = await responsejobtitle.Content.ReadAsStringAsync();
                JobTitleData = JsonSerializer.Deserialize<List<JobTitleDto>>(contentjobtitle, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsefinyear = await Http.GetAsync($"FinancialYear/list");
            if (responsefinyear.IsSuccessStatusCode)
            {
                var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
                FinancialYearData = JsonSerializer.Deserialize<List<ViewFinancialYearDto>>(contentfinyear, _options);

                DateTime currentdate = DateTime.Now;
                string? financialyeardesc = null;
                if (currentdate.Month >= 6)
                {
                    financialyeardesc = $"{currentdate.Year}/{(currentdate.Year + 1)}";
                }
                else if (currentdate.Month < 6)
                {
                    financialyeardesc = $"{(currentdate.Year - 1)}/{currentdate.Year}";
                }

                var b = FinancialYearData.FirstOrDefault(o => o.FinancialYear.Trim() == financialyeardesc.Trim());
                if (b != null)
                {
                    finyearid = b.Id;

                    var responsetargetpopulated = await Http.GetAsync($"TargetSetting/GetPopulatedData?YearId={finyearid}");
                    if (responsetargetpopulated.IsSuccessStatusCode)
                    {
                        var contenttargetpopulated = await responsetargetpopulated.Content.ReadAsStringAsync();
                        PopulatedData = JsonSerializer.Deserialize<List<ViewBscPerspectiveperformanceIndicatorDto>>(contenttargetpopulated, _options);
                    }
                }

            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseappraisal = await Http.GetAsync($"AppraisalReason/GetAppraisalReason");
            if (responseappraisal.IsSuccessStatusCode)
            {
                var contentappraisal = await responseappraisal.Content.ReadAsStringAsync();
                AppraisalData = JsonSerializer.Deserialize<List<AppraisalReasonDto>>(contentappraisal, _options);
            }
        }));


        t.Add(Task.Run(async () =>
        {
            var responseKpi = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicator");
            if (responseKpi.IsSuccessStatusCode)
            {
                var contentKpi = await responseKpi.Content.ReadAsStringAsync();
                KpiData = JsonSerializer.Deserialize<List<BscKpiDto>>(contentKpi, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseKpi = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicatorDetails");
            if (responseKpi.IsSuccessStatusCode)
            {
                var contentKpi = await responseKpi.Content.ReadAsStringAsync();
                KpiDetailsData = JsonSerializer.Deserialize<List<ABscKpidetailsDto>>(contentKpi, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
            if (responsebscperspectivetype.IsSuccessStatusCode)
            {
                var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesTypeDto>>(contentbscperspectivetype, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseevidence = await Http.GetAsync($"EmployeeEvidence/GetEmployeeEvidence");
            if (responseevidence.IsSuccessStatusCode)
            {
                var contentevidence = await responseevidence.Content.ReadAsStringAsync();
                EvidenceData = JsonSerializer.Deserialize<List<EmployeeEvidenceDto>>(contentevidence, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseperformancedescriptor = await Http.GetAsync($"PerformanceDescriptor/GetPerformanceDescriptor");
            if (responseperformancedescriptor.IsSuccessStatusCode)
            {
                var contentperformancedescriptor = await responseperformancedescriptor.Content.ReadAsStringAsync();
                PerformanceDescriptorData = JsonSerializer.Deserialize<List<PerformanceDescriptorDto>>(contentperformancedescriptor, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsecompetence = await Http.GetAsync($"BehavioralCompetencies/GetCompetence");
            if (responsecompetence.IsSuccessStatusCode)
            {
                var contentcompetence = await responsecompetence.Content.ReadAsStringAsync();
                CompetenceData = JsonSerializer.Deserialize<List<BehavioralCompetenciesDto>>(contentcompetence, _options);
            }
        }));

        // t.Add(Task.Run(async () =>
        // {
        //     var responsetargetpopulated = await Http.GetAsync($"TargetSetting/GetPopulatedData");
        //     if (responsetargetpopulated.IsSuccessStatusCode)
        //     {
        //         var contenttargetpopulated = await responsetargetpopulated.Content.ReadAsStringAsync();
        //         PopulatedData = JsonSerializer.Deserialize<List<ViewBscPerspectiveperformanceIndicatorDto>>(contenttargetpopulated, _options);
        //     }
        // }));

        t.Add(Task.Run(async () =>
        {
            var responsetarget = await Http.GetAsync($"TargetSetting/GetTargetMainData");
            if (responsetarget.IsSuccessStatusCode)
            {
                var contenttarget = await responsetarget.Content.ReadAsStringAsync();
                TargetData = JsonSerializer.Deserialize<List<BalanceScoreCardTargetSettingDto>>(contenttarget, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseapprovalstatus = await Http.GetAsync($"Utilities/GetLeaveApprovalStatus");
            if (responseapprovalstatus.IsSuccessStatusCode)
            {
                var contentapprovalstatus = await responseapprovalstatus.Content.ReadAsStringAsync();
                ApprovalStatusData = JsonSerializer.Deserialize<List<ALeaveApprovalStatusDto>>(contentapprovalstatus, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsebscperspective = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
            if (responsebscperspective.IsSuccessStatusCode)
            {
                var contentbscperspective = await responsebscperspective.Content.ReadAsStringAsync();
                BscPerspectiveData = JsonSerializer.Deserialize<List<BscPerspectivesDto>>(contentbscperspective, _options);
            }
        }));

        Task _t = Task.WhenAll(t);
        await _t;
    }

    public void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewBscEmployeeDto> args)
    {
        employeeno = args.ItemData;
        isFinancialYearEnabled = true;
    }

    public void OnAppraiserChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewBscEmployeeDto> args)
    {
        appraiserdetails = args.ItemData;
    }

    public async void OnFinancialYearChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewFinancialYearDto> args)
    {
        try
        {
            await LoadingDialogue.ShowAsync();
            finyear = args.ItemData.Id;

            List<Task> t = new List<Task>();

            t.Add(Task.Run(async () =>
            {
                var responsetarget = await Http.GetAsync($"TargetSetting/GetTargetMainData");
                if (responsetarget.IsSuccessStatusCode)
                {
                    var contenttarget = await responsetarget.Content.ReadAsStringAsync();
                    TargetData = JsonSerializer.Deserialize<List<BalanceScoreCardTargetSettingDto>>(contenttarget, _options);
                }
            }));

            Task _t = Task.WhenAll(t);
            await _t;

            if (TargetData != null)
            {
                BscData.BalanceScoreCardTargetSetting = TargetData;
            }
            if (BscData.BalanceScoreCardTargetSetting == null)
            {
                BscData.BalanceScoreCardTargetSetting = new List<BalanceScoreCardTargetSettingDto>();
            }

            foreach (var item in BscPerspectiveTypeData)
            {
                var exist = BscData.BalanceScoreCardTargetSetting
                .FirstOrDefault(o => o.BscPerspectiveTypeId == item.BscPerspectiveTypeId);

                if (exist == null)
                {
                    var m = new BalanceScoreCardTargetSettingDto();
                    //m.BscPerspectiveDetailId = countid;
                    //m.BscPerspectiveTypeId = item.BscPerspectiveTypeId;

                    //KpiData.ABscPerspectivesDetail.Add(m);
                    //countid++;
                }
            }
            BscData.BalanceScoreCardTargetSetting = BscData.BalanceScoreCardTargetSetting.OrderBy(o => o.BscPerspectiveTypeId).ToList();

            //string json = Newtonsoft.Json.JsonConvert.SerializeObject(BscData);
            //StringContent HttpCompletionOption = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            //var resulttarget = await Http.GetAsync($"TargetSetting/GetTargetMainDataFiltered/{finyear}");
            //var contenttarget = await resulttarget.Content.ReadAsStringAsync();

            //if (resulttarget.IsSuccessStatusCode)
            //{
            //    List<ViewBscPerspectiveperformanceIndicatorDto>? data = new List<ViewBscPerspectiveperformanceIndicatorDto>();
            //    data = JsonSerializer.Deserialize<List<ViewBscPerspectiveperformanceIndicatorDto>>(contenttarget, _options);

            //    List<BalanceScoreCardTargetSettingDto> m = new List<BalanceScoreCardTargetSettingDto>();

            //    foreach (var n in data)
            //    {
            //        Random random = new Random();
            //        m.Add(new BalanceScoreCardTargetSettingDto
            //            {
            //                TargetSettingId = random.Next(1000, 10000),
            //                BscPerspectiveTypeId = n.BscPerspectiveTypeId,
            //                PerspectiveTotalWeight = n.PerspectiveTotalWeight /*Convert.ToDouble(n.PerspectiveTypeDescriptionandWeight)*/,
            //                MeasurementMetricId = n.MeasurementMetricId,
            //                Bsckpiid = n.Bsckpiid,
            //            });
            //    }
            //    gridData = m;
            //}

            //StateHasChanged();
        }
        catch (Exception ex)
        {
            throw ex;
        }

        finally
        {
            await LoadingDialogue.HideAsync();
        }

    }

    #region BSCAdapter

    public class BSCAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        IAuthenticationService _AuthService;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public BSCAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , IAuthenticationService authservice, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<BalanceScoreCardDto>();
            try
            {

                var response = await Http.GetAsync($"BalanceScoreCard/GetBSCData");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<BalanceScoreCardDto>>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<BalanceScoreCardDto>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as BalanceScoreCardDto);
                if (val != null)
                {
                    if (val.BalanceScoreCardId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"BalanceScoreCard/CreateAppraisal?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"BalanceScoreCard/UpdateAppraisal?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as BalanceScoreCardDto);
                if (val != null)
                {
                    if (val.BalanceScoreCardId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"BalanceScoreCard/CreateAppraisal?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"BalanceScoreCard/UpdateAppraisal?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }

    }

    //For Target Grid
    //Enable cell edit on single click
    public async Task CellSelectHandler(CellSelectEventArgs<BalanceScoreCardTargetSettingDto> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await TargetsettingGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await TargetsettingGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await TargetsettingGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    //For Behavioral Plan Grid
    //Enable cell edit on single click
    public async Task BehavioralCellSelectHandler(CellSelectEventArgs<BalanceScoreCardBehavioralDto> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await BehavioralGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await BehavioralGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await BehavioralGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    //For Development Grid
    //Enable cell edit on single click
    public async Task CellSelectHandlerDevelopment(CellSelectEventArgs<BalanceScoreCardTargetDevelopmentPlanDto> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await DevelopmentPlanGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await DevelopmentPlanGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await DevelopmentPlanGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    //For Appraisee Comments Grid
    //Enable cell edit on single click
    public async Task CellSelectHandlerAppraiseeComments(CellSelectEventArgs<BalanceScoreCardAppraiseeCommentsDto> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await AppraiseeCommentsGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await AppraiseeCommentsGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await AppraiseeCommentsGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }


    //For Supervisor Comments Grid
    //Enable cell edit on single click
    public async Task CellSelectHandlerSupervisorComments(CellSelectEventArgs<BalanceScoreCardSupervisorCommentsDto> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await SupervisorCommentsGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await SupervisorCommentsGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await SupervisorCommentsGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    //For HOD Comments Grid
    //Enable cell edit on single click
    public async Task CellSelectHandlerHODComments(CellSelectEventArgs<BalanceScoreCardHODCommentsDto> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await HODCommentsGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await HODCommentsGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await HODCommentsGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    //For CEO Comments Grid
    //Enable cell edit on single click
    public async Task CellSelectHandlerCEOComments(CellSelectEventArgs<BalanceScoreCardCEOCommentsDto> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await CEOCommentsGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await CEOCommentsGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await CEOCommentsGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }


    private async Task CellSavedHandler(CellSaveArgs<BalanceScoreCardTargetSettingDto> args)
    {
        try
        {
            var index = await TargetsettingGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.TargetSettingId);
            if (args.ColumnName == nameof(BalanceScoreCardTargetSettingDto.IndividualTargetWeight) || args.ColumnName == nameof(BalanceScoreCardTargetSettingDto.SupervisorAssessTgt))
            {
                double targetobjectivescore = 0;
                double individualtargetweight = 0;
                double supervisorassesstarget = 0;

                if (args.Data.IndividualTargetWeight.HasValue)
                {
                    individualtargetweight = args.Data.IndividualTargetWeight.Value;
                }
                if (args.Data.SupervisorAssessTgt.HasValue)
                {
                    supervisorassesstarget = args.Data.SupervisorAssessTgt.Value;
                }

                //targetobjectivescore = (((double)individualtargetweight) * ((double)supervisorassesstarget));
                targetobjectivescore = ((((double)individualtargetweight) / 100 * ((double)supervisorassesstarget) / 100) * 100);
                await TargetsettingGrid.UpdateCellAsync(index, nameof(BalanceScoreCardTargetSettingDto.IndividualTargetObjectiveScore), targetobjectivescore);
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await TargetsettingGrid.EndEditAsync();
        }
    }

    public void CellSaveHandler(CellSaveArgs<BalanceScoreCardTargetSettingDto> args)
    {
        //Disable editing next cell if value in previous cell is greater than 100%
        if (Convert.ToInt32(args.Value) > 100)
        {
            toastService.ShowWarning("You cannot enter a % greater than 100 %");
            args.Cancel = true;
        }
        else
        {
            args.Cancel = false;
        }
        // Here, you can customize your code.
    }

    private async Task BehavioralCellSavedHandler(CellSaveArgs<BalanceScoreCardBehavioralDto> args)
    {
        try
        {
            var index = await BehavioralGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.BehavioralId);
            if (args.ColumnName == nameof(BalanceScoreCardBehavioralDto.PerformanceDescriptorId))
            {
                var a = PerformanceDescriptorData.FirstOrDefault(o => o.PerformanceDescriptorId == args.Data.PerformanceDescriptorId);
                if (a != null)
                {
                    await BehavioralGrid.UpdateCellAsync(index, nameof(BalanceScoreCardBehavioralDto.SupervisorAssessment), Convert.ToDouble(a.PerformanceScore.Value));

                }

            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await BehavioralGrid.EndEditAsync();
        }
    }

    private async Task AppraiseeCommentsCellSavedHandler(CellSaveArgs<BalanceScoreCardAppraiseeCommentsDto> args)
    {
        try
        {
            var index = await AppraiseeCommentsGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.AppraiseeCommentsId);
            if (args.ColumnName == nameof(BalanceScoreCardAppraiseeCommentsDto.AppraiseeComments))
            {
                await AppraiseeCommentsGrid.UpdateCellAsync(index, nameof(BalanceScoreCardAppraiseeCommentsDto.AppraiseeDate), currentdate);
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await AppraiseeCommentsGrid.EndEditAsync();
        }
    }

    private async Task SupervisorCommentsCellSavedHandler(CellSaveArgs<BalanceScoreCardSupervisorCommentsDto> args)
    {
        try
        {
            var index = await SupervisorCommentsGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.SupervisorCommentId);
            if (args.ColumnName == nameof(BalanceScoreCardSupervisorCommentsDto.SupervisorComments))
            {
                await SupervisorCommentsGrid.UpdateCellAsync(index, nameof(BalanceScoreCardSupervisorCommentsDto.SupervisorDate), currentdate);
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await SupervisorCommentsGrid.EndEditAsync();
        }
    }

    private async Task HODCommentsCellSavedHandler(CellSaveArgs<BalanceScoreCardHODCommentsDto> args)
    {
        try
        {
            var index = await HODCommentsGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.HodcommentId);
            if (args.ColumnName == nameof(BalanceScoreCardHODCommentsDto.Hodcomments))
            {
                await HODCommentsGrid.UpdateCellAsync(index, nameof(BalanceScoreCardHODCommentsDto.Hoddate), currentdate);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await HODCommentsGrid.EndEditAsync();
        }
    }

    private async Task CEOCommentsCellSavedHandler(CellSaveArgs<BalanceScoreCardCEOCommentsDto> args)
    {
        try
        {
            var index = await CEOCommentsGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.CeocommentId);
            if (args.ColumnName == nameof(BalanceScoreCardCEOCommentsDto.Ceocomments))
            {
                await CEOCommentsGrid.UpdateCellAsync(index, nameof(BalanceScoreCardCEOCommentsDto.CeocommentId), currentdate);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await CEOCommentsGrid.EndEditAsync();
        }
    }

    public async void LoadHandler()
    {
        SpinnerObj.ShowAsync();
        GridAttributes.Add("disable", "yes");
    }
    public async void DataBound()
    {
        GridAttributes["disable"] = "no";
        SpinnerObj.HideAsync();
    }

    public void ActionCompleteMain(ActionEventArgs<BalanceScoreCardDto> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) ||
        args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            DataGrid.PreventRender(false);
        }
    }

    public async void ActionBeginMain(ActionEventArgs<BalanceScoreCardDto> Args)
    {
        var data = Args.Data;

        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            //if (Args.Data.Employeeid == null)
            //{
            //    toastService.ShowWarning("Please select the employee.");
            //    Args.Cancel = true;
            //}

            //else if (Args.Data.DateofReview == null)
            //{
            //    toastService.ShowWarning("Please enter the date of review.");
            //    Args.Cancel = true;
            //}

            //else if (Args.Data.AppraisalReasonId == null)
            //{
            //    toastService.ShowWarning("Please select the reason for appraisal.");
            //    Args.Cancel = true;
            //}

            //else if (Args.Data.AppraiserName == null)
            //{
            //    toastService.ShowWarning("Please select the appraiser.");
            //    Args.Cancel = true;
            //}

            //else if (Args.Data.FinancialYearId == null)
            //{
            //    toastService.ShowWarning("Please select the financial year.");
            //    Args.Cancel = true;
            //}

            //else
            //{
            //    await LoadingDialogue.ShowAsync();
            //    int? employid = Args.Data.Employeeid;

            //    string json = Newtonsoft.Json.JsonConvert.SerializeObject(BscData);
            //    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            //}

        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            try
            {
                await LoadingDialogue.ShowAsync();
                _previous = Args.RequestType;
                isFinancialYearEnabled = true;
                finyearid = Args.RowData.FinancialYearId;

                employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid);
                appraiserdetails = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.AppraiserName);
                statusdecsription = ApprovalStatusData.FirstOrDefault(o => o.LeaveApprovalStatusId == Args.RowData.LeaveApprovalStatusId);

                if (Args.RowData.BalanceScoreCardTargetSetting == null)
                {
                    Args.RowData.BalanceScoreCardTargetSetting = new List<BalanceScoreCardTargetSettingDto>();
                }

                if (Args.RowData.BalanceScoreCardAppraiseeComments == null)
                {
                    Args.RowData.BalanceScoreCardAppraiseeComments = new List<BalanceScoreCardAppraiseeCommentsDto>();
                }
                if (Args.RowData.BalanceScoreCardCeocomments == null)
                {
                    Args.RowData.BalanceScoreCardCeocomments = new List<BalanceScoreCardCEOCommentsDto>();
                }
                if (Args.RowData.BalanceScoreCardHodcomments == null)
                {
                    Args.RowData.BalanceScoreCardHodcomments = new List<BalanceScoreCardHODCommentsDto>();
                }
                if (Args.RowData.BalanceScoreCardSupervisorComments == null)
                {
                    Args.RowData.BalanceScoreCardSupervisorComments = new List<BalanceScoreCardSupervisorCommentsDto>();
                }
                if (Args.RowData.BalanceScoreCardTargetDevelopmentPlan == null)
                {
                    Args.RowData.BalanceScoreCardTargetDevelopmentPlan = new List<BalanceScoreCardTargetDevelopmentPlanDto>();
                }

                if (Args.RowData.BalanceScoreCardTargetSetting == null)
                {
                    Args.RowData.BalanceScoreCardTargetSetting = new List<BalanceScoreCardTargetSettingDto>();
                }

                if (Args.RowData.BalanceScoreCardBehavioral == null)
                {
                    Args.RowData.BalanceScoreCardBehavioral = new List<BalanceScoreCardBehavioralDto>();
                }

                // if (PopulatedData != null)
                // {
                //     foreach (var item in PopulatedData)
                //     {
                //         var m = new BalanceScoreCardTargetSettingDto();
                //         m.TargetSettingId = countid;
                //         m.BscPerspectiveTypeId = item.BscPerspectiveTypeId;
                //         m.PerspectiveTotalWeight = item.PerspectiveTotalWeight; //Check if department weight is same as this
                //         m.BsckpidetailsId = item.BsckpidetailsId;
                //         m.MeasurementMetricId = item.BscKpidetailsMeasurementMetricId;
                //         m.IndividualTargetWeight = item.IndividualTargetWeight;

                //         Args.RowData.BalanceScoreCardTargetSetting.Add(m);
                //         countid++;
                //     }
                // }

                // Args.RowData.BalanceScoreCardTargetSetting = Args.RowData.BalanceScoreCardTargetSetting.OrderBy(o => o.BscPerspectiveTypeId).ToList();

                if (CompetenceData != null)
                {
                    foreach (var n in CompetenceData)
                    {
                        var x = Args.RowData.BalanceScoreCardBehavioral.FirstOrDefault(o => o.CompetenceId == n.CompetenceId);
                        if (x == null)
                        {
                            Random random = new Random();
                            Args.RowData.BalanceScoreCardBehavioral.Add(new BalanceScoreCardBehavioralDto
                                {
                                    BehavioralId = random.Next(1000, 10000),
                                    CompetenceId = n.CompetenceId,
                                });
                        }
                    }

                }

                //Approved
                if (Args.RowData.LeaveApprovalStatusId == 3)
                {
                    //Hide Buttons
                    IsHiddenDraft = true;
                    IsHiddenPersonSubmit = true;
                    IsHiddenApprove = true;
                    IsHiddenRejected = true;
                    IsHiddenSubmitEdit = true;

                    //Disable Fields
                    EmployeeDDEnabled = false;
                    ReviewDateEnabled = false;
                    AppraisalReasonEnabled = false;
                    AppraiserNameEnabled = false;
                    isFinancialYearEnabled = false;
                }
                //Under Review by Supervisor and not someone's application
                else if (Args.RowData.LeaveApprovalStatusId == 2
                    && Args.RowData.Employeeid != Credentials.StaffId)
                {
                    IsHiddenDraft = false;
                    IsHiddenApprove = false;
                    IsHiddenRejected = false;
                    IsHiddenSubmitEdit = true;
                }
                //Under Review by Supervisor and someone's application
                else if (Args.RowData.LeaveApprovalStatusId == 2
                    && Args.RowData.Employeeid == Credentials.StaffId)
                {
                    //Hide Buttons
                    IsHiddenDraft = true;
                    IsHiddenPersonSubmit = true;
                    IsHiddenApprove = true;
                    IsHiddenRejected = true;
                    IsHiddenSubmitEdit = true;

                    //Disable Fields
                    EmployeeDDEnabled = false;
                    ReviewDateEnabled = false;
                    AppraisalReasonEnabled = false;
                    AppraiserNameEnabled = false;
                    isFinancialYearEnabled = false;
                }
                //Rejected for Employee
                else if (Args.RowData.LeaveApprovalStatusId == 4
                    && Args.RowData.Employeeid == Credentials.StaffId)
                {
                    IsHiddenDraft = false;
                    IsHiddenSubmitEdit = false;
                    IsHiddenApprove = true;
                    IsHiddenRejected = true;
                }

                //After being Rejected By Supervisor
                else if (Args.RowData.LeaveApprovalStatusId == 4
                    && Args.RowData.Employeeid != Credentials.StaffId)
                {
                    //Hide Buttons
                    IsHiddenDraft = true;
                    IsHiddenPersonSubmit = true;
                    IsHiddenApprove = true;
                    IsHiddenRejected = true;
                    IsHiddenSubmitEdit = true;

                    //Disable Fields
                    EmployeeDDEnabled = false;
                    ReviewDateEnabled = false;
                    AppraisalReasonEnabled = false;
                    AppraiserNameEnabled = false;
                    isFinancialYearEnabled = false;
                }
                //Draft Applications for Employee
                else if (Args.RowData.LeaveApprovalStatusId == 1
                    && Args.RowData.Employeeid == Credentials.StaffId)
                {
                    IsHiddenDraft = false;
                    IsHiddenSubmitEdit = false;
                    IsHiddenApprove = true;
                    IsHiddenRejected = true;
                    IsHiddenRejected = true;
                }

                //Draft Applications for Supervisors on Approval
                else if (Args.RowData.LeaveApprovalStatusId == 1
                    && Args.RowData.Employeeid != Credentials.StaffId)
                {
                    IsHiddenDraft = false;
                    IsHiddenApprove = false;
                    IsHiddenRejected = false;
                    IsHiddenSubmitEdit = true;
                }

                else
                {
                    //IsHiddenApprove = true;
                    //IsHiddenSubmitEdit = false;
                    //IsRejectedDisabled = true;
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                await LoadingDialogue.HideAsync();
            }



            StateHasChanged();
        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            Args.RowData.FinancialYearId = finyearid;
            Args.RowData.DateofReview = DateTime.Now;

            employeeno = null;
            _previous = Args.RequestType;
            statusdecsription = null;
            if (Credentials.StaffId > 0)
            {
                Args.Data.Employeeid = Credentials.StaffId;
                employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Credentials.StaffId);
                isFinancialYearEnabled = true;
            }

            
            if (Args.RowData.BalanceScoreCardTargetSetting == null)
            {
                Args.RowData.BalanceScoreCardTargetSetting = new List<BalanceScoreCardTargetSettingDto>();
            }

            //Enable save buttons on add
            IsHiddenDraft = false;
            IsHiddenPersonSubmit = false;

            //Enable Fields
            EmployeeDDEnabled = true;
            ReviewDateEnabled = false;
            AppraisalReasonEnabled = true;
            AppraiserNameEnabled = true;
            isFinancialYearEnabled = false;

            Args.RowData.BalanceScoreCardAppraiseeComments = new List<BalanceScoreCardAppraiseeCommentsDto>();
            Args.RowData.BalanceScoreCardCeocomments = new List<BalanceScoreCardCEOCommentsDto>();
            Args.RowData.BalanceScoreCardHodcomments = new List<BalanceScoreCardHODCommentsDto>();
            Args.RowData.BalanceScoreCardSupervisorComments = new List<BalanceScoreCardSupervisorCommentsDto>();
            Args.RowData.BalanceScoreCardTargetDevelopmentPlan = new List<BalanceScoreCardTargetDevelopmentPlanDto>();
            //Args.RowData.BalanceScoreCardTargetSetting = new List<BalanceScoreCardTargetSettingDto>();
            Args.RowData.BalanceScoreCardBehavioral = new List<BalanceScoreCardBehavioralDto>();

            if (CompetenceData != null)
            {
                foreach (var n in CompetenceData)
                {
                    Random random = new Random();
                    Args.RowData.BalanceScoreCardBehavioral.Add(new BalanceScoreCardBehavioralDto
                        {
                            BehavioralId = random.Next(1000, 10000),
                            CompetenceId = n.CompetenceId,
                        });
                }
            }

            //Disable All Supervisor fields on capturing a new record
            IsSupervisorEnabledColumn = false;
        }
    }

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<BalanceScoreCardDto> Args)
    {
        if (Args.Column.Field == "LeaveApprovalStatusId")
        {
            if (Args.Data.LeaveApprovalStatusId == 3)
            {
                Args.Cell.AddClass(new string[] { "Approved" });
            }
            if (Args.Data.LeaveApprovalStatusId == 4)
            {
                Args.Cell.AddClass(new string[] { "Rejected" });
            }
            else
            {
                Args.Cell.AddClass(new string[] { "Draft" });
            }
        }
    }

    public void CellEditHandlerTargets(CellEditArgs<BalanceScoreCardTargetSettingDto> args)
    {
        //if(IsSupervisorEnabledColumn == false)
        //{
        //    toastService.ShowWarning("Sorry ! You are not permitted to capture details here !");
        //    args.Cancel = true;
        //}
        //else
        //{
        //    args.Cancel = false;
        //}
    }

    public void QueryCellInfoHandlerTargets(QueryCellInfoEventArgs<BalanceScoreCardTargetSettingDto> Args)
    {
        //if (_previous == Syncfusion.Blazor.Grids.Action.Add)
        //{
        //    if (Args.Column.Field == nameof(BalanceScoreCardTargetSettingDto.SupervisorAssessTgt))
        //    {
        //        Args.Cell.AddClass(new string[] { "disablecolumn" });
        //    }
        //}
        //else if(_previous == Syncfusion.Blazor.Grids.Action.BeginEdit)
        //{

        //}
    }

    public string GetEmployeeHeader(BalanceScoreCardDto Value)
    {
        if (Value.Employeeid == 0)
        {
            return "Add a new Appraisal";
        }
        else
        {
            return "Edit Appraisal Details";
        }
    }


    public async Task RowSelectingHandler(RowSelectingEventArgs<BalanceScoreCardDto> args)
    {
        await DataGrid.ClearSelection();   //clear selection
    }

    #endregion BSCAdapter
}

<style>
    /*Define Colors for Cells*/
    .Draft {
        background-color: yellow;
    }

    .Approved {
        background-color: forestgreen;
    }

    .Rejected {
        background-color: red;
    }
    /*Change color for text in Grid*/
    /*QueryCellInfo*/
    /*.Draft*/
    .e-grid .e-gridcontent .e-rowcell.Draft {
        color: black;
    }

    /*.Approved*/
    .e-grid .e-gridcontent .e-rowcell.Approved {
        color: White;
    }

    /*.Rejected*/
    .e-grid .e-gridcontent .e-rowcell.Rejected {
        color: white;
    }

    /*.hiderecord*/
    .hiderecord {
        display: none;
    }

    .equal-5 {
        background-color: #336c12;
    }
    /*QueryCellInfo*/
</style>
