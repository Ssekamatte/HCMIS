@page "/paymentspage"
 
@using ReApp.Services;
@using ReApp.Data;
@using System.Collections;
@inject IAppService AppService;


@inject HttpClient Http
@using Microsoft.AspNetCore.WebUtilities
@using Newtonsoft.Json;
@using System.Net.Http.Json;

@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager
@using Syncfusion.Pdf
@using Syncfusion.Pdf.Barcode;
@using Syncfusion.Pdf.Parsing
@using Syncfusion.Pdf.Graphics
@using Syncfusion.Pdf.Grid
@using Syncfusion.Drawing
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Calendars

@using Syncfusion.Blazor.Schedule

@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using System.ComponentModel.DataAnnotations
@using System.Net.Mail;
@using System.Reflection;
@using System.Globalization;


<PageTitle>Manage UserRoles Page</PageTitle>



<div class="card">
    <div class="card-header">
        <h2>Search Panel</h2>
       @* Add/Remove Roles for User /
        @if (@appUser != null)
        {
            @appUser.FullName
        }*@

    </div>
    <div class="card-body">

        <div class="row">
            <div class="col">
                <EditForm Model="paymentSearchPanelModel" OnValidSubmit="OnValidSubmit">
                    <div class="row">
                        <div class="col">
                            <SfDropDownList DataSource="@Tenants"
                                            TItem="Tenant"
                                            TValue="string"
                                            @bind-Value="@(paymentSearchPanelModel.Id )"
                                            Placeholder="Tenant"
                                            Enabled="true"
                                            FloatLabelType="FloatLabelType.Always">
                                <DropDownListFieldSettings Value="Id" Text="UserName">
                                </DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <div class="col">
                             <div class="form-row">
                                  <SfDatePicker @bind-Value="@(paymentSearchPanelModel.startDate )" Placeholder="Start Date" FloatLabelType="FloatLabelType.Always"></SfDatePicker>
                                
                              </div>                            

                        </div>
                        <div class="col">
                             <div class="form-row">
                                     <SfDatePicker @bind-Value="@(paymentSearchPanelModel.endDate)" Placeholder="End Date" FloatLabelType="FloatLabelType.Always"></SfDatePicker>
                           
                            </div>
                        </div>
                    </div>
                    @*<div class="creed-total">
                        <div class="col"> </div>
                        <button class="btn btn-primary" @onclick="()=>  GenerateStatement()">Save Changes</button>
                        <button class="btn btn-danger" @onclick="()=>  ClearSearchPanel()">Order</button>
                        <input type="submit" class="btn btn-primary" value="Submit" />
                    </div>*@
                </EditForm>
                <br />

            </div>
        </div>
         
    </div>
    <div class="card-footer">


        <div class="creed-total">
            <div class="col"> </div>
            <button class="btn btn-primary" @onclick="()=>  OnValidSubmit()">Search</button>
            <button class="btn btn-success" @onclick="()=>  GenerateStatement()">Statement</button>
            <button class="btn btn-danger" @onclick="()=>  ClearSearchPanel()">Clear</button>
            
        </div>
    </div>
</div>


<SfGrid @ref=PaymentsGrid TValue="Payment" Query="@MainQuery"
        Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update", "Search" })"
        AllowGrouping="false" ShowColumnChooser="false" AllowTextWrap="true"
        AllowPaging="true" GridLines="GridLine.Both" AllowSelection="true">
    <SfDataManager AdaptorInstance="@typeof(PaymentAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>

    <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
        @*<GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">*@
        @* <Validator>
        <DataAnnotationsValidator></DataAnnotationsValidator>
        </Validator> *@

        @* <HeaderTemplate Context="PaymentContext">
        @{
        var text = GetPaymentHeader((PaymentContext as Payment));
        <div class="headerbandimg" />
        <span>@text</span>
        }
        </HeaderTemplate>*@
        <Template Context="PaymentsContext">
            @{
                Payment = (PaymentsContext as Payment);

                //<div>
                //   @* <ValidationMessage For="() => Payment.ReceiptNo" />
                //    <ValidationMessage For="() => Payment.AmountPaid" />
                //     <ValidationMessage For="() => Payment.ReceivedBy" />
                //    <ValidationMessage For="() => Payment.StartDate" />
                //    <ValidationMessage For="() => Payment.EndDate" /> *@
                //    <div class="form-row">
                //        <div class="form-group col-md-6">

                //            <SfTextBox @bind-Value="@(Payment.ReceiptNo)"
                //                   Placeholder="Receipt No."
                //                   FloatLabelType="FloatLabelType.Always"
                //                   TValue="string" Enabled="@IsAddNewPayment"></SfTextBox>
                //        </div>
                //        <div class="form-group col-md-6">
                //            <SfNumericTextBox ID="RentAmount" @bind-Value="@(Payment.AmountPaid)" Placeholder="Amount Paid" Format="N0" Enabled="true" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>

                //        </div>
                //    </div>

                //    <div class="form-row">
                //        <div class="form-group col-md-6">

                //            <SfDropDownList DataSource="@PaymentModes" TItem="PaymentMode" TValue="int?" @bind-Value="@(Payment.PaymentModeId)" Placeholder="Payment Mode" FloatLabelType="FloatLabelType.Always">
                //                <DropDownListFieldSettings Value="Id" Text="PaymentDesc"> </DropDownListFieldSettings>
                //                <DropDownListEvents TItem="PaymentMode" TValue="int?" ValueChange="ShowPayeeDetails"></DropDownListEvents>
                //            </SfDropDownList>
                //        </div>
                //        <div class="form-group col-md-6">
                //            <SfTextBox ID="ReceivedBy" @bind-Value="@(Payment.ReceivedBy)" Placeholder="Received By" Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>

                //        </div>
                //    </div>
                //    @if (ShowMobilePaymentDetails)
                //    {
                //        <div class="form-row">

                //            <div class="form-group col-md-6">
                //                <SfTextBox ID="MobilePhone" @bind-Value="@(Payment.MobilePhone)" Placeholder="Phone No." Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                //            </div>
                //        </div>
                //    }
                //    else
                //if (ShowBankPaymentDetails)
                //    {
                //        <div class="form-row">
                //            <div class="form-group col-md-6">
                //                <SfTextBox ID="AccountNo" @bind-Value="@(Payment.AccountNo)" Placeholder="Account No." Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                //            </div>
                //        </div>
                //    }

                //    @if (ShowBankPaymentDetails)
                //    {
                //        <div class="form-row">
                //            <div class="form-group col-md-6">
                //                <SfTextBox ID="BankName" @bind-Value="@(Payment.BankName)" Placeholder="Bank Name" CssClass="cash-labels" Enabled="true" FloatLabelType="FloatLabelType.Always">

                //                </SfTextBox>
                //            </div>
                //            <div class="form-group col-md-6">
                //                <SfTextBox ID="BranchName" @bind-Value="@(Payment.BranchName)" Placeholder="Branch Name" CssClass="cash-labels" Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                //            </div>
                //        </div>
                //    }

                //    <div class="form-row">

                //        <div class="form-row">
                //            <SfDatePicker @bind-Value="@(Payment.PaymentDate)" Placeholder="Date Paid" FloatLabelType="FloatLabelType.Always"></SfDatePicker>
                //        </div>
                //        <div class="form-row">
                //            <SfDropDownList DataSource="@Apartments"
                //                        TItem="Apartment"
                //                        TValue="string"
                //                            @bind-Value="@(Payment.ApartmentId)"
                //                        Placeholder="Apartment"
                //                        FloatLabelType="FloatLabelType.Always">
                //                <DropDownListEvents TItem="Apartment" TValue="string" ValueChange="ChangeApartment"></DropDownListEvents>
                //                <DropDownListFieldSettings Value="Id"
                //                                       Text="Id">
                //                </DropDownListFieldSettings>
                //            </SfDropDownList>
                //        </div>
                //    </div>
                //    <div class="form-row">
                //        <div>Payment Period</div>
                //    </div>
                //    <div class="form-row">
                //        <div class="form-row">
                //            <SfDatePicker @bind-Value="@(Payment.StartDate )" Placeholder="Start Date" FloatLabelType="FloatLabelType.Always"></SfDatePicker>
                //        </div>

                //        <div class="form-row">
                //            <SfDatePicker @bind-Value="@(Payment.EndDate)" Placeholder="End Date" FloatLabelType="FloatLabelType.Always"></SfDatePicker>
                //        </div>
                //    </div>

                //    <div class="form-row">
                //        <div class="form-row">
                //            <SfDropDownList DataSource="@Tenants"
                //                        TItem="Tenant"
                //                        TValue="string"
                //                            @bind-Value="@(Payment.TenantId)"
                //                        Placeholder="Tenant"
                //                        Enabled="true"
                //                        FloatLabelType="FloatLabelType.Always">
                //                <DropDownListFieldSettings Value="Id" Text="FullName">
                //                </DropDownListFieldSettings>
                //            </SfDropDownList>
                //        </div>
                //    </div>

                //</div>

                <div style="overflow-x: auto;">
                    <table>

                        <tr>
                            <td colspan="6"> <ValidationMessage For="() => Payment.ReceiptNo" /></td>
                            <td colspan="6"><ValidationMessage For="() => Payment.AmountPaid" /></td>
                        </tr>

                         
                        <tr>

                            <td colspan="6">
                                <SfTextBox @bind-Value="@(Payment.ReceiptNo)"
                                       Placeholder="Receipt No."
                                       FloatLabelType="FloatLabelType.Always"
                                       TValue="string" Enabled="@IsAddNewPayment"></SfTextBox>
                            </td>

                            <td colspan="6">
                                <SfNumericTextBox ID="RentAmount" @bind-Value="@(Payment.AmountPaid)" Placeholder="Amount Paid" Format="N0" Enabled="true" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="6"> <ValidationMessage For="() => Payment.PaymentModeId" /></td>
                            <td colspan="6"><ValidationMessage For="() => Payment.ReceivedBy" /></td>
                        </tr>
                        <tr>

                            <td colspan="6">
                                <SfDropDownList DataSource="@PaymentModes" TItem="PaymentMode" TValue="int?" @bind-Value="@(Payment.PaymentModeId)" Placeholder="Payment Mode" FloatLabelType="FloatLabelType.Always">
                                    <DropDownListFieldSettings Value="Id" Text="PaymentDesc"> </DropDownListFieldSettings>
                                    <DropDownListEvents TItem="PaymentMode" TValue="int?" ValueChange="ShowPayeeDetails"></DropDownListEvents>
                                </SfDropDownList>
                            </td>


                            <td colspan="6">
                                <SfTextBox ID="ReceivedBy" @bind-Value="@(Payment.ReceivedBy)" Placeholder="Received By" Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                            </td>
                        </tr>

                        @if (ShowMobilePaymentDetails)
                        {
                            <tr>

                                <td colspan="6">
                                    <SfTextBox ID="MobilePhone" @bind-Value="@(Payment.MobilePhone)" Placeholder="Phone No." Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                </td>
                            </tr>
                        }
                        else
                    if (ShowBankPaymentDetails)
                        {
                            <tr>

                                <td colspan="6">
                                    <SfTextBox ID="AccountNo" @bind-Value="@(Payment.AccountNo)" Placeholder="Account No." Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                </td>
                            </tr>
                        }

                        @if (ShowBankPaymentDetails)
                        {
                            <tr>

                                <td colspan="6">
                                    <SfTextBox ID="BankName" @bind-Value="@(Payment.BankName)" Placeholder="Bank Name" CssClass="cash-labels" Enabled="true" FloatLabelType="FloatLabelType.Always">

                                    </SfTextBox>
                                </td>


                                <td colspan="6">
                                    <SfTextBox ID="BranchName" @bind-Value="@(Payment.BranchName)" Placeholder="Branch Name" CssClass="cash-labels" Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                </td>
                            </tr>
                        }


                        <tr>

                            <td colspan="6">
                                <SfDatePicker @bind-Value="@(Payment.PaymentDate)" Placeholder="Date Paid" FloatLabelType="FloatLabelType.Always"></SfDatePicker>
                            </td>
                            <td colspan="6">
                                <SfDropDownList DataSource="@Apartments"
                                            TItem="Apartment"
                                            TValue="string"
                                                @bind-Value="@(Payment.ApartmentId)"
                                            Placeholder="Apartment"
                                            FloatLabelType="FloatLabelType.Always">
                                    <DropDownListEvents TItem="Apartment" TValue="string" ValueChange="ChangeApartment"></DropDownListEvents>
                                    <DropDownListFieldSettings Value="Id"
                                                           Text="Id">
                                    </DropDownListFieldSettings>
                                </SfDropDownList>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">Payment Period</td>
                        </tr>
                        <tr>
                            <td colspan="6">
                                <SfDatePicker @bind-Value="@(Payment.StartDate )" Placeholder="Start Date" FloatLabelType="FloatLabelType.Always"></SfDatePicker>
                            </td>

                            <td colspan="6">
                                <SfDatePicker @bind-Value="@(Payment.EndDate)" Placeholder="End Date" FloatLabelType="FloatLabelType.Always"></SfDatePicker>
                            </td>
                        </tr>

                        <tr>
                            <td colspan="6">
                                <SfDropDownList DataSource="@Tenants"
                                            TItem="Tenant"
                                            TValue="string"
                                                @bind-Value="@(Payment.TenantId)"
                                            Placeholder="Tenant"
                                            Enabled="true"
                                            FloatLabelType="FloatLabelType.Always">
                                    <DropDownListFieldSettings Value="Id" Text="UserName">
                                    </DropDownListFieldSettings>
                                </SfDropDownList>
                            </td>
                        </tr>
                    </table>
                </div>

            }
        </Template>

        <FooterTemplate Context="Clientfootercontext">
            <div>
                <SfButton @onclick=" ()=>  createPdfReceipt(Payment)" CssClass="e-warning">Send Pdf</SfButton>
                <SfButton @onclick="(async ()=> { await PaymentsGrid.EndEditAsync(); })" CssClass="e-primary">Save</SfButton>
                <SfButton @onclick="(async ()=> { await PaymentsGrid.CloseEditAsync(); })" CssClass="e-danger">Cancel</SfButton>
            </div>
        </FooterTemplate>
    </GridEditSettings>
    @*<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>*@
    <GridPageSettings PageSizes="true" PageSize="12"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
    @*<GridEvents OnToolbarClick="@((e)=>ToolbarClickHandler(e, Tenant.Id))" OnActionBegin="@((e)=>PaymentsActionBeginHandler(e, Tenant.Id))" OnActionComplete="@((e)=>PaymentsActionComplete(e, Tenant.Id))" TValue="Payment"></GridEvents>*@
    <GridEvents OnToolbarClick="@((e)=>ToolbarClickHandler(e))" OnActionBegin="@((e)=>PaymentsActionBeginHandler(e))" OnActionComplete="@((e)=>PaymentsActionComplete(e))" TValue="Payment"></GridEvents>

    <GridColumns>



        <GridColumn Field=@nameof(Payment.ReceiptNo) HeaderText="ReceiptNo" IsPrimaryKey="true" Width="100"></GridColumn>
        <GridColumn Field=@nameof(Payment.ApartmentId) HeaderText="Flat" Width="75"></GridColumn>

        <GridColumn Field=@nameof(Payment.PaymentDate) Format="dd/MM/yy" Width="100" Type="ColumnType.Date" HeaderText="Date Paid"></GridColumn>

        <GridColumn Field=@nameof(Payment.StartDate) Format="dd/MM/yy" Width="100" Type="ColumnType.Date" HeaderText="From (Date)"></GridColumn>
        <GridColumn Field=@nameof(Payment.EndDate) Format="dd/MM/yy" Width="100" Type="ColumnType.Date" HeaderText="To (Date)"></GridColumn>
        @*<GridForeignColumn Field=@nameof(Payment.PaymentModeId)  HeaderText="Payment Mode" Width="30" EditType="EditType.DropDownEdit" ForeignKeyField="@nameof(PaymentMode.Id)" ForeignKeyValue="@nameof(PaymentMode.PaymentDesc )" ForeignDataSource="@PaymentModes" Visible="false"></GridForeignColumn>*@

        <GridColumn Field=@nameof(Payment.ReceivedBy) HeaderText="ReceivedBy" Width="100"></GridColumn>
    </GridColumns>
</SfGrid>



@code {
    SfGrid<Payment> PaymentsGrid;
    public Payment Payment { get; set; } = new Payment();
    public Tenant Tenant = new Tenant();
    public IEnumerable<Tenant> Tenants { get; set; }
    public IEnumerable<Apartment> Apartments { get; set; }
    public IEnumerable<PaymentMode> PaymentModes { get; set; }
    public bool IsAddNewPayment = true;
    public bool ShowMobilePaymentDetails = false;
    public bool ShowBankPaymentDetails = false;
    public bool IsAddNew = false;
    public bool IsNewRec = false;
    public bool Enabled = true;
    public bool EnabledApt = true;
    public string ApartmentId { get; set; } = string.Empty;
    public string TenantId { get; set; } = string.Empty;
    public Tenant currentTenant { get; set; }
    public IEnumerable<Payment> Payments { get; set; }
    Boolean DialogVisibility = false;


    public Query MainQuery = new Query();

    public PaymentSearchPanelModel paymentSearchPanelModel { get; set; } = new PaymentSearchPanelModel();
    // private DialogSettings DialogParams = new DialogSettings { Width = "450px", Height = "550px" };
    private DialogSettings DialogParams = new DialogSettings { Width = "75%", Height = "75%" };


    private async void OnValidSubmit() //triggers on save button click
    { 
        try
        {
            MainQuery = new Query();// .Where("TenantId", "equal", _UserId).Where("StartDate", "greaterthanorequal", edate).Where("EndDate", "lessthanorequal", edate);

            DateTime trydt;

            string sdate = null;
            string edate = null;
            // CultureInfo cultureInfo = CultureInfo.InvariantCulture;//.GetCultureInfo("en-US");

            if (paymentSearchPanelModel.startDate != null)
            {
                sdate = paymentSearchPanelModel.startDate.Value.ToString("d/MM/yyyy"); 

                if (DateTime.TryParseExact(sdate, "d/M/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out trydt))
                {                    
                    MainQuery = MainQuery.Where("StartDate", "greaterthanorequal", trydt);//.Where("EndDate", "lessthanorequal", edate);
                    MainQuery.AddParams("StartDate", trydt);
                }
                else
                {
                    //invalid date
                }
            }
            else
            {
                if (paymentSearchPanelModel.Id != null)
                {
                    DateTime startdate = DateTime.Now.AddYears(-1);
                    MainQuery = MainQuery.Where("StartDate", "greaterthanorequal", startdate);//.Where("EndDate", "lessthanorequal", edate);
                    MainQuery.AddParams("StartDate", startdate); 
                }

            }
            if (paymentSearchPanelModel.endDate != null)
            {
                edate = paymentSearchPanelModel.endDate.Value.ToString("d/M/yyyy");
                if (DateTime.TryParseExact(edate, "d/M/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out trydt))
                {                    
                    MainQuery = MainQuery.Where("EndDate", "lessthanorequal", trydt);
                    MainQuery.AddParams("EndDate", trydt);
                }
                else
                {
                    //invalid date
                }

            }
            else
            {
                if (paymentSearchPanelModel.Id != null)
                { 
                    // The Default Period to load is the last one (1) year's transactions
                    DateTime enddate = DateTime.Now;
                    //MainQuery = MainQuery.Where("EndDate", "lessthanorequal", enddate);
                    MainQuery.AddParams("EndDate", enddate);
                }

            }

            string _UserId = null;
            if (paymentSearchPanelModel.Id != null)
            {
                _UserId = string.Join(",", paymentSearchPanelModel.Id);
                MainQuery = MainQuery.Where("TenantId", "equal", _UserId);
                MainQuery.AddParams("UserId", _UserId);
            } 

            // MainQuery = new Query().AddParams("StartDate", sdate).AddParams("EndDate", edate).AddParams("Id", _UserId);// .AddParams("MeetingNo", _MeetingNo).AddParams("PaymentModeId", _PaymentModeId).AddParams("SearchArea", _SearchArea).AddParams("SectorId", _SectorId).AddParams("DecisionStatusId", _DecisionStatusId);



            await PaymentsGrid.Refresh();
        }
        catch (Exception ex)
        {
            await ReApp.App.Current.MainPage.DisplayAlert("Error", ex.Message, "Ok");
        }
        finally
        {
            StateHasChanged();
        }
    }
    public static bool IsDate(object value)
    {
        DateTime objDate = Convert.ToDateTime(value);
        var dateToParse = objDate.ToString();
        DateTime dateTime;
        var ConDate = DateTime.TryParse(dateToParse, out dateTime);
        if (ConDate)
        {
            return true;
        }
        else
        {
            return false;
        } 
    }

    static HttpClient http { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            http = Http;
            Apartments = await GetApartments();
            Tenants = await GetTenants();
            PaymentModes = await GetPaymentModes();

            MainQuery = new Query();// .Where("TenantId", "equal", _UserId).Where("StartDate", "greaterthanorequal", edate).Where("EndDate", "lessthanorequal", edate);


            DateTime startdate = DateTime.Now.AddYears(-1);

            //MainQuery = MainQuery.Where("StartDate", "greaterthanorequal", startdate);//.Where("EndDate", "lessthanorequal", edate);
            MainQuery.AddParams("StartDate", startdate);

            // The Default Period to load is the last one (1) year's transactions
            DateTime enddate = DateTime.Now;
            //MainQuery = MainQuery.Where("EndDate", "lessthanorequal", enddate);
            MainQuery.AddParams("EndDate", enddate);

            string _UserId = "";
            //MainQuery = MainQuery.Where("TenantId", "equal", _UserId);
            MainQuery.AddParams("UserId", _UserId);

            await ClearSearchPanel();

        }
        catch (Exception ex)
        {
            await ReApp.App.Current.MainPage.DisplayAlert("Error", ex.Message, "Ok");
        }
    }

    private async Task GenerateStatement()
    {
        var userid = paymentSearchPanelModel.Id;
        var startdate = paymentSearchPanelModel.startDate;
        var enddate = paymentSearchPanelModel.endDate;

        await AppService.GeneratePdfStatementofAccount(userid, paymentSearchPanelModel.startDate, enddate);
    }

    private async Task ClearSearchPanel()
    {
        paymentSearchPanelModel = new PaymentSearchPanelModel();

        //Clear the grid  --- Put search parameters that DON'T Yield Results
        MainQuery = new Query();// .Where("TenantId", "equal", _UserId).Where("StartDate", "greaterthanorequal", edate).Where("EndDate", "lessthanorequal", edate);


        DateTime startdate = DateTime.Now.AddYears(1);

        //MainQuery = MainQuery.Where("StartDate", "greaterthanorequal", startdate);//.Where("EndDate", "lessthanorequal", edate);
        MainQuery.AddParams("StartDate", startdate);

        //// The Default Period to load is the last one (1) year's transactions
        //DateTime enddate = DateTime.Now.AddYears(-1);
        ////MainQuery = MainQuery.Where("EndDate", "lessthanorequal", enddate);
        //MainQuery.AddParams("EndDate", enddate);

        string _UserId = "---AAABBBCCC";
        //MainQuery = MainQuery.Where("TenantId", "equal", _UserId);
        MainQuery.AddParams("UserId", _UserId);

        await PaymentsGrid.Refresh();

    }
    public string GetPaymentHeader(Payment Value)
    {
        if (string.IsNullOrEmpty(Value.ReceiptNo) /*|| Value.Id == null*/)
        {
            return "Add a new Payment";
        }
        else
        {
            var apartmentId = string.Empty;
            var fullName = string.Empty;

            if (Value.ApartmentId != null)
            {
                apartmentId = Value.ApartmentId + " - ";

            }
            if (Value.TenantId != null)
            {
                var t = Tenants.FirstOrDefault(x => x.Id == Value.TenantId);
                if (t is not null)
                {
                    fullName = t.FullName;
                }
            }

            return apartmentId + fullName;// + Value.Apartment.Id == null?"": Value.Apartment.Id + " " + Value.Tenant.FirstName == null ? "" : Value.Tenant.FirstName;
        }
    }


    private async Task<IEnumerable<Tenant>> GetTenants()
    {
        //var Role = "Tenants";
        //var Tenants = await http.GetFromJsonAsync<List<Tenant>>($"Accounts/GetUserRoles/{Role}");
        var Tenants = await http.GetFromJsonAsync<List<Tenant>>($"Accounts/GetUserRoles");
        return Tenants;
    }

    async Task<List<Apartment>> GetApartments()
    {
        try
        {
            return await http.GetFromJsonAsync<List<Apartment>>("Apartments");
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine("\nException Caught!");
            Console.WriteLine("Message :{0} ", e.Message);
            return null;
        }
    }

    private async Task<IEnumerable<PaymentMode>> GetPaymentModes()
    {
        var PaymentModes = await http.GetFromJsonAsync<List<PaymentMode>>("PaymentModes");
        return PaymentModes;
    }
    public void ShowPayeeDetails(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, PaymentMode> args)
    {
        if (args.Value == 1)
        {

        }

        switch (args.Value)
        {
            case 1: // Cash
                ShowMobilePaymentDetails = false;
                ShowBankPaymentDetails = false;
                break;
            case 2: // Mobile Money
                ShowMobilePaymentDetails = true;
                ShowBankPaymentDetails = false;
                break;
            case 3: // EFT
            case 4: // Cheque;
            case 5: // Bank Draft
                ShowMobilePaymentDetails = false;
                ShowBankPaymentDetails = true;

                break;
            case 7: // Credit/Debit Card
            case 8: // Internet Banking
                ShowMobilePaymentDetails = false;
                ShowBankPaymentDetails = false;

                break;
            default:
                // Cash
                //Console.WriteLine("One");
                ShowMobilePaymentDetails = false;
                ShowBankPaymentDetails = false;
                break;
        }
    }



    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Click")
        {
            var SelectedRecords = await PaymentsGrid.GetSelectedRecordsAsync();
        }
        if (args.Item.Id == "Grid1_excelexport")
        {
            await this.PaymentsGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid1_pdfexport")
        {
            await this.PaymentsGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid1_csvexport")
        {
            await this.PaymentsGrid.ExportToCsvAsync();
        }
    }

    public void PaymentsActionBeginHandler(Syncfusion.Blazor.Grids.ActionEventArgs<Payment> Args)
    {
        var data = Args.Data;
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
        }

        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            this.IsAddNew = false;
            this.Enabled = false;
            this.TenantId = TenantId;
            this.ApartmentId = Args.RowData.ApartmentId;
            this.IsAddNewPayment = false; 
        }

        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            this.IsAddNew = true;
            this.Enabled = true;
            this.TenantId = TenantId;
            this.ApartmentId = string.Empty;
            this.IsAddNewPayment = true;
            var apt = Apartments.FirstOrDefault(a => a.TenantId == this.TenantId);
            if (apt != null)
            {

                this.ApartmentId = apt.Id;
                this.EnabledApt = false;
            }
            else
            {
                this.EnabledApt = true;
            } 

        }
    }


    public void PaymentsActionComplete(Syncfusion.Blazor.Grids.ActionEventArgs<Payment> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            PaymentsGrid.PreventRender(false);
        }
    }


    public void ChangeApartment(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Apartment> args)
    {
        var apartment = Apartments.FirstOrDefault(a => a.Id == args.Value);
        if (apartment is not null)
        {
            Payment.ApartmentId = apartment.Id;
        }
    }

    public class PaymentAdaptor : DataAdaptor
    {

        private IEnumerable<Payment> DataSource = null;//  new();

        AppService _appService = new AppService(http);
        //public PaymentAdaptor(AppService appService)
        //{
        //    _appService = appService;
        //}
        /// <summary>
        /// Performs data Read operation asynchronously.
        /// </summary>

        public override async Task<object> ReadAsync(DataManagerRequest dm, string key = null)
        {
            string ApartId = string.Empty; 
            var user = Setting.UserBasicDetail?.Email;
            var userroles = Setting.UserBasicDetail?.UserRoles;


            // check if User is an "Admin" ....
            bool check = userroles.Contains("Admin");
            bool returnvalidata = false;

            var accessToken = Setting.UserBasicDetail?.AccessToken;
            //IEnumerable DataSource = await http.GetFromJsonAsync<List<Payment>>("Payments"); ;
            if (dm.Params != null && dm.Params.Count > 0)
            {
                PaymentRequestModel paymentRequestModel = new PaymentRequestModel();

                var val = dm.Params;

                bool hasValue = val.TryGetValue("UserId", out object userId); 
                if(hasValue)
                {
                    paymentRequestModel.Id = userId.ToString();
                } 
                else

                {
                    paymentRequestModel.Id = "";
                }
                hasValue = val.TryGetValue("StartDate", out object startdate);
                if (hasValue)
                {
                    paymentRequestModel.StartDate = (DateTime)startdate;
                    if ((DateTime)startdate > DateTime.Now)
                    {
                        returnvalidata = false;
                    }
                    else
                    {
                        returnvalidata = true;
                    }

                }

                hasValue = val.TryGetValue("EndDate", out object enddate);
                if (hasValue)
                {
                    paymentRequestModel.EndDate = (DateTime)enddate;
                }
                if (returnvalidata)
                {
                    DataSource = await _appService.GetStatementPayments(paymentRequestModel);
                     
                }
                else
                {
                    DataSource = null;
                     
                }
            }
            //else
            //{
            //    DataSource = await http.GetFromJsonAsync<List<Payment>>("Payments"); ;// await GetPayments();
            //}

            if (dm.Search != null && dm.Search.Count > 0)
            {
                // Searching
                DataSource = DataOperations.PerformSearching(DataSource, dm.Search);
            }


            if (dm.Sorted != null && dm.Sorted.Count > 0)
            {
                // Sorting
                DataSource = DataOperations.PerformSorting(DataSource, dm.Sorted);
            }
            if (dm.Where != null && dm.Where.Count > 0)
            {
                // Filtering 
                DataSource = DataOperations.PerformFiltering(DataSource, dm.Where, dm.Where[0].Operator);  
            }
            int count = DataSource.Cast<Payment>().Count();
            // int count = DataSource.Count();
            if (dm.Skip != 0)
            {
                //Paging
                DataSource = DataOperations.PerformSkip(DataSource, dm.Skip);
            }
            if (dm.Take != 0)
            {
                DataSource = DataOperations.PerformTake(DataSource, dm.Take);
            }

            return dm.RequiresCounts ? new DataResult() { Result = DataSource, Count = count } : (object)DataSource;
        }

        /// <summary>
        /// Performs Insert operation asynchronously.
        /// </summary>
        public override async Task<object> InsertAsync(DataManager dataManager, object data, string key)
        {
            HttpResponseMessage response;
            response = await http.PostAsJsonAsync<Payment>("Payments/", (Payment)data);
            return response;
        }

        /// <summary>
        /// Performs Update operation asynchronously.
        /// </summary>
        public override async Task<object> UpdateAsync(DataManager dataManager, object data, string keyField, string key)
        {
            var ModelValue = (data as Payment);
            var response = await http.PutAsJsonAsync<Payment>($"Payments/{ModelValue.ReceiptNo}", ModelValue);

            return response;
        }

        /// <summary>
        /// Performs Remove operation asynchronously.
        /// </summary>
        public override async Task<object> RemoveAsync(DataManager dataManager, object data, string keyField, string key)
        {
            bool answer = await ReApp.App.Current.MainPage.DisplayAlert("Question?", "Would you like to play a game", "Yes", "No");
            if (answer)
            {
                var resp = await http.DeleteAsync($"Payments/{(int)data}");
            }
            return answer;
        }
    }

    public async Task<Tenant> TenantDetails(string tenantid)
    {
        Tenant tTenant = new();
        try
        {
            string tid = tenantid.Trim();
            if (!string.IsNullOrEmpty(tid))
            {
                tTenant = await http.GetFromJsonAsync<Tenant>($"AspNetUsers/{tid}");
            }
            return tTenant;
        }
        catch (Exception ex)
        {
            await ReApp.App.Current.MainPage.DisplayAlert("Exception Message", ex.ToString(), "Ok");
            return tTenant;
        }

    }

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<Payment> Args)
    {
        if (Args.Column.Field == "PaymentModeId")
        {
            if (Args.Data.PaymentModeId == 1)
            {
                Args.Cell.AddClass(new string[] { "NotImplemented" });
            }
            else if (Args.Data.PaymentModeId == 2)
            {
                Args.Cell.AddClass(new string[] { "ImplementationinProgress" });
            }
            else if (Args.Data.PaymentModeId == 3)
            {
                Args.Cell.AddClass(new string[] { "ImplementationComplete" });
            }
            else if (Args.Data.PaymentModeId == 4)
            {
                Args.Cell.AddClass(new string[] { "Continous" });
            }
            else if (Args.Data.PaymentModeId == 5)
            {
                Args.Cell.AddClass(new string[] { "NolongerApplicable" });
            }
            else if (Args.Data.PaymentModeId == 6)
            {
                Args.Cell.AddClass(new string[] { "StatusNotReported" });
            }
        }
    }


    #region "Handle Pdf"
    RectangleF TotalPriceCellBounds = RectangleF.Empty;
    RectangleF QuantityCellBounds = RectangleF.Empty;

    private async void createPdfReceipt(Payment payment)
    {
        //Get Tenant Details
        var tenantid = payment.TenantId;
        if (!string.IsNullOrEmpty(tenantid))
        {
            currentTenant = await TenantDetails(tenantid);
        }
        else
        {
            ////If the payment doesn't have a Tenant, don't process it
            await ReApp.App.Current.MainPage.DisplayAlert("No Tenant Selected", "Please Select a Tenant", "Ok");
            return;
        }


        //Create a new PDF document.
        PdfDocument document = new();
        //Add a page to the document.
        PdfPage page = document.Pages.Add();
        //Create PDF graphics for the page.
        PdfGraphics graphics = page.Graphics;

        //Get the page width and height
        float pageWidth = page.GetClientSize().Width;
        float pageHeight = page.GetClientSize().Height;

        //Set the header height
        float headerHeight = 90;
        //Create brush with light blue color.
        PdfColor lightBlue = Color.FromArgb(255, 91, 126, 215);
        PdfBrush lightBlueBrush = new PdfSolidBrush(lightBlue);
        //Create brush with dark blue color.
        PdfColor darkBlue = Color.FromArgb(255, 65, 104, 209);
        PdfBrush darkBlueBrush = new PdfSolidBrush(darkBlue);
        //Create brush with white color.
        PdfBrush whiteBrush = new PdfSolidBrush(Color.FromArgb(255, 255, 255, 255));

        //Get the font file stream from assembly.
        Assembly assembly = typeof(MainPage).GetTypeInfo().Assembly;
        string basePath = @"ReApp.Resources.Pdf.";
        Stream fontStream = assembly.GetManifestResourceStream(basePath + "arial.ttf");

        //Create PdfTrueTypeFont from stream with different size.
        PdfTrueTypeFont headerFont = new(fontStream, 30, PdfFontStyle.Regular);
        PdfTrueTypeFont arialRegularFont = new(fontStream, 18, PdfFontStyle.Regular);
        PdfTrueTypeFont arialBoldFont = new(fontStream, 9, PdfFontStyle.Bold);

        //Create string format.
        PdfStringFormat format = new();
        format.Alignment = PdfTextAlignment.Center;
        format.LineAlignment = PdfVerticalAlignment.Middle;

        float y = 0;
        float x = 0;

        string QRCode = "Creed Apartments\n";
        //Set the margins of address.
        float margin = 30;

        //Set the line space.
        float lineSpace = 2.5f;

        //Create border pen and draw the border to PDF page.
        PdfColor borderColor = Color.FromArgb(255, 142, 170, 219);
        PdfPen borderPen = new(borderColor, 1f);
        graphics.DrawRectangle(borderPen, new RectangleF(0, 0, pageWidth, pageHeight));

        //Create a new PdfGrid
        PdfGrid grid = new();

        //Add five columns to the grid.
        grid.Columns.Add(6);

        //Create the header row of the grid.
        PdfGridRow[] headerRow = grid.Headers.Add(1);

        //Set style to the header row and set value to the header cells.
        headerRow[0].Style.BackgroundBrush = new PdfSolidBrush(new PdfColor(68, 114, 196));
        headerRow[0].Style.TextBrush = PdfBrushes.White;
        headerRow[0].Cells[0].Value = "Receipt No.";
        // headerRow[0].Cells[0].StringFormat.Alignment = PdfTextAlignment.Center;
        headerRow[0].Cells[1].Value = "Apartment";
        headerRow[0].Cells[2].Value = "Paid On";
        headerRow[0].Cells[3].Value = "Start Date";
        headerRow[0].Cells[4].Value = "End Date";
        headerRow[0].Cells[5].Value = "Amount Paid";

        //Add Payment to the grid table.
        AddPayments(payment, grid);


        //Add Grand Total to the grid table.
        AddGrandTotal( grid);

        
        #region Header

        //Fill the header with light blue brush
        graphics.DrawRectangle(lightBlueBrush, new RectangleF(0, 0, pageWidth, headerHeight));

        string title = "Creed Apartments";

        //Specificy the bounds for total value.
        RectangleF headerTotalBounds = new(400, 0, pageWidth - 200, headerHeight);

        //Measure the string size using font.
        SizeF textSize = headerFont.MeasureString(title);
        graphics.DrawString(title, headerFont, whiteBrush, new RectangleF(0, 0, textSize.Width + 50, headerHeight), format);
        //Draw rectangle in PDF page.
        graphics.DrawRectangle(darkBlueBrush, headerTotalBounds);
        //Draw the total value to PDF page.
        graphics.DrawString("Receipt", arialRegularFont, whiteBrush, new RectangleF(360, 0, pageWidth - 300, headerHeight + 10), format);
        //Create font from font stream.
        arialRegularFont = new PdfTrueTypeFont(fontStream, 9, PdfFontStyle.Regular);
        ////Set bottom line alignment and draw the text to PDF page.
        //format.LineAlignment = PdfVerticalAlignment.Bottom;
        //graphics.DrawString("Amount", arialRegularFont, whiteBrush, new RectangleF(305, 0, pageWidth - 200, headerHeight / 2 - arialRegularFont.Height), format);
        #endregion
        //Measure the string size using font.
        SizeF size = arialRegularFont.MeasureString($"Receipt Number: {payment.ReceiptNo}");
        y = headerHeight + margin;
        x = (pageWidth - margin) - size.Width;
        //Draw text to PDF page with provided font and location.
        graphics.DrawString($"Receipt Number: {payment.ReceiptNo}", arialRegularFont, PdfBrushes.Black, new PointF(x, y));


        //Measure the string size using font.
        size = arialRegularFont.MeasureString("Date Prepared:" + DateTime.Now.ToString("dddd dd, MMMM yyyy"));
        x = (pageWidth - margin) - size.Width;
        y += arialRegularFont.Height + lineSpace;
        //Draw text to PDF page with provided font and location.
        graphics.DrawString("Date Prepared: " + DateTime.Now.ToString("dddd dd, MMMM yyyy"), arialRegularFont, PdfBrushes.Black, new PointF(x, y));




        QRCode += "Receipt #: " + payment.ReceiptNo + "\n";
       // QRCode += "UGX" + String.Format("{0:n0}", GetTotalAmount(grid)) + "\n";
        var rowcount = grid.Rows.Count;
        QRCode += "UGX" + String.Format("{0:n0}", grid.Rows[rowcount - 1].Cells[grid.Columns.Count - 1].Value) + "\n";
        // grid.Rows[rowcount - 1].Cells[grid.Columns.Count - 1]
        y = headerHeight + margin;
        x = margin;
        //Draw text to PDF page with provided font and location.
        graphics.DrawString("Received From:", arialRegularFont, PdfBrushes.Black, new PointF(x, y));
        if (currentTenant.FullName != null)
        {
            var fullname = currentTenant.FullName;
            y += arialRegularFont.Height + lineSpace;
            graphics.DrawString($"{fullname},", arialRegularFont, PdfBrushes.Black, new PointF(x, y));
            QRCode += "Received From:" + fullname;
        }
       



        if (currentTenant.PhoneNumber != null)
        {
            var phone = currentTenant.PhoneNumber;
            y += arialRegularFont.Height + lineSpace;
            graphics.DrawString($"{phone},", arialRegularFont, PdfBrushes.Black, new PointF(x, y));
            QRCode +=  $"; {phone} ";
        }

        if (currentTenant.Email != null)
        {
            var email = currentTenant.Email;
            y += arialRegularFont.Height + lineSpace;
            graphics.DrawString($"{email},", arialRegularFont, PdfBrushes.Black, new PointF(x, y));
            QRCode += $"; {email}\n";
        } 

        QRCode += "From: " + payment.StartDate.ToShortDateString() + " To: " + payment.EndDate.ToShortDateString() + "\n";
        QRCode += DateTime.Now.ToString("dddd dd, MMMM yyyy") + "\n";

        #region Grid
        //Set width to grid columns.
        grid.Columns[0].Width = 85;
        grid.Columns[1].Width = 85;
        grid.Columns[2].Width = 85;
        grid.Columns[3].Width = 85;
        grid.Columns[4].Width = 85;
        grid.Columns[5].Width = 85;

        for (int i = 0; i < grid.Headers.Count; i++)
        {
            //Set height to the grid header row.
            grid.Headers[i].Height = 20;
            for (int j = 0; j < grid.Columns.Count; j++)
            {
                //Create string format for header cell.
                PdfStringFormat pdfStringFormat = new();
                pdfStringFormat.LineAlignment = PdfVerticalAlignment.Middle;
                pdfStringFormat.Alignment = PdfTextAlignment.Left;

                ////Set cell padding for header cell.
                //if (j == 0 || j == 2)
                //    grid.Headers[i].Cells[j].Style.CellPadding = new PdfPaddings(30, 1, 1, 1);
                //Set string format to grid header cell.
                grid.Headers[i].Cells[j].StringFormat = pdfStringFormat;
                //Set font to the grid header cell.
                grid.Headers[i].Cells[j].Style.Font = arialBoldFont;

            }
            // //Set value to the grid header cell.
            //  grid.Headers[0].Cells[0].Value = "Receipt No.";
        }
        for (int i = 0; i < grid.Rows.Count; i++)
        {
            //Set height to the grid row.
            grid.Rows[i].Height = 23;
            for (int j = 0; j < grid.Columns.Count; j++)
            {
                //Create string format for grid row.
                PdfStringFormat pdfStringFormat = new();
                pdfStringFormat.LineAlignment = PdfVerticalAlignment.Middle;
                pdfStringFormat.Alignment = PdfTextAlignment.Left;

                ////Set cell padding for grid row cell.
                //if (j == 0 || j == 2)
                //    grid.Rows[i].Cells[j].Style.CellPadding = new PdfPaddings(30, 1, 1, 1);

                //Set string format to grid row cell.
                grid.Rows[i].Cells[j].StringFormat = pdfStringFormat;
                //Set font to the grid row cell.
                grid.Rows[i].Cells[j].Style.Font = arialRegularFont;
            }
        }

        // var rowcount = grid.Rows.Count;

        //Set the grand total text to Bold.
        grid.Rows[rowcount - 1].Cells[0].Style.Font = arialBoldFont;
        grid.Rows[rowcount - 1].Cells[grid.Columns.Count - 1].Style.Font = arialBoldFont;

        //Apply built-in table style to the grid.
        grid.ApplyBuiltinStyle(PdfGridBuiltinStyle.ListTable4Accent5);
        //Subscribing to begin cell layout event.
        grid.BeginCellLayout += Grid_BeginCellLayout;
        //Draw the PDF grid to PDF page and get the layout result.
        PdfGridLayoutResult result = grid.Draw(page, new PointF(x, y + 40));

        //Using the layout result, continue to draw the text.
        y = result.Bounds.Bottom + lineSpace;
        format = new PdfStringFormat
            {
                Alignment = PdfTextAlignment.Center
            };
        RectangleF bounds = new(QuantityCellBounds.X, y, QuantityCellBounds.Width, QuantityCellBounds.Height);
        ////Draw text to PDF page based on the layout result.
        //page.Graphics.DrawString("Grand Total:", arialBoldFont, PdfBrushes.Black, bounds, format);
        ////Draw the total amount value to PDF page based on the layout result.
        //bounds = new RectangleF(TotalPriceCellBounds.X, y, TotalPriceCellBounds.Width, TotalPriceCellBounds.Height);
        //page.Graphics.DrawString("UGX" + String.Format("{0:n0}", GetTotalAmount(grid)), arialBoldFont, PdfBrushes.Black, bounds);

        double amountPaid = payment.AmountPaid;

        y += arialRegularFont.Height + (lineSpace * 2);
        var amountinwords = this.NumWords(amountPaid);
        graphics.DrawString($"Amount in words:{amountinwords} only.", arialBoldFont, PdfBrushes.Black, new PointF(x, y));

        y += arialRegularFont.Height + (lineSpace * 2);
        
        graphics.DrawString("If you would like to verify your Receipt, scan the QR-Code.", arialBoldFont, PdfBrushes.RoyalBlue, new PointF(x, y));




        #region "QRCode"
        //Drawing QR Barcode.
        PdfQRBarcode barcode = new PdfQRBarcode();

        //Set Error Correction Level.
        barcode.ErrorCorrectionLevel = PdfErrorCorrectionLevel.High;

        //Set XDimension.
        barcode.XDimension = 1;

        SizeF qrlength = barcode.Size;
        float qrwidth = qrlength.Width;
        x = ((pageWidth - qrwidth) / 2) - margin;
         
        //Set the barcode text.
        barcode.Text = QRCode;

        //Using the layout result, continue to draw the text.
        y = result.Bounds.Bottom + (lineSpace * 17);

        //Calculate the text position and draw the text to PDF page.
        y = pageHeight - 200 + margin;

        //Printing barcode on to the Pdf.
        barcode.Draw(page, new PointF(x, y));

        #endregion "QRCode"

        #endregion
        //Create border pen with custom dash style and draw the border to page.
        borderPen.DashStyle = Syncfusion.Pdf.Graphics.PdfDashStyle.Custom;
        borderPen.DashPattern = new float[] { 3, 3 };
        graphics.DrawLine(borderPen, new PointF(0, pageHeight - 100), new PointF(pageWidth, pageHeight - 100));

        //Get the image file stream from assembly.
        Stream imageStream = assembly.GetManifestResourceStream(basePath + "Signature2.png");

        //Create PDF bitmap image from stream.
        PdfBitmap bitmap = new(imageStream);
        //Draw the image to PDF page.
        graphics.DrawImage(bitmap, new RectangleF(10, pageHeight - 90, 80, 80));

        //Calculate the text position and draw the text to PDF page.
        y = pageHeight - 100 + margin;
        size = arialRegularFont.MeasureString("Dr.  Peter Wakabi & Mrs. Annet Wakabi");
        x = pageWidth - size.Width - margin;
        graphics.DrawString("Dr.  Peter Wakabi & Mrs. Annet Wakabi", arialRegularFont, PdfBrushes.Black, new PointF(x, y));

        //Calculate the text position and draw the text to PDF page.
        y += arialRegularFont.Height + lineSpace;
        size = arialRegularFont.MeasureString("25B North-South Close, Naalya");
        x = pageWidth - size.Width - margin;
        graphics.DrawString("25B North-South Close, Naalya", arialRegularFont, PdfBrushes.Black, new PointF(x, y));

        //Calculate the text position and draw the text to PDF page.
        y += arialRegularFont.Height + lineSpace;
        size = arialRegularFont.MeasureString("Any Questions? creed@gmail.com");
        x = pageWidth - size.Width - margin;
        graphics.DrawString("Any Questions? creed@gmail.com", arialRegularFont, PdfBrushes.Black, new PointF(x, y));

        using MemoryStream ms = new();
        //Saves the presentation to the memory stream.
        document.Save(ms);
        ms.Position = 0;

        var attachmentName = Payment.ReceiptNo;
        if (!string.IsNullOrEmpty(currentTenant.FullName))
        {
            var fn = currentTenant.FullName;
            attachmentName += " _ " + fn + " _ " + payment.StartDate.ToShortDateString();

        }

        //Reset the memory stream position. 
        ms.Position = 0;
        Attachment file = new Attachment(ms, $"{attachmentName}.pdf", "application/pdf");
        //Sends the email message

        string paymentPeriod = string.Empty;
        SendEMail("pwakabi@hotmail.com", "pwakabi@hotmail.com,pwakabi@gmail.com", "Receipt" + " for the Period " + payment.StartDate.ToShortDateString() + " To: " + payment.EndDate.ToShortDateString(),
        "Please find herewith attached your receipt\n\n" + QRCode
        , file);


        ////File.WriteAllBytes(@"D:\Output.pdf", ms.ToArray());
        //////Saves the memory stream as file.
        SaveService saveService = new();
        saveService.SaveAndView("Output.pdf", "application/pdf", ms);
    }

    private async void tenantPdfStatementofAccount(string? UserId, DateTime startdate, DateTime enddate)
    {
        //Get Tenant Details
        var tenantid = UserId;
        if (!string.IsNullOrEmpty(UserId))
        {
            currentTenant = await TenantDetails(UserId);
        }
        else
        {
            ////If the payment doesn't have a Tenant, don't process it
            await ReApp.App.Current.MainPage.DisplayAlert("No Tenant Selected", "Please Select a Tenant", "Ok");
            return;
        }

        Payments = await AppService.GetTenantPayments(UserId);
        if (Payments == null)
        {
            ////If the payment doesn't have a Tenant, don't process it
            await ReApp.App.Current.MainPage.DisplayAlert("No Transactions", $"There are No Transactions for {UserId}!", "Ok");
            return;
        }

        //Create a new PDF document.
        PdfDocument document = new();
        //Add a page to the document.
        PdfPage page = document.Pages.Add();
        //Create PDF graphics for the page.
        PdfGraphics graphics = page.Graphics;

        //Get the page width and height
        float pageWidth = page.GetClientSize().Width;
        float pageHeight = page.GetClientSize().Height;

        //Set the header height
        float headerHeight = 90;
        //Create brush with light blue color.
        PdfColor lightBlue = Color.FromArgb(255, 91, 126, 215);
        PdfBrush lightBlueBrush = new PdfSolidBrush(lightBlue);
        //Create brush with dark blue color.
        PdfColor darkBlue = Color.FromArgb(255, 65, 104, 209);
        PdfBrush darkBlueBrush = new PdfSolidBrush(darkBlue);
        //Create brush with white color.
        PdfBrush whiteBrush = new PdfSolidBrush(Color.FromArgb(255, 255, 255, 255));

        //Get the font file stream from assembly.
        Assembly assembly = typeof(MainPage).GetTypeInfo().Assembly;
        string basePath = @"ReApp.Resources.Pdf.";
        Stream fontStream = assembly.GetManifestResourceStream(basePath + "arial.ttf");

        //Create PdfTrueTypeFont from stream with different size.
        PdfTrueTypeFont headerFont = new(fontStream, 30, PdfFontStyle.Regular);
        PdfTrueTypeFont arialRegularFont = new(fontStream, 18, PdfFontStyle.Regular);
        PdfTrueTypeFont arialBoldFont = new(fontStream, 9, PdfFontStyle.Bold);

        //Create string format.
        PdfStringFormat format = new();
        format.Alignment = PdfTextAlignment.Center;
        format.LineAlignment = PdfVerticalAlignment.Middle;

        float y = 0;
        float x = 0;

        string QRCode = "Creed Apartments\n";
        //Set the margins of address.
        float margin = 30;

        //Set the line space.
        float lineSpace = 2.5f;

        //Create border pen and draw the border to PDF page.
        PdfColor borderColor = Color.FromArgb(255, 142, 170, 219);
        PdfPen borderPen = new(borderColor, 1f);
        graphics.DrawRectangle(borderPen, new RectangleF(0, 0, pageWidth, pageHeight));

        //Create a new PdfGrid
        PdfGrid grid = new();

        //Add five columns to the grid.
        grid.Columns.Add(6);

        //Create the header row of the grid.
        PdfGridRow[] headerRow = grid.Headers.Add(1);

        //Set style to the header row and set value to the header cells.
        headerRow[0].Style.BackgroundBrush = new PdfSolidBrush(new PdfColor(68, 114, 196));
        headerRow[0].Style.TextBrush = PdfBrushes.White;
        headerRow[0].Cells[0].Value = "Receipt No.";
        // headerRow[0].Cells[0].StringFormat.Alignment = PdfTextAlignment.Center;
        headerRow[0].Cells[1].Value = "Apartment";
        headerRow[0].Cells[2].Value = "Paid On";
        headerRow[0].Cells[3].Value = "Start Date";
        headerRow[0].Cells[4].Value = "End Date";
        headerRow[0].Cells[5].Value = "Amount Paid";

        //Add Payments to the grid table.
        foreach (var payment in Payments)
        {
            AddPayments(payment, grid);
        }

        //Add Grand Total to the grid table.
        AddGrandTotal(grid);


        #region Header

        //Fill the header with light blue brush
        graphics.DrawRectangle(lightBlueBrush, new RectangleF(0, 0, pageWidth, headerHeight));

        string title = "Creed Apartments";

        //Specificy the bounds for total value.
        RectangleF headerTotalBounds = new(400, 0, pageWidth - 200, headerHeight);

        //Measure the string size using font.
        SizeF textSize = headerFont.MeasureString(title);
        graphics.DrawString(title, headerFont, whiteBrush, new RectangleF(0, 0, textSize.Width + 50, headerHeight), format);
        //Draw rectangle in PDF page.
        graphics.DrawRectangle(darkBlueBrush, headerTotalBounds);
        //Draw the total value to PDF page.
        graphics.DrawString("Receipt", arialRegularFont, whiteBrush, new RectangleF(360, 0, pageWidth - 300, headerHeight + 10), format);
        //Create font from font stream.
        arialRegularFont = new PdfTrueTypeFont(fontStream, 9, PdfFontStyle.Regular);
        ////Set bottom line alignment and draw the text to PDF page.
        //format.LineAlignment = PdfVerticalAlignment.Bottom;
        //graphics.DrawString("Amount", arialRegularFont, whiteBrush, new RectangleF(305, 0, pageWidth - 200, headerHeight / 2 - arialRegularFont.Height), format);
        #endregion
        ////Measure the string size using font.
        //SizeF size = arialRegularFont.MeasureString($"Statement Number: {payment.ReceiptNo}");
        //y = headerHeight + margin;
        //x = (pageWidth - margin) - size.Width;
        ////Draw text to PDF page with provided font and location.
        //graphics.DrawString($"Statement Number: {payment.ReceiptNo}", arialRegularFont, PdfBrushes.Black, new PointF(x, y));


        //Measure the string size using font.
        SizeF size = arialRegularFont.MeasureString("Date Prepared:" + DateTime.Now.ToString("dddd dd, MMMM yyyy"));
        x = (pageWidth - margin) - size.Width;
        y += arialRegularFont.Height + lineSpace;
        //Draw text to PDF page with provided font and location.
        graphics.DrawString("Date Prepared: " + DateTime.Now.ToString("dddd dd, MMMM yyyy"), arialRegularFont, PdfBrushes.Black, new PointF(x, y));




        // QRCode += "Receipt #: " + payment.ReceiptNo + "\n";
        // QRCode += "UGX" + String.Format("{0:n0}", GetTotalAmount(grid)) + "\n";
        var rowcount = grid.Rows.Count;
        QRCode += "UGX" + String.Format("{0:n0}", grid.Rows[rowcount - 1].Cells[grid.Columns.Count - 1].Value) + "\n";
        // grid.Rows[rowcount - 1].Cells[grid.Columns.Count - 1]
        y = headerHeight + margin;
        x = margin;
        //Draw text to PDF page with provided font and location.
        graphics.DrawString("Received From:", arialRegularFont, PdfBrushes.Black, new PointF(x, y));
        if (currentTenant.FullName != null)
        {
            var fullname = currentTenant.FullName;
            y += arialRegularFont.Height + lineSpace;
            graphics.DrawString($"{fullname},", arialRegularFont, PdfBrushes.Black, new PointF(x, y));
            QRCode += "Received From:" + fullname;
        }




        if (currentTenant.PhoneNumber != null)
        {
            var phone = currentTenant.PhoneNumber;
            y += arialRegularFont.Height + lineSpace;
            graphics.DrawString($"{phone},", arialRegularFont, PdfBrushes.Black, new PointF(x, y));
            QRCode += $"; {phone} ";
        }

        if (currentTenant.Email != null)
        {
            var email = currentTenant.Email;
            y += arialRegularFont.Height + lineSpace;
            graphics.DrawString($"{email},", arialRegularFont, PdfBrushes.Black, new PointF(x, y));
            QRCode += $"; {email}\n";
        }

        QRCode += "From: " + startdate.ToShortDateString() + " To: " + enddate.ToShortDateString() + "\n";
        QRCode += DateTime.Now.ToString("dddd dd, MMMM yyyy") + "\n";

        #region Grid
        //Set width to grid columns.
        grid.Columns[0].Width = 85;
        grid.Columns[1].Width = 85;
        grid.Columns[2].Width = 85;
        grid.Columns[3].Width = 85;
        grid.Columns[4].Width = 85;
        grid.Columns[5].Width = 85;

        for (int i = 0; i < grid.Headers.Count; i++)
        {
            //Set height to the grid header row.
            grid.Headers[i].Height = 20;
            for (int j = 0; j < grid.Columns.Count; j++)
            {
                //Create string format for header cell.
                PdfStringFormat pdfStringFormat = new();
                pdfStringFormat.LineAlignment = PdfVerticalAlignment.Middle;
                pdfStringFormat.Alignment = PdfTextAlignment.Left;

                ////Set cell padding for header cell.
                //if (j == 0 || j == 2)
                //    grid.Headers[i].Cells[j].Style.CellPadding = new PdfPaddings(30, 1, 1, 1);
                //Set string format to grid header cell.
                grid.Headers[i].Cells[j].StringFormat = pdfStringFormat;
                //Set font to the grid header cell.
                grid.Headers[i].Cells[j].Style.Font = arialBoldFont;

            }
            // //Set value to the grid header cell.
            //  grid.Headers[0].Cells[0].Value = "Receipt No.";
        }
        for (int i = 0; i < grid.Rows.Count; i++)
        {
            //Set height to the grid row.
            grid.Rows[i].Height = 23;
            for (int j = 0; j < grid.Columns.Count; j++)
            {
                //Create string format for grid row.
                PdfStringFormat pdfStringFormat = new();
                pdfStringFormat.LineAlignment = PdfVerticalAlignment.Middle;
                pdfStringFormat.Alignment = PdfTextAlignment.Left;

                ////Set cell padding for grid row cell.
                //if (j == 0 || j == 2)
                //    grid.Rows[i].Cells[j].Style.CellPadding = new PdfPaddings(30, 1, 1, 1);

                //Set string format to grid row cell.
                grid.Rows[i].Cells[j].StringFormat = pdfStringFormat;
                //Set font to the grid row cell.
                grid.Rows[i].Cells[j].Style.Font = arialRegularFont;
            }
        }

        // var rowcount = grid.Rows.Count;

        //Set the grand total text to Bold.
        grid.Rows[rowcount - 1].Cells[0].Style.Font = arialBoldFont;
        grid.Rows[rowcount - 1].Cells[grid.Columns.Count - 1].Style.Font = arialBoldFont;

        //Apply built-in table style to the grid.
        grid.ApplyBuiltinStyle(PdfGridBuiltinStyle.ListTable4Accent5);
        //Subscribing to begin cell layout event.
        grid.BeginCellLayout += Grid_BeginCellLayout;
        //Draw the PDF grid to PDF page and get the layout result.
        PdfGridLayoutResult result = grid.Draw(page, new PointF(x, y + 40));

        //Using the layout result, continue to draw the text.
        y = result.Bounds.Bottom + lineSpace;
        format = new PdfStringFormat
            {
                Alignment = PdfTextAlignment.Center
            };
        RectangleF bounds = new(QuantityCellBounds.X, y, QuantityCellBounds.Width, QuantityCellBounds.Height);
        ////Draw text to PDF page based on the layout result.
        //page.Graphics.DrawString("Grand Total:", arialBoldFont, PdfBrushes.Black, bounds, format);
        ////Draw the total amount value to PDF page based on the layout result.
        //bounds = new RectangleF(TotalPriceCellBounds.X, y, TotalPriceCellBounds.Width, TotalPriceCellBounds.Height);
        //page.Graphics.DrawString("UGX" + String.Format("{0:n0}", GetTotalAmount(grid)), arialBoldFont, PdfBrushes.Black, bounds);

        var amount = "UGX" + String.Format("{0:n0}", grid.Rows[rowcount - 1].Cells[grid.Columns.Count - 1].Value);

        // double amountPaid = payment.AmountPaid;

        y += arialRegularFont.Height + (lineSpace * 2);
        // var amountinwords = this.NumWords(amountPaid);
        // graphics.DrawString($"Amount in words:{amountinwords} only.", arialBoldFont, PdfBrushes.Black, new PointF(x, y));

        graphics.DrawString($"Amount:{amount} only.", arialBoldFont, PdfBrushes.Black, new PointF(x, y));


        y += arialRegularFont.Height + (lineSpace * 2);

        graphics.DrawString("If you would like to verify your Receipt, scan the QR-Code.", arialBoldFont, PdfBrushes.RoyalBlue, new PointF(x, y));




        #region "QRCode"
        //Drawing QR Barcode.
        PdfQRBarcode barcode = new PdfQRBarcode();

        //Set Error Correction Level.
        barcode.ErrorCorrectionLevel = PdfErrorCorrectionLevel.High;

        //Set XDimension.
        barcode.XDimension = 1;

        SizeF qrlength = barcode.Size;
        float qrwidth = qrlength.Width;
        x = ((pageWidth - qrwidth) / 2) - margin;

        //Set the barcode text.
        barcode.Text = QRCode;

        //Using the layout result, continue to draw the text.
        y = result.Bounds.Bottom + (lineSpace * 17);

        //Calculate the text position and draw the text to PDF page.
        y = pageHeight - 200 + margin;

        //Printing barcode on to the Pdf.
        barcode.Draw(page, new PointF(x, y));

        #endregion "QRCode"

        #endregion
        //Create border pen with custom dash style and draw the border to page.
        borderPen.DashStyle = Syncfusion.Pdf.Graphics.PdfDashStyle.Custom;
        borderPen.DashPattern = new float[] { 3, 3 };
        graphics.DrawLine(borderPen, new PointF(0, pageHeight - 100), new PointF(pageWidth, pageHeight - 100));

        //Get the image file stream from assembly.
        Stream imageStream = assembly.GetManifestResourceStream(basePath + "Signature2.png");

        //Create PDF bitmap image from stream.
        PdfBitmap bitmap = new(imageStream);
        //Draw the image to PDF page.
        graphics.DrawImage(bitmap, new RectangleF(10, pageHeight - 90, 80, 80));

        //Calculate the text position and draw the text to PDF page.
        y = pageHeight - 100 + margin;
        size = arialRegularFont.MeasureString("Dr.  Peter Wakabi & Mrs. Annet Wakabi");
        x = pageWidth - size.Width - margin;
        graphics.DrawString("Dr.  Peter Wakabi & Mrs. Annet Wakabi", arialRegularFont, PdfBrushes.Black, new PointF(x, y));

        //Calculate the text position and draw the text to PDF page.
        y += arialRegularFont.Height + lineSpace;
        size = arialRegularFont.MeasureString("25B North-South Close, Naalya");
        x = pageWidth - size.Width - margin;
        graphics.DrawString("25B North-South Close, Naalya", arialRegularFont, PdfBrushes.Black, new PointF(x, y));

        //Calculate the text position and draw the text to PDF page.
        y += arialRegularFont.Height + lineSpace;
        size = arialRegularFont.MeasureString("Any Questions? creed@gmail.com");
        x = pageWidth - size.Width - margin;
        graphics.DrawString("Any Questions? creed@gmail.com", arialRegularFont, PdfBrushes.Black, new PointF(x, y));

        using MemoryStream ms = new();
        //Saves the presentation to the memory stream.
        document.Save(ms);
        ms.Position = 0;

        var attachmentName = Payment.ReceiptNo;
        if (!string.IsNullOrEmpty(currentTenant.FullName))
        {
            var fn = currentTenant.FullName;
            attachmentName += " _ " + fn + " _ " + startdate.ToShortDateString();

        }

        //Reset the memory stream position. 
        ms.Position = 0;
        Attachment file = new Attachment(ms, $"{attachmentName}.pdf", "application/pdf");
        //Sends the email message

        string paymentPeriod = string.Empty;
        SendEMail("pwakabi@hotmail.com", "pwakabi@hotmail.com,pwakabi@gmail.com", "Receipt" + " for the Period " + startdate.ToShortDateString() + " To: " + enddate.ToShortDateString(),
        "Please find herewith attached your receipt\n\n" + QRCode
        , file);


        ////File.WriteAllBytes(@"D:\Output.pdf", ms.ToArray());
        //////Saves the memory stream as file.
        SaveService saveService = new();
        saveService.SaveAndView("Output.pdf", "application/pdf", ms);
    }


    #region Helper methods

    //Create and row for the grid.
    void AddPayments(Payment payment, PdfGrid grid)
    {
        //Add a new row and set the product value to the grid row cells.
        PdfGridRow row = grid.Rows.Add();
        row.Cells[0].Value = payment.ReceiptNo;
        row.Cells[1].Value = payment.ApartmentId;
        row.Cells[2].Value = payment.PaymentDate.ToShortDateString();
        row.Cells[3].Value = payment.StartDate.ToShortDateString();
        row.Cells[4].Value = payment.EndDate.ToShortDateString();
        row.Cells[5].Value = String.Format("{0:n0}", payment.AmountPaid);

    }

    //Create and row for the grid.
    void AddGrandTotal(PdfGrid grid)
    {
        double grandTotal = GetTotalAmount(grid);
        //Add a new row and set the product value to the grid row cells.
        PdfGridRow row = grid.Rows.Add();
        row.Cells[0].Value = "Grand Total";
        //row.Cells[1].Value = payment.ApartmentId;
        //row.Cells[2].Value = payment.PaymentDate.ToShortDateString();
        //row.Cells[3].Value = payment.StartDate.ToShortDateString();
        //row.Cells[4].Value = payment.EndDate.ToShortDateString();
        row.Cells[5].Value = String.Format("{0:n0}", grandTotal);

    }
    /// <summary>
    /// Get the Total amount of the purcharsed items.
    /// </summary>
    private double GetTotalAmount(PdfGrid grid)
    {
        double Total = 0f;
        for (int i = 0; i < grid.Rows.Count; i++)
        {
            string cellValue = grid.Rows[i].Cells[grid.Columns.Count - 1].Value.ToString();
            double result = double.Parse(cellValue, System.Globalization.CultureInfo.InvariantCulture);
            Total += result;
        }
        return Total;

    }

    public String NumWords(double n) //converts double to words
    {
        string[] numbersArr = new string[] { "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" };
        string[] tensArr = new string[] { "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };
        string[] suffixesArr = new string[] { "Thousand", "Million", "Billion", "Trillion", "Quadrillion", "Quintillion", "Sextillion", "Septillion", "Octillion", "Nonillion", "Decillion", "Undecillion", "Duodecillion", "Tredecillion", "Quattuordecillion", "Quindecillion", "Sexdecillion", "Septdecillion", "Octodecillion", "Novemdecillion", "Vigintillion" };
        string words = "";

        bool tens = false;

        if (n < 0)
        {
            words += "negative ";
            n *= -1;
        }

        int power = (suffixesArr.Length + 1) * 3;

        while (power > 3)
        {
            double pow = Math.Pow(10, power);
            if (n >= pow)
            {
                if (n % pow > 0)
                {
                    words += NumWords(Math.Floor(n / pow)) + " " + suffixesArr[(power / 3) - 1] + ", ";
                }
                else if (n % pow == 0)
                {
                    words += NumWords(Math.Floor(n / pow)) + " " + suffixesArr[(power / 3) - 1];
                }
                n %= pow;
            }
            power -= 3;
        }
        if (n >= 1000)
        {
            if (n % 1000 > 0) words += NumWords(Math.Floor(n / 1000)) + " Thousand, ";
            else words += NumWords(Math.Floor(n / 1000)) + " Thousand";
            n %= 1000;
        }
        if (0 <= n && n <= 999)
        {
            if ((int)n / 100 > 0)
            {
                words += NumWords(Math.Floor(n / 100)) + " Hundred";
                n %= 100;
            }
            if ((int)n / 10 > 1)
            {
                if (words != "")
                    words += " ";
                words += tensArr[(int)n / 10 - 2];
                tens = true;
                n %= 10;
            }

            if (n < 20 && n > 0)
            {
                if (words != "" && tens == false)
                    words += " ";
                words += (tens ? "-" + numbersArr[(int)n - 1] : numbersArr[(int)n - 1]);
                n -= Math.Floor(n);
            }
        }

        return words;

    }

    private static void SendEMail(string from, string recipients, string subject, string body, Attachment attachment)
    {
        try
        {
            //Creates the email message
            MailMessage emailMessage = new MailMessage(from, recipients);
            //Adds the subject for email
            emailMessage.Subject = subject;
            //Sets the HTML string as email body
            emailMessage.IsBodyHtml = false;
            emailMessage.Body = body;
            //Add the file attachment to this e-mail message.
            emailMessage.Attachments.Add(attachment);
            //Sends the email with prepared message
            using (SmtpClient client = new SmtpClient())
            {
                //Update your SMTP Server address here
                client.Host = "smtp.outlook.com";
                client.UseDefaultCredentials = false;
                //Update your email credentials here
                client.Credentials = new System.Net.NetworkCredential(from, "Dhagala$x5");
                client.Port = 587;
                client.EnableSsl = true;
                client.Send(emailMessage);
            }

        }
        catch (Exception ex)
        {
            ReApp.App.Current.MainPage.DisplayAlert("Error", ex.Message, "Ok");
            throw;
        }
        


    }
    #endregion

    private void Grid_BeginCellLayout(object sender, PdfGridBeginCellLayoutEventArgs args)
    {
        PdfGrid grid = sender as PdfGrid;
        if (args.CellIndex == grid!.Columns.Count - 1)
        {
            //Get the bounds of price cell in grid row.
            TotalPriceCellBounds = args.Bounds;
        }
        else if (args.CellIndex == grid.Columns.Count - 2)
        {
            //Get the bounds of quantity cell in grid row.
            QuantityCellBounds = args.Bounds;
        }

    }

    #endregion

    #region "Support data"




    //httpClient.GetFromJsonAsync<List<RentAgreement>>("RentAgreements");
    #endregion


}


<style type="text/css">
    .personal-wrap {
        float: left;
        padding: 45px;
        padding-top: 70px
    }

    .top-padding {
        padding-top: 42px;
    }

    .first-name {
        font-size: x-large;
        font-weight: bold;
    }

    .photo {
        width: 100px;
        height: 100px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0,0,0,0.2);
    }

    .title {
        font-size: large;
        font-weight: 500;
    }

    .title-font {
        font-weight: 400;
    }

    .left-div-wrap {
        height: 260px;
        width: 450px;
        float: left;
    }

    .right-div-wrap {
        width: 265px;
        float: left;
        padding: 40px;
    }

    .inner-padding {
        padding: 25px;
    }

    .schedule-div {
        width: 450px;
        padding: 25px;
    }

    .content {
        font-size: large;
    }

    .e-tab .e-content {
        overflow-y: hidden;
    }

    .e-tab .e-tab-header {
        border: 0;
    }

    .e-tab {
        padding: 10px;
    }

    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }

    .list {
        float: left;
        line-height: 20px;
        margin: 10px;
        min-width: 200px;
    }

    .e-ddl.e-input-group.e-control-wrapper .e-input {
        font-size: 20px;
        font-family: emoji;
        color: #ab3243;
        background: #32a5ab;
    }

    .e-float-input.e-input-group:not(.e-float-icon-left) .e-float-line::before, .e-float-input.e-control-wrapper.e-input-group:not(.e-float-icon-left) .e-float-line::before, .e-float-input.e-input-group:not(.e-float-icon-left) .e-float-line::after, .e-float-input.e-control-wrapper.e-input-group:not(.e-float-icon-left) .e-float-line::after {
        background-color: #2319b8;
    }

    .e-ddl.e-lib.e-input-group.e-control-wrapper.e-control-container.e-float-input.e-input-focus .e-float-text.e-label-top {
        color: #2319b8;
    }

    .cash-labels {
        color: red;
    }

    .mobile-labels {
        color: green;
    }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }
 
    /*Define Colors for Cells*/
    .NotImplemented {
        background-color: darkred;
    }

    .ImplementationComplete {
        background-color: forestgreen;
    }

    .ImplementationinProgress {
        background-color: yellow;
    }

    .Continous {
        background-color: darkorange;
    }

    .StatusNotReported {
        background-color: deepskyblue;
    }

    .NolongerApplicable {
        background-color: mediumvioletred;
    }
    /*Change color for text in Grid*/
    /*QueryCellInfo*/
    /*.NotImplemented*/
    .e-grid .e-gridcontent .e-rowcell.NotImplemented {
        color: ghostwhite;
    }
    /*.ImplementationComplete*/
    .e-grid .e-gridcontent .e-rowcell.ImplementationComplete {
        color: ghostwhite;
    }
    /*.ImplementationinProgress*/
    .e-grid .e-gridcontent .e-rowcell.ImplementationinProgress {
        color: darkred;
    }
    /*.Continous*/
    .e-grid .e-gridcontent .e-rowcell.Continous {
        color: ghostwhite;
    }
    /*.StatusNotReported*/
    .e-grid .e-gridcontent .e-rowcell.StatusNotReported {
        color: ghostwhite;
    }
    /*.NolongerApplicable*/
    .e-grid .e-gridcontent .e-rowcell.NolongerApplicable {
        color: ghostwhite;
    }
    /*QueryCellInfo*/
</style>