@* @page "/SectionThreePage" *@
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Interface;
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@inject IAuthenticationService AuthService;

<style>
    /*Position First Item in Section 3*/
    .e-grid .e-rowcell:not(.e-editedbatchcell):not(.e-updatedtd), .e-grid .e-detailrowcollapse:not(.e-editedbatchcell):not(.e-updatedtd), .e-grid .e-detailrowexpand:not(.e-editedbatchcell):not(.e-updatedtd), .e-grid .e-gridcontent .e-rowdragdrop:not(.e-editedbatchcell):not(.e-updatedtd), .e-grid .e-gridheader .e-rowdragdrop:not(.e-editedbatchcell):not(.e-updatedtd), .e-grid .e-emptyrow:not(.e-editedbatchcell):not(.e-updatedtd) {
    color: black;
    position: relative;
    left: 2px;
    top: 30px;
    }
</style>


<SfGrid @ref="@BehavioralGrid" DataSource="@datasource" GridLines="GridLine.Both"
        TValue="BalanceScoreCardBehavioral" ID="Grid1" AllowTextWrap="true" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true">
    <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    
    <GridAggregates>
        <GridAggregate>
            <GridAggregateColumns>    
                <GridAggregateColumn Field=@nameof(BalanceScoreCardBehavioral.EmployeeSelfAssessment) Type="Syncfusion.Blazor.Grids.AggregateType.Sum">
                    <FooterTemplate Context="FooterTemplateContext">
                        @{
                            aggregate = (FooterTemplateContext as AggregateTemplateContext);
                            <div>
                                @if (@aggregate != null)
                                {
                                    <p style="color:purple;">Target Points: @aggregate.Sum %</p>
                                }
                            </div>
                        }
                    </FooterTemplate>
                </GridAggregateColumn>

                <GridAggregateColumn Field=@nameof(BalanceScoreCardBehavioral.SupervisorAssessment) Type="Syncfusion.Blazor.Grids.AggregateType.Sum">
                    <FooterTemplate Context="FooterTemplateContext">
                        @{
                            aggregate = (FooterTemplateContext as AggregateTemplateContext);
                            <div>
                                @if (@aggregate != null)
                                {
                                    <p style="color:purple;">Target Points: @aggregate.Sum %</p>
                                }
                            </div>
                        }
                    </FooterTemplate>
                </GridAggregateColumn>
            </GridAggregateColumns>



        </GridAggregate>
    </GridAggregates>

    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
    <GridEvents CellSelected="BehavioralCellSelectHandler"
                CellSaved="BehavioralCellSavedHandler"
                TValue="BalanceScoreCardBehavioral">
    </GridEvents>

    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50" Visible=false></GridColumn>
        <GridColumn Field=@nameof(BalanceScoreCardBehavioral.BehavioralId) HeaderText="BehavioralId" Visible=false IsPrimaryKey="true" Width="150"></GridColumn>
        <GridColumn Field=@nameof(BalanceScoreCardBehavioral.BalanceScoreCardId) HeaderText="BalanceScoreCardId" TextAlign="TextAlign.Right" AllowEditing="false" ValidationRules="@(new ValidationRules { Required = false })" EditType="EditType.NumericEdit" Visible=false Width="180" IsFrozen="true"></GridColumn>
        <GridForeignColumn Field=@nameof(BalanceScoreCardBehavioral.CompetenceId)
                           HeaderText="#"
                           Width="320"
                           AllowEditing="false"
                           ForeignKeyField="@(nameof(ABehavioralCompetencies.CompetenceId))"
                           ForeignKeyValue="@(nameof(ABehavioralCompetencies.CompetenceDescription))"
                           ForeignDataSource="@CompetenceData"
                           AllowFiltering="true"
                           IsFrozen="true"
                           TextAlign="TextAlign.Justify"
                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

        @*Employee *@
        <GridColumn HeaderText="Employee"
            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
            <GridColumns>
                <GridForeignColumn Field=@nameof(BalanceScoreCardBehavioral.EmployeePerformanceDescriptorId)
                                   HeaderText="Employee Performance Rating"
                                   Width="30"
                                   AllowEditing="@IsEmployeeEnabledColumn"
                                   ForeignKeyField="@(nameof(APerformanceDescriptor.PerformanceDescriptorId))"
                                   ForeignKeyValue="@(nameof(APerformanceDescriptor.PerformanceDescriptor))"
                                   ForeignDataSource="@PerformanceDescriptorData"
                                   AllowFiltering="true"
                                   IsFrozen="false"
                                   TextAlign="TextAlign.Justify"
                                   CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                </GridForeignColumn>
                <GridColumn Field=@nameof(BalanceScoreCardBehavioral.EmployeeSelfAssessment)
                            HeaderText="Employee Self Assessment"
                            TextAlign="TextAlign.Justify"
                            AllowEditing="@IsEmployeeEnabledColumn"
                            ValidationRules="@(new ValidationRules { Required = false })"
                            EditType="EditType.NumericEdit"
                            Format="###.##"
                            Width="30"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                </GridColumn>
                <GridColumn Field=@nameof(BalanceScoreCardBehavioral.EmployeeComment)
                            HeaderText="Employee Comment"
                            TextAlign="TextAlign.Justify"
                            AllowEditing="@IsEmployeeEnabledColumn"
                            ValidationRules="@(new ValidationRules { Required = false })"
                            Width="30"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                </GridColumn>
            </GridColumns>
        </GridColumn>

        @*Supervisor *@
        <GridColumn HeaderText="Supervisor"
            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
            <GridColumns>
                <GridForeignColumn Field=@nameof(BalanceScoreCardBehavioral.SupervisorPerformanceDescriptorId)
                                   HeaderText="Supervisor Performance Rating"
                                   Width="30"
                                   AllowEditing="@IsSupervisorEnabledColumn"
                                   ForeignKeyField="@(nameof(APerformanceDescriptor.PerformanceDescriptorId))"
                                   ForeignKeyValue="@(nameof(APerformanceDescriptor.PerformanceDescriptor))"
                                   ForeignDataSource="@PerformanceDescriptorData"
                                   AllowFiltering="true"
                                   IsFrozen="false"
                                   TextAlign="TextAlign.Justify"
                                   CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                </GridForeignColumn>
                <GridColumn Field=@nameof(BalanceScoreCardBehavioral.SupervisorAssessment)
                            HeaderText="Supervisor Assessment"
                            AllowEditing="@IsSupervisorEnabledColumn"
                            TextAlign="TextAlign.Justify"
                            EditType="EditType.NumericEdit"
                            Width="30"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                </GridColumn>
                <GridColumn Field=@nameof(BalanceScoreCardBehavioral.SupervisorComment)
                            HeaderText="Supervisor Comment"
                            TextAlign="TextAlign.Right"
                            AllowEditing="@IsSupervisorEnabledColumn"
                            ValidationRules="@(new ValidationRules { Required = false })"
                            Width="30"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                </GridColumn>
            </GridColumns>
        </GridColumn>   
    </GridColumns>
</SfGrid>

@code
{
    [Parameter]
    public List<BalanceScoreCardBehavioral>? behaviourdata { get; set; }
    [Parameter]
    public int BalanceScoreCardId { get; set; }
    [Parameter]
    public EventCallback<List<BalanceScoreCardBehavioral>?> onscorecardtoggle { get; set; }
    SfGrid<BalanceScoreCardBehavioral>? BehavioralGrid { get; set; }
    List<BalanceScoreCardBehavioral>? datasource { get; set; }
    [Parameter]
    public List<ABehavioralCompetencies>? CompetenceData { get; set; }
    [Parameter]
    public List<APerformanceDescriptor>? PerformanceDescriptorData { get; set; }    
    [Parameter]
    public List<AFinancialYear>? FinancialYearData { get; set; }
    [Parameter]
    public int? finyearid { get; set; }    
    [Parameter]
    public bool IsEmployeeEnabledColumn { get; set; } = true;
    [Parameter]
    public bool IsSupervisorEnabledColumn { get; set; } = true;
    Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }
    int? previousBalanceScoreCardId { get; set; }
    [Parameter]
    public Syncfusion.Blazor.Grids.Action _previous { get; set; }
    [Parameter]
    public int? approvalstatsid { get; set; }



    protected override async Task OnInitializedAsync()
    {
        if (previousBalanceScoreCardId != BalanceScoreCardId)
        {
            int countid = -10000;
            previousBalanceScoreCardId = BalanceScoreCardId;
            datasource = new List<BalanceScoreCardBehavioral>();
            if (behaviourdata != null && behaviourdata.Count() > 0)
            {
                datasource.AddRange(behaviourdata);
            }
            else
            {
                if (CompetenceData != null)
                {
                    foreach (var item in CompetenceData)
                    {
                        var m = new BalanceScoreCardBehavioral();
                        m.BehavioralId = countid;
                        m.CompetenceId = item.CompetenceId;

                        datasource.Add(m);
                        countid++;
                    }

                    datasource = datasource.OrderBy(o => o.CompetenceId).ToList();
                }
            }
        }
    }

    #region BehaviourMethods

    //For Behavioral Plan Grid
    //Enable cell edit on single click
    public async Task BehavioralCellSelectHandler(CellSelectEventArgs<BalanceScoreCardBehavioral> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await BehavioralGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await BehavioralGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await BehavioralGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    private async Task BehavioralCellSavedHandler(CellSaveArgs<BalanceScoreCardBehavioral> args)
    {
        try
        {
            var index = await BehavioralGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.BehavioralId);
            //Employee Self Assessment
            if (args.Value != null && (args.ColumnName == nameof(BalanceScoreCardBehavioral.EmployeePerformanceDescriptorId)))
            {
                var a = PerformanceDescriptorData.FirstOrDefault(o => o.PerformanceDescriptorId == args.Data.EmployeePerformanceDescriptorId);
                if (a != null)
                {
                    await BehavioralGrid.UpdateCellAsync(index, nameof(BalanceScoreCardBehavioral.EmployeeSelfAssessment), Convert.ToDouble(a.PerformanceScore.Value));
                    // //New Record or Saved as a Draft
                    // if ((_previous == Syncfusion.Blazor.Grids.Action.Add) && approvalstatsid == 1)
                    // {
                    //     await BehavioralGrid.UpdateCellAsync(index, nameof(BalanceScoreCardBehavioral.EmployeeSelfAssessment), Convert.ToDouble(a.PerformanceScore.Value));                        
                    // }
                    // //When editing a record
                    // else
                    // {
                    //     await BehavioralGrid.UpdateCellAsync(index, nameof(BalanceScoreCardBehavioral.SupervisorAssessment), Convert.ToDouble(a.PerformanceScore.Value));                        
                    // }
                }

            }

            //Supervisor Assessment
            if (args.Value != null && (args.ColumnName == nameof(BalanceScoreCardBehavioral.SupervisorPerformanceDescriptorId)))
            {
                var a = PerformanceDescriptorData.FirstOrDefault(o => o.PerformanceDescriptorId == args.Data.SupervisorPerformanceDescriptorId);
                if (a != null)
                {
                    await BehavioralGrid.UpdateCellAsync(index, nameof(BalanceScoreCardBehavioral.SupervisorAssessment), Convert.ToDouble(a.PerformanceScore.Value));
                }

            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await BehavioralGrid.EndEditAsync();
            await onscorecardtoggle.InvokeAsync(datasource);
        }
    }

    #endregion BehaviourMethods
}


