@* @page "/HODCommentsPage" *@
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Interface;
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@inject IAuthenticationService AuthService;

<SfGrid @ref="@HODCommentsGrid" DataSource="@datasource" GridLines="GridLine.Both"
        TValue="BalanceScoreCardHodcomments" ID="Grid1" AllowTextWrap="true" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Cancel","ExcelExport","PdfExport","CsvExport"})">
    <GridEditSettings AllowAdding="hodgridenabled" AllowEditing="hodgridenabled" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false" NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
    <GridEvents CellSelected="CellSelectHandlerHODComments"
                CellSaved="HODCommentsCellSavedHandler"
                TValue="BalanceScoreCardHodcomments">
    </GridEvents>

    <GridColumns>
        <GridColumn Field=@nameof(BalanceScoreCardHodcomments.HodcommentId)
                    HeaderText="HOD Comment Id"
                    TextAlign="TextAlign.Justify"
                    IsPrimaryKey="true"
                    IsIdentity="true"
                    Visible="false"
                    Width="180"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
        <GridColumn Field=@nameof(BalanceScoreCardHodcomments.Hodcomments)
                    HeaderText="HOD Comments"
                    TextAlign="TextAlign.Justify"
                    AllowEditing="true"
                    ValidationRules="@(new ValidationRules { Required = false })"
                    Width="180"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
        <GridColumn Field=@nameof(BalanceScoreCardHodcomments.Hoddate)
                    DefaultValue="@(DateTime.Now)"
                    HeaderText="HOD Date"
                    EditType="EditType.DatePickerEdit"
                    Format="dd/MM/yyyy"
                    Type="ColumnType.Date"
                    Width="160"
                    AllowEditing="false"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
    </GridColumns>

</SfGrid>

@code {    
    [Parameter]
    public List<BalanceScoreCardHodcomments>? hodcommentsdata { get; set; }
    [Parameter]
    public int BalanceScoreCardId { get; set; }
    [Parameter]
    public EventCallback<List<BalanceScoreCardHodcomments>?> onscorecardtoggle { get; set; }
    public SfGrid<BalanceScoreCardHodcomments>? HODCommentsGrid { get; set; }
    List<BalanceScoreCardHodcomments>? datasource { get; set; }

    Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }
    int? previousBalanceScoreCardId { get; set; }
    [Parameter]
    public Syncfusion.Blazor.Grids.Action _previous { get; set; }
    [Parameter]
    public bool hodgridenabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (previousBalanceScoreCardId != BalanceScoreCardId)
        {
            int countid = -10000;
            previousBalanceScoreCardId = BalanceScoreCardId;
            datasource = new List<BalanceScoreCardHodcomments>();
            if (hodcommentsdata != null && hodcommentsdata.Count() > 0)
            {
                datasource.AddRange(hodcommentsdata);
            }
        }
    }

    //For HOD Comments Grid
    //Enable cell edit on single click
    public async Task CellSelectHandlerHODComments(CellSelectEventArgs<BalanceScoreCardHodcomments> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await HODCommentsGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await HODCommentsGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await HODCommentsGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    private async Task HODCommentsCellSavedHandler(CellSaveArgs<BalanceScoreCardHodcomments> args)
    {
        try
        {
            var index = await HODCommentsGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.HodcommentId);
            if (args.ColumnName == nameof(BalanceScoreCardHodcomments.Hodcomments))
            {
                await HODCommentsGrid.UpdateCellAsync(index, nameof(BalanceScoreCardHodcomments.Hoddate), DateTime.Now);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await HODCommentsGrid.EndEditAsync();
            await onscorecardtoggle.InvokeAsync(datasource);
        }
    }

}
