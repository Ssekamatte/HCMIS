@* @page "/SectionTwoPage" *@
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Interface;
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;

@using HCMIS.ViewModel;
@inject IToastService toastService;
@inject IAuthenticationService AuthService;
@inject IJSRuntime JSRuntime

<style>
    /*Wrap grouping text*/
    .pp {
        color: ghostwhite;
        background-color: #00cc00;
        padding: 10px;
        margin-top: 40px;
        word-wrap: break-word;
    }

    /* .e-grid .e-gridcontent tr:first-child td {
        border-top-color: rgba(0,0,0,0);
        position: relative;
        left: 2px;
        top: 30px;
    } */

   
    /*Grid Aggregate Column Color*/
    /* .e-grid .e-summaryrow .e-summarycell, .e-grid .e-summaryrow .e-templatecell, .e-grid .e-summarycontent .e-indentcell, .e-grid .e-indentcell.e-detailindentcelltop, .e-grid .e-groupfooterrow.e-summaryrow .e-indentcell.e-indentcelltop {
        background-color: orange;
        border-color: black;
        color: #201f1e;
        border-bottom-color: black;
        font-size: large;
        position: relative;
        left: 2px;
        top: 30px;
    } */
</style>

@{
    var Div = (new string[] { "BscPerspectiveTypeId"});
}


@if (datasource != null
&& datasource.Count > 0)
{
    <h6>
        Employee performance will be
        assessed against set the agreed
        Targets and overall Role Deliverables.
        Supervisors will assess and comment with
        evidence the Appraisee's Performance /
        Achievement and / or Non - Achievement during the Period.
    </h6>

    <div class="col-md-12" style="margin-top:5px;">
       
        <table>
            <tr>
                <td colspan="4" style="font-weight:bolder;">Perspective Total weights (Please refer to the set weights here as you complete this section)</td>
            </tr>

            <tr>
                <td style="padding: 15px;">
                    <strong>Customer:</strong>
                    @if (perspweightscustomer != null)
                    {
                        @perspweightscustomer.WeightPercentage
                    }
                    else
                    {
                        <h6 style="color:red;background-color:ghostwhite; font-weight:bold;">Not Captured</h6>
                    }
                </td>

                <td style="padding: 15px;">
                    <strong>Financial:</strong>
                    @if (perspweightsfinancial != null)
                    {
                        @perspweightsfinancial.WeightPercentage
                    }
                    else
                    {
                        <h6 style="color:red;background-color:ghostwhite; font-weight:bold;">Not Captured</h6>
                    }

                </td>

                <td style="padding: 15px;">
                    <strong>Internal Processes:</strong>
                    @if (perspweightsinternal != null)
                    {
                        @perspweightsinternal.WeightPercentage
                    }
                    else
                    {
                        <h6 style="color:red;background-color:ghostwhite; font-weight:bold;">Not Captured</h6>
                    }

                </td>

                <td style="padding: 15px;">
                    <strong>Learning and Growth:</strong>
                    @if (perspweightslearning != null)
                    {
                        @perspweightslearning.WeightPercentage
                    }
                    else
                    {
                        <h6 style="color:red;background-color:ghostwhite; font-weight:bold;">Not Captured</h6>
                    }

                </td>

            </tr>
        </table>
    </div>

    <div class="col-md-12" style="margin-top:5px;">


        <SfGrid @ref="TargetsettingGrid" ID="Grid" TValue="BalanceScoreCardTargetSetting" DataSource="@datasource"
                AllowGrouping="true" ShowColumnChooser="true" AllowTextWrap="true"
                AllowPaging="false" AllowFiltering="false" GridLines="GridLine.Both" AllowSelection="true">
            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
            <GridEvents CellSelected="CellSelectHandler"
                        CellSaved="CellSavedHandler"
                        OnCellSave="CellSaveHandler"
                        QueryCellInfo="QueryCellInfoHandlerTargets"
                        OnCellEdit="CellEditHandlerTargets"
                        TValue="BalanceScoreCardTargetSetting">
            </GridEvents>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridAggregates>
                <GridAggregate>
                    <GridAggregateColumns>
                        <GridAggregateColumn Field=@nameof(BalanceScoreCardTargetSetting.IndividualTargetWeight) Type="Syncfusion.Blazor.Grids.AggregateType.Sum">
                            <GroupFooterTemplate Context="GFTemplateContext">
                                @{
                                    aggregate = (GFTemplateContext as AggregateTemplateContext);
                                    <div>
                                        <p span style="color:Purple;">Total: @aggregate.Sum %</p>
                                    </div>
                                }
                            </GroupFooterTemplate>
                        </GridAggregateColumn>

                        <GridAggregateColumn Field=@nameof(BalanceScoreCardTargetSetting.IndividualTargetObjectiveScore)
                                             Type="Syncfusion.Blazor.Grids.AggregateType.Sum"
                                             Format="N1">
                            <GroupFooterTemplate Context="FTemplateContext">
                                @{
                                    aggregate = (FTemplateContext as AggregateTemplateContext);
                                    <div>
                                        @if (@aggregate != null)
                                        {
                                            <p style="color:purple;">@aggregate.Sum %</p>
                                        }
                                    </div>
                                }
                            </GroupFooterTemplate>
                        </GridAggregateColumn>

                        <GridAggregateColumn Field=@nameof(BalanceScoreCardTargetSetting.IndividualTargetObjectiveScore)
                                             Type="Syncfusion.Blazor.Grids.AggregateType.Sum"
                                             Format="N1">
                            <FooterTemplate Context="Footer2TemplateContext">
                                @{
                                    aggregate = (Footer2TemplateContext as AggregateTemplateContext);
                                    <div>
                                        @if (@aggregate != null)
                                        {
                                            <p style="color:purple;">Target Score: @aggregate.Sum %</p>
                                        }
                                    </div>
                                }
                            </FooterTemplate>
                        </GridAggregateColumn>

                    </GridAggregateColumns>



                </GridAggregate>
            </GridAggregates>
            <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Batch" ShowConfirmDialog=false>

            </GridEditSettings>
            <GridGroupSettings Columns="@Div" ShowDropArea="false">
                <CaptionTemplate Context="HeaderCaptionTemplateContext">
                    @{
                        var dvn = (HeaderCaptionTemplateContext as CaptionTemplateContext);

                        string text = string.Empty;
                        if (dvn.Field == "BscPerspectiveTypeId" && BscPerspectiveTypeData != null)
                        {
                            var data = BscPerspectiveTypeData.FirstOrDefault(o => o.BscPerspectiveTypeId.ToString() == dvn.Key);
                            if (data != null)
                            {
                                text = data.BscPerspectiveTypeDescription;
                            }
                        }
                        //if (dvn.Field == "PerspectiveTotalWeight")
                        //{
                        //    text = "Perspective Total Weight: " + dvn.Key;
                        //}
                        <div><p class="pp"><strong>@text</strong></p></div>
                    }
                </CaptionTemplate>
            </GridGroupSettings>
            <GridColumns>
                <GridColumn Type="ColumnType.CheckBox" Width="50" Visible=false></GridColumn>
                <GridColumn Field=@nameof(BalanceScoreCardTargetSetting.TargetSettingId) HeaderText="TargetSettingId" Visible=false IsPrimaryKey="true" Width="150"></GridColumn>
                <GridColumn Field=@nameof(BalanceScoreCardTargetSetting.BalanceScoreCardId) HeaderText="BalanceScoreCardId" TextAlign="TextAlign.Right" AllowEditing="false" ValidationRules="@(new ValidationRules { Required = false })" EditType="EditType.NumericEdit" Visible=false Width="180" IsFrozen="false"></GridColumn>
                <GridForeignColumn Field=@nameof(BalanceScoreCardTargetSetting.BscPerspectiveTypeId)
                                   HeaderText="Perspective"
                                   Width="100"
                                   AllowEditing="false"
                                   ForeignKeyField="@(nameof(ABscPerspectivesType.BscPerspectiveTypeId))"
                                   ForeignKeyValue="@(nameof(ABscPerspectivesType.BscPerspectiveTypeDescription))"
                                   ForeignDataSource="@BscPerspectiveTypeData"
                                   AllowFiltering="false"
                                   IsFrozen="false"
                                   Visible=true
                                   CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                </GridForeignColumn>
                <GridColumn HeaderText="Perspective Total Weight"
                            Width="60"
                            AllowEditing="false"
                            Field=@nameof(BalanceScoreCardTargetSetting.PerspectiveTotalWeight)
                            EditType="EditType.NumericEdit"
                            IsFrozen="false"
                            Format="N1"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                </GridColumn>


                @*Employee Performance Setting*@
                <GridColumn HeaderText="Employee Performance Setting"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                    <GridColumns>
                        <GridForeignColumn Field=@nameof(BalanceScoreCardTargetSetting.BsckpidetailsId)
                                           HeaderText="Key Performance Indicator (KPI)"
                                           TextAlign="TextAlign.Justify"
                                           Width="80"
                                           AllowEditing="false"
                                           ForeignKeyField="@(nameof(ABscKpidetails.BsckpidetailsId))"
                                           ForeignKeyValue="@(nameof(ABscKpidetails.Objective))"
                                           ForeignDataSource="@KpiDetailsData"
                                           IsFrozen="false"
                                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                        </GridForeignColumn>
                        <GridForeignColumn Field=@nameof(BalanceScoreCardTargetSetting.MeasurementMetricId)
                                           HeaderText="Performance Measurement/Metric"
                                           TextAlign="TextAlign.Justify"
                                           Width="70"
                                           AllowEditing="false"
                                           ForeignKeyField="@(nameof(AMeasurementMetric.MeasurementMetricId))"
                                           ForeignKeyValue="@(nameof(AMeasurementMetric.MeasurementMetricDesc))"
                                           ForeignDataSource="@MeasurementUnitData"
                                           ClipMode="ClipMode.EllipsisWithTooltip"
                                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                        </GridForeignColumn>

                        <GridColumn Field=@nameof(BalanceScoreCardTargetSetting.IndividualTargetWeight)
                                    HeaderText="Individual Target Weight (%)"
                                    TextAlign="TextAlign.Justify"
                                    AllowEditing="false"
                                    EditType="EditType.NumericEdit"
                                    Format="###.##"
                                    Width="50"
                                    EditorSettings="@(new NumericEditCellParams() {Params = new Syncfusion.Blazor.Inputs.NumericTextBoxModel<object>(){ShowSpinButton=false}})"
                                    ValidationRules="@(new ValidationRules { Required = false, Min = 1 , Max=100 })"
                                    IsFrozen="false"
                                    ClipMode="ClipMode.EllipsisWithTooltip"
                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                        </GridColumn>

                        <GridColumn Field=@nameof(BalanceScoreCardTargetSetting.EvidenceId)
                                    HeaderText="Evidence"
                                    TextAlign="TextAlign.Justify"
                                    AllowEditing="@IsEmployeeEnabledColumn"
                                    ValidationRules="@(new ValidationRules { Required = false })"
                                    Width="80"
                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                            <Template Context="EvidenceContext">
                                <SfTextBox Multiline=true rowspan="8" @bind-Value=@((EvidenceContext as BalanceScoreCardTargetSetting).EvidenceId) Placeholder="Please Type" FloatLabelType="FloatLabelType.Never" Enabled="@IsEmployeeEnabledColumn"></SfTextBox>
                            </Template>
                            <EditTemplate Context="EvidenceContext">
                                <SfTextBox Multiline=true rowspan="8" @bind-Value=@((EvidenceContext as BalanceScoreCardTargetSetting).EvidenceId) Placeholder="Please Type" FloatLabelType="FloatLabelType.Never" Enabled="@IsEmployeeEnabledColumn"></SfTextBox>
                            </EditTemplate>
                        </GridColumn>

                        <GridColumn Field=@nameof(BalanceScoreCardTargetSetting.EmployeeSelfAssessTgt)
                                    HeaderText="Employee Self Assessment % Target Achievement"
                                    TextAlign="TextAlign.Justify"
                                    AllowEditing="@IsEmployeeEnabledColumn"
                                    EditType="EditType.NumericEdit"
                                    Format="###.##"
                                    Width="70"
                                    EditorSettings="@(new NumericEditCellParams() {Params = new Syncfusion.Blazor.Inputs.NumericTextBoxModel<object>(){ShowSpinButton=false}})"
                                    ValidationRules="@(new ValidationRules { Required = false, Min = 1 , Max=100 })"
                                    ClipMode="ClipMode.EllipsisWithTooltip"
                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                        </GridColumn>

                    </GridColumns>
                </GridColumn>

                <GridColumn HeaderText="Supervisor Assessment"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                    <GridColumns>
                        <GridColumn Field=@nameof(BalanceScoreCardTargetSetting.SupervisorAssessTgt)
                                    HeaderText="Supervisor Assessment % Target Achievement"
                                    TextAlign="TextAlign.Justify"
                                    AllowEditing="@IsSupervisorEnabledColumn"
                                    EditType="EditType.NumericEdit"
                                    Format="###.##"
                                    Width="70"
                                    EditorSettings="@(new NumericEditCellParams() {Params = new Syncfusion.Blazor.Inputs.NumericTextBoxModel<object>(){ShowSpinButton=false}})"
                                    ValidationRules="@(new ValidationRules { Required = false, Min = 1 , Max=100 })"
                                    ClipMode="ClipMode.EllipsisWithTooltip"
                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                        </GridColumn>
                        <GridColumn Field=@nameof(BalanceScoreCardTargetSetting.SupervisorComments)
                                    HeaderText="Supervisor Comments"
                                    TextAlign="TextAlign.Justify"
                                    AllowEditing="@IsSupervisorEnabledColumn"
                                    ValidationRules="@(new ValidationRules { Required = false })"
                                    Width="60"
                                    ClipMode="ClipMode.EllipsisWithTooltip"
                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                            <Template Context="SupervisorCommentsContext">
                                <SfTextBox Multiline=true rowspan="8" @bind-Value=@((SupervisorCommentsContext as BalanceScoreCardTargetSetting).SupervisorComments) Placeholder="Please Type" FloatLabelType="FloatLabelType.Never" Enabled="@IsSupervisorEnabledColumn"></SfTextBox>
                            </Template>
                            <EditTemplate Context="SupervisorCommentsContext">
                                <SfTextBox Multiline=true rowspan="8" @bind-Value=@((SupervisorCommentsContext as BalanceScoreCardTargetSetting).SupervisorComments) Placeholder="Please Type" FloatLabelType="FloatLabelType.Never" Enabled="@IsSupervisorEnabledColumn"></SfTextBox>
                            </EditTemplate>
                        </GridColumn>
                        <GridColumn Field="@(nameof(BalanceScoreCardTargetSetting.IndividualTargetObjectiveScore))"
                                    Format="N1"
                                    AllowEditing=false
                                    HeaderText="Individual Target/Objective Score (%)"
                                    TextAlign="TextAlign.Justify"
                                    Visible=true
                                    Width="60"
                                    ClipMode="ClipMode.EllipsisWithTooltip"
                                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                        </GridColumn>
                    </GridColumns>
                </GridColumn>

            </GridColumns>

        </SfGrid>

    </div>

}

else
{
    var yeardesc = FinancialYearData?
    .FirstOrDefault(o => o.Id == @finyearid);
    @if (yeardesc != null)
    {
        <p><span style="font-size: 20px; color:#ecf0f1 background-color:#c0392b;">You currently have no targets set for the financial year @yeardesc.FinancialYear. Kindly go under the targets menu to have your targets set.</span></p>
    }
}

@code
{
    [Parameter]
    public List<BalanceScoreCardTargetSetting>? targetdata { get; set; }
    [Parameter]
    public int BalanceScoreCardId { get; set; }
    [Parameter]
    public EventCallback<List<BalanceScoreCardTargetSetting>?> onscorecardtoggle { get; set; }
    public SfGrid<BalanceScoreCardTargetSetting>? TargetsettingGrid { get; set; }
    List<BalanceScoreCardTargetSetting>? datasource { get; set; }
    [Parameter]
    public List<ViewABscKpidetails>? PopulatedData { get; set; }
    [Parameter]
    public List<ABscPerspectivesType>? BscPerspectiveTypeData { get; set; }
    [Parameter]
    public List<ABscKpidetails>? KpiDetailsData { get; set; }
    [Parameter]
    public List<AMeasurementMetric>? MeasurementUnitData { get; set; }
    [Parameter]
    public List<AFinancialYear>? FinancialYearData { get; set; }


    [Parameter]
    public int? finyearid { get; set; }
    [Parameter]
    public int? sectionid { get; set; }
    [Parameter]
    public int? departmentid { get; set; }
    [Parameter]
    public bool IsEmployeeEnabledColumn  { get; set; }
    [Parameter]
    public bool IsSupervisorEnabledColumn { get; set; }
    Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }
    int? previousBalanceScoreCardId { get; set; }
    [Parameter]
    public List<ViewABscPerspectivesDetail>? PerspectivesDetailData { get; set; }

    [Parameter]
    public ViewABscPerspectivesDetail? perspweightsfinancial { get; set; }
    [Parameter]
    public ViewABscPerspectivesDetail? perspweightsinternal { get; set; }
    [Parameter]
    public ViewABscPerspectivesDetail? perspweightscustomer { get; set; }
    [Parameter]
    public ViewABscPerspectivesDetail? perspweightslearning { get; set; }
    [Parameter]
    public LoginResultModel? Credentials { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(previousBalanceScoreCardId!=BalanceScoreCardId)
        {
            int countid = -10000;
            previousBalanceScoreCardId = BalanceScoreCardId;
            datasource = new List<BalanceScoreCardTargetSetting>();
            if(targetdata != null && targetdata.Count() > 0)
            {
                datasource.AddRange(targetdata);            
            }
            else
            {
                // if(PopulatedData != null)
                // {
                //     foreach (var item in PopulatedData)
                //     {
                //         var m = new BalanceScoreCardTargetSetting();
                //         m.TargetSettingId = countid;
                //         m.BscPerspectiveTypeId = item.BscPerspectiveTypeId;
                //         //m.PerspectiveTotalWeight = item.PerspectiveTotalWeight; //Check if department weight is same as this
                //         m.BsckpidetailsId = item.BsckpidetailsId;
                //         m.MeasurementMetricId = item.MeasurementMetricId;
                //         m.IndividualTargetWeight = item.IndividualTargetWeight;

                //         datasource.Add(m);
                //         countid++;
                //     }

                //     datasource = datasource.OrderBy(o => o.BscPerspectiveTypeId).ToList();
                // }       

                if (PopulatedData != null && PerspectivesDetailData != null)
                {
                    foreach (var item in PopulatedData)
                    {
                        var _perspectivetype = PerspectivesDetailData.FirstOrDefault(o=>o.BscPerspectiveTypeId == item.BscPerspectiveTypeId);
                        var m = new BalanceScoreCardTargetSetting();
                        m.TargetSettingId = countid;
                        m.BscPerspectiveTypeId = item.BscPerspectiveTypeId;
                        //m.PerspectiveTotalWeight = _perspectivetype.PerspectiveTotalWeight; 
                        m.BsckpidetailsId = item.BsckpidetailsId;
                        m.MeasurementMetricId = item.MeasurementMetricId;
                        m.IndividualTargetWeight = item.IndividualTargetWeight;

                        datasource.Add(m);
                        countid++;
                    }

                    datasource = datasource.OrderBy(o => o.BscPerspectiveTypeId).ToList();
                }
            }
        }
    }

    #region TargetMethods

    //For Target Grid
    //Enable cell edit on single click
    public async Task CellSelectHandler(CellSelectEventArgs<BalanceScoreCardTargetSetting> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await TargetsettingGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await TargetsettingGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await TargetsettingGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    //Save Cel Without Stopping User From Capturing Data
    // private async Task CellSavedHandler(CellSaveArgs<BalanceScoreCardTargetSetting> args)
    // {
    //     try
    //     {
    //         await TargetsettingGrid.EndEdit();
    //         // get the row index using the primarykey value
    //         var RowIndex = await TargetsettingGrid.GetRowIndexByPrimaryKey(args.RowData.TargetSettingId);
    //         // edit the selected cell using the cell index and column name
    //         await TargetsettingGrid.EditCell(RowIndex + 1, args.ColumnName);

    //         var index = await TargetsettingGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.TargetSettingId);
    //         if (args.ColumnName == nameof(BalanceScoreCardTargetSetting.IndividualTargetWeight) || args.ColumnName == nameof(BalanceScoreCardTargetSetting.SupervisorAssessTgt))
    //         {
    //             double targetobjectivescore = 0;
    //             double individualtargetweight = 0;
    //             double supervisorassesstarget = 0;

    //             if (args.Data.IndividualTargetWeight.HasValue)
    //             {
    //                 individualtargetweight = args.Data.IndividualTargetWeight.Value;
    //             }
    //             if (args.Data.SupervisorAssessTgt.HasValue)
    //             {
    //                 supervisorassesstarget = args.Data.SupervisorAssessTgt.Value;
    //             }
                
    //             //targetobjectivescore = ((((double)individualtargetweight) / 100 * ((double)supervisorassesstarget) / 100) * 100);
    //             //Individual Target Weight * Supervisor Assesment Percentage Divide By 100%
    //             targetobjectivescore = ((((double)individualtargetweight) * ((double)supervisorassesstarget))/100);
    //             await TargetsettingGrid.UpdateCellAsync(index, nameof(BalanceScoreCardTargetSetting.IndividualTargetObjectiveScore), targetobjectivescore);
    //         }

    //         // if (!object.Equals(args.Value, args.PreviousValue))
    //         // {
    //         //     await TargetsettingGrid.EndEdit();
    //         //     // get the row index using the primarykey value
    //         //     var RowIndex = await TargetsettingGrid.GetRowIndexByPrimaryKey(args.RowData.TargetSettingId);
    //         //     // edit the selected cell using the cell index and column name
    //         //     await TargetsettingGrid.EditCell(RowIndex + 1, args.ColumnName);
    //         // }
    //     }
    //     catch(Exception ex)
    //     {
    //         toastService.ShowError(ex.Message);
    //     }
    //     finally
    //     {
    //         //await TargetsettingGrid.EndEditAsync();
    //         await onscorecardtoggle.InvokeAsync(datasource);
    //     }
        
    // }

    private async Task CellSavedHandler(CellSaveArgs<BalanceScoreCardTargetSetting> args)
    {
        try
        {
            var index = await TargetsettingGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.TargetSettingId);
            if (args.ColumnName == nameof(BalanceScoreCardTargetSetting.IndividualTargetWeight) || args.ColumnName == nameof(BalanceScoreCardTargetSetting.SupervisorAssessTgt))
            {
                double targetobjectivescore = 0;
                double individualtargetweight = 0;
                double supervisorassesstarget = 0;

                if (args.Data.IndividualTargetWeight.HasValue)
                {
                    individualtargetweight = args.Data.IndividualTargetWeight.Value;
                }
                if (args.Data.SupervisorAssessTgt.HasValue)
                {
                    supervisorassesstarget = args.Data.SupervisorAssessTgt.Value;
                }
                
                //targetobjectivescore = ((((double)individualtargetweight) / 100 * ((double)supervisorassesstarget) / 100) * 100);
                //Individual Target Weight * Supervisor Assesment Percentage Divide By 100%
                targetobjectivescore = ((((double)individualtargetweight) * ((double)supervisorassesstarget))/100);
                await TargetsettingGrid.UpdateCellAsync(index, nameof(BalanceScoreCardTargetSetting.IndividualTargetObjectiveScore), targetobjectivescore);
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await TargetsettingGrid.EndEditAsync();
            await onscorecardtoggle.InvokeAsync(datasource);
        }
    }

    public async Task CellSaveHandler(CellSaveArgs<BalanceScoreCardTargetSetting> args)
    {
        if (args.ColumnName == nameof(BalanceScoreCardTargetSetting.EmployeeSelfAssessTgt)
        || args.ColumnName == nameof(BalanceScoreCardTargetSetting.SupervisorAssessTgt))
        {
            //Disable editing next cell if value in previous cell is greater than 100%
            if (Convert.ToInt32(args.Value) > 100)
            {
                toastService.ClearAll();
                toastService.ShowWarning("You cannot enter a % greater than 100 %");
                args.Cancel = true;
            }

            // else if (args.Data.EmployeeSelfAssessTgt > args.Data.IndividualTargetWeight)
            // {
            //     toastService.ClearAll();
            //     toastService.ShowWarning("The employee self assessment % target achievement value should not exceed the Individual target weight. Input will not be captured");

            //     args.Cancel = true;
            // }

            // https://www.syncfusion.com/forums/180016/change-cell-background-color-when-another-cell-is-modified
            //https://support.syncfusion.com/support/tickets/534347 -- ticket link

            // else if (args.Data.EmployeeSelfAssessTgt > args.Data.IndividualTargetWeight)
            // {
            //     if (args.Column.Field == "EmployeeSelfAssessTgt")
            //     {
            //         args.CellInfo.AddStyle(new string[] { "background-color: red", "color:white" });
            //         toastService.ClearAll();
            //         toastService.ShowWarning("The employee self assessment % target achievement value should not exceed the Individual target weight. Input will not be captured");

            //         args.Cancel = true;
            //     }

            //     // if(TargetsettingGrid != null)
            //     // {
            //     //     var ColumnIndex = await TargetsettingGrid.GetColumnIndexByFieldAsync(args.ColumnName);
            //     //     var rowindex = await TargetsettingGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.TargetSettingId);
            //     //     var index = args.Column.Index + 1;
            //     //     await JSRuntime.InvokeVoidAsync("highlightHeader", index, rowindex);
            //     // }                
            // }
            
            // else if (args.Data.SupervisorAssessTgt > args.Data.IndividualTargetWeight)
            // {
            //     toastService.ClearAll();
            //     toastService.ShowWarning("The supervisor assessment % target achievement value should not exceed the Individual target weight. Input will not be captured");
            //     args.Cancel = true;
            // }
            else
            {
                args.Cancel = false;
            }
        }
    }

    public void QueryCellInfoHandlerTargets(QueryCellInfoEventArgs<BalanceScoreCardTargetSetting> args)
    {
        if ((args.Column.Field == "EmployeeSelfAssessTgt" || args.Column.Field == "SupervisorAssessTgt" ) && args.Column.Field == "EmployeeSelfAssessTgt")
        {
           if (args.Data.EmployeeSelfAssessTgt > args.Data.IndividualTargetWeight)
            {
                //args.Cell.AddClass(new string[] { "takeaction" });
            } 
            
        }
        //if (_previous == Syncfusion.Blazor.Grids.Action.Add)
        //{
        //    if (Args.Column.Field == nameof(BalanceScoreCardTargetSetting.SupervisorAssessTgt))
        //    {
        //        Args.Cell.AddClass(new string[] { "disablecolumn" });
        //    }
        //}
        //else if(_previous == Syncfusion.Blazor.Grids.Action.BeginEdit)
        //{

        //}
    }

    public void CellEditHandlerTargets(CellEditArgs<BalanceScoreCardTargetSetting> args)
    {
        //if(IsSupervisorEnabledColumn == false)
        //{
        //    toastService.ShowWarning("Sorry ! You are not permitted to capture details here !");
        //    args.Cancel = true;
        //}
        //else
        //{
        //    args.Cancel = false;
        //}
    }

    #endregion TargetMethods
}

<style>
/*QueryCellInfoCSS*/
    /*Change background color*/
    .takeaction {
        background-color: red;
    }
/*Change color for text in Grid*/
    .e-grid .e-gridcontent .e-rowcell.takeaction 
    {
        color: ghostwhite;
    }

</style>
