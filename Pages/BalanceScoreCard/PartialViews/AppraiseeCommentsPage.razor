@* @page "/AppraiseeCommentsPage" *@
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Interface;
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@inject IAuthenticationService AuthService;

<SfGrid @ref="@AppraiseeCommentsGrid" DataSource="@datasource" GridLines="GridLine.Both"
        TValue="BalanceScoreCardAppraiseeComments" ID="Grid1" AllowTextWrap="true" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add","Cancel"})">
    <GridEditSettings AllowAdding="appraiseegridenabled" AllowEditing="appraiseegridenabled" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
    <GridEvents CellSelected="CellSelectHandlerAppraiseeComments"
                CellSaved="AppraiseeCommentsCellSavedHandler"
                OnBatchAdd="BatchAddHandler"
                TValue="BalanceScoreCardAppraiseeComments">
    </GridEvents>

    <GridColumns>
        <GridColumn Field=@nameof(BalanceScoreCardAppraiseeComments.AppraiseeCommentsId)
                    HeaderText="Appraisee Comments Id"
                    TextAlign="TextAlign.Justify"
                    IsPrimaryKey="true"
                    IsIdentity="true"
                    Visible="false"
                    Width="180"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
        <GridColumn Field=@nameof(BalanceScoreCardAppraiseeComments.AppraiseeComments)
                    HeaderText="Appraisee Comments"
                    TextAlign="TextAlign.Justify"
                    AllowEditing="true"
                    ValidationRules="@(new ValidationRules { Required = false })"
                    Width="180"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
        <GridColumn Field=@nameof(BalanceScoreCardAppraiseeComments.AppraiseeDate)
                    DefaultValue="@(DateTime.Now)"
                    HeaderText="Appraisee Date"
                    EditType="EditType.DatePickerEdit"
                    Format="dd/MM/yyyy"
                    Type="ColumnType.Date"
                    Width="160"
                    AllowEditing="false"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    [Parameter]
    public List<BalanceScoreCardAppraiseeComments>? appraiseecommentsdata { get; set; }
    [Parameter]
    public int BalanceScoreCardId { get; set; }
    [Parameter]
    public EventCallback<List<BalanceScoreCardAppraiseeComments>?> onscorecardtoggle { get; set; }
    public SfGrid<BalanceScoreCardAppraiseeComments>? AppraiseeCommentsGrid { get; set; }
    List<BalanceScoreCardAppraiseeComments>? datasource { get; set; }

    Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }
    int? previousBalanceScoreCardId { get; set; }
    [Parameter]
    public Syncfusion.Blazor.Grids.Action _previous { get; set; }
    [Parameter]
    public bool appraiseegridenabled { get; set; }
    int random = -9999;

    protected override async Task OnInitializedAsync()
    {
        if (previousBalanceScoreCardId != BalanceScoreCardId)
        {
            int countid = -10000;
            previousBalanceScoreCardId = BalanceScoreCardId;
            datasource = new List<BalanceScoreCardAppraiseeComments>();
            if (appraiseecommentsdata != null && appraiseecommentsdata.Count() > 0)
            {
                datasource.AddRange(appraiseecommentsdata);
            }
        }
    }
    //For Appraisee Comments Grid
    //Enable cell edit on single click
    public async Task CellSelectHandlerAppraiseeComments(CellSelectEventArgs<BalanceScoreCardAppraiseeComments> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await AppraiseeCommentsGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await AppraiseeCommentsGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await AppraiseeCommentsGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    private async Task AppraiseeCommentsCellSavedHandler(CellSaveArgs<BalanceScoreCardAppraiseeComments> args)
    {
        try
        {
            var index = await AppraiseeCommentsGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.AppraiseeCommentsId);
            if (args.ColumnName == nameof(BalanceScoreCardAppraiseeComments.AppraiseeComments))
            {
                await AppraiseeCommentsGrid.UpdateCellAsync(index, nameof(BalanceScoreCardAppraiseeComments.AppraiseeDate), DateTime.Now);
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await AppraiseeCommentsGrid.EndEditAsync();
            await onscorecardtoggle.InvokeAsync(datasource);
        }
    }

    public void BatchAddHandler(BeforeBatchAddArgs<BalanceScoreCardAppraiseeComments> Args)
    {
        Args.DefaultData.AppraiseeCommentsId = random;
        random++;
    }
}
