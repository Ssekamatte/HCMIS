@page "/SummaryPage"
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Interface;
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;
@using HCMIS.SHARED.DTOs.BSC;
@using HCMIS.SHARED.DTOs.Utilities;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@inject IAuthenticationService AuthService;

<style>
	table, th, td {
	  border: 1px solid black;
	  border-collapse: collapse;
	}
</style>

<table style="width:100%;font-size:20px;  margin-top:10px;">
    <tr>
        <td>

        </td>
        <td colspan="2">
            <h6>Overall 70% Maximum as a Technical Target Score</h6>
        </td>
        <td>
            <h6>70%</h6>
        </td>
        <td>

        </td>
        <td>
            <h6>0%</h6>
        </td>
    </tr>

    <tr>
        <td>
            Values & Behavioral Competency
        </td>
        <td>
            <h6>30%</h6>
        </td>
        <td>
            <h6>Overall 30% Score as NH & CC Values / Behavior Competencies</h6>
        </td>
        <td>
            30%
        </td>
        <td>

        </td>
        <td>
            <h6>3%</h6>
            
        </td>
    </tr>

    <tr>
        <td>
            
        </td>
        <td>
            
        </td>
        <td style="background-color:#ffd966">
            <h6 style="font-weight:bolder;background-color:#ffd966;">OVERALL SCORE 100% ( TECHNICAL 70%  + VALUES /  BEHAVIOUR 30%)</h6>
        </td>
        <td style="background-color:#ffd966;font-weight:bolder">
            100%
        </td>
        <td>
        </td>
        <td style="background-color:#ffd966">
            @{               
                if (TargetSettingTotalData != null)
                {
                    var _targetdata = TargetSettingTotalData.FirstOrDefault(o => o.BalanceScoreCardId == BalanceScoreCardId);
                    if (_targetdata != null)
                    {
                        totaltargetsetting = @_targetdata.TotalIndividualTargetObjectiveScore;
                    }
                }

                if (BehavioralTotalData != null)
                {
                    var _behavioraldata = BehavioralTotalData.FirstOrDefault(o => o.BalanceScoreCardId == BalanceScoreCardId);
                    if (_behavioraldata != null)
                    {
                        totalbehavioral = @_behavioraldata.TotalSupervisorAssessment;
                    }
                }
            }
            <h6 style="color:black;font-size: 20px;font-weight:bolder;background-color:#ffd966;">@(totaltargetsetting + totalbehavioral)%</h6>
        </td>
    </tr>
</table>

<table style="width:100%;font-size:20px; margin-top:2px;">
    <tr style="font-weight:bolder;">
        <td>

        </td>
        <td>
            OVERALL RATING ( TECHNICAL + VALUES /  BEHAVIOUR)
        </td>
        <td>
            3%
        </td>
    </tr>
    <tr>
        <td>

        </td>
        <td colspan="6">
            <h6>POOR PERFORMANCE</h6>
        </td>
    </tr>
</table>

<table style="width:100%;font-size:20px; margin-top:2px;">
    
    @if (ScaleData != null)
    {
        
        <tr style="font-weight:bolder;">
            <td rowspan="2">
                <h6>
                    Please note the Overall Assessment
                    is derived from the "Performance Descriptors"
                    below in relation to the Appraise Performance Achievement
                </h6>
            </td>
            @for (int i = 0; i <= (ScaleData.Count - 1); i++)
            {
                <td>@ScaleData[i].PerformanceDescription</td>
            }
        </tr>
        <tr>            
            @for (int i = 0; i <= (ScaleData.Count - 1); i++)
            {                
                <td>@ScaleData[i].MinimumMark% - @ScaleData[i].MaximumMark%</td>
            }
        </tr>
    }
    
    @if (PerformanceDescriptorData != null)
    {
        <tr style="font-weight:bolder;">
            <td rowspan="2">
                <h6>
                    Please note each Value / Behavior  Assessment
                    is derived from the "Performance Descriptors"
                    selected from the Drop Down provided
                </h6>
            </td>
            <td></td>
            @for (int i = 0; i <= (PerformanceDescriptorData.Count - 1); i++)
            {
                <td>@PerformanceDescriptorData[i].PerformanceDescriptor</td>
            }
        </tr>
        <tr>
            <td></td>
            @for (int i = 0; i <= (PerformanceDescriptorData.Count - 1); i++)
            {
                <td>@PerformanceDescriptorData[i].PerformanceScore%</td>
            }
        </tr>
    }

</table>

@code {
    LoginResultModel? Credentials { get; set; }
    List<APerformanceScaleDto>? ScaleData { get; set; }
    List<PerformanceDescriptorDto>? PerformanceDescriptorData { get; set; }
    List<ViewTargetSettingTotalsDto>? TargetSettingTotalData { get; set; }
    List<ViewBehavioralTotalsDto>? BehavioralTotalData { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    [Parameter]
    public int BalanceScoreCardId { get; set; }
    double? totaltargetsetting = 0;
    double? totalbehavioral = 0;
    protected override async Task OnInitializedAsync()
    {
        Credentials = await AuthService.GetUserCredentials();


        List<Task> t = new List<Task>();
        t.Add(Task.Run(async () =>
        {
            var responsemetric = await Http.GetAsync($"Utilities/GetPerformanceScale");
            if (responsemetric.IsSuccessStatusCode)
            {
                var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                ScaleData = JsonSerializer.Deserialize<List<APerformanceScaleDto>>(contentmetric, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseperformancedescriptor = await Http.GetAsync($"PerformanceDescriptor/GetPerformanceDescriptor");
            if (responseperformancedescriptor.IsSuccessStatusCode)
            {
                var contentperformancedescriptor = await responseperformancedescriptor.Content.ReadAsStringAsync();
                PerformanceDescriptorData = JsonSerializer.Deserialize<List<PerformanceDescriptorDto>>(contentperformancedescriptor, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsetargettotal = await Http.GetAsync($"BalanceScoreCard/GetTargetTotal");
            if (responsetargettotal.IsSuccessStatusCode)
            {
                var contenttargettotal = await responsetargettotal.Content.ReadAsStringAsync();
                TargetSettingTotalData = JsonSerializer.Deserialize<List<ViewTargetSettingTotalsDto>>(contenttargettotal, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsebehavioraltotal = await Http.GetAsync($"BalanceScoreCard/GetBehavioralTotal");
            if (responsebehavioraltotal.IsSuccessStatusCode)
            {
                var contentbehavioraltotal = await responsebehavioraltotal.Content.ReadAsStringAsync();
                BehavioralTotalData = JsonSerializer.Deserialize<List<ViewBehavioralTotalsDto>>(contentbehavioraltotal, _options);
            }
        }));
        Task _t = Task.WhenAll(t);
        await _t;
    }
}
