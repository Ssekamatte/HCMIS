@* @page "/TrainingEvaluationInstructionsPage" *@
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Interface;
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@inject IAuthenticationService AuthService;


<SfGrid @ref="@InstructionsGrid" DataSource="@datasource" GridLines="GridLine.Both"
        TValue="TrainingEvaluationInstructions" ID="Grid1" AllowTextWrap="true" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="false" AllowSorting="false">
    <GridEditSettings AllowAdding="false" AllowEditing="instructionseditbool" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>

    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
    <GridEvents CellSelected="CellSelectHandler"
                CellSaved="CellSavedHandler"
                TValue="TrainingEvaluationInstructions">
    </GridEvents>

    <GridColumns>
        <GridColumn Field=@nameof(TrainingEvaluationInstructions.InstructionsId)
                    HeaderText="#"
                    TextAlign="TextAlign.Left"
                    IsPrimaryKey="true"
                    IsIdentity="true"
                    Visible="false"
                    Width="50"
                    CustomAttributes="@(new Dictionary<string,
                                                            object>(){ { "class", "e-attr1" }})">
        </GridColumn>

        <GridForeignColumn Field="@nameof(TrainingEvaluationInstructions.StatementId)"
                           Visible="true"
                           HeaderText="Instructions"
                           Width="100"
                           ForeignKeyField="@nameof(ATrainingStatements.StatementId)"
                           ForeignKeyValue="@nameof(ATrainingStatements.StatementDescription)"
                           ForeignDataSource="@StatementsData"
                           ValidationRules="@(new ValidationRules {Required=true})"
                           AllowEditing="false"
                           CustomAttributes="@(new Dictionary<string,
                                                            object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>
        <GridForeignColumn Field="@nameof(TrainingEvaluationInstructions.AgreementLevelId)"
                           Visible="true"
                           HeaderText="Agreement Level"
                           Width="100"
                           ForeignKeyField="@nameof(AAgreementLevel.AgreementLevelId)"
                           ForeignKeyValue="@nameof(AAgreementLevel.AgreementLevelDesc)"
                           ForeignDataSource="@AgreementLevelData"
                           AllowEditing="true"
                           CustomAttributes="@(new Dictionary<string,
                                                            object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>
        @*<GridColumn Field=@nameof(TrainingEvaluationInstructions.StronglyAgree) HeaderText="StronglyAgree" DisplayAsCheckBox="true" Width="150">
        <EditTemplate Context = "templatecontext">
        @{
        <SfCheckBox @bind-Checked="@((context as TrainingEvaluationInstructions).StronglyAgree)" ValueChange="@((args)=>OnChange(args, context as TrainingEvaluationInstructions))" TChecked="bool?"></SfCheckBox>
        }
        </EditTemplate>
        </GridColumn>

        <GridColumn Field=@nameof(TrainingEvaluationInstructions.Agree) HeaderText="Agree" DisplayAsCheckBox="true" Width="150">
        <EditTemplate Context = "templatecontext">
        @{
        <SfCheckBox @bind-Checked="@((context as TrainingEvaluationInstructions).Agree)" ValueChange="@((args)=>OnChange(args, context as TrainingEvaluationInstructions))" TChecked="bool?"></SfCheckBox>
        }
        </EditTemplate>
        </GridColumn>

        <GridColumn Field=@nameof(TrainingEvaluationInstructions.Neutral) HeaderText="Neutral" DisplayAsCheckBox="true" Width="150">
        <EditTemplate Context = "templatecontext">
        @{
        <SfCheckBox @bind-Checked="@((context as TrainingEvaluationInstructions).Neutral)" ValueChange="@((args)=>OnChange(args, context as TrainingEvaluationInstructions))" TChecked="bool?"></SfCheckBox>
        }
        </EditTemplate>
        </GridColumn>*@

        @*<GridColumn Field=@nameof(TrainingEvaluationInstructions.StronglyAgree) HeaderText="Strongly Agree" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="80"
        CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn>
        <GridColumn Field=@nameof(TrainingEvaluationInstructions.Agree) HeaderText="Agree" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="80"
        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>
        <GridColumn Field=@nameof(TrainingEvaluationInstructions.Neutral) HeaderText="Neutral" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="80"
        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>
        <GridColumn Field=@nameof(TrainingEvaluationInstructions.Disagree) HeaderText="Disagree" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="80"
        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>
        <GridColumn Field=@nameof(TrainingEvaluationInstructions.StronglyDisagree) HeaderText="Strongly Disagree" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="80"
        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>*@
    </GridColumns>
</SfGrid>

@code
{
    [Parameter]
    public List<TrainingEvaluationInstructions>? behaviourdata { get; set; }
    [Parameter]
    public int EvaluationId { get; set; }
    [Parameter]
    public EventCallback<List<TrainingEvaluationInstructions>?> onscorecardtoggle { get; set; }
    public SfGrid<TrainingEvaluationInstructions>? InstructionsGrid { get; set; }
    List<TrainingEvaluationInstructions>? datasource { get; set; }
    [Parameter]
    public List<ATrainingStatements>? StatementsData { get; set; }
    [Parameter]
    public List<AAgreementLevel>? AgreementLevelData { get; set; }    
    Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }
    int? previousEvaluationId { get; set; }
    [Parameter]
    public Syncfusion.Blazor.Grids.Action _previous { get; set; }
    [Parameter]
    public bool instructionseditbool { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (previousEvaluationId != EvaluationId)
        {
            int countid = -10000;
            previousEvaluationId = EvaluationId;
            datasource = new List<TrainingEvaluationInstructions>();
            if (behaviourdata != null && behaviourdata.Count() > 0)
            {
                datasource.AddRange(behaviourdata);
            }
            else
            {
                if (StatementsData != null)
                {
                    foreach (var item in StatementsData)
                    {
                        var m = new TrainingEvaluationInstructions();
                        m.InstructionsId = countid;
                        m.StatementId = item.StatementId;

                        datasource.Add(m);
                        countid++;
                    }

                    datasource = datasource.OrderBy(o => o.InstructionsId).ToList();
                }
            }
        }
    }

    #region BehaviourMethods

    //For Behavioral Plan Grid
    //Enable cell edit on single click
    public async Task CellSelectHandler(CellSelectEventArgs<TrainingEvaluationInstructions> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await InstructionsGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await InstructionsGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await InstructionsGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    private async Task CellSavedHandler(CellSaveArgs<TrainingEvaluationInstructions> args)
    {
        try
        {
            
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await InstructionsGrid.EndEditAsync();
            await onscorecardtoggle.InvokeAsync(datasource);
        }
    }

    public async Task OnChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args, TrainingEvaluationInstructions orderdata)
    {    
        if (args.Checked ==  true)
        {
            // Grid.PreventRender(false);

            //orderdata.OrderDate = DateTime.Now.AddDays(14);
        }
         if (args.Checked ==  false)
        {
            // Grid.PreventRender(false);

            //orderdata.OrderDate = DateTime.Now.AddDays(14);
        }
    }

    #endregion BehaviourMethods
}



