@page "/AssessmentSurveyPage"
@using HCMIS.Data
@using HCMIS.Interface
@using HCMIS.Model
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Text.RegularExpressions
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager navManager
@using System.Collections;
@inject IToastService toastService;
@inject IAuthenticationService AuthService;

<style>
    h6 {
        color: ghostwhite;
        background-color: blue;
        padding: 10px;
        width: 100%;
        font-size: 10px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        /*background-color: darkorange;*/
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    p {
        margin-top: 0;
        margin-bottom: 10px;
        font-weight: 700;
        padding-bottom: 20px;
    }
    /**/
    #container {
        position: relative;
        height: 550px;
    }

    .e-spinner-pane.e-spin-overlay {
        background-color: rgb(192,192,192);
    }

    /*hide the Default Grid spinner */
    .e-grid .e-spinner-pane {
        display: none;
    }

    /*Disable select all on grid checkbox*/
    .e-headercelldiv.e-headerchkcelldiv .e-checkbox-wrapper.e-css {
        pointer-events: none;
        opacity: 0.5;
    }
</style>


<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| TRAINING NEEDS ASSESSMENT SURVEY- @DateTime.Now.Year
    </li>
</ol>


<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="@ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false" CssClass="const">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <HCMIS.Pages.Training.PartialViews.SearchTrainingsPage 
                            YearData="@YearData" 
                            finyearid="@finyearid" 
                            onsearchtoggle="@ToggleSearchQuery">
                        </HCMIS.Pages.Training.PartialViews.SearchTrainingsPage>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>
    </div>
</div>

<div class="form-group col-md-12">
    <SfSpinner @ref="SpinnerObj" Label="Loading Please Wait....." Size="50" ZIndex="1001">
        @*Render custom spinner component.*@
    </SfSpinner>
</div>

    <div class="row">
        <div class="col-md-12">            
                @if (DeadlineData != null)
                {
                    var ddate = DeadlineData.OrderByDescending(o=>o.DeadlineId).FirstOrDefault();
                    if (ddate != null)
                    {
                        string DeadlineDate = ddate.DeadlineDate.Value.ToString("dd/MMMM/yyyy");
                        int DeadlineYear = ddate.DeadlineDate.Value.Year;
                        string outputtime = ddate.DeadlineDate.Value.ToString("HH:mm:ss");

                        if ((ddate.DeadlineDate.Value >= DateTime.Now))
                        {     
                            <h4>Introduction</h4>
                            <h3>
                                To enable the Human Resource and Administration
                                department arrange appropriate Skills enhancement
                                training programmes, you are requested to participate
                                in the Training Needs Assessment Survey. Kindly respond
                                by <strong style="color:red;font-family: cursive;">@DeadlineDate</strong>, to enable us consolidate the
                                training calendar for <strong style="color:red;font-family: cursive;">@DeadlineYear</strong>
                            </h3>
                        }
                        else
                        {
                            <p style="background-color: red;font-size: larger;color: ghostwhite;">Deadline (@DeadlineDate at @outputtime) has arleady passed. You cannot add or update the form(s)</p>
                        }
                        
                    }
                }
            
        </div>
 
        <SfGrid @ref="@DataGrid"
                TValue="TrainingAssessmentSurvey"
                ID="Grid"
                AllowPaging="true"
                AllowFiltering="false"
                AllowReordering="true"
                AllowResizing="true"
                AllowGrouping="false"
                AllowExcelExport="true"
                AllowPdfExport="true"
                AllowSelection="true"
                AllowSorting="true"
                @attributes="@GridAttributes"
                Query="@MainQuery"
                GridLines="GridLine.Both"
                AllowTextWrap="true" Toolbar="@ToolbarMenu">

        <GridEditSettings AllowAdding="@activationbooladd" AllowDeleting="false" AllowEditing="@activationbooledit" Mode="@EditMode.Dialog" Dialog="DialogParams">
        @*<GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">*@
            <HeaderTemplate>
                @{
                    var text = GetAssessmentHeader((context as TrainingAssessmentSurvey));
                    <div class="headerbandimg" />
                    <span>@text</span>
                }
            </HeaderTemplate>
            <Template>
                @{
                    assessmentdata = (context as TrainingAssessmentSurvey);
                    <div>
                        <div class="row">
                            <div class="col-md-6" hidden="hidden">
                                <SfNumericTextBox ID="AssessmentId" @bind-Value="@(assessmentdata.AssessmentId)" Placeholder="Assessment Id" Enabled="false" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                            </div>
                            <div class="col-md-6">
                                <p>Employee<span style="color:red;">*</span></p>
                                <SfDropDownList @bind-Value="@(assessmentdata.Employeeid)" Enabled="false" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" Placeholder="Choose Employee" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                    <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnEmployeeChange"></DropDownListEvents>
                                </SfDropDownList>
                            </div>
                            @if (employeeno != null)
                            {
                                <div class="col-md-3">
                                    <p>Gender</p>
                                    <strong>@employeeno.GenderDesc</strong>
                                </div>
                            }

                            <div class="col-md-3">
                                <p>Year<span style="color:red;">*</span></p>
                                <SfDropDownList @bind-Value="@(assessmentdata.YearId)" TItem="AYears" TValue="int?"
                                                DataSource="@YearData" Placeholder="Please select"
                                                FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                                FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                                Enabled="false">
                                    <DropDownListFieldSettings Value="@nameof(AYears.YearId)"
                                                               Text="@nameof(AYears.YearDesc)">
                                    </DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>

                            <div class="col-md-6">
                                <p>1.What is your current Job Role/Designation?<span style="color:red;">*</span></p>
                                <SfDropDownList @bind-Value="@(assessmentdata.JobTitleId)" Enabled="false" TItem="AJobTitle" TValue="int?" DataSource="@JobTitleData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                                FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                    <DropDownListFieldSettings Value="@nameof(AJobTitle.JobTitleId)" Text="@nameof(AJobTitle.JobTitleDescription)"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>

                            <div class="col-md-6">
                                <p>2.Mention key performance or development gap(s) of your job, in which you would like to receive training or instruction during the year</p>
                                <SfTextBox Multiline="true" ID="PerformanceDevelopmentGaps" @bind-Value="@(assessmentdata.PerformanceDevelopmentGaps)" FloatLabelType="FloatLabelType.Never" Enabled="OnSubmitBool"></SfTextBox>
                            </div>

                            <div class="col-md-6">
                                <p>3.Which training intervention, will help you propose to close the performance gap mentioned in above ?</p>
                                <SfTextBox Multiline="true" ID="TrainingIntervention" @bind-Value="@(assessmentdata.TrainingIntervention)" FloatLabelType="FloatLabelType.Never" Enabled="OnSubmitBool"></SfTextBox>
                            </div>

                            <div class="col-md-6">
                                <p>4.What is the best training approach that you would recommend during the year ?</p>
                                <SfTextBox Multiline="true" ID="BestTrainingApproach" @bind-Value="@(assessmentdata.BestTrainingApproach)" FloatLabelType="FloatLabelType.Never" Enabled="OnSubmitBool"></SfTextBox>
                            </div>
                        </div>
                    </div>

                }
            </Template>

            <FooterTemplate>
                <button @onclick="@onSubmitForm" disabled=@IsSubmitDisabled hidden=@IsSubmitHidden class="btn btn-success" data-ripple="true" style="margin-right:10px;">Submit</button>
                <button @onclick="@DialogCancelBtnclicked" class="btn btn-danger" data-ripple="true">Close</button>
            </FooterTemplate>

        </GridEditSettings>

        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>

        <GridEvents OnActionBegin="AssessmentActionBegin"
                    OnActionComplete="AssessmentActionComplete"
                    OnLoad="LoadHandler"
                    DataBound="DataBound"
                    TValue="TrainingAssessmentSurvey">
        </GridEvents>

        <SfDataManager AdaptorInstance="@typeof(AssessmentAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
        
        
        <GridColumns>
            @*<GridColumn Type="ColumnType.CheckBox" Width="20"></GridColumn>*@
            <GridColumn HeaderText="Manage"
                        Width="40"
                        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Left">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-edit", CssClass = "e-flat"})"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
            <GridColumn Field=@nameof(TrainingAssessmentSurvey.AssessmentId) HeaderText="Assessment Id" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="50"></GridColumn>
            <GridForeignColumn Field=@nameof(TrainingAssessmentSurvey.JobTitleId)
                               HeaderText="Job Title"
                               Width="180"
                               AllowEditing="true"
                               ForeignKeyField="@(nameof(AJobTitle.JobTitleId))"
                               ForeignKeyValue="@(nameof(AJobTitle.JobTitleDescription))"
                               ForeignDataSource="@JobTitleData"
                               AllowFiltering="true"
                               IsFrozen="false">
            </GridForeignColumn>
            <GridColumn Field=@nameof(TrainingAssessmentSurvey.PerformanceDevelopmentGaps) HeaderText="Performance/Development Gaps" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TrainingAssessmentSurvey.TrainingIntervention) HeaderText="Training Intervention" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TrainingAssessmentSurvey.BestTrainingApproach) HeaderText="Training Intervention" TextAlign="TextAlign.Left" Width="100"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>

<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationSubmitDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationSubmitYes" />
            <DialogButton Content="No" OnClick="@ComfirmationSubmitNo" />
        </DialogButtons>
    </SfDialog>
</div>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="40%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader-Saving-text"></div>
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters
    LoginResultModel? Credentials { get; set; }
    private SfGrid<TrainingAssessmentSurvey>? DataGrid;
    private static TrainingAssessmentSurvey? assessmentdata { get; set; }
    List<AJobTitle>? JobTitleData { get; set; }
    List<TrainingAssessmentSurveyDeadline>? DeadlineData { get; set; }
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<AYears>? YearData { get; set; }
    Query mainQuery { get; set; } = new();
    [Parameter]
    public string? AccessToken { get; set; }
    string? ErrorMessage { get; set; } = null;
    private static ViewEmployeeDropDown employeeno { get; set; }
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "98%" };
    bool activationbooladd;
    bool activationbooledit;
    bool OnSubmitBool;
    int currentYear = DateTime.Now.Year;
    public int? finyearid { get; set; }    
    public AppraisalSearch searchpanel { get; set; } = new AppraisalSearch();
    public Query MainQuery = new Query();
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    private Dictionary<string, object> GridAttributes { get; set; } = new Dictionary<string, object>();
    SfSpinner? SpinnerObj;
    SfDialog? LoadingDialogue;
    bool IsSubmitDisabled;
    bool IsSubmitHidden;
    SfDialog ConfirmationSubmitDialogue;
    string ConfirmationText { get; set; }

    private List<object> ToolbarMenu = new List<object>()
    {
        new ItemModel() { Text = "Capture Survey", PrefixIcon = "e-add", Id = "Grid_add"}
    };

    private void ToggleSearchQuery(Query? DetailData)
    {
        try
        {
            if (DetailData != null)
            {
                MainQuery = DetailData;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            StateHasChanged();
        }

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            var isAuthenticated = await AuthService.CheckAuthenticationStatus();
            if (isAuthenticated == false)
            {
                navManager.NavigateTo("/LoginPage", true);
            }
            else
            {
                Credentials = await AuthService.GetUserCredentials();
                //Set employeeno to null on initialize
                employeeno = new();
                MainQuery = new Query();

                List<Task> t = new List<Task>();
                t.Add(Task.Run(async () =>
                {
                    var responseJobTitle = await Http.GetAsync($"HumanResource/GetJobTitle");
                    if (responseJobTitle.IsSuccessStatusCode)
                    {
                        var contentJobTitle = await responseJobTitle.Content.ReadAsStringAsync();
                        JobTitleData = JsonSerializer.Deserialize<List<AJobTitle>>(contentJobTitle, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responseemployee = await Http.GetAsync($"BalanceScoreCard/GetEmployeeData");
                    if (responseemployee.IsSuccessStatusCode)
                    {
                        var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                        EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(contentemployee, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsedeadlinedate = await Http.GetAsync($"AssessmentSurveyDeadline/GetAssessmentDeadline");
                    if (responsedeadlinedate.IsSuccessStatusCode)
                    {
                        var contentdeadlinedate = await responsedeadlinedate.Content.ReadAsStringAsync();
                        DeadlineData = JsonSerializer.Deserialize<List<TrainingAssessmentSurveyDeadline>>(contentdeadlinedate, _options);

                        var _ddata = DeadlineData.FirstOrDefault(o => o.DeadlineId == 1);

                        //Activate the form
                        if (_ddata != null && (_ddata.DeadlineDate.Value >= DateTime.Now))
                        {
                            activationbooladd = true;
                            activationbooledit = true;
                            IsSubmitHidden = false;
                        }
                        else
                        {
                            activationbooladd = false;
                            activationbooledit = true;
                            IsSubmitHidden = true;
                        }
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetYears");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        YearData = JsonSerializer.Deserialize<List<AYears>>(content, _options);

                        var b = YearData.FirstOrDefault(o => o.YearDesc == currentYear);
                        if (b != null)
                        {
                            finyearid = b.YearId;
                            List<int?> _finyearid = new List<int?>();
                            _finyearid.Add(finyearid);
                            searchpanel.YearId = _finyearid.ToArray();
                            MainQuery = new Query().AddParams("YearId", string.Join(",", searchpanel.YearId));
                        }
                    }
                }));

                Task _t = Task.WhenAll(t);
                await _t;
            }
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {

        }

        StateHasChanged();
    }

    public async Task onSubmitForm()
    {
        try
        {
            if (assessmentdata.Employeeid == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the employee");
            }

            else if (assessmentdata.YearId == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the year");
            }
            else if (assessmentdata.JobTitleId == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the job role/designation");
            }
            else if (assessmentdata.PerformanceDevelopmentGaps == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please provide answer to Question 2");
            }
            else if (assessmentdata.TrainingIntervention == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please provide answer to Question 3");
            }
            else if (assessmentdata.BestTrainingApproach == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please provide answer to Question 4");
            }
            else
            {
                ConfirmationText = "<p>Are you sure you want to submit this survey! </p>";
                await this.ConfirmationSubmitDialogue.ShowAsync();
            }
        }
        catch(Exception ex)
        {

        }
        finally
        {
            
        }
    }

    public async Task ComfirmationSubmitYes()
    {
        try
        {
            if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            await this.ConfirmationSubmitDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void ComfirmationSubmitNo()
    {
        this.ConfirmationSubmitDialogue.HideAsync();
    }

    public async void DialogCancelBtnclicked()
    {
        if (DataGrid != null)
        {
            await DataGrid.CloseEditAsync();
        }
    }

    #region AssessmentAdapter Adapter
    public class AssessmentAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public AssessmentAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            string? _YearId = null;

            if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
            {
                var val = dataManagerRequest.Params;

                if (val.FirstOrDefault(o => o.Key == "YearId").Value != null)
                {
                    _YearId = val.FirstOrDefault(o => o.Key == "YearId").Value.ToString();
                }
            }

            var data = new List<TrainingAssessmentSurvey>();
            try
            {
                var response = await Http.GetAsync($"AssessmentSurvey/GetAssessmentSurvey?finyearid={_YearId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<TrainingAssessmentSurvey>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<TrainingAssessmentSurvey>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {

                var val = (value as TrainingAssessmentSurvey);
                if (val != null)
                {
                    if (val.AssessmentId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"AssessmentSurvey/CreateAssessmentSurvey", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"AssessmentSurvey/UpdateAssessmentSurvey", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        //public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        //{
        //    //try
        //    //{
        //    //    int data = (int)value;
        //    //    using (var dbContext = new MUCOBADIContext())
        //    //    {
        //    //        var exists = dbContext.AAdministrationPhase.FirstOrDefault(o => o.AdministrationPhaseId == data);
        //    //        if (exists != null)
        //    //        {
        //    //            dbContext.AAdministrationPhase.Remove(exists);
        //    //        }
        //    //        await dbContext.SaveChangesAsync();
        //    //    }
        //    //}
        //    //catch (Exception ex)
        //    //{
        //    //    toastService.ShowError(ex.Message.ToString());
        //    //}


        //    return value;
        //}

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {

                var val = (value as TrainingAssessmentSurvey);
                if (val != null)
                {
                    if (val.AssessmentId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"AssessmentSurvey/CreateAssessmentSurvey", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"AssessmentSurvey/UpdateAssessmentSurvey", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }

    public void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?,ViewEmployeeDropDown> args)
    {
        employeeno = args.ItemData;
        assessmentdata.JobTitleId = args.ItemData.DepartmentId;
    }

    public void AssessmentActionComplete(ActionEventArgs<TrainingAssessmentSurvey> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            DataGrid.PreventRender(false);
        }
    }

    public async void LoadHandler()
    {
        SpinnerObj.ShowAsync();
        GridAttributes.Add("disable", "yes");
    }

    public async void DataBound()
    {
        GridAttributes["disable"] = "no";
        await SpinnerObj.HideAsync();
    }

    public async void AssessmentActionBegin(ActionEventArgs<TrainingAssessmentSurvey> Args)
    {
        var data = Args.Data;
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {            
            
        }
    
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid);

            var _ddata = DeadlineData.FirstOrDefault(o => o.DeadlineId == 1);

            //Activate the form
            if (_ddata != null && (_ddata.DeadlineDate.Value >= DateTime.Now))
            {
                OnSubmitBool = true;
            }
            else
            {
                OnSubmitBool = false;
            }
        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            employeeno = null; 
            Args.Data.YearId = finyearid;

            if (Credentials.StaffId > 0)
            {
                Args.Data.Employeeid = Credentials.StaffId;
                employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid);
                Args.Data.JobTitleId = employeeno.DepartmentId;
            }

            var _ddata = DeadlineData.FirstOrDefault(o => o.DeadlineId == 1);

            //Activate the form
            if (_ddata != null && (_ddata.DeadlineDate.Value >= DateTime.Now))
            {
                OnSubmitBool = true;
            }
            else
            {
                OnSubmitBool = false;
            }
        }
    }
    
    public string GetAssessmentHeader(TrainingAssessmentSurvey Value)
    {
        if (Value.AssessmentId == 0 || Value.AssessmentId == null)
        {
            return "Add a new Training Assessment Survey";
        }
        else
        {
            return "Edit Training Assessment Survey Details";
        }
    }

    #endregion AssessmentAdapter

}
