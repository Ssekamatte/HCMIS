@page "/TrainingEvaluationFormPage"
@using HCMIS.Model
@using HCMIS.SHARED.DTOs.Utilities;
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Text.RegularExpressions
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject AppState AppState
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings
@using System.Collections;
@using HCMIS.SHARED.DTOs.Training;
@using HCMIS.SHARED.DTOs.BSC;
@inject IToastService toastService;

<style>

    .e-edit-dialog {
        max-height: 98%;
        max-width: 98%;
        min-width: 98%;
        min-height: 98%;
    }

    h6 {
        color: ghostwhite;
        background-color: blue;
        padding: 10px;
        width: 100%;
        font-size: 10px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        /*background-color: darkorange;*/
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }


    /**/
    #container {
        position: relative;
        height: 550px;
    }

    .e-spinner-pane.e-spin-overlay {
        background-color: rgb(192,192,192);
    }

    /*Disabling Check Box*/
        .e-checkbox-disabled .e-checkbox-wrapper .e-frame {
        border-color: #bdbdbd;
    }

    .e-checkbox-disabled .e-checkbox-wrapper {
        cursor: default;
        pointer-events: none;
    }

    /*Accordion Colors*/
    .e-accordion {
        border-radius: 6px 6px 6px 6px;
        border: none !important;
    }

        /* header custom css*/
        .e-accordion .e-acrdn-item .e-acrdn-header {
            background-color: rgb(255, 204, 255);
            border-radius: 6px 6px 6px 6px;
        }

            /*header on hover custom css*/
            .e-accordion .e-acrdn-item .e-acrdn-header:hover {
                background-color: rgb(255, 51, 255);
            }

        /*header on selected and expanded custom css*/
        .e-accordion .e-acrdn-item.e-select.e-expand-state > .e-acrdn-header {
            background: rgb(255, 204, 255);
        }

        .e-accordion .e-acrdn-item.e-select.e-selected.e-expand-state > .e-acrdn-header {
            background: rgb(255, 128, 255);
        }

        .e-accordion .e-acrdn-item.e-expand-state.e-select:not(.e-selected) > .e-acrdn-header:focus {
            background: rgb(255, 204, 255);
        }

        /*content custom css*/
        .e-accordion .e-acrdn-item .e-acrdn-panel .e-acrdn-content {
            background-color: whitesmoke;
            border-radius: 6px 6px 6px 6px;
        }

        /*to remove the white line*/
        .e-accordion .e-acrdn-item.e-select {
            border-bottom: 1px solid white !important;
            border-top: 1px solid white !important;
        }
        /*to change the accordion header color*/
        .e-accordion .e-acrdn-item .e-acrdn-header .e-acrdn-header-content {
            color: darkred;
        }

    /*Change Grid Header Color */
    .e-headercell.e-attr1 {
        background: #964B00;
        color: white;
    }
</style>

<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>

<center>
    <h5>
        <strong>TRAINING EVALUATION FORM</strong>
    </h5>
</center>

<div class="row">      
    <SfGrid ID="Grid" @ref="EvaluationGrid" TValue="TrainingEvaluationDto"
            Toolbar="@ToolbarMenu" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
            AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
        <SfDataManager AdaptorInstance="@typeof(EvaluationAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
        <GridEvents OnActionBegin="EvaluationActionBegin" TValue="TrainingEvaluationDto"></GridEvents>
        <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog">
            <HeaderTemplate>
                @{
                    var text = GetEvaluationHeader((context as TrainingEvaluationDto));
                    <div class="headerbandimg" />
                    <span>@text</span>
                }
            </HeaderTemplate>
            <Template>
                @{
                    <center>
                        <h5>
                            <strong>NH/TRN/FORM/001</strong>
                        </h5>
                    </center>
                    EvaluationData = (context as TrainingEvaluationDto);
                    <SfAccordion ExpandMode="@ExpandMode.Single">
                        <AccordionItems>
                            <AccordionItem Expanded="true">
                                <HeaderTemplate>Header Details</HeaderTemplate>
                                    <ContentTemplate>
                                        <div>
                                            <div class="row">
                                                <div class="col-md-6" hidden="hidden">
                                                    <SfNumericTextBox ID="EvaluationId" @bind-Value="@(EvaluationData.EvaluationId)" Placeholder="Evaluation Id" Enabled="false" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                                </div>
                                                <div class="col-md-6">
                                                    <p><h3>Training Topic:<span style="color:red;">*</span></h3></p>
                                                    <SfDropDownList @bind-Value="@(EvaluationData.TrainingTopicId)" Enabled="true" TItem="TrainingTopicDTO" TValue="int?" DataSource="@TopicData" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(TrainingTopicDTO.TrainingTopicId)" Text="@nameof(TrainingTopicDTO.TrainingTopicDescription)"></DropDownListFieldSettings>
                                                    </SfDropDownList>
                                                </div>
                                                <div class="col-md-6">
                                                    <p><h3>Training Date:<span style="color:red;">*</span></h3></p>
                                                    <SfDatePicker @bind-Value="@(EvaluationData.TrainingDate)" Enabled="true" Placeholder="Training Date" Format="dd-MM-yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                </div>                                                
                                                <div class="col-md-4">
                                                    <p><h3>Location of Event:</h3></p>
                                                    <SfTextBox Multiline="true" ID="Location" @bind-Value="@(EvaluationData.TrainingLocation)" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                                </div>
                                                <div class="col-md-4">
                                                    <p><h3>Trainers/Facilitator:</h3></p>
                                                    <SfTextBox Multiline="true" ID="TrainersFacilitator" @bind-Value="@(EvaluationData.TrainersFacilitator)" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                                </div>                                                
                                            </div>
                                        </div>
                                    </ContentTemplate>
                            </AccordionItem>

                            <AccordionItem Expanded="false">
                                <HeaderTemplate>Instructions: Please choose your level of agreement with the statements from the dropdown</HeaderTemplate>
                                <ContentTemplate>
                                    <div>
                                        <div class="row">
                                             <div class="form-group col-md-12">
                                                <SfGrid @ref="InstructionsGrid"
                                                    DataSource="@EvaluationData.TrainingEvaluationInstructions"
                                                        EnableStickyHeader=true
                                                        TValue="TrainingEvaluationInstructionsDto" 
                                                        AllowGrouping="true" ShowColumnChooser="true" AllowTextWrap="true"
                                                        AllowPaging="true" 
                                                        AllowFiltering="true" 
                                                        GridLines="GridLine.Both" 
                                                        AllowSelection="true"
                                                        Height="400px">
                                                        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both" 
                                                        Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                                        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>            
                                                        <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="true" 
                                                            ShowConfirmDialog="false" Mode="@EditMode.Batch">                
                                                        </GridEditSettings>
                                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                        <GridPageSettings PageSize="20"></GridPageSettings>

                                                        <GridEvents CellSelected="CellSelectHandler"
                                                            QueryCellInfo="QueryCellInfoHandler"
                                                            TValue="TrainingEvaluationInstructionsDto">
                                                        </GridEvents>
                                                     <GridColumns>
                                                        <GridColumn Field=@nameof(TrainingEvaluationInstructionsDto.InstructionsId) 
                                                            HeaderText="#" 
                                                            TextAlign="TextAlign.Left" 
                                                            IsPrimaryKey="true" 
                                                            IsIdentity="true" 
                                                            Visible="false" 
                                                            Width="50"
                                                            CustomAttributes="@(new Dictionary<string,
                                                            object>(){ { "class", "e-attr1" }})">
                                                        </GridColumn>

                                                        <GridForeignColumn Field="@nameof(TrainingEvaluationInstructionsDto.StatementId)"
                                                            Visible="true" 
                                                            HeaderText="Instructions" 
                                                            Width="100" 
                                                            ForeignKeyField="@nameof(ATrainingStatementsDto.StatementId)" 
                                                            ForeignKeyValue="@nameof(ATrainingStatementsDto.StatementDescription)" 
                                                            ForeignDataSource="@StatementsData" 
                                                            ValidationRules="@(new ValidationRules {Required=true})" 
                                                            AllowEditing="false" 
                                                            CustomAttributes="@(new Dictionary<string,
                                                            object>(){ { "class", "e-attr1" }})">
                                                        </GridForeignColumn>
                                                        <GridForeignColumn Field="@nameof(TrainingEvaluationInstructionsDto.AgreementLevelId)"
                                                                           Visible="true"
                                                                           HeaderText="Agreement Level"
                                                                           Width="100"
                                                                           ForeignKeyField="@nameof(AAgreementLevelDto.AgreementLevelId)"
                                                                           ForeignKeyValue="@nameof(AAgreementLevelDto.AgreementLevelDesc)"
                                                                           ForeignDataSource="@AgreementLevelData"
                                                                           AllowEditing="true"
                                                                           CustomAttributes="@(new Dictionary<string,
                                                            object>(){ { "class", "e-attr1" }})">
                                                        </GridForeignColumn>
                                                            @*<GridColumn Field=@nameof(TrainingEvaluationInstructionsDto.StronglyAgree) HeaderText="StronglyAgree" DisplayAsCheckBox="true" Width="150">
                                                                        <EditTemplate Context = "templatecontext">
                                                                        @{
                                                                    <SfCheckBox @bind-Checked="@((context as TrainingEvaluationInstructionsDto).StronglyAgree)" ValueChange="@((args)=>OnChange(args, context as TrainingEvaluationInstructionsDto))" TChecked="bool?"></SfCheckBox>
                                                                }
                                                                        </EditTemplate>
                                                            </GridColumn>

                                                            <GridColumn Field=@nameof(TrainingEvaluationInstructionsDto.Agree) HeaderText="Agree" DisplayAsCheckBox="true" Width="150">
                                                                        <EditTemplate Context = "templatecontext">
                                                                        @{
                                                                            <SfCheckBox @bind-Checked="@((context as TrainingEvaluationInstructionsDto).Agree)" ValueChange="@((args)=>OnChange(args, context as TrainingEvaluationInstructionsDto))" TChecked="bool?"></SfCheckBox>
                                                                }
                                                                        </EditTemplate>
                                                            </GridColumn>

                                                            <GridColumn Field=@nameof(TrainingEvaluationInstructionsDto.Neutral) HeaderText="Neutral" DisplayAsCheckBox="true" Width="150">
                                                                        <EditTemplate Context = "templatecontext">
                                                                        @{
                                                                    <SfCheckBox @bind-Checked="@((context as TrainingEvaluationInstructionsDto).Neutral)" ValueChange="@((args)=>OnChange(args, context as TrainingEvaluationInstructionsDto))" TChecked="bool?"></SfCheckBox>
                                                                }
                                                                        </EditTemplate>
                                                        </GridColumn>*@

                                                        @*<GridColumn Field=@nameof(TrainingEvaluationInstructionsDto.StronglyAgree) HeaderText="Strongly Agree" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="80"
                                                        CustomAttributes="@(new Dictionary<string,
                                                        object>(){ { "class", "e-attr1" }})"></GridColumn>
                                                        <GridColumn Field=@nameof(TrainingEvaluationInstructionsDto.Agree) HeaderText="Agree" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="80"
                                                        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>
                                                        <GridColumn Field=@nameof(TrainingEvaluationInstructionsDto.Neutral) HeaderText="Neutral" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="80"
                                                        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>
                                                        <GridColumn Field=@nameof(TrainingEvaluationInstructionsDto.Disagree) HeaderText="Disagree" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="80"
                                                        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>
                                                        <GridColumn Field=@nameof(TrainingEvaluationInstructionsDto.StronglyDisagree) HeaderText="Strongly Disagree" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="80"
                                                        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>*@
                                                    </GridColumns>
                                                </SfGrid>
                                                </div>
                                        </div>
                                    </div>
                                </ContentTemplate>
                            </AccordionItem>

                            <AccordionItem Expanded="false">
                                <HeaderTemplate>No.8</HeaderTemplate>
                                    <ContentTemplate>
                                        <div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <p><h3>What was most useful?</h3></p>
                                                    <SfTextBox Multiline="true" ID="MostUseful" @bind-Value="@(EvaluationData.MostUseful)" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                                </div>
                                            </div>
                                        </div>
                                    </ContentTemplate>
                            </AccordionItem>

                            <AccordionItem Expanded="false">
                                <HeaderTemplate>No.9</HeaderTemplate>
                                    <ContentTemplate>
                                        <div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                <p><h3>What was least useful?</h3></p>
                                                <SfTextBox Multiline="true" ID="LeastUseful" @bind-Value="@(EvaluationData.LeastUseful)" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                                </div>
                                            </div>
                                        </div>
                                    </ContentTemplate>
                            </AccordionItem>

                            <AccordionItem Expanded="false">
                                <HeaderTemplate>No.10</HeaderTemplate>
                                    <ContentTemplate>
                                        <div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <p><h3>What else would you like to see included in future trainings? Are there any other topics that you would like to be offered training sessions in?</h3></p>
                                                    <SfTextBox Multiline="true" ID="FutureTrainings" @bind-Value="@(EvaluationData.FutureTrainings)" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                                </div>
                                            </div>
                                        </div>
                                    </ContentTemplate>
                            </AccordionItem>

                            <AccordionItem Expanded="false">
                                <HeaderTemplate>No.11</HeaderTemplate>
                                    <ContentTemplate>
                                        <div>
                                            <div class="row">
                                                <div class="col-md-6">
                                                <p><h3>Would you recommend this training Topic  to colleagues?</h3></p>
                                                <SfRadioButton Label="Yes" Name="options" Value="true" TChecked="bool?" ValueChange="OnValueChange" @bind-Checked="@(EvaluationData.RecommendTraining)"></SfRadioButton>
                                                <SfRadioButton Label="No" Name="options" Value="false" TChecked="bool?" ValueChange="OnValueChange" @bind-Checked="@(EvaluationData.RecommendTraining)"></SfRadioButton>
                                                </div>
                                                <div class="col-md-6">
                                                <p><h3>Reason Why</h3></p>
                                                <SfTextBox Multiline="true" ID="RecommendationReason" @bind-Value="@(EvaluationData.RecommendationReason)" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                                </div>
                                            </div>
                                        </div>
                                    </ContentTemplate>
                            </AccordionItem>

                            <AccordionItem Expanded="false">
                                <HeaderTemplate>No.12</HeaderTemplate>
                                    <ContentTemplate>
                                        <div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                <p><h3>Any other comments?</h3></p>
                                                    <SfTextBox Multiline="true" ID="OtherComments" @bind-Value="@(EvaluationData.OtherComments)" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                                </div>
                                            </div>
                                        </div>
                                    </ContentTemplate>
                            </AccordionItem>
                        </AccordionItems>
                    </SfAccordion>
                    <center>
                        <h7>
                            <strong>Thank you for completing this evaluation form. Feedback received will be used to provide improvements to future Trainings/Events.</strong>
                        </h7>
                    </center>
                }
            </Template>
            <FooterTemplate>
                <button @onclick="@onSubmitForm"  class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Submit Form</button>
                <button @onclick="@DialogCancelBtnclicked" class="btn btn-danger" data-ripple="true">Cancel Form</button>
               </FooterTemplate>
        </GridEditSettings>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSize="20"></GridPageSettings>
        <GridColumns>
            <GridColumn Type="ColumnType.CheckBox" Width="20"></GridColumn>
            <GridColumn Field=@nameof(EvaluationData.EvaluationId) HeaderText="Evaluation Id" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="50"></GridColumn>
            <GridForeignColumn Field=@nameof(EvaluationData.TrainingTopicId)
                               HeaderText="Training Topic"
                               Width="100"
                               AllowEditing="true"
                               ForeignKeyField="@(nameof(TrainingTopicDTO.TrainingTopicId))"
                               ForeignKeyValue="@(nameof(TrainingTopicDTO.TrainingTopicDescription))"
                               ForeignDataSource="@TopicData"
                               AllowFiltering="true"
                               IsFrozen="false"
                               CustomAttributes="@(new Dictionary<string,
                               object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>
            <GridColumn Field=@nameof(EvaluationData.TrainingDate) HeaderText="Training Date" Format="dd/MMMM/yyyy" TextAlign="TextAlign.Justify" Width="100" ClipMode="ClipMode.EllipsisWithTooltip" Type="ColumnType.Date"
            CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>
            <GridColumn Field=@nameof(EvaluationData.TrainingLocation) HeaderText="Location" TextAlign="TextAlign.Left" Width="100"
            CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>
            <GridColumn Field=@nameof(EvaluationData.TrainersFacilitator) HeaderText="Trainers / Facilitator" TextAlign="TextAlign.Left" Width="100"
            CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>


@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters

    private SfGrid<TrainingEvaluationDto>? EvaluationGrid;
    private SfGrid<TrainingEvaluationInstructionsDto>? InstructionsGrid;
    private static TrainingEvaluationDto? EvaluationData { get; set; }
    private TrainingEvaluationDto? evaluationentity { get; set; } = new();
    List<ATrainingStatementsDto>? StatementsData { get; set; }
    List<TrainingTopicDTO>? TopicData { get; set; }
    List<TrainingEvaluationInstructionsDto>? InstructionsData { get; set; }
    List<AGender>? GenderData { get; set; }
    List<AAgreementLevelDto>? AgreementLevelData { get; set; }
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

    public bool? radiovalue;
    Syncfusion.Blazor.Grids.Action _previous { get; set; }

    //GridClass
    public class  TrainingStatements
    {
        public int EvaluationId { get; set; }
        public int? TrainingTopicId { get; set; }
        public DateTime? TrainingDate { get; set; }
        public string? TrainingLocation { get; set; }
        public string? TrainersFacilitator { get; set; }
        public int? StatementId { get; set; }
        public bool? StronglyAgree { get; set; }
        public bool? Agree { get; set; }
        public bool? Neutral { get; set; }
        public bool? Disagree { get; set; }
        public bool? StronglyDisagree { get; set; }
        public string? MostUseful { get; set; }
        public string? LeastUseful { get; set; }
        public string? FutureTrainings { get; set; }
        public bool? RecommendTraining { get; set; }
        public string? RecommendationReason { get; set; }
        public string? OtherComments { get; set; }
        public string? StatementDescription { get; set; }
    }

    private List<TrainingStatements> TrainingStatementsList = new List<TrainingStatements>();

    private async void GenerateTrainingStatements()
    {
        try
        {
            if (StatementsData == null)
            {
                return;
            }

            if (evaluationentity != null && evaluationentity.TrainingEvaluationInstructions == null)
            {
                List<TrainingEvaluationInstructionsDto> m = new List<TrainingEvaluationInstructionsDto>();

                foreach (var n in StatementsData)
                {
                    Random random = new Random();
                    m.Add(new TrainingEvaluationInstructionsDto
                        {
                            InstructionsId = random.Next(1000, 10000),
                            StatementId = n.StatementId
                        });
                }
                evaluationentity.TrainingEvaluationInstructions = m;
            }

            else
            {
                foreach (var n in StatementsData)
                {
                    var x = evaluationentity.TrainingEvaluationInstructions.FirstOrDefault(o => o.StatementId == n.StatementId);
                    if (x == null)
                    {
                        Random random = new Random();
                        evaluationentity.TrainingEvaluationInstructions.Add(new TrainingEvaluationInstructionsDto
                            {
                                InstructionsId = random.Next(1000, 10000),
                                StatementId = n.StatementId,
                            });
                    }
                }
            }

        }
        catch (Exception ex)
        {

        }

        finally
        {

        }
    }

    protected override async Task OnParametersSetAsync()
    {
        GenerateTrainingStatements();
    }


    private List<object> ToolbarMenu = new List<object>() 
    {
        new ItemModel() { Text = "Capture Evaluation", PrefixIcon = "e-add", Id = "Grid_add"},
        new ItemModel(){ Text = "Edit Evaluation", PrefixIcon= "e-edit", Id="Grid_edit"},
        new ItemModel(){ Text = "Delete Evaluation", PrefixIcon= "e-delete", Id="Grid_delete"},
        new ItemModel(){ Text = "Update Evaluation", PrefixIcon= "e-update", Id="Grid_update"},
        new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="Grid_cancel"}
    };

    @*https://www.syncfusion.com/forums/175772/checked-value*@

    private void OnValueChange(ChangeArgs<bool?> args)
    {
        radiovalue = args.Value;
    }

    protected override async Task OnInitializedAsync()
    {
        if(TrainingStatementsList!=null)
        {
            TrainingStatementsList.Clear();
        }     

        JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        List<Task> t = new List<Task>();

        t.Add(Task.Run(async () =>
        {
            var responseagreementlevel = await Http.GetAsync($"Utilities/GetAgreementLevel");
            if (responseagreementlevel.IsSuccessStatusCode)
            {
                var contentagreementlevel = await responseagreementlevel.Content.ReadAsStringAsync();
                AgreementLevelData = JsonSerializer.Deserialize<List<AAgreementLevelDto>>(contentagreementlevel, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsetopic = await Http.GetAsync($"TrainingTopic/GetTrainingTopic");
            if (responsetopic.IsSuccessStatusCode)
            {
                var contenttopic = await responsetopic.Content.ReadAsStringAsync();
                TopicData = JsonSerializer.Deserialize<List<TrainingTopicDTO>>(contenttopic, _options);
            }
        }));
        
        t.Add(Task.Run(async () =>
        {
            var responsestatement = await Http.GetAsync($"TrainingStatements/GetTrainingStatements");
            if (responsestatement.IsSuccessStatusCode)
            {
                var contentstatement = await responsestatement.Content.ReadAsStringAsync();
                StatementsData = JsonSerializer.Deserialize<List<ATrainingStatementsDto>>(contentstatement, _options);
            }
        }));
        
        t.Add(Task.Run(async () =>
        {
            var responseInstruction = await Http.GetAsync($"TrainingEvaluationInstructions/GetTrainingEvaluationInstructions");
            if (responseInstruction.IsSuccessStatusCode)
            {
                var contentinstruction = await responseInstruction.Content.ReadAsStringAsync();
                InstructionsData = JsonSerializer.Deserialize<List<TrainingEvaluationInstructionsDto>>(contentinstruction, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseGender = await Http.GetAsync($"Utilities/GetGender");
            if (responseGender.IsSuccessStatusCode)
            {
                var contentGender = await responseGender.Content.ReadAsStringAsync();
                GenderData = JsonSerializer.Deserialize<List<AGender>>(contentGender, _options);
            }
        }));

        ToolbarMenu = new List<object>(){
        new ItemModel() { Text = "Capture Evaluation", PrefixIcon = "e-add", Id = "Grid_add" },//Here Grid is SfGrid ID
        new ItemModel() { Text = "Edit Evaluation", PrefixIcon = "e-edit", Id = "Grid_edit" },
        new ItemModel() { Text = "Delete Evaluation", PrefixIcon = "e-delete", Id = "Grid_delete" },
        new ItemModel() { Text = "Update Evaluation", PrefixIcon = "e-update", Id = "Grid_update" },
        new ItemModel() { Text = "Cancel Changes", PrefixIcon = "e-cancel", Id = "Grid_cancel" }
        };
    }

    public async Task onSubmitForm()
    {
        try
        {
            if (InstructionsGrid != null)
            {
                await InstructionsGrid.EndEditAsync();
            }      
            
            if (EvaluationGrid != null)
            {
                await EvaluationGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            StateHasChanged();
        }
    }

    public async void DialogCancelBtnclicked()
    {
        if (EvaluationGrid != null)
        {
            await EvaluationGrid.CloseEdit();
        }
        if (InstructionsGrid != null)
        {
            await InstructionsGrid.CloseEdit();
        }
    }

    #region EvaluationAdapter Adapter
    public class EvaluationAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public EvaluationAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _SystemSettings = systemSettings;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            

            var data = new List<TrainingEvaluationDto>();

            string? AccessToken = _SystemSettings.AccessToken;
            string? BaseUrl = _ApiConfig.BaseUrl;

            try
            {
                 
                var response = await Http.GetAsync($"TrainingEvaluation/GetTrainingEvaluation");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<TrainingEvaluationDto>>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<TrainingEvaluationDto>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                
                var val = (value as TrainingEvaluationDto);
                if (val != null)
                {
                    if (val.EvaluationId == 0)
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"TrainingEvaluation/CreateTrainingEvaluation", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"TrainingEvaluation/CreateTrainingEvaluation", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                
                var val = (value as TrainingEvaluationDto);
                if (val != null)
                {
                    if (val.EvaluationId == 0)
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"TrainingEvaluation/CreateTrainingEvaluation", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"TrainingEvaluation/UpdateTrainingEvaluation", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }    
    }
    public void AssessmentActionComplete(ActionEventArgs<TrainingEvaluationDto> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            EvaluationGrid.PreventRender(false);
        }
    }

    public async void EvaluationActionBegin(ActionEventArgs<TrainingEvaluationDto> Args)
    {
        var data = Args.Data;
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (Args.Data.TrainingTopicId == null)
            {
                toastService.ShowWarning("Please choose a topic.");
                Args.Cancel = true;
            }
            else if (Args.Data.TrainingDate == null)
            {
                toastService.ShowWarning("Please enter the training date.");
                Args.Cancel = true;
            }
                   
            else
            {
                Args.Data.RecommendTraining = radiovalue;
            }
        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            if(Args.RowData.TrainingEvaluationInstructions== null){
                Args.RowData.TrainingEvaluationInstructions = new List<TrainingEvaluationInstructionsDto>();
            }
            foreach (var n in StatementsData)
            {
                var x = Args.RowData.TrainingEvaluationInstructions.FirstOrDefault(o => o.StatementId == n.StatementId);
                if (x == null)
                {
                    Random random = new Random();
                    Args.RowData.TrainingEvaluationInstructions.Add(new TrainingEvaluationInstructionsDto
                        {
                            InstructionsId = random.Next(1000, 10000),
                            StatementId = n.StatementId,
                        });
                }
            }
            _previous = Args.RequestType;
        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            Args.RowData.TrainingEvaluationInstructions = new List<TrainingEvaluationInstructionsDto>();
            foreach (var n in StatementsData)
            {
               Random random = new Random();
                    Args.RowData.TrainingEvaluationInstructions.Add(new TrainingEvaluationInstructionsDto
                        {
                            InstructionsId = random.Next(1000, 10000),
                            StatementId = n.StatementId,
                        });
            }
        }
    }

    public string GetEvaluationHeader(TrainingEvaluationDto Value)
    {
        if (Value.EvaluationId == 0)
        {
            return "Add a new Training Evaluation";
        }
        else
        {
            return "Edit Information";
        }
    }

    //Enable cell edit on single click
    public async Task CellSelectHandler(CellSelectEventArgs<TrainingEvaluationInstructionsDto> args)
    {
        //get selected cell index
        var CellIndexes = await InstructionsGrid.GetSelectedRowCellIndexes();

        //get the row and cell index
        var CurrentEditRowIndex = CellIndexes[0].Item1;
        var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

        //get the available fields
        var fields = await InstructionsGrid.GetColumnFieldNames();
        // edit the selected cell using the cell index and column name
        await InstructionsGrid.EditCell(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
    }

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<TrainingEvaluationInstructionsDto> Args)
    {
        //if (Args.Column.Type == ColumnType.CheckBox && (Args.Data.CustomerID == "ALFKI" || Args.Data.CustomerID == "ANTON"))
        //{
        //    Args.Cell.AddClass(new string[] { "e-checkbox-disabled" });
        //}

    }

    public async Task OnChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args, TrainingEvaluationInstructionsDto orderdata)
    {    
        if (args.Checked ==  true)
        {
            // Grid.PreventRender(false);

            //orderdata.OrderDate = DateTime.Now.AddDays(14);
        }
         if (args.Checked ==  false)
        {
            // Grid.PreventRender(false);

            //orderdata.OrderDate = DateTime.Now.AddDays(14);
        }
    }

    #endregion EvaluationAdapter
}
