@page "/GeneralInternalPage"
@using HCMIS.Data
@using HCMIS.Model
@using HCMIS.Pages.Training.PartialViews
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Text.RegularExpressions
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject AppState AppState
@inject NavigationManager navManager
@using System.Collections;

@inject IToastService toastService;

@using HCMIS.Interface;
@inject IAuthenticationService AuthService;

<style>
/*    .e-edit-dialog {
        max-height: 98%;
        max-width: 98%;
        min-width: 98%;
        min-height: 98%;
    }*/

    h6 {
        color: ghostwhite;
        background-color: blue;
        padding: 10px;
        width: 100%;
        font-size: 10px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        /*background-color: darkorange;*/
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }
    /*Change Grid Header Color */
    .e-headercell.e-attr1 {
        background: #964B00;
        color: white;
    }

    #Grid_dialogEdit_wrapper {
        z-index: 2;
    }

    /* Custom CSS for toaster */
    .custom-toaster {
        z-index: 10000; /* Adjust the value as needed to make sure it's higher than the dialog's z-index */
    }

    /* Custom CSS for dialog */
    .custom-dialog {
        z-index: 9999; /* Adjust the value as needed */
    }

        .e-spinner-pane.e-spin-overlay {
        background-color: rgb(192,192,192);
    }

    /*hide the Default Grid spinner */
    .e-grid .e-spinner-pane {
        display: none;
    }

    /*Disable select all on grid checkbox*/
    .e-headercelldiv.e-headerchkcelldiv .e-checkbox-wrapper.e-css {
        pointer-events: none;
        opacity: 0.5;
    }
</style>


<center>
    <h5>
        <strong>TRAINING PLAN FOR THE FINANCIAL YEAR: @financialyeardesc</strong>
    </h5>
</center>

<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="@ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false" CssClass="const">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <HCMIS.Pages.Training.PartialViews.SearchTrainingsPage 
                            FinancialYearData="@FinancialYearData" 
                            finyearid="@finyearid" 
                            onsearchtoggle="@ToggleSearchQuery">
                        </HCMIS.Pages.Training.PartialViews.SearchTrainingsPage>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>
    </div>
</div>

<div class="form-group col-md-12">
    <SfSpinner @ref="SpinnerObj" Label="Loading Please Wait....." Size="50" ZIndex="1001">
        @*Render custom spinner component.*@
    </SfSpinner>
</div>


<SfGrid @ref="@DataGrid"
        TValue="TrainingGeneralInternal"
        ID="Grid"
        AllowPaging="true"
        AllowFiltering="false"
        AllowReordering="true"
        AllowResizing="true"
        AllowGrouping="false"
        AllowExcelExport="true"
        AllowPdfExport="true"
        AllowSelection="true"
        AllowSorting="true"
        @attributes="@GridAttributes"
        Query="@MainQuery"
        GridLines="GridLine.Both"
        AllowTextWrap="true" Toolbar="@ToolbarMenu">

    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="false" Mode="@EditMode.Dialog"
                          Dialog="@DialogParams">
        <HeaderTemplate>
            @{
                var text = GetGeneralHeader((context as TrainingGeneralInternal));
                <div class="headerbandimg" />
                <span>@text</span>
            }
        </HeaderTemplate>
        <Template>
            @{
                <center>
                    <h5>
                        <strong>TRAINING PLAN FOR THE FINANCIAL YEAR: @financialyeardesc</strong>
                    </h5>
                </center>

                GeneralData = (context as TrainingGeneralInternal);
                <div>
                    <div class="row">
                        <div class="col-md-4" hidden="hidden">
                            <SfNumericTextBox ID="Id" @bind-Value="@(GeneralData.GeneralInternalId)" Placeholder="Id" Enabled="false" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                        </div>

                        <div class="col-md-4">
                            <p>Financial Year:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(GeneralData.FinancialYearId)" TItem="AFinancialYear" TValue="int?"
                                            DataSource="@FinancialYearData" Placeholder="Please select"
                                            FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                            FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                            Enabled="false">
                                <DropDownListFieldSettings Value="@nameof(AFinancialYear.Id)"
                                                           Text="@nameof(AFinancialYear.FinancialYear)">
                                </DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <div class="col-md-4">
                            <p>Training Description<span style="color:red;">*</span></p>
                            <SfTextBox Multiline="false" ID="TrainingDescription" @bind-Value="@(GeneralData.TrainingDescription)" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                        </div>
                        <div class="col-md-4">
                            <p>Scheduled Start Date<span style="color:red;">*</span></p>
                            <SfDatePicker @bind-Value="@(GeneralData.StartDate)" Enabled="true" Placeholder="Start Date" Format="dd-MM-yyyy" FloatLabelType="FloatLabelType.Never" Min="MinDate" Max='@MaxDate'></SfDatePicker>
                        </div>
                        <div class="col-md-4">
                            <p>Scheduled End Date<span style="color:red;">*</span></p>
                            <SfDatePicker @bind-Value="@(GeneralData.EndDate)" Enabled="true" Placeholder="End Date" Format="dd-MM-yyyy" FloatLabelType="FloatLabelType.Never" Min="MinDate" Max='@MaxDate'></SfDatePicker>
                        </div>

                        <div class="col-md-4">
                            <p>Training Type<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(GeneralData.LocalityId)" Enabled="true" TItem="ATrainingLocality" TValue="int?" DataSource="@LocalityData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(ATrainingLocality.LocalityId)" Text="@nameof(ATrainingLocality.LocalityDesc)"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>

                        <div class="col-md-4">
                            <p>Approach / Method<span style="color:red;">*</span></p>
                            <SfMultiSelect @ref="@TrainingMethodDatasourceObj" TValue="int[]" TItem="TrainingAMethod" AllowFiltering="true" Mode="@VisualMode.CheckBox" DataSource="@TrainingMethodData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Approach/Method" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                <MultiSelectFieldSettings Value="@nameof(TrainingAMethod.Id)" Text="@nameof(TrainingAMethod.TrainingMethod)"></MultiSelectFieldSettings>
                                <MultiSelectEvents TValue="int[]" TItem="TrainingAMethod" ValueChange="OnMethodDatasourceChange" DataBound="OnMethodDatasourceBound"></MultiSelectEvents>
                            </SfMultiSelect>
                        </div>
                        <div class="col-md-4">
                            <p>Target Team</p>
                            <SfMultiSelect @ref="@TrainingTargetDatasourceObj" TValue="int[]" TItem="TrainingATargetTeam" AllowFiltering="true" Mode="@VisualMode.CheckBox" DataSource="@TrainingTargetData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Approach/Method" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                <MultiSelectFieldSettings Value="@nameof(TrainingATargetTeam.Id)" Text="@nameof(TrainingATargetTeam.TargetTeam)"></MultiSelectFieldSettings>
                                <MultiSelectEvents TValue="int[]" TItem="TrainingATargetTeam" ValueChange="OnTargetDatasourceChange" DataBound="OnTargetDatasourceBound"></MultiSelectEvents>
                            </SfMultiSelect>
                        </div>
                        <div class="col-md-8">
                            <p>Expected Outcomes</p>
                            <SfTextBox Multiline="true" ID="Location" rows="6" @bind-Value="@(GeneralData.ExpectedOutcomes)" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                        </div>
                        <div class="col-md-12">

                            <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;margin-top:20px;">BUDGET SECTION</h6>


                            <HCMIS.Pages.Training.PartialViews.GeneralInternalBudgetPage behaviourdata="@GeneralData.TrainingGeneralInternalBudget.ToList()"
                                                                                         FinancialYearData="@FinancialYearData"
                                                                                         GeneralInternalId="@GeneralData.GeneralInternalId"
                                                                                         onscorecardtoggle="@ToggleTrainingGeneralInternalBehaviour"
                                                                                         finyearid="@finyearid">
                            </HCMIS.Pages.Training.PartialViews.GeneralInternalBudgetPage>
                        </div>
                    </div>
                </div>
            }
        </Template>
        <FooterTemplate>
            <button @onclick="@onSubmitForm" class="btn btn-success" data-ripple="true" style="margin-right:10px;">Save Plan</button>
            <button @onclick="@DialogCancelBtnclicked" class="btn btn-danger" data-ripple="true">Close Form</button>
        </FooterTemplate>

    </GridEditSettings>

    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSize="20"></GridPageSettings>
    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>

    <GridEvents OnActionBegin="TrainingActionBegin"
                OnActionComplete="TrainingActionComplete"
                OnLoad="LoadHandler"
                DataBound="DataBound"
                TValue="TrainingGeneralInternal">
    </GridEvents>

    <SfDataManager AdaptorInstance="@typeof(GeneralInternalAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridSearchSettings IgnoreCase="true"></GridSearchSettings>

    <GridColumns>
        @* <GridColumn Type="ColumnType.CheckBox" Width="20"></GridColumn> *@
        <GridColumn HeaderText="Manage"
                    Width="30"
                    CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"
                    TextAlign="TextAlign.Left">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-edit", CssClass = "e-flat"})"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
        <GridColumn Field=@nameof(TrainingGeneralInternal.GeneralInternalId) HeaderText="Id" AllowEditing="false" IsPrimaryKey="true" Visible="false" Width="150"></GridColumn>
        <GridColumn Field=@nameof(TrainingGeneralInternal.TrainingDescription) HeaderText="Training Description" Width="120" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn>
        <GridColumn Field=@nameof(TrainingGeneralInternal.StartDate) HeaderText="Training Start Date" Format="dd/MMMM/yyyy" TextAlign="TextAlign.Justify" Width="100"
                    ClipMode="ClipMode.EllipsisWithTooltip" Type="ColumnType.Date" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn>
        <GridColumn Field=@nameof(TrainingGeneralInternal.EndDate) HeaderText="Training End Date" Format="dd/MMMM/yyyy" TextAlign="TextAlign.Justify" Width="100"
                    ClipMode="ClipMode.EllipsisWithTooltip" Type="ColumnType.Date" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn>
        @*<GridColumn Field=@nameof(TrainingGeneralInternal.Location) HeaderText="Location"  Width="90" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn>
        <GridColumn Field=@nameof(TrainingGeneralInternal.Officers) HeaderText="Officers"  Width="90" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn>
        <GridColumn Field=@nameof(TrainingGeneralInternal.Amount) HeaderText="Amount"  Width="90" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn>*@
    </GridColumns>
    
</SfGrid>



<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationSubmitDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationSubmitYes" />
            <DialogButton Content="No" OnClick="@ComfirmationSubmitNo" />
        </DialogButtons>
    </SfDialog>
</div>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="40%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader-Saving-text"></div>
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>


@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters

    SfGrid<TrainingGeneralInternalBudget>? DataGrid1 { get; set; }

    SfGrid<TrainingGeneralInternal>? DataGrid { get; set; }
    private static TrainingGeneralInternal? GeneralData { get; set; }
    List<TrainingAMethod>? TrainingMethodData { get; set; }
    List<TrainingATargetTeam>? TrainingTargetData { get; set; }
    List<AFinancialYear>? FinancialYearData { get; set; }
    //private CreateGeneralInternalDto? GeneralInternalEntity { get; set; } = new();
    private SfMultiSelect<int[], TrainingAMethod>? TrainingMethodDatasourceObj;
    private SfMultiSelect<int[], TrainingATargetTeam>? TrainingTargetDatasourceObj;
    string UserRole { get; set; }
    List<ATrainingLocality>? LocalityData { get; set; }
    LoginResultModel? Credentials { get; set; }
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "98%" };
    public int? finyearid { get; set; }
    public AppraisalSearch searchpanel { get; set; } = new AppraisalSearch();
    public Query MainQuery = new Query();
    string? financialyeardesc = null;
    public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime MaxDate { get; set; } = new DateTime(DateTime.Now.Year, 12, 31); 
    private Dictionary<string, object> GridAttributes { get; set; } = new Dictionary<string, object>();
    SfSpinner? SpinnerObj;
    SfDialog ConfirmationSubmitDialogue;
    string ConfirmationText { get; set; }
    SfDialog? LoadingDialogue;
    GeneralInternalBudgetPage traininginstructionsref;

    private List<object> ToolbarMenu = new List<object>()
    {
        new ItemModel() { Text = "Capture Training Plan", PrefixIcon = "e-add", Id = "Grid_add"}
        // ,new ItemModel(){ Text = "Edit Training Plan", PrefixIcon= "e-edit", Id="Grid_edit"},
        // new ItemModel(){ Text = "Delete Training Plan", PrefixIcon= "e-delete", Id="Grid_delete"},
        // new ItemModel(){ Text = "Update Training Plan", PrefixIcon= "e-update", Id="Grid_update"},
        // new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="Grid_cancel"}
    };

    public class  FinancialYearsClass
    {
        public int Id { get; set; }
        public string? TrainingDescription { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string? TrainingMethod { get; set; }
        public string? TargetTeam { get; set; }
        public string? ExpectedOutcomes { get; set; }
    }

    private List<FinancialYearsClass> FinancialYearsList = new List<FinancialYearsClass>();

    private void ToggleSearchQuery(Query? DetailData)
    {
        try
        {
            if (DetailData != null)
            {
                MainQuery = DetailData;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            StateHasChanged();
        }

    }

    private void ToggleTrainingGeneralInternalBehaviour(List<TrainingGeneralInternalBudget>? BehaviourChange)
    {
        if (GeneralData != null && BehaviourChange != null)
        {
            if (GeneralData.TrainingGeneralInternalBudget == null)
            {
                GeneralData.TrainingGeneralInternalBudget = new List<TrainingGeneralInternalBudget>();
            }
            GeneralData.TrainingGeneralInternalBudget = BehaviourChange;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // await base.OnInitializedAsync();
            // var isAuthenticated = await AuthService.CheckAuthenticationStatus();
            // if (isAuthenticated == false)
            // {
            //     navManager.NavigateTo("/LoginPage", true);
            // }
            // else
            // {
                Credentials = await AuthService.GetUserCredentials();
                JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                List<Task> t = new List<Task>();

                t.Add(Task.Run(async () =>
                {
                    var responsemethod = await Http.GetAsync($"Utilities/GetTrainingMethod");
                    if (responsemethod.IsSuccessStatusCode)
                    {
                        var contentmethod = await responsemethod.Content.ReadAsStringAsync();
                        TrainingMethodData = JsonSerializer.Deserialize<List<TrainingAMethod>>(contentmethod, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsetarget = await Http.GetAsync($"Utilities/GetTargetTeam");
                    if (responsetarget.IsSuccessStatusCode)
                    {
                        var contenttarget = await responsetarget.Content.ReadAsStringAsync();
                        TrainingTargetData = JsonSerializer.Deserialize<List<TrainingATargetTeam>>(contenttarget, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responsefinyear = await Http.GetAsync($"FinancialYear/list");
                    if (responsefinyear.IsSuccessStatusCode)
                    {
                        var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
                        FinancialYearData = JsonSerializer.Deserialize<List<AFinancialYear>>(contentfinyear, _options);

                        DateTime currentdate = DateTime.Now;
                        // if (currentdate.Month >= 6)
                        // {
                        //     financialyeardesc = $"{currentdate.Year}/{(currentdate.Year + 1)}";    
                            
                        //     MinDate = new DateTime(currentdate.Year, 06, 01);
                        //     MaxDate = new DateTime(currentdate.Year + 1, 06, 30);
                        // }
                        // else if (currentdate.Month < 6)
                        // {
                        //     financialyeardesc = $"{(currentdate.Year - 1)}/{currentdate.Year}";
                           
                        //     MinDate = new DateTime(currentdate.Year - 1, 06, 01);
                        //     MaxDate = new DateTime(currentdate.Year, 06, 30);
                        // }

                        //1st July - 30th June

                        if (currentdate.Month >= 7)
                        {
                            financialyeardesc = $"{currentdate.Year}/{(currentdate.Year + 1)}";
                            MinDate = new DateTime(currentdate.Year, 06, 01);
                            MaxDate = new DateTime(currentdate.Year + 1, 06, 30);
                        }
                        else if (currentdate.Month < 7)
                        {
                            financialyeardesc = $"{(currentdate.Year - 1)}/{currentdate.Year}";
                            MinDate = new DateTime(currentdate.Year - 1, 06, 01);
                            MaxDate = new DateTime(currentdate.Year, 06, 30);
                        }

                        var b = FinancialYearData.FirstOrDefault(o => o.FinancialYear.Trim() == financialyeardesc.Trim());
                        if (b != null)
                        {
                            finyearid = b.Id;
                            List<int?> _finyearid = new List<int?>();
                            _finyearid.Add(finyearid);
                            searchpanel.FinancialYearId = _finyearid.ToArray();
                            MainQuery = new Query().AddParams("FinancialYearId", string.Join(",", searchpanel.FinancialYearId));
                        }

                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responseuserrole = await Http.GetAsync($"Utilities/GetUserRole");
                    if (responseuserrole.IsSuccessStatusCode)
                    {
                        var contentuserrole = await responseuserrole.Content.ReadAsStringAsync();
                        UserRole = contentuserrole;
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responselocality = await Http.GetAsync($"Utilities/GetLocality");
                    if (responselocality.IsSuccessStatusCode)
                    {
                        var contentlocality = await responselocality.Content.ReadAsStringAsync();
                        LocalityData = JsonSerializer.Deserialize<List<ATrainingLocality>>(contentlocality, _options);
                    }
                }));
            //}

        }
        catch(Exception ex)
        {

        }
        finally
        {
            //await InvokeAsync(StateHasChanged);
        }
        
    }

    public async void LoadHandler()
    {
        SpinnerObj.ShowAsync();
        GridAttributes.Add("disable", "yes");
    }

    public async void DataBound()
    {
        GridAttributes["disable"] = "no";
        await SpinnerObj.HideAsync();
    }

    public async Task onSubmitForm()
    {
        try
        {
            if (string.IsNullOrEmpty(GeneralData.TrainingDescription))
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please enter the training description");
            }

            else if (GeneralData.StartDate == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please enter the scheduled start date");
            }
            else if (GeneralData.EndDate == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please enter the scheduled end date");
            }
            else if (GeneralData.StartDate > GeneralData.EndDate)
            {
                toastService.ClearAll();
                toastService.ShowWarning("The scheduled end date can not be before the scheduled start date");
            }
            else if (GeneralData.LocalityId == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the training type");
            }
            else if (GeneralData.TrainingMethod == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select the approach/method");
            }
            else
            {
                ConfirmationText = "<p>Are you sure you want to save this plan! </p>";
                await this.ConfirmationSubmitDialogue.ShowAsync();
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            StateHasChanged();
        }
    }

    public async Task ComfirmationSubmitYes()
    {
        try
        {
            if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                if (traininginstructionsref != null && traininginstructionsref.BudgetGrid != null)
                {
                    await traininginstructionsref.BudgetGrid.EndEditAsync();
                }
                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            await this.ConfirmationSubmitDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void ComfirmationSubmitNo()
    {
        this.ConfirmationSubmitDialogue.HideAsync();
    }

    public async void DialogCancelBtnclicked()
    {
        if (DataGrid != null)
        {
            if (traininginstructionsref != null && traininginstructionsref.BudgetGrid != null)
            {
                await traininginstructionsref.BudgetGrid.EndEditAsync();
            }
            await DataGrid.CloseEditAsync();
        }
    }

    #region GeneralInternalAdapter Adapter
    public class GeneralInternalAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;
        IAuthenticationService _AuthService;

        public GeneralInternalAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            ,IAuthenticationService authservice, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }


        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            string? _FinancialYearId = null;

            if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
            {
                var val = dataManagerRequest.Params;

                if (val.FirstOrDefault(o => o.Key == "FinancialYearId").Value != null)
                {
                    _FinancialYearId = val.FirstOrDefault(o => o.Key == "FinancialYearId").Value.ToString();
                }
            }

            var data = new List<TrainingGeneralInternal>();
            try
            {
                var response = await Http.GetAsync($"GeneralInternal/GetGeneralInternalList?finyearid={_FinancialYearId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<TrainingGeneralInternal>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<TrainingGeneralInternal>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                
                var val = (value as TrainingGeneralInternal);
                if (val != null)
                {
                    if (val.GeneralInternalId == 0)
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"GeneralInternal/CreateGeneralInternalTrainings", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"GeneralInternal/UpdateGeneralInternalTrainings", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                
                var val = (value as TrainingGeneralInternal);
                if (val != null)
                {
                    if (val.GeneralInternalId == 0)
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"GeneralInternal/CreateGeneralInternalTrainings", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"GeneralInternal/UpdateGeneralInternalTrainings", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }

    public void TrainingActionComplete(ActionEventArgs<TrainingGeneralInternal> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            DataGrid.PreventRender(false);
        }
    }

    public async void TrainingActionBegin(ActionEventArgs<TrainingGeneralInternal> Args)
    {
        var data = Args.Data;
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (Args.Data.TrainingDescription == null)
            {
                toastService.ShowWarning("Please enter the training description.");
                Args.Cancel = true;
            }
            else if (Args.Data.StartDate == null)
            {
                toastService.ShowWarning("Please enter the training start date.");
                Args.Cancel = true;
            }
            else if (Args.Data.EndDate == null)
            {
                toastService.ShowWarning("Please enter the training end date.");
                Args.Cancel = true;
            }
            else if (Args.Data.StartDate > Args.Data.EndDate)
            {
                 toastService.ShowWarning("The training end date cannot be before the training start date.");
                Args.Cancel = true;
            }
            else if (Args.Data.LocalityId == null)
            {
                toastService.ShowWarning("Please choose whether this is a local or international training!");
                Args.Cancel = true;
            }
            else if (Args.Data.TrainingMethod == null)
            {
                 toastService.ShowWarning("Please choose the training approach/method.");
                Args.Cancel = true;
            }
        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                
            }
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                Args.RowData.FinancialYearId = finyearid;
            }
    
    }

    public void OnMethodDatasourceBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(GeneralData.TrainingMethod))
        {
            var a = GeneralData.TrainingMethod.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            TrainingMethodDatasourceObj.Value = c.ToArray();
        }
    }
    public void OnMethodDatasourceChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            GeneralData.TrainingMethod = string.Join(",", args.Value);
        }
        else
        {
            GeneralData.TrainingMethod = null;
        }
    }
    
    public void OnTargetDatasourceBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(GeneralData.TargetTeam))
        {
            var a = GeneralData.TargetTeam.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            TrainingTargetDatasourceObj.Value = c.ToArray();
        }
    }
    public void OnTargetDatasourceChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            GeneralData.TargetTeam = string.Join(",", args.Value);
        }
        else
        {
            GeneralData.TargetTeam = null;
        }
    }

    //Enable cell edit on single click
    public async Task CellSelectHandler(CellSelectEventArgs<TrainingGeneralInternalBudget> args)
    {
        //get selected cell index
        var CellIndexes = await DataGrid1.GetSelectedRowCellIndexesAsync();

        //get the row and cell index
        var CurrentEditRowIndex = CellIndexes[0].Item1;
        var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

        //get the available fields
        var fields = await DataGrid1.GetColumnFieldNamesAsync();
        // edit the selected cell using the cell index and column name
        await DataGrid1.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
    }


    public string GetGeneralHeader(TrainingGeneralInternal Value)
    {
        if (Value.GeneralInternalId == 0)
        {
            return "Add a new Plan";
        }
        else
        {
            return "Edit Planning Information";
        }
    }

    #endregion GeneralInternalAdapter
}
