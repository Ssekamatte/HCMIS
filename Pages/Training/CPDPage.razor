@page "/CPDPage"
@using HCMIS.Interface
@using HCMIS.Model
@using HCMIS.SHARED.Data
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Text.RegularExpressions
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject AppState AppState
@inject NavigationManager navManager
@using System.Collections;
@inject IAuthenticationService AuthService;

@inject IToastService toastService;


<style>
   /*  .e-edit-dialog {
        max-height: 98%;
        max-width: 98%;
        min-width: 98%;
        min-height: 98%;
    } */

    h6 {
        color: ghostwhite;
        background-color: blue;
        padding: 10px;
        width: 100%;
        font-size: 10px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        /*background-color: darkorange;*/
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }
    /*Change Grid Header Color */
    .e-headercell.e-attr1 {
        background: #964B00;
        color: white;
    }
</style>

@{
    var Div = (new string[] { "Employeeid" });
}

<center>
    <h5>
        <strong>CONTINOUS PROFESSIONAL DEVELOPMENT (CPDS)</strong>
    </h5>
</center>


<div class="row">
    <SfGrid @ref="@DataGrid" TValue="TrainingCpd"
            ID="Grid" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true"
            AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
            AllowSorting="true" AllowTextWrap="true" Toolbar="@ToolbarMenu">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="false" Mode="@EditMode.Dialog" Dialog="DialogParams">
            <HeaderTemplate>
                @{
                    var text = GetCPDHeader((context as TrainingCpd));
                    <div class="headerbandimg" />
                    <span>@text</span>
                }
            </HeaderTemplate>
            <Template>
                @{
                    <center>
                        <h5>
                            <strong>Continous Professional Development (CPD)</strong>
                        </h5>
                    </center>
                    CPDData = (context as TrainingCpd);
                    <div>
                        <div class="row">
                            <div class="col-md-4" hidden="hidden">
                                <SfNumericTextBox ID="Id" @bind-Value="@(CPDData.CpdId)" Placeholder="CPD Id" Enabled="false" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                            </div>
                            <div class="col-md-4">
                                <p>Employee<span style="color:red;">*</span></p>
                                <SfDropDownList @bind-Value="@(CPDData.Employeeid)" Enabled="false" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" Placeholder="Choose Employee" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                    <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                            <div class="col-md-4">
                                <p>Module<span style="color:red;">*</span></p>
                                <SfTextBox Multiline="false" ID="Module" @bind-Value="@(CPDData.Module)" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                            </div>
                            <div class="col-md-4">
                                <p>Start Date<span style="color:red;">*</span></p>
                                <SfDatePicker @bind-Value="@(CPDData.StartDate)" Enabled="true" Placeholder="Start Date" Format="dd-MM-yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                            </div>
                            <div class="col-md-4">
                                <p>End Date<span style="color:red;">*</span></p>
                                <SfDatePicker @bind-Value="@(CPDData.EndDate)" Enabled="true" Placeholder="End Date" Format="dd-MM-yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                            </div>
                            <div class="col-md-4">
                                <p>CPD Location Type<span style="color:red;">*</span></p>
                                <SfDropDownList @bind-Value="@(CPDData.LocalityId)" Enabled="true" TItem="ATrainingLocality" TValue="int?" DataSource="@LocalityData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                    <DropDownListFieldSettings Value="@nameof(ATrainingLocality.LocalityId)" Text="@nameof(ATrainingLocality.LocalityDesc)"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                            <div class="col-md-4">
                                <p>CPD Event Type<span style="color:red;">*</span></p>
                                <SfDropDownList @bind-Value="@(CPDData.CpdeventTypeId)" Enabled="true" TItem="ACpdeventType" TValue="int?" DataSource="@CPDEventTypeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                    <DropDownListFieldSettings Value="@nameof(ACpdeventType.CpdeventTypeId)" Text="@nameof(ACpdeventType.CpdeventTypeDesc)"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                            <div class="col-md-4">
                                <p>Location</p>
                                <SfTextBox Multiline="false" ID="Location" @bind-Value="@(CPDData.Location)" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                            </div>
                            <div class="col-md-4">
                                <p>Target Group/Officer</p>
                                <SfTextBox Multiline="false" ID="Officers" @bind-Value="@(CPDData.Officers)" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                            </div>
                            <div class="col-md-4">
                                <p>Amount</p>
                                <SfNumericTextBox ID="Id" @bind-Value="@(CPDData.Amount)" Enabled="true" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                            </div>
                            <div class="col-md-4">
                                <p>Currency</p>
                                <SfDropDownList @bind-Value="@(CPDData.CurrencyId)" Enabled="true" TItem="ACurrency" TValue="int?" DataSource="@CurrencyData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                    <DropDownListFieldSettings Value="@nameof(ACurrency.CurrencyId)" Text="@nameof(ACurrency.Currency)"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                            <div class="col-md-4">
                                <p>Trainer(s)</p>
                                <SfTextBox Multiline="true" ID="Trainer" rows="4" @bind-Value="@(CPDData.Trainer)" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                            </div>
                            <div class="col-md-4">
                                <p>Department(s)<span style="color:red;">*</span></p>
                                <SfMultiSelect @ref="@DepartmentsDatasourceObj" TValue="int[]" TItem="ADepartment" AllowFiltering="true" Mode="@VisualMode.CheckBox" DataSource="@DepartmentData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Departments" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                    <MultiSelectFieldSettings Value="@nameof(ADepartment.DepartmentId)" Text="@nameof(ADepartment.DepartmentDescription)"></MultiSelectFieldSettings>
                                    <MultiSelectEvents TValue="int[]" TItem="ADepartment" ValueChange="OnDepartmentDatasourceChange" DataBound="OnDepartmentDatasourceBound"></MultiSelectEvents>
                                </SfMultiSelect>
                            </div>
                        </div>
                    </div>
                }
            </Template>

        </GridEditSettings>

        <GridGroupSettings Columns="@Div" ShowDropArea="false">
            <CaptionTemplate Context="HeaderCaptionTemplateContext">
                @{
                    var dvn = (HeaderCaptionTemplateContext as CaptionTemplateContext);

                    string text = string.Empty;
                    if (dvn.Field == "Employeeid" && EmployeeData != null)
                    {
                        var data = EmployeeData.FirstOrDefault(o => o.Employeeid.ToString() == dvn.Key);
                        if (data != null)
                        {
                            text = data.EmployeeDetails;
                        }
                    }
                    <div><p class="pp"><strong>@text</strong></p></div>
                }
            </CaptionTemplate>
        </GridGroupSettings>

        <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
        <GridEvents OnToolbarClick="@GridToolbarClick" OnActionBegin="CPDActionBegin" OnActionComplete="CPDActionComplete" TValue="TrainingCpd"></GridEvents>
        <SfDataManager AdaptorInstance="@typeof(CPDAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
        <GridColumns>
            @* <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn> *@
            <GridColumn HeaderText="Manage"
                        Width="40"
                        CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Left">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-edit", CssClass = "e-flat"})"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
            <GridForeignColumn Field=@nameof(TrainingCpd.Employeeid)
                               HeaderText="Employee"
                               Width="100"
                               AllowEditing="true"
                               ForeignKeyField="@(nameof(ViewEmployeeDropDown.Employeeid))"
                               ForeignKeyValue="@(nameof(ViewEmployeeDropDown.EmployeeDetails))"
                               ForeignDataSource="@EmployeeData" AllowFiltering="false"
                               CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>
            <GridColumn Field=@nameof(TrainingCpd.CpdId) HeaderText="Id" AllowEditing="false" IsPrimaryKey="true" Visible="false" Width="150"></GridColumn>
            <GridColumn Field=@nameof(TrainingCpd.Module) HeaderText="Module" Width="120" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn>
            <GridColumn Field=@nameof(TrainingCpd.StartDate) HeaderText="Start Date" Format="dd/MMMM/yyyy" TextAlign="TextAlign.Justify" Width="100"
                        ClipMode="ClipMode.EllipsisWithTooltip" Type="ColumnType.Date" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn>
            <GridColumn Field=@nameof(TrainingCpd.EndDate) HeaderText="End Date" Format="dd/MMMM/yyyy" TextAlign="TextAlign.Justify" Width="100"
                        ClipMode="ClipMode.EllipsisWithTooltip" Type="ColumnType.Date" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn>
        @*     <GridColumn Field=@nameof(TrainingCpd.Location) HeaderText="Location" Width="90" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn>
            <GridColumn Field=@nameof(TrainingCpd.Officers) HeaderText="Officers" Width="90" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})"></GridColumn> *@
            <GridColumn Field=@nameof(TrainingCpd.Amount) HeaderText="Amount" Width="90" Format="#,#.#" CustomAttributes="@(new Dictionary<string,
        object>(){ { "class", "e-attr1" }})">
            <GridForeignColumn Field="@nameof(TrainingCpd.CurrencyId)"
                                   Visible="true"
                                   HeaderText="Currency"
                                   Width="100"
                                   ForeignKeyField="@nameof(ACurrency.CurrencyId)"
                                   ForeignKeyValue="@nameof(ACurrency.Currency)"
                                   ForeignDataSource="@CurrencyData"
                                   CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>
    </GridColumn>
        </GridColumns>
    </SfGrid>

</div>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="40%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader-Saving-text"></div>
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

@code {
    SfGrid<TrainingCpd>? DataGrid { get; set; }
    private static TrainingCpd? CPDData { get; set; }
    List<ADepartment>? DepartmentData { get; set; }
    List<ACurrency>? CurrencyData { get; set; }
    List<ATrainingLocality>? LocalityData { get; set; }
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<ACpdeventType>? CPDEventTypeData { get; set; }
    private SfMultiSelect<int[],ADepartment>? DepartmentsDatasourceObj;
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "98%" };
    LoginResultModel? Credentials { get; set; }
    SfDialog? LoadingDialogue;

    #region Toasters
    public static string ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Left";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters

    private List<object> ToolbarMenu = new List<object>() 
    {
        new ItemModel() { Text = "Capture CPD", PrefixIcon = "e-add", Id = "Grid_add"}
        // ,new ItemModel(){ Text = "Edit CPD", PrefixIcon= "e-edit", Id="Grid_edit"},
        // new ItemModel(){ Text = "Delete CPD", PrefixIcon= "e-delete", Id="Grid_delete"},
        // new ItemModel(){ Text = "Update CPD", PrefixIcon= "e-update", Id="Grid_update"},
        // new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="Grid_cancel"}
    };

    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "//IDValue###_excelexport")
        {
            this.DataGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "//IDValue###_pdfexport")
        {
            this.DataGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "//IDValue###_csvexport")
        {
            this.DataGrid.ExportToCsvAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {      

        await base.OnInitializedAsync();
        var isAuthenticated = await AuthService.CheckAuthenticationStatus();
        if (isAuthenticated == false)
        {
            navManager.NavigateTo("/LoginPage", true);
        }
        else
        {
            Credentials = await AuthService.GetUserCredentials();
            List<Task> t = new List<Task>();

            t.Add(Task.Run(async () =>
                {
                    var responseemployee = await Http.GetAsync($"BalanceScoreCard/GetEmployeeData");
                    if (responseemployee.IsSuccessStatusCode)
                    {
                        var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                        EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(contentemployee, _options);
                    }
                }));

            t.Add(Task.Run(async () =>
            {
                var response = await Http.GetAsync($"Utilities/GetLocality");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    LocalityData = JsonSerializer.Deserialize<List<ATrainingLocality>>(content, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var response = await Http.GetAsync($"Utilities/GetCpdeventType");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    CPDEventTypeData = JsonSerializer.Deserialize<List<ACpdeventType>>(content, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {

                var response = await Http.GetAsync($"Utilities/GetDepartment");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(content, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {

                var response = await Http.GetAsync($"Utilities/GetCurrency");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    CurrencyData = JsonSerializer.Deserialize<List<ACurrency>>(content, _options);
                }
            }));

            Task _t = Task.WhenAll(t);
            await _t;
        }
    }


    #region CPDAdapter Adapter
    public class CPDAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public CPDAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _SystemSettings = systemSettings;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {


            var data = new List<TrainingCpd>();

            string? AccessToken = _SystemSettings.AccessToken;
            string? BaseUrl = _ApiConfig.BaseUrl;

            try
            {

                var response = await Http.GetAsync($"CPD/GetCPD");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<TrainingCpd>>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<TrainingCpd>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {

                var val = (value as TrainingCpd);
                if (val != null)
                {
                    if (val.CpdId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"CPD/CreateCPD", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"CPD/UpdateCPD", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {

                var val = (value as TrainingCpd);
                if (val != null)
                {
                    if (val.CpdId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"CPD/CreateCPD", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"CPD/UpdateCPD", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }

    public async void CPDActionComplete(ActionEventArgs<TrainingCpd> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            DataGrid.PreventRender(false);
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            await LoadingDialogue.HideAsync();            
        }
    }

    public async void CPDActionBegin(ActionEventArgs<TrainingCpd> Args)
    {
        var data = Args.Data;
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            try
            {
                if (Args.Data.Employeeid == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please select the employee!");
                    Args.Cancel = true;
                }
                else if (Args.Data.Module == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please enter a module.!");
                    Args.Cancel = true;
                }
                else if (Args.Data.StartDate == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please enter the training start date.!");
                    Args.Cancel = true;
                }
                else if (Args.Data.EndDate == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please enter the training end date.!");
                    Args.Cancel = true;
                }

                else if (Args.Data.StartDate > Args.Data.EndDate)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("The training end date cannot be before the training start date.!");
                    Args.Cancel = true;
                }
                else if (Args.Data.LocalityId == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please select the CPD Location Type!");
                    Args.Cancel = true;
                }
                else if (Args.Data.CpdeventTypeId == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please select the CPD Event Type!");
                    Args.Cancel = true;
                }
                else if (Args.Data.Amount != null && Args.Data.CurrencyId == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please select the currency!");
                    Args.Cancel = true;
                }

                else if (Args.Data.Departments == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please choose the department(s).!");
                    Args.Cancel = true;
                }
                else
                {
                    await LoadingDialogue.ShowAsync();
                }
            }
            catch(Exception ex)
            {
                throw ex;
            }
            finally
            {
                // await LoadingDialogue.HideAsync();
            }            
        }

        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            if (Credentials != null && Credentials.StaffId > 0)
            {
                Args.Data.Employeeid = Credentials.StaffId;
            }
        }
    }

    public void OnDepartmentDatasourceBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(CPDData.Departments))
        {
            var a = CPDData.Departments.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            DepartmentsDatasourceObj.Value = c.ToArray();
        }
    }
    public void OnDepartmentDatasourceChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            CPDData.Departments = string.Join(",", args.Value);
        }
        else
        {
            CPDData.Departments = null;
        }
    }
    public string GetCPDHeader(TrainingCpd Value)
    {
        if (Value.CpdId == 0)
        {
            return "Add a new CPD";
        }
        else
        {
            return "Edit Information";
        }
    }

    #endregion CPDAdapter
}
