@page "/LogInLogsPage"
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;
@inject NavigationManager navManager;

<style>
    /*For Actual Application*/
    /*.e-edit-dialog {
                max-height: 30%;
                max-width: 60%;
                min-width: 50%;
                min-height: 20%;
            }*/

    .headerbandimg {
        background-image: url(/image/comesalogo.png);
        background-size: 20px;
        background-repeat: no-repeat;
        width: 20px;
        height: 20px;
        margin-right: 5px;
        vertical-align: top;
        display: inline-block;
        color: whitesmoke;
    }

    .pp {
        color: ghostwhite;
        background-color: #2ecc71;
        padding: 10px;
    }
    /*Increase font size for Multi Line Text Box Place Holder*/
    .e-multi-line-input label.e-float-text {
        font-size: 17px !important;
    }
</style>

<center>
    <h5>
        <strong>SYSTEM LOG IN TRAILS</strong>
    </h5>
</center>

<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <div style="padding:10px;">
                            <EditForm Model="@InputModel" OnValidSubmit="@SearchRecords">
                                <div class="row">
                                    <div class="col-md-12">
                                        <p>Search By Log In Page</p>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <p>Start Date</p>
                                                <SfDatePicker @bind-Value="@(InputModel.StartDate)" Enabled="true" Placeholder="Start Date" FloatLabelType="FloatLabelType.Never" Format="dd/MM/yyyy"></SfDatePicker>
                                            </div>
                                            <div class="col-md-4">
                                                <p>End Date</p>
                                                <SfDatePicker @bind-Value="@(InputModel.EndDate)" Enabled="true" Placeholder="End Date" FloatLabelType="FloatLabelType.Never" Format="dd/MM/yyyy"></SfDatePicker>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-12" style="padding-top: 10px;;">
                                        <SfButton CssClass="e-success" style="margin-right:10px;">Search</SfButton>
                                        <SfButton CssClass="e-danger" @onclick="ClearSearchBtnClick">Clear Search</SfButton>
                                    </div>
                                    <div class="form-group col-md-12">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>

    </div>
</div>

<SfGrid @ref="@DataGrid" TValue="ALoginLog" Query="@MainQuery" ID="Grid1" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"ExcelExport","PdfExport","CsvExport"})">
    
    <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
        

    </GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <SfDataManager AdaptorInstance="@typeof(LoginLogAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <GridEvents OnToolbarClick="@GridToolbarClick"
                TValue="ALoginLog">
    </GridEvents>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50" Visible="false"></GridColumn>
        <GridColumn Field=@nameof(ALoginLog.LoginLogId) HeaderText="LoginLogId" AllowEditing="false" IsPrimaryKey="true" Width="150" Visible="false"></GridColumn>
        <GridColumn Field=@nameof(ALoginLog.UserName) HeaderText="User Name" Width="150"></GridColumn>
        <GridColumn Field=@nameof(ALoginLog.LoginDate)
                    HeaderText="Log In Date"
                    Format="dd/MMMM/yyyy HH:mm:ss"
                    TextAlign="TextAlign.Justify"
                    Width="80"
                    ClipMode="ClipMode.EllipsisWithTooltip"
                    Type="ColumnType.Date"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
        </GridColumn>

        <GridColumn Field=@nameof(ALoginLog.LogOutDate)
                    HeaderText="Log Out Date"
                    Format="dd/MMMM/yyyy HH:mm:ss"
                    TextAlign="TextAlign.Justify"
                    Width="80"
                    ClipMode="ClipMode.EllipsisWithTooltip"
                    Type="ColumnType.Date"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
        </GridColumn>
    </GridColumns>
</SfGrid>


@code {
    SfGrid<ALoginLog>? DataGrid { get; set; }
    Query MainQuery { get; set; }

    private UtilitiesSearchPanel InputModel = new();

    /// <summary>
    /// Event for Toolbar click for Grid Exporting
    /// </summary>
    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid1_excelexport")
        {
            this.DataGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid1_pdfexport")
        {
            this.DataGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid1_csvexport")
        {
            this.DataGrid.ExportToCsvAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        InputModel.StartDate = DateTime.Now.Date;
        InputModel.EndDate = DateTime.Now.Date;

        SearchRecords();

        await base.OnInitializedAsync();
        var isAuthenticated = await AuthService.CheckAuthenticationStatus();
        if (isAuthenticated == false)
        {
            navManager.NavigateTo("/LoginPage", true);
        }
        else
        {
            //Show default selected period in filters on load
            
        }
    }


    private void SearchRecords()
    {
        try
        {
            string? sdate = null;
            string? edate = null;

            if (InputModel.StartDate != null)
            {
                sdate = InputModel.StartDate.Value.ToString("dd-MM-yyyy");
            }
            if (InputModel.EndDate != null)
            {
                edate = InputModel.EndDate.Value.ToString("dd-MM-yyyy");
            }

            MainQuery = new Query()
            .AddParams("StartDate", sdate)
            .AddParams("EndDate", edate);
        }

        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
    }

    private void ClearSearchBtnClick()
    {
        InputModel = new();
        MainQuery = new Query();
    }

    #region LoginLog Region
    public class LoginLogAdapter : DataAdaptor
    {
        HttpClient Http;
        ApiConfig _ApiConfig;
        SystemSettings _SystemSettings;
        private readonly JsonSerializerOptions _options;
        public IToastService toastService;
        private readonly NavigationManager Navigation;
        public LoginLogAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _SystemSettings = systemSettings;

        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<ALoginLog>();
            try
            {
                string? StartDate = null;
                string? EndDate = null;

                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;

                    if (val.FirstOrDefault(o => o.Key == "StartDate").Value != null)
                    {
                        StartDate = val.FirstOrDefault(o => o.Key == "StartDate").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "EndDate").Value != null)
                    {
                        EndDate = val.FirstOrDefault(o => o.Key == "EndDate").Value.ToString();
                    }
                }

                var response = await Http.GetAsync($"Utilities/GetLoginLog?StartDate={StartDate}&EndDate={EndDate}");
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    toastService.ShowError(response.ReasonPhrase);
                }
                data = JsonSerializer.Deserialize<List<ALoginLog>>(content, _options);

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ALoginLog>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

    }

    #endregion LoginLog Region
}


