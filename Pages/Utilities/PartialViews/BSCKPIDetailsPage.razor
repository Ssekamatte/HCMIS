@* <h3>BSCKPIDetailsPage</h3> *@

@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models
@inject IToastService toastService;

@{
    var Div = (new string[] { "BscPerspectiveTypeId" });
}

<div class="col-md-12">
    @if (!string.IsNullOrEmpty(RegisterError))
    {
        <p class="alert-danger" style="padding:10px;">
            @RegisterError
        </p>
    }
</div>

@if (datasource != null)
{
    <div class="col-md-12">

        <SfGrid @ref="@ObjectivesDetailsDataGrid" DataSource="@datasource" GridLines="GridLine.Both"
                TValue="ABscKpidetails" ID="Grid1" AllowTextWrap="true" AllowPaging="false"
                AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" 
        AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true">
    <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
       

            <GridGroupSettings Columns="@Div" ShowDropArea="false">
                <CaptionTemplate Context="HeaderCaptionTemplateContext">
                    @{
                        var dvn = (HeaderCaptionTemplateContext as CaptionTemplateContext);

                        string text = string.Empty;
                        if (dvn.Field == "BscPerspectiveTypeId" && BscPerspectiveTypeData != null)
                        {
                            var data = BscPerspectiveTypeData.FirstOrDefault(o => o.BscPerspectiveTypeId.ToString() == dvn.Key);
                            if (data != null)
                            {
                                text = "Perspective: " + data.BscPerspectiveTypeDescription;
                            }
                        }
                        <div><p class="pp"><strong>@text</strong></p></div>
                    }
                </CaptionTemplate>
            </GridGroupSettings>

            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridPageSettings PageSizes="true"></GridPageSettings>

            <GridAggregates>
                <GridAggregate>
                    <GridAggregateColumns>
                        <GridAggregateColumn Field=@nameof(ABscKpidetails.IndividualTargetWeight) Type="Syncfusion.Blazor.Grids.AggregateType.Sum">
                            <GroupFooterTemplate>
                                @{
                                    var aggregate = (context as AggregateTemplateContext);
                                    <div>
                                        @if (isentryvalid == true)
                                        {
                                            <p span style="color:Purple;">Total: @aggregate.Sum</p>
                                        }
                                        else
                                        {
                                            <p span style="color:red;">Total: @aggregate.Sum</p>
                                            // <p>You have validation errors</p>
                                        }

                                    </div>
                                }
                            </GroupFooterTemplate>
                        </GridAggregateColumn>
                    </GridAggregateColumns>
                </GridAggregate>
            </GridAggregates>

            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell" CellSelectionMode="CellSelectionMode.Box"></GridSelectionSettings>

            @* OnCellSave="CellSaveHandler" *@

            <GridEvents CellSelected="PerspectiveCellSelectHandler"
                        QueryCellInfo="QueryCellInfoHandlerChild"                        
                        CellSaved="PerspectiveOnCellSaved"
                        TValue="ABscKpidetails">
            </GridEvents>

            <GridColumns>
                @* <GridColumn Type="ColumnType.CheckBox" Width="50" Visible="false"></GridColumn> *@

                <GridColumn Field=@nameof(ABscKpidetails.BsckpidetailsId)
                            HeaderText="BsckpidetailsId"
                            AllowEditing="false"
                            IsPrimaryKey="true"
                            Width="80"
                            Visible="true"
                            CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr3" }})">
                </GridColumn>

                <GridColumn Field=@nameof(ABscKpidetails.Bsckpiid) HeaderText="Bsckpiid" TextAlign="TextAlign.Right" AllowEditing="false" ValidationRules="@(new ValidationRules { Required = false })" EditType="EditType.NumericEdit" Visible=false Width="180" IsFrozen="true"></GridColumn>
        

                <GridForeignColumn Field=@nameof(ABscKpidetails.BscPerspectiveTypeId)
                                   HeaderText="Perspective"
                                   Width="90"
                                   AllowEditing="false"
                                   ForeignKeyField="@(nameof(ABscPerspectivesType.BscPerspectiveTypeId))"
                                   ForeignKeyValue="@(nameof(ABscPerspectivesType.BscPerspectiveTypeDescription))"
                                   ForeignDataSource="@BscPerspectiveTypeData"
                                   AllowFiltering="false"
                                   IsFrozen="false"
                                   CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                </GridForeignColumn>

                <GridColumn Field=@nameof(ABscKpidetails.Objective)
                            HeaderText="Objective (s)"
                            TextAlign="TextAlign.Justify"
                            AllowEditing="true"
                            ValidationRules="@(new ValidationRules { Required = false })"
                            Width="150"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                    <EditTemplate Context="ObjectiveContext">
                        <SfTextBox Multiline=true rowspan="8" @bind-Value=@((ObjectiveContext as ABscKpidetails).Objective) Placeholder="Please Type" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                    </EditTemplate>
                </GridColumn>

                <GridColumn Field=@nameof(ABscKpidetails.IndividualTargetWeight)
                            HeaderText="Individual Target Weight"
                            TextAlign="TextAlign.Justify"
                            AllowEditing="true"
                            ValidationRules="@(new ValidationRules { Required = false, Min = 1 , Max=100 })"
                            EditType="EditType.NumericEdit"
                            Format="###.##"
                            Width="50"
                            EditorSettings="@(new NumericEditCellParams() {Params = new Syncfusion.Blazor.Inputs.NumericTextBoxModel<object>(){ShowSpinButton=false}})"
                            ClipMode="ClipMode.EllipsisWithTooltip"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                </GridColumn>

                <GridForeignColumn Field=@nameof(ABscKpidetails.MeasurementMetricId)
                                   HeaderText="Basic Unit"
                                   TextAlign="TextAlign.Justify"
                                   Width="60"
                                   AllowEditing="true"
                                   ValidationRules="@(new ValidationRules { Required = false})"
                                   ForeignKeyField="@(nameof(AMeasurementMetric.MeasurementMetricId))"
                                   ForeignKeyValue="@(nameof(AMeasurementMetric.MeasurementMetricDesc))"
                                   ForeignDataSource="@MeasurementUnitData"
                                   CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                </GridForeignColumn>
            </GridColumns>
        </SfGrid>

    </div>
}


@code {
    [Parameter]
    public List<ABscKpidetails>? targetdata { get; set; }
    [Parameter]
    public int Bsckpiid { get; set; }
    [Parameter]
    public EventCallback<List<ABscKpidetails>?> onscorecardtoggle { get; set; }
    public SfGrid<ABscKpidetails>? ObjectivesDetailsDataGrid { get; set; }
    List<ABscKpidetails>? datasource { get; set; }
    [Parameter]
    public List<ABscPerspectivesType>? BscPerspectiveTypeData { get; set; }
    [Parameter]
    public List<ABscPerspectivesType>? BscPerspectiveTypeDataRepeated { get; set; }
    [Parameter]
    public List<AMeasurementMetric>? MeasurementUnitData { get; set; }

    // Syncfusion.Blazor.Grids.CaptionTemplateContext? dvn { get; set; }
    //Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }
    int? previousBsckpiid { get; set; }
    [Parameter]
    public ViewABscPerspectivesDetail? perspweightsfinancial { get; set; }
    [Parameter]
    public ViewABscPerspectivesDetail? perspweightsinternal { get; set; }
    [Parameter]
    public ViewABscPerspectivesDetail? perspweightscustomer { get; set; }
    [Parameter]
    public ViewABscPerspectivesDetail? perspweightslearning { get; set; }
    bool isentryvalid = true;
    string? RegisterError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (previousBsckpiid != Bsckpiid)
        {
            int countid = -10000;
            previousBsckpiid = Bsckpiid;
            datasource = new List<ABscKpidetails>();
            if (targetdata != null && targetdata.Count() > 0)
            {
                datasource.AddRange(targetdata);
            }
            else
            {

                if (BscPerspectiveTypeDataRepeated != null)
                {
                    foreach (var item in BscPerspectiveTypeDataRepeated)
                    {
                        var m = new ABscKpidetails();
                        m.BsckpidetailsId = countid;
                        m.BscPerspectiveTypeId = item.BscPerspectiveTypeId;
                        m.Bsckpiid = Bsckpiid;

                        datasource.Add(m);
                        countid++;
                    }

                    //datasource = datasource.OrderBy(o => o.BscPerspectiveTypeId).ToList();
                }
            }
        }
    }

    private async Task PerspectiveOnCellSaved(CellSaveArgs<ABscKpidetails> args)
    {
        try
        {
            await ObjectivesDetailsDataGrid.EndEditAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            string _objective = args.Data.Objective;
            // await this.ObjectivesDetailsDataGrid.EndEditAsync();
            await onscorecardtoggle.InvokeAsync(datasource);
        }
    }


    //For Child Grid
    //Enable cell edit on single click
    public async Task PerspectiveCellSelectHandler(CellSelectEventArgs<ABscKpidetails> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await ObjectivesDetailsDataGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await ObjectivesDetailsDataGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await ObjectivesDetailsDataGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    // public async void CellSaveHandler(CellSaveArgs<ABscKpidetails> args)
    // {
    //     if (!object.Equals(args.Value, args.PreviousValue))
    //     {
    //         await ObjectivesDetailsDataGrid.EndEditAsync();
    //         // get the row index using the primarykey value
    //         // var RowIndex = await GridInstance.GetRowIndexByPrimaryKey(e.RowData.OrderID);
    //         // // edit the selected cell using the cell index and column name
    //         // await GridInstance.EditCell(RowIndex + 1, e.ColumnName);
    //     }

    //     //Original Data
    //     //ObjectivesDetailsDataGrid.EndEditAsync();
    //     ////var datainfo = ObjectivesDetailsDataGrid.CurrentViewData;

    // }


    public async void CellSaveHandler(CellSaveArgs<ABscKpidetails> args)
    {
        try
        {
            if (args.ColumnName == "IndividualTargetWeight")
            {

                List<double?> _summation = new List<double?>();
                double sumtotal = 0;

                if (!object.Equals(args.Value, args.PreviousValue))
                {
                    var datainfo = await ObjectivesDetailsDataGrid.GetCurrentViewRecordsAsync();

                    var filteredList = datainfo.Where(x => x.BscPerspectiveTypeId == args.RowData.BscPerspectiveTypeId).ToList();

                    foreach (var n in filteredList)
                    {
                        _summation.Add(n.IndividualTargetWeight);
                    }

                    sumtotal = _summation.Sum(x => Convert.ToInt32(x));

                    double newsumtotal = (sumtotal - Convert.ToDouble(args.PreviousValue)) + Convert.ToDouble(args.Value);
                    //toastService.ShowError("Value is " + newsumtotal);

                    @if (perspweightscustomer != null && ((newsumtotal > perspweightscustomer.PerspectiveTotalWeight) || (newsumtotal < perspweightscustomer.PerspectiveTotalWeight)) && args.RowData.BscPerspectiveTypeId == 3)
                    {
                        isentryvalid = false;
                        //args.Cancel = true;
                        RegisterError = "Please ensure your set customer perspective weights equal to : " + perspweightscustomer.WeightPercentage;
                        //toastService.ShowError("Value is " + sumtotal);
                    }
                    else if (perspweightsfinancial != null && ((newsumtotal > perspweightsfinancial.PerspectiveTotalWeight) || (newsumtotal < perspweightsfinancial.PerspectiveTotalWeight)) && args.RowData.BscPerspectiveTypeId == 1)
                    {
                        isentryvalid = false;
                        //args.Cancel = true;
                        RegisterError = "Please ensure your set financial perspective weights equal to : " + perspweightsfinancial.WeightPercentage;
                        //toastService.ShowError("Value is " + sumtotal);
                    }
                    else if (perspweightsinternal != null && ((newsumtotal > perspweightsinternal.PerspectiveTotalWeight) || (newsumtotal < perspweightsinternal.PerspectiveTotalWeight)) && args.RowData.BscPerspectiveTypeId == 2)
                    {
                        isentryvalid = false;
                        //args.Cancel = true;
                        RegisterError = "Please ensure your set internal perspective weights equal to : " + perspweightsinternal.WeightPercentage;
                        //toastService.ShowError("Value is " + sumtotal);
                    }
                    else if (perspweightslearning != null && ((newsumtotal > perspweightslearning.PerspectiveTotalWeight) || (newsumtotal < perspweightslearning.PerspectiveTotalWeight)) && args.RowData.BscPerspectiveTypeId == 4)
                    {
                        isentryvalid = false;
                        //args.Cancel = true;
                        RegisterError = "Please ensure your set learning perspective weights equal to : " + perspweightslearning.WeightPercentage;
                        //toastService.ShowError("Value is " + sumtotal);
                    }
                    else
                    {
                        isentryvalid = true;
                        RegisterError = string.Empty;
                    }
                }
            }
            else
            {

            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (!object.Equals(args.Value, args.PreviousValue))
            {
                if (ObjectivesDetailsDataGrid != null)
                {
                    await ObjectivesDetailsDataGrid.EndEditAsync();
                }
            }

            //toastService.ShowError("Value is Okay");
        }
    }

    public async void BatchSave(BeforeBatchSaveArgs<ABscKpidetails> Args)
    {
        // update your database here
    }

    public async void QueryCellInfoHandlerChild(QueryCellInfoEventArgs<ABscKpidetails> Args)
    {
        if (Args.Column.Field == nameof(ABscKpidetails.BscPerspectiveTypeId))
        {
            //Assign color to different perspectives
            if (Args.Data.BscPerspectiveTypeId == 1)
            {
                Args.Cell.AddClass(new string[] { "financial" });
            }
            if (Args.Data.BscPerspectiveTypeId == 2)
            {
                Args.Cell.AddClass(new string[] { "Internal" });
            }
            if (Args.Data.BscPerspectiveTypeId == 3)
            {
                Args.Cell.AddClass(new string[] { "Customer" });
            }
            if (Args.Data.BscPerspectiveTypeId == 4)
            {
                Args.Cell.AddClass(new string[] { "Learning" });
            }
        }
    }

    //Save Cel Without Stopping User From Capturing Data
    // async Task CellSaved(CellSaveArgs<Order> e)
    // {
    //     if (!object.Equals(e.Value, e.PreviousValue))
    //     {
    //         await GridInstance.EndEdit();
    //         // get the row index using the primarykey value
    //         var RowIndex = await GridInstance.GetRowIndexByPrimaryKey(e.RowData.OrderID);
    //         // edit the selected cell using the cell index and column name
    //         await GridInstance.EditCell(RowIndex + 1, e.ColumnName);
    //     }
    // }

}
