@page "/BSCKPIFormPage"
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.Pages.Utilities.PartialViews
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;

<style>
     /*Manage Records Button*/
    .e-grid .e-icons:not(.e-btn-icon) {
        color: #00cc00;
        color: floralwhite;
        font-size: smaller;
        font-weight: bolder;
    }

    .e-grid .e-unboundcelldiv .e-icons:not(.e-btn-icon) {
        color: white;
    }

    /*Manage Records Button*/

/*Grid Aggregate Column Color*/
.e-grid .e-summaryrow .e-summarycell, .e-grid .e-summaryrow .e-templatecell, .e-grid .e-summarycontent .e-indentcell, .e-grid .e-indentcell.e-detailindentcelltop, .e-grid .e-groupfooterrow.e-summaryrow .e-indentcell.e-indentcelltop {
    background-color: orange;
    border-color: black;
    color: #201f1e;
    border-bottom-color: black;
    font-size: x-large;
}

    /*Disable Grid on Load and Enable it on DataBound*/
    .e-grid[disable="yes"] {
        opacity: .5;
        pointer-events: none;
        -ms-touch-action: none;
        touch-action: none;
        cursor: no-drop;
    }

    /*hide the Default Grid spinner */
    .e-grid .e-spinner-pane {
        display: none;
    }

    /*to remove the edit button alone*/
    .e-removeEditcommand .e-unboundcell .e-unboundcelldiv button.e-Editbutton {
        display: none;
    }

    /*to remove the delete button alone*/
    .e-removeDeletecommand .e-unboundcell .e-unboundcelldiv button.e-Deletebutton {
        display: none;
    }


    /*Disable select all on grid checkbox*/
    .e-headercelldiv.e-headerchkcelldiv .e-checkbox-wrapper.e-css {
        pointer-events: none;
        opacity: 0.5;
    }

    /*Change Dialog Header Close Button*/
  /*   .e-dialog .e-btn .e-btn-icon.e-icon-dlg-close {
        float: right;
        font-size: 12px;
        width: auto;
    } */

    /* .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {
        background-color: #d9edf7;
        border-color: #d9edf7;
        border-radius: 1px;
        bottom: 0;
        float: right;
        height: 32px;
        left: 15px;
        position: relative;
        width: 15px;
        padding: 1px 9px;
    } */

    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #964B00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    .pp {
        color: ghostwhite;
        background-color: #2ecc71;
        padding: 10px;
    }

    .disablecell {  
        background-color: #8e44ad; /*wisteria*/
        pointer-events: none;
        display: none;
    }

    .e-grid .e-gridcontent .e-rowcell.disablecell {
        color: ghostwhite;
    }

    h6 {
        color: ghostwhite;
        background-color: #268cff;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

     .financial {   
        background-color: #8e44ad; 
        pointer-events: none;
        display: none;
    }

    .e-grid .e-gridcontent .e-rowcell.financial {
        color: ghostwhite;
    }

    .Internal {
        background-color: #2c3e50; 
        pointer-events: none;
        display: none;
    }

    .e-grid .e-gridcontent .e-rowcell.Internal {
        color: ghostwhite;
    }

    .Customer {
        background-color: #1abc9c;
        pointer-events: none;
        display: none;
    }

    .e-grid .e-gridcontent .e-rowcell.Customer {
        color: ghostwhite;
    }

    .Learning {
        background-color: #1e3799;
        pointer-events: none;
        display: none;
    }

    .e-grid .e-gridcontent .e-rowcell.Learning {
        color: ghostwhite;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25"/> HCMIS
        </strong>| FINANCIAL YEAR OBJECTIVES
    </li>
</ol>

@{
    var Div = (new string[] { "BscPerspectiveTypeId"});
}

<SfSpinner @ref="SpinnerObj" Label="Loading Please Wait....." Size="50">
    @*Render custom spinner component.*@
</SfSpinner>


<SfGrid @ref="@ObjectivesGrid" ID="Grid" TValue="ABscKpi" @attributes="@GridAttributes" Query="@ChildQuery" AllowPaging="true"
        AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
        AllowTextWrap="true" AllowSorting="true" Toolbar="@ToolbarMenu">

    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="false"></GridPageSettings>
    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <SfDataManager AdaptorInstance="@typeof(ObjectivesAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEvents OnActionComplete="@OnPerspectiveActionComplete"
                OnActionBegin="@OnPerspectivesActionBegin"
                RowSelecting="RowSelectingHandler"
                OnLoad="LoadHandler"
                DataBound="DataBound"
                CellSelected="CellSelectHandler"
                TValue="ABscKpi">
    </GridEvents>

    @*Child Grid*@
    
    <GridTemplates>
        <DetailTemplate>
            @{
                KpiData = (context as ABscKpi);

                <div class="form-group col-md-12">

                    <SfGrid @ref="@DetailsDataGrid" 
                    TValue="ABscKpidetails" 
                    ID="DetailsGrid" 
                    Query=@(new Query().Where(new WhereFilter() { Field = "Bsckpiid", Operator = "equal", value = KpiData.Bsckpiid, IgnoreCase = false, IgnoreAccent = false })) 
                    AllowPaging="true" 
                    AllowFiltering="false"
                        AllowReordering="false" 
                        AllowResizing="true" 
                        AllowGrouping="true" 
                        AllowExcelExport="true" 
                        AllowPdfExport="true" 
                        GridLines="GridLine.Both" 
                        AllowSelection="false"
                        AllowSorting="false" 
                        AllowTextWrap="true">
                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" Dialog="@DialogParams"></GridEditSettings>

                        <GridGroupSettings Columns="@Div" ShowDropArea="false">
                            <CaptionTemplate Context="HeaderCaptionTemplateContext">
                                @{
                                    dvn = (HeaderCaptionTemplateContext as CaptionTemplateContext);

                                    string text = string.Empty;
                                    if (dvn.Field == "BscPerspectiveTypeId" && BscPerspectiveTypeData != null)
                                    {
                                        var data = BscPerspectiveTypeData.FirstOrDefault(o => o.BscPerspectiveTypeId.ToString() == dvn.Key);
                                        if (data != null)
                                        {
                                            text = "Perspective: " + data.BscPerspectiveTypeDescription;
                                        }
                                    }
                                    <div><p class="pp"><strong>@text</strong></p></div>
                                }
                            </CaptionTemplate>
                        </GridGroupSettings>

                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
                        <GridPageSettings PageSizes="true"></GridPageSettings>
                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                        <GridEvents OnToolbarClick="@GridToolbarClick" TValue="ABscKpidetails"></GridEvents>
                        <SfDataManager AdaptorInstance="@typeof(ObjectivesDetailsAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                        <GridColumns>
                            <GridColumn Type="ColumnType.CheckBox" Width="50" Visible="false"></GridColumn>
                        	<GridColumn Field=@nameof(ABscKpidetails.BsckpidetailsId) Visible="false" HeaderText="BsckpidetailsId" IsPrimaryKey="true" Width="150"></GridColumn>
                            <GridColumn Field=@nameof(ABscKpidetails.Bsckpiid) Visible="false" HeaderText="Bsckpiid" TextAlign="TextAlign.Right" Width="110"> </GridColumn>
                            <GridForeignColumn Field=@nameof(ABscKpidetails.BscPerspectiveTypeId)
                                               HeaderText="Perspective"
                                               Width="80"
                                               AllowEditing="false"
                                               ForeignKeyField="@(nameof(ABscPerspectivesType.BscPerspectiveTypeId))"
                                               ForeignKeyValue="@(nameof(ABscPerspectivesType.BscPerspectiveTypeDescription))"
                                               ForeignDataSource="@BscPerspectiveTypeData"
                                               AllowFiltering="false"
                                               IsFrozen="false"
                                               CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                            </GridForeignColumn>
                            <GridColumn Field=@nameof(ABscKpidetails.Objective) HeaderText="Objective" Width="150" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"></GridColumn>
                            <GridColumn Field=@nameof(ABscKpidetails.IndividualTargetWeight) HeaderText="Individual Target Weight"  Width="60" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"></GridColumn>

                            <GridForeignColumn Field=@nameof(ABscKpidetails.MeasurementMetricId)
                                               HeaderText="Basic Unit"
                                               TextAlign="TextAlign.Justify"
                                               Width="60"
                                               AllowEditing="true"
                                               ValidationRules="@(new ValidationRules { Required = true})"
                                               ForeignKeyField="@(nameof(AMeasurementMetric.MeasurementMetricId))"
                                               ForeignKeyValue="@(nameof(AMeasurementMetric.MeasurementMetricDesc))"
                                               ForeignDataSource="@MeasurementUnitData"
                                               CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                            </GridForeignColumn>
                        </GridColumns>
                    </SfGrid>

                </div>
            }
        </DetailTemplate>
    </GridTemplates>

    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog"  Dialog="@DialogParams">
        <HeaderTemplate>
            @{
                var text = GetWeightHeader((context as ABscKpi));
                <div class="headerbandimg">
                    <span>@text</span>
                </div>
            }
        </HeaderTemplate>
        <Template Context="BscPerspectivesContext">
            @{
                <center>
                    <h5>
                        <strong>CAPTURE YOUR ANNUAL OBJECTIVES</strong>
                    </h5>
                </center>

                KpiData = (BscPerspectivesContext as ABscKpi);
                @if (KpiData != null)
                {
                    <div class="row">
                        <div class="col-md-12" hidden>
                            <SfNumericTextBox @bind-Value="@(KpiData.Bsckpiid)" Enabled="false" Placeholder="KPI Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>

                        <div class="col-md-4">
                            <p>Financial Year:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.FinancialYearId)"
                                            Enabled="@isFinancialYearEnabled" TItem="AFinancialYear" TValue="int?"
                                            DataSource="@FinancialYearData" Placeholder="Please select"
                                            FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                            FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(AFinancialYear.Id)"
                                                           Text="@nameof(AFinancialYear.FinancialYear)">
                                </DropDownListFieldSettings>
                                <DropDownListEvents TValue="int?"
                                                    TItem="AFinancialYear" ValueChange="OnYearChange">
                                </DropDownListEvents>
                            </SfDropDownList>
                        </div>

                        <div class="col-md-4">
                            <p>Employee:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.EmployeeId)"
                                            Enabled="@EmployeeDD" TItem="ViewEmployeeDropDown" TValue="int?"
                                            DataSource="@EmployeeData" Placeholder="Please select"
                                            FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                            FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                            <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)"
                                            Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)">
                                </DropDownListFieldSettings>
                                <DropDownListEvents TValue="int?"
                                                    TItem="ViewEmployeeDropDown"
                                                    ValueChange="OnEmployeeChange">
                                </DropDownListEvents>
                            </SfDropDownList>
                        </div>

                        <div class="col-md-4">
                            <p>Section:</p>
                            @if (employeeno != null)
                            {
                                if(!string.IsNullOrEmpty(employeeno.SectionDescription))
                                {
                                    @employeeno.SectionDescription;
                                }
                                else
                                {
                                    <p>N/A</p>
                                }
                                
                            }
                        </div>

                        <div class="col-md-12" style="margin-top:5px;">

                            <div class="row">
                                <BSCKPISummaryPage 
                                    perspweightscustomer="@perspweightscustomer" 
                                    perspweightsfinancial="@perspweightsfinancial" 
                                    perspweightsinternal="@perspweightsinternal" 
                                    perspweightslearning="@perspweightslearning">
                                
                                </BSCKPISummaryPage>                           

                            </div>
                        </div>

                        @if (perspweightsfinancial == null || perspweightsinternal == null || perspweightscustomer == null || perspweightslearning == null)
                        {
                            <h6 style="background-color:red; color:ghostwhite; text-align:center;">Your line manager has not yet set all perspective weights for this financial year</h6>
                        }
                        else
                        {
                            @*GridPerspectives*@
                            
                            <div class="form-group col-md-12" style="padding-top:10px">

                                <HCMIS.Pages.Utilities.PartialViews.BSCKPIDetailsPage 
                                                                                      Bsckpiid="@KpiData.Bsckpiid" 
                                                                                      BscPerspectiveTypeData="@BscPerspectiveTypeData" 
                                                                                      BscPerspectiveTypeDataRepeated="@BscPerspectiveTypeDataRepeated"
                                                                                      MeasurementUnitData="@MeasurementUnitData"
                                                                                      onscorecardtoggle="@ToggleKpidetails"
                                                                                      targetdata="@KpiData.ABscKpidetails.ToList()" 
                                                                                      @ref="detailsref">
                                </HCMIS.Pages.Utilities.PartialViews.BSCKPIDetailsPage>

                            </div>
                            
                        }
                        

                    </div>
                }
            }
        </Template>

        <FooterTemplate>
            <button @onclick="@onSubmitForm" class="btn btn-success" data-ripple="true" style="margin-right:10px;">Save</button>
            <button @onclick="@DialogCancelBtnclicked" class="btn btn-danger" data-ripple="true">Cancel</button> 
        </FooterTemplate>


    </GridEditSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="30"></GridColumn>

        <GridColumn HeaderText="Manage Record"
                    Width="30"
                    CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr3" }})"
                    TextAlign="TextAlign.Left">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>

        <GridColumn Field=@nameof(ABscKpi.Bsckpiid) Visible=false HeaderText="Bsckpi Id" AllowEditing="false" IsPrimaryKey="true"></GridColumn>

        <GridForeignColumn Field=@nameof(ABscKpi.FinancialYearId)
                           HeaderText="Financial Year"
                           Width="80"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(AFinancialYear.Id))"
                           ForeignKeyValue="@(nameof(AFinancialYear.FinancialYear))"
                           ForeignDataSource="@FinancialYearData"
                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridForeignColumn>
        <GridForeignColumn Field=@nameof(ABscKpi.EmployeeId)
                           HeaderText="Employee"
                           Width="80"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ViewEmployeeDropDown.Employeeid))"
                           ForeignKeyValue="@(nameof(ViewEmployeeDropDown.EmployeeDetails))"
                           ForeignDataSource="@EmployeeData"
                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridForeignColumn>
    </GridColumns>
</SfGrid>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="20%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>


@code {
    SfGrid<ABscKpidetails>? DetailsDataGrid { get; set; }
    /// <summary>
    /// Event for Toolbar click for Grid Exporting
    /// </summary>
    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid1_excelexport")
        {
            this.DetailsDataGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid1_pdfexport")
        {
            this.DetailsDataGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid1_csvexport")
        {
            this.DetailsDataGrid.ExportToCsvAsync();
        }
    }


    #region Declarations
    private static ABscKpi? KpiData { get; set; }
    SfGrid<ABscKpi>? ObjectivesGrid;
    // SfGrid<ABscKpidetails>? ChildDataGrid;
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "90%" };
    List<ABscPerspectives>? BscPerspectiveData { get; set; }
    List<ViewPerspectiveTotalWeightSum>? BscPerspectiveSumData { get; set; }
    List<AFinancialYear>? FinancialYearData { get; set; }
    List<ADepartment>? DepartmentsData { get; set; }
    List<ABscPerspectivesType>? BscPerspectiveTypeData { get; set; }
    List<ABscPerspectivesType>? BscPerspectiveTypeDataRepeated { get; set; }
    List<AMeasurementMetric>? MeasurementUnitData { get; set; }
    List<ABscKpidetails>? BscKpiDetailData { get; set; }
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<ViewABscPerspectivesDetail>? PerspectivesDetailData { get; set; }

    Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }
    Syncfusion.Blazor.Grids.CaptionTemplateContext? dvn { get; set; }

    EmployeeRegistrationModel inputmodel { get; set; } = new EmployeeRegistrationModel();
    [Parameter]
    public int? finyear { get; set; }
    LoginResultModel? Credentials { get; set; }
    public bool WeightTextBox = true;
    public bool BasicUnitDD = true;
    public bool EmployeeDD = false;
    private static ViewEmployeeDropDown? employeeno { get; set; }
    SfSpinner? SpinnerObj;
    private Dictionary<string, object> GridAttributes { get; set; } = new Dictionary<string, object>();
    bool isFinancialYearEnabled { get; set; } = false;
    int? finyearid = null;
    SfDialog? LoadingDialogue;
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    int countid = -1000;
    int? YrId = null;
    string? weighttotalpercentage  = "70";
    Syncfusion.Blazor.Grids.Action _previous { get; set; }
    public Query ChildQuery = new Query();
    public Query MainQuery = new Query();
    private static ViewABscPerspectivesDetail? perspweightsfinancial { get; set; }
    private static ViewABscPerspectivesDetail? perspweightsinternal { get; set; }
    private static ViewABscPerspectivesDetail? perspweightscustomer { get; set; }
    private static ViewABscPerspectivesDetail? perspweightslearning { get; set; }

    BSCKPIDetailsPage detailsref;

    private List<object> ToolbarMenu = new List<object>()
    {
            new ItemModel() { Text = "Add Objective", PrefixIcon = "e-add", Id = "Grid_add"},
            new ItemModel(){ Text = "Edit Objective", PrefixIcon= "e-edit", Id="Grid_edit"},
    };


    #endregion Declarations

    protected override async Task OnInitializedAsync()
    {
        Credentials = await AuthService.GetUserCredentials();

        employeeno = null;
        perspweightsfinancial = null;
        perspweightsinternal = null;
        perspweightscustomer = null;
        perspweightslearning = null;

        List<Task> t = new List<Task>();
        t.Add(Task.Run(async () =>
        {
            var responsebscperspective = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
            if (responsebscperspective.IsSuccessStatusCode)
            {
                var contentbscperspective = await responsebscperspective.Content.ReadAsStringAsync();
                BscPerspectiveData = JsonSerializer.Deserialize<List<ABscPerspectives>>(contentbscperspective, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsebscperspectivedetail = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicator");
            if (responsebscperspectivedetail.IsSuccessStatusCode)
            {
                var contentbscperspectivedetail = await responsebscperspectivedetail.Content.ReadAsStringAsync();
                BscKpiDetailData = JsonSerializer.Deserialize<List<ABscKpidetails>>(contentbscperspectivedetail, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsefinyear = await Http.GetAsync($"FinancialYear/list");
            if (responsefinyear.IsSuccessStatusCode)
            {
                var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
                FinancialYearData = JsonSerializer.Deserialize<List<AFinancialYear>>(contentfinyear, _options);

                DateTime currentdate = DateTime.Now;
                string? financialyeardesc = null;
                if (currentdate.Month >= 6)
                {
                    financialyeardesc = $"{currentdate.Year}/{(currentdate.Year + 1)}";
                }
                else if (currentdate.Month < 6)
                {
                    financialyeardesc = $"{(currentdate.Year - 1)}/{currentdate.Year}";
                }

                var b = FinancialYearData.FirstOrDefault(o => o.FinancialYear.Trim() == financialyeardesc.Trim());
                if (b != null)
                {
                    finyearid = b.Id;

                    //Load ABscPerspectivesDetail Data after getting current Financial Year ID
                    var responsebscperspectivedetail = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesDetail?YearId={finyearid}");
                    if (responsebscperspectivedetail.IsSuccessStatusCode)
                    {
                        var contentbscperspectivedetail = await responsebscperspectivedetail.Content.ReadAsStringAsync();
                        PerspectivesDetailData = JsonSerializer.Deserialize<List<ViewABscPerspectivesDetail>>(contentbscperspectivedetail, _options);
                    }
                }
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
            if (responsebscperspectivetype.IsSuccessStatusCode)
            {
                var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesType>>(contentbscperspectivetype, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
            if (responsedepartment.IsSuccessStatusCode)
            {
                var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
                DepartmentsData = JsonSerializer.Deserialize<List<ADepartment>>(contentdepartment, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
            if (responsemetric.IsSuccessStatusCode)
            {
                var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetric>>(contentmetric, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseemployee = await Http.GetAsync($"Utilities/GetEmployeeDD");
            if (responseemployee.IsSuccessStatusCode)
            {
                var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(contentemployee, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsebscperspectivetyperepeated = await Http.GetAsync($"Utilities/BSCPerspectiveTypeRepeat");
            if (responsebscperspectivetyperepeated.IsSuccessStatusCode)
            {
                var contentbscperspectivetyperepeated = await responsebscperspectivetyperepeated.Content.ReadAsStringAsync();
                BscPerspectiveTypeDataRepeated = JsonSerializer.Deserialize<List<ABscPerspectivesType>>(contentbscperspectivetyperepeated, _options);
            }
        }));

        Task _t = Task.WhenAll(t);
        await _t;
    }

    private void ToggleKpidetails(List<ABscKpidetails>? TargetChange)
    {
        if(KpiData != null && TargetChange != null)
        {
            if(KpiData.ABscKpidetails == null)
            {
                KpiData.ABscKpidetails = new List<ABscKpidetails>();
            }
            KpiData.ABscKpidetails = TargetChange;
        }
    }

    public string GetFinancialPerspectiveScore()
    {
        var data = KpiData.ABscKpidetails
        .Where(e => e.BscPerspectiveTypeId == 1);

        return Queryable
        .Sum(data.Select(x => x.IndividualTargetWeight)
        .AsQueryable())
        .ToString();
    }

    public string GetInternalProcessScore()
    {
        var data = KpiData.ABscKpidetails
        .Where(e => e.BscPerspectiveTypeId == 2);

        return Queryable
        .Sum(data.Select(x => x.IndividualTargetWeight)
        .AsQueryable())
        .ToString();
    }

    public string GetCustomerPerspectiveScore()
    {
        var data = KpiData.ABscKpidetails
        .Where(e => e.BscPerspectiveTypeId == 3);

        return Queryable
        .Sum(data.Select(x => x.IndividualTargetWeight)
        .AsQueryable())
        .ToString();
    }

    public string GetLearningGrowthScore()
    {
        var data = KpiData.ABscKpidetails
        .Where(e => e.BscPerspectiveTypeId == 4);

        return Queryable
        .Sum(data.Select(x => x.IndividualTargetWeight)
        .AsQueryable())
        .ToString();
    }

    public async void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeeno = args.ItemData;        
    }

    public async Task onSubmitForm()
    {
        try
        {
            if (ObjectivesGrid != null)
            {
                if (detailsref != null && detailsref.ChildDataGrid != null)
                {
                    await detailsref.ChildDataGrid.EndEditAsync();
                }

                if (PerspectivesDetailData != null)
                {
                    perspweightsfinancial = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 1);
                    perspweightsinternal = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 2);
                    perspweightscustomer = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 3);
                    perspweightslearning = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 4);
                }

                if (KpiData.FinancialYearId == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please select a financial year.");
                }
                else if (KpiData.EmployeeId == null)
                {
                    toastService.ShowWarning("Please select the employee.");
                }

                else
                {
                    double? financialtotalscore = 0;
                    double? internaltotalscore = 0;
                    double? customertotalscore = 0;
                    double? learningtotalscore = 0;

                    var financialscores = KpiData.ABscKpidetails.Where(o => o.BscPerspectiveTypeId == 1).ToList();
                    var internalscores = KpiData.ABscKpidetails.Where(o => o.BscPerspectiveTypeId == 2).ToList();
                    var customerscores = KpiData.ABscKpidetails.Where(o => o.BscPerspectiveTypeId == 3).ToList();
                    var learningscores = KpiData.ABscKpidetails.Where(o => o.BscPerspectiveTypeId == 4).ToList();


                    //Sum entered scores
                    foreach (var n in financialscores)
                    {
                        if (n.IndividualTargetWeight == null)
                        {
                            n.IndividualTargetWeight = 0;
                        }
                        financialtotalscore += n.IndividualTargetWeight;
                    }

                    foreach (var n in internalscores)
                    {
                        if (n.IndividualTargetWeight == null)
                        {
                            n.IndividualTargetWeight = 0;
                        }
                        internaltotalscore += n.IndividualTargetWeight;
                    }

                    foreach (var n in customerscores)
                    {
                        if (n.IndividualTargetWeight == null)
                        {
                            n.IndividualTargetWeight = 0;
                        }

                        customertotalscore += n.IndividualTargetWeight;
                    }

                    foreach (var n in learningscores)
                    {
                        if (n.IndividualTargetWeight == null)
                        {
                            n.IndividualTargetWeight = 0;
                        }
                        learningtotalscore += n.IndividualTargetWeight;
                    }

                    //Compare Scores with Weights

                    //Customer
                    if (perspweightscustomer != null && (customertotalscore > perspweightscustomer.PerspectiveTotalWeight))
                    {
                        toastService.ClearAll();
                        toastService.ShowWarning("You cannot set more than the department/section customer perspective weight.( " + perspweightscustomer.PerspectiveTotalWeight + "%) Please revise your scores");
                    }

                    else if (perspweightscustomer != null && (customertotalscore < perspweightscustomer.PerspectiveTotalWeight))
                    {
                        toastService.ClearAll();
                        toastService.ShowWarning("You cannot set less than the department/section customer perspective weight.( " + perspweightscustomer.PerspectiveTotalWeight + "%) Please revise your scores");

                    }

                    //Financial
                    else if (perspweightsfinancial != null && (financialtotalscore > perspweightsfinancial.PerspectiveTotalWeight))
                    {
                        toastService.ClearAll();
                        toastService.ShowWarning("You cannot set more than the department/section financial perspective weight.( " + perspweightsfinancial.PerspectiveTotalWeight + "%) Please revise your scores");

                    }

                    else if (perspweightsfinancial != null && (financialtotalscore < perspweightsfinancial.PerspectiveTotalWeight))
                    {
                        toastService.ClearAll();
                        toastService.ShowWarning("You cannot set less than the department/section financial perspective weight.( " + perspweightsfinancial.PerspectiveTotalWeight + "%) Please revise your scores");

                    }

                    //Internal
                    else if (perspweightsinternal != null && (internaltotalscore > perspweightsinternal.PerspectiveTotalWeight))
                    {
                        toastService.ClearAll();
                        toastService.ShowWarning("You cannot set more than the department/section internal processes perspective weight.( " + perspweightsinternal.PerspectiveTotalWeight + "%) Please revise your scores");

                    }

                    else if (perspweightsinternal != null && (internaltotalscore < perspweightsinternal.PerspectiveTotalWeight))
                    {
                        toastService.ClearAll();
                        toastService.ShowWarning("You cannot set less than the department/section internal perspective weight.( " + perspweightsinternal.PerspectiveTotalWeight + "%) Please revise your scores");

                    }


                    //Learning
                    else if (perspweightslearning != null && (learningtotalscore > perspweightslearning.PerspectiveTotalWeight))
                    {
                        toastService.ClearAll();
                        toastService.ShowWarning("You cannot set more than the department/section learning and growth perspective weight.( " + perspweightslearning.PerspectiveTotalWeight + "%) Please revise your scores");

                    }

                    else if (perspweightslearning != null && (financialtotalscore < perspweightslearning.PerspectiveTotalWeight))
                    {
                        toastService.ClearAll();
                        toastService.ShowWarning("You cannot set less than the department/section learning and growth perspective weight.( " + perspweightslearning.PerspectiveTotalWeight + "%) Please revise your scores");

                    }
                    else
                    {
                        await LoadingDialogue.ShowAsync();
                        await ObjectivesGrid.EndEditAsync();
                    }
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowWarning(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    public async void DialogCancelBtnclicked()
    {
        if (ObjectivesGrid != null)
        {
            await ObjectivesGrid.CloseEditAsync();
        }
    }

    public async void OnYearChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AFinancialYear> args)
    {
        try
        {
            await LoadingDialogue.ShowAsync();
            YrId = args.ItemData.Id;

            List<Task> t = new List<Task>();

            t.Add(Task.Run(async () =>
            {
                var responsebscperspectivedetail = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicatorDetail?YearId={YrId}");
                if (responsebscperspectivedetail.IsSuccessStatusCode)
                {
                    var contentbscperspectivedetail = await responsebscperspectivedetail.Content.ReadAsStringAsync();
                    BscKpiDetailData = JsonSerializer.Deserialize<List<ABscKpidetails>>(contentbscperspectivedetail, _options);
                }
            }));


            t.Add(Task.Run(async () =>
            {
                var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
                if (responsebscperspectivetype.IsSuccessStatusCode)
                {
                    var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                    BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesType>>(contentbscperspectivetype, _options);
                }
            }));


            if (BscKpiDetailData != null)
            {
                KpiData.ABscKpidetails = BscKpiDetailData;
            }
            if (KpiData.ABscKpidetails == null)
            {
                KpiData.ABscKpidetails = new List<ABscKpidetails>();
            }

            foreach (var item in BscPerspectiveTypeData)
            {
                var exist = KpiData.ABscKpidetails
                .FirstOrDefault(o => o.BscPerspectiveTypeId == item.BscPerspectiveTypeId);

                if (exist == null)
                {
                    var m = new ABscKpidetails();
                    m.BsckpidetailsId = countid;
                    m.BscPerspectiveTypeId = item.BscPerspectiveTypeId;

                    KpiData.ABscKpidetails.Add(m);
                    countid++;
                }
            }
            KpiData.ABscKpidetails = KpiData.ABscKpidetails.OrderBy(o => o.BscPerspectiveTypeId).ToList();

            StateHasChanged();

            Task _t = Task.WhenAll(t);
            await _t;
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {
            await LoadingDialogue.HideAsync();
        }
    }

    public async Task RowSelectingHandler(RowSelectingEventArgs<ABscKpi> args)
    {
        await ObjectivesGrid.ClearSelectionAsync();   //clear selection
    }

    public async void OnPerspectivesActionBegin(ActionEventArgs<ABscKpi> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                _previous = args.RequestType;

                if(PerspectivesDetailData != null)
                {
                    perspweightsfinancial = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 1);
                    perspweightsinternal = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 2);
                    perspweightscustomer = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 3);
                    perspweightslearning = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 4);

                }

                if (EmployeeData != null)
                {
                    employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == args.RowData.EmployeeId);
                }

                if (args.RowData.ABscKpidetails == null)
                {
                    args.RowData.ABscKpidetails = new List<ABscKpidetails>();
                }
            }

            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                _previous = args.RequestType;

                if (PerspectivesDetailData != null)
                {
                    perspweightsfinancial = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 1);
                    perspweightsinternal = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 2);
                    perspweightscustomer = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 3);
                    perspweightslearning = PerspectivesDetailData.FirstOrDefault(o => o.BscPerspectiveTypeId == 4);

                }
                
                args.RowData.FinancialYearId = finyearid;
                args.RowData.ABscKpidetails = new List<ABscKpidetails>();

                if (Credentials.StaffId > 0)
                {
                    args.Data.EmployeeId = Credentials.StaffId;
                }

                if (EmployeeData != null)
                {
                    employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == args.RowData.EmployeeId);
                }

                StateHasChanged();
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                _previous = args.RequestType;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
    }

    public async Task OnPerspectiveActionComplete(ActionEventArgs<ABscKpi> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            ObjectivesGrid?.PreventRender(false);
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            List<Task> t = new List<Task>();
            t.Add(Task.Run(async () =>
            {
                var responsebscperspective = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
                if (responsebscperspective.IsSuccessStatusCode)
                {
                    var contentbscperspective = await responsebscperspective.Content.ReadAsStringAsync();
                    BscPerspectiveData = JsonSerializer.Deserialize<List<ABscPerspectives>>(contentbscperspective, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsebscperspectivedetail = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicatorDetail");
                if (responsebscperspectivedetail.IsSuccessStatusCode)
                {
                    var contentbscperspectivedetail = await responsebscperspectivedetail.Content.ReadAsStringAsync();
                    BscKpiDetailData = JsonSerializer.Deserialize<List<ABscKpidetails>>(contentbscperspectivedetail, _options);
                }
            }));

            Task _t = Task.WhenAll(t);
            await _t;
        }
    }

    //Enable cell edit on single click
    public async Task CellSelectHandler(CellSelectEventArgs<ABscKpi> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await ObjectivesGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await ObjectivesGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await ObjectivesGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }


    public async void LoadHandler()
    {
        SpinnerObj.ShowAsync();
        GridAttributes.Add("disable", "yes");
    }

    public async void DataBound()
    {
        GridAttributes["disable"] = "no";
        await SpinnerObj.HideAsync();

        //Check if there are records arleady and only allow editing
        if(ObjectivesGrid != null && ObjectivesGrid.CurrentViewData.Count() > 0)
        {
            ToolbarMenu = new List<object>()
            {
                new ItemModel(){ Text = "Edit Objective", PrefixIcon= "e-edit", Id="Grid_edit"}
            };
        }
    }

    #region ObjectivesAdapter
    public class ObjectivesAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        IAuthenticationService _AuthService;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public ObjectivesAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , IAuthenticationService authservice, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var credentials = await _AuthService.GetUserCredentials();
            
            int? EmployeeId = credentials.StaffId;
            var data = new List<ABscKpi>();

            try
            {
                var response = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicator");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<ABscKpi>>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ABscKpi>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as ABscKpi);
                if (val != null)
                {
                    if (val.Bsckpiid == 0)
                    {
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"BscKeyPerformanceIndicator/CreateKPIObjective?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as ABscKpi);
                if (val != null)
                {
                    if (val.Bsckpiid != 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"BscKeyPerformanceIndicator/UpdateKPIObjective?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }

    public string GetWeightHeader(ABscKpi Value)
    {
        if (Value.Bsckpiid == 0)
        {
            return "Add new Objectives";
        }
        else
        {
            return "Edit Objectives";
        }
    }
    #endregion ObjectivesAdapter


   #region DetailsRegion
    public class ObjectivesDetailsAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        IAuthenticationService _AuthService;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public ObjectivesDetailsAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , IAuthenticationService authservice, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var credentials = await _AuthService.GetUserCredentials();
            
            int? EmployeeId = credentials.StaffId;
            var data = new List<ABscKpidetails>();

            try
            {
                var response = await Http.GetAsync($"BscKeyPerformanceIndicator/GetKeyPerformanceIndicatorDetailAll");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<ABscKpidetails>>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ABscKpidetails>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
    }

    #endregion DetailsRegion
}
