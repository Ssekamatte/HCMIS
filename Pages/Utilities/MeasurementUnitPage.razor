@page "/MeasurementUnitPage"
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;
@using HCMIS.ViewModel;
@inject IToastService toastService;

<style>
 
    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #964B00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    .pp {
        color: ghostwhite;
        background-color: #2ecc71;
        padding: 10px;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| BASIC UNIT
    </li>
</ol>

<SfGrid @ref="@BasicUnitGrid" ID="Grid" TValue="AMeasurementMetric" AllowPaging="false"
        AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
        AllowSorting="true" Toolbar="@ToolbarMenu">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <SfDataManager AdaptorInstance="@typeof(BasicUnitAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEvents OnActionComplete="@MeasurementActionComplete" OnActionBegin="@MeasurementActionBegin" TValue="AMeasurementMetric"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams">
        <HeaderTemplate>
            @{
                var text = GetMeasurementHeader((context as AMeasurementMetric));
                <div class="headerbandimg">
                    <span>@text</span>
                </div>
            }
        </HeaderTemplate>
        <Template Context="MeasurementContext">
            @{
                MetricData = (MeasurementContext as AMeasurementMetric);
                @if (MetricData != null)
                {
                    <div class="row">
                        <div class="col-md-12" hidden>
                            <SfNumericTextBox @bind-Value="@(MetricData.MeasurementMetricId)" Enabled="false" Placeholder="Measurement Metric Id" Format="N0" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                        </div>


                        <div class="col-md-6">
                            <p>Measurement Metric:<span style="color:red;">*</span></p>
                            <SfTextBox Multiline="false" @bind-Value="@(MetricData.MeasurementMetricDesc)" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                        </div>

                        <div class="col-md-6">
                            <p>Is Hidden?<span style="color:red;">*</span></p>
                            <SfRadioButton Label="Yes" Name="options" Value="true" TChecked="bool?" ValueChange="OnValueChange" @bind-Checked="@(MetricData.ArchivedRecord)"></SfRadioButton>
                            <SfRadioButton Label="No" Name="options" Value="false" TChecked="bool?" ValueChange="OnValueChange" @bind-Checked="@(MetricData.ArchivedRecord)"></SfRadioButton>
                        </div>
                    </div>
                }
            }
        </Template>
    </GridEditSettings>
    <GridColumns>
        @* <GridColumn Type="ColumnType.CheckBox" Width="30"></GridColumn> *@
        <GridColumn HeaderText="Manage"
                    Width="40"
                    CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"
                    TextAlign="TextAlign.Left">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit/View"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
        <GridColumn 
            Field=@nameof(AMeasurementMetric.MeasurementMetricId) 
            Visible=false 
            HeaderText="MeasurementMetric Id" 
            AllowEditing="false" 
            IsPrimaryKey="true">
        </GridColumn>
        <GridColumn Field=@nameof(AMeasurementMetric.MeasurementMetricDesc)
                    HeaderText="Measurement Metric"
                    TextAlign="TextAlign.Justify"
                    Width="80"
                    ClipMode="ClipMode.EllipsisWithTooltip"
                    Type="ColumnType.String"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    SfGrid<AMeasurementMetric>? BasicUnitGrid;
    private static AMeasurementMetric? MetricData { get; set; }
    public bool? radiovalue;
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "40vh", Width = "65%" };
    List<AMeasurementMetric>? MeasurementMetricData { get; set; }

    private List<object> ToolbarMenu = new List<object>()
    {
        new ItemModel() { Text = "Add Unit", PrefixIcon = "e-add", Id = "Grid_add"},
        //new ItemModel(){ Text = "Edit Unit", PrefixIcon= "e-edit", Id="Grid_edit"},
        //new ItemModel(){ Text = "Delete Training Plan", PrefixIcon= "e-delete", Id="Grid_delete"},
        new ItemModel(){ Text = "Update Unit", PrefixIcon= "e-update", Id="Grid_update"},
        new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="Grid_cancel"}
    };

    protected override async Task OnInitializedAsync()
    {
        var responsebankcount = await Http.GetAsync($"Utilities/GetBank");
        var bankcount = await responsebankcount.Content.ReadAsStringAsync();

        if (responsebankcount.IsSuccessStatusCode)
        {
            MeasurementMetricData = await Http.GetFromJsonAsync<List<AMeasurementMetric>>
            ($"Utilities/GetMeasurementMetric");
        }
    }

    private void OnValueChange(ChangeArgs<bool?> args)
    {
        radiovalue = args.Value;
    }

    #region BasicUnitAdapter
    public class BasicUnitAdapter : DataAdaptor
    {
        HttpClient Http;
        ApiConfig _ApiConfig;
        SystemSettings _SystemSettings;
        private readonly JsonSerializerOptions _options;
        public IToastService toastService;
        private readonly NavigationManager Navigation;
        public BasicUnitAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _SystemSettings = systemSettings;

        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<AMeasurementMetric>();
            try
            {
                var response = await Http.GetAsync($"Utilities/GetMeasurementMetricUtilities");
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    toastService.ShowError(response.ReasonPhrase);
                }
                data = JsonSerializer.Deserialize<List<AMeasurementMetric>>(content, _options);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<AMeasurementMetric>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as AMeasurementMetric);

                if (val.MeasurementMetricId == 0)
                {
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var result = await Http.PostAsync($"Utilities/CreateMeasurementMetric", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        toastService.ShowSuccess("Record sucessfully added");
                    }
                    else
                    {
                        //toastService.ShowError(result.Content.);
                    }
                }
                else
                {
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var result = await Http.PutAsync($"Utilities/UpdateMeasurementMetric", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        toastService.ShowSuccess("Record sucessfully saved");
                    }
                    else
                    {
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as AMeasurementMetric);


                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                var result = await Http.PutAsync($"Utilities/UpdateMeasurementMetric", httpContent);
                if (result.IsSuccessStatusCode)
                {
                    toastService.ShowSuccess("Record sucessfully updated");
                }
                else
                {
                    toastService.ShowError(result.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }


    }

    public async void MeasurementActionComplete(ActionEventArgs<AMeasurementMetric> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add)
        || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            BasicUnitGrid.PreventRender(false);
        }

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            var responsebankcount = await Http.GetAsync($"Utilities/GetMeasurementMetric");
            var bankcount = await responsebankcount.Content.ReadAsStringAsync();

            if (responsebankcount.IsSuccessStatusCode)
            {
                MeasurementMetricData = await Http.GetFromJsonAsync<List<AMeasurementMetric>>
                ($"Utilities/GetMeasurementMetric");
            }
        }
    }

    public async void MeasurementActionBegin(ActionEventArgs<AMeasurementMetric> Args)
    {
        var data = Args.Data;
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (Args.Data.MeasurementMetricDesc == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please enter the Basic Unit !");
                Args.Cancel = true;
            }

            else if (Args.Data.ArchivedRecord == null)
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please select whether the unit is hidden or not.");
                Args.Cancel = true;
            }

            else
            {
                Args.Data.ArchivedRecord = radiovalue;

                var countdata = MeasurementMetricData?
                .FirstOrDefault(o => o.MeasurementMetricDesc?.Trim().ToLower()
                == Args.Data.MeasurementMetricDesc.Trim().ToLower());

                if (countdata != null)
                {
                    toastService.ShowWarning("This basic unit has arleady been captured in the database as " + countdata.MeasurementMetricDesc + ". Record Not Saved");
                    Args.Cancel = true;
                }
            }
        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {

        }
    }


    public string GetMeasurementHeader(AMeasurementMetric Value)
    {
        if (Value.MeasurementMetricId == 0)
        {
            return "Add a new Bank";
        }
        else
        {
            return "Edit " + Value.MeasurementMetricDesc;
        }
    }

    #endregion BasicUnitAdapter
}



