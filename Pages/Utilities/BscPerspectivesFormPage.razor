@page "/BscPerspectivesFormPage"
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@using HCMIS.SHARED.DTOs.BSC;
@using HCMIS.SHARED.DTOs.Utilities;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;

<style>

    /*Disable Grid on Load and Enable it on DataBound*/
    .e-grid[disable="yes"] {
        opacity: .5;
        pointer-events: none;
        -ms-touch-action: none;
        touch-action: none;
        cursor: no-drop;
    }

    /*hide the Default Grid spinner */
    .e-grid .e-spinner-pane {
        display: none;
    }

    /*to remove the edit button alone*/
    .e-removeEditcommand .e-unboundcell .e-unboundcelldiv button.e-Editbutton {
        display: none;
    }

    /*to remove the delete button alone*/
    .e-removeDeletecommand .e-unboundcell .e-unboundcelldiv button.e-Deletebutton {
        display: none;
    }


    /*Disable select all on grid checkbox*/
    .e-headercelldiv.e-headerchkcelldiv .e-checkbox-wrapper.e-css {
        pointer-events: none;
        opacity: 0.5;
    }

    /*Change Dialog Header Close Button*/
    .e-dialog .e-btn .e-btn-icon.e-icon-dlg-close {
        float: right;
        font-size: 12px;
        width: auto;
    }

    .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {
        background-color: #d9edf7;
        border-color: #d9edf7;
        border-radius: 1px;
        bottom: 0;
        float: right;
        height: 32px;
        left: 15px;
        position: relative;
        width: 15px;
        padding: 1px 9px;
    }

    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #964B00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    .pp {
        color: ghostwhite;
        background-color: #2ecc71;
        padding: 10px;
    }

    .e-edit-dialog {
        max-height: 98%;
        max-width: 98%;
        min-width: 98%;
        min-height: 98%;
    }

    .disablecell {  
        background-color: #ff6b81; 
        pointer-events: none;
        display: none;
    }

    .e-grid .e-gridcontent .e-rowcell.disablecell {
        color: black;
    }

    .disablebasicunit {
        background-color: #8e44ad; 
        pointer-events: none;
        display: none;
    }

    .e-grid .e-gridcontent .e-rowcell.disablebasicunit {
        color: black;
    }

    h6 {
        color: ghostwhite;
        background-color: #268cff;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25"/> HCMIS
        </strong>| DEPARTMENTAL PERSPECTIVES WEIGHTS
    </li>
</ol>

<SfSpinner @ref="SpinnerObj" Label="Loading Please Wait....." Size="50">
    @*Render custom spinner component.*@
</SfSpinner>

<SfGrid @ref="@BscPerspectiveGrid" ID="Grid" TValue="ABscPerspectivesDto" @attributes="@GridAttributes" AllowPaging="true"
        AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
        AllowTextWrap="true" AllowSorting="true" Toolbar="@ToolbarMenu">
    
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <SfDataManager AdaptorInstance="@typeof(BscPerspectiveAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEvents OnActionComplete="@OnPerspectiveActionComplete"
                OnActionBegin="@OnPerspectivesActionBegin"
                RowSelecting="RowSelectingHandler"
                OnLoad="LoadHandler"
                DataBound="DataBound"
                TValue="ABscPerspectivesDto">
    </GridEvents>

    @*Child Grid*@
    <GridTemplates>
        <DetailTemplate>
            @{
                KpiData = (context as ABscPerspectivesDto);

                <div class="form-group col-md-12">

                    <SfGrid @ref="@DetailsDataGrid"
                            TValue="ABscPerspectivesDetailDto"
                            ID="DetailsGrid"
                            Query=@(new Query().Where(new WhereFilter() { Field = "BscPerspectiveId", Operator = "equal", value = KpiData.BscPerspectiveId, IgnoreCase = false, IgnoreAccent = false }))
                            AllowPaging="true"
                            AllowFiltering="false"
                            AllowReordering="false"
                            AllowResizing="true"
                            AllowGrouping="true"
                            AllowExcelExport="true"
                            AllowPdfExport="true"
                            GridLines="GridLine.Both"
                            AllowSelection="false"
                            AllowSorting="false"
                            AllowTextWrap="true">
                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch"></GridEditSettings>
                                                
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
                        <GridPageSettings PageSizes="true"></GridPageSettings>
                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                        <SfDataManager AdaptorInstance="@typeof(PerspectivesDetailsAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                        <GridColumns>
                            <GridColumn Type="ColumnType.CheckBox" Width="50" Visible="false"></GridColumn>
                            <GridColumn Field=@nameof(ABscPerspectivesDetailDto.BscPerspectiveDetailId) Visible="false" HeaderText="BscPerspectiveDetailId" IsPrimaryKey="true" Width="150"></GridColumn>
                            <GridColumn Field=@nameof(ABscPerspectivesDetailDto.BscPerspectiveId) Visible="false" HeaderText="BscPerspectiveId" TextAlign="TextAlign.Right" Width="110"> </GridColumn>
                            <GridForeignColumn Field=@nameof(ABscPerspectivesDetailDto.BscPerspectiveTypeId)
                                               HeaderText="Perspective"
                                               Width="80"
                                               AllowEditing="false"
                                               ForeignKeyField="@(nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeId))"
                                               ForeignKeyValue="@(nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeDescription))"
                                               ForeignDataSource="@BscPerspectiveTypeData"
                                               AllowFiltering="false"
                                               IsFrozen="false"
                                               CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                            </GridForeignColumn>
                            <GridColumn Field=@nameof(ABscPerspectivesDetailDto.PerspectiveTotalWeight) HeaderText="Perspective Total Weight" Width="60" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"></GridColumn>

                            <GridForeignColumn Field=@nameof(ABscPerspectivesDetailDto.MeasurementMetricId)
                                               HeaderText="Basic Unit"
                                               TextAlign="TextAlign.Justify"
                                               Width="60"
                                               AllowEditing="true"
                                               ValidationRules="@(new ValidationRules { Required = true})"
                                               ForeignKeyField="@(nameof(AMeasurementMetricDto.MeasurementMetricId))"
                                               ForeignKeyValue="@(nameof(AMeasurementMetricDto.MeasurementMetricDesc))"
                                               ForeignDataSource="@MeasurementUnitData"
                                               CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                            </GridForeignColumn>
                        </GridColumns>
                    </SfGrid>

                </div>
            }
        </DetailTemplate>
    </GridTemplates>

    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
        <HeaderTemplate>
            @{
                var text = GetWeightHeader((context as ABscPerspectivesDto));
                <div class="headerbandimg">
                    <span>@text</span>
                </div>
            }
        </HeaderTemplate>
        <Template Context="BscPerspectivesContext"> 
             @{
                 <center>
                     <h5>
                        <strong>CAPTURE DEPARTMENT PERSPECTIVE TOTAL WEIGHTS</strong>
                     </h5>
                 </center>

                KpiData = (BscPerspectivesContext as ABscPerspectivesDto);
                @if (KpiData != null)
                {
                    <div class="row">
                        <div class="col-md-12" hidden>
                            <SfNumericTextBox @bind-Value="@(KpiData.BscPerspectiveId)" Enabled="false" Placeholder="Perspective Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>

                        <div class="col-md-6">
                            <p>Financial Year:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.FinancialYearId)"
                                            Enabled="@isFinancialYearEnabled" TItem="ViewFinancialYearDto" TValue="int?"
                                            DataSource="@FinancialYearData" Placeholder="Please select"
                                            FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                            FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(AFinancialYear.Id)"
                                                           Text="@nameof(AFinancialYear.FinancialYear)">
                                </DropDownListFieldSettings>
                                <DropDownListEvents TValue="int?"
                                            TItem="ViewFinancialYearDto" ValueChange="OnYearChange">
                                </DropDownListEvents>
                            </SfDropDownList>
                        </div>

                        <div class="col-md-6">
                            <p>Department:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.DepartmentId)"
                                            Enabled="@DepartmentDD" TItem="ADepartmentDto" TValue="int?"
                                            DataSource="@DepartmentsData" Placeholder="Please select"
                                            FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                            FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(ADepartmentDto.DepartmentId)"
                                                           Text="@nameof(ADepartmentDto.DepartmentDescription)">
                                </DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>

                        @*GridPerspectives*@
                        <div class="form-group col-md-12" style="padding-top:10px">
                            <SfGrid @ref="@ChildDataGrid"
                                    TValue="ViewABscPerspectivesDetailDto"
                                    ID="ChGrid"
                                    DataSource="@KpiData.ABscPerspectivesDetail"
                                    AllowPaging="false" AllowFiltering="false" AllowReordering="true"
                                    AllowResizing="true" AllowGrouping="true" AllowExcelExport="true"
                                    AllowPdfExport="true" AllowSelection="true" AllowSorting="true"
                                    AllowTextWrap="true" Height="250px" GridLines="GridLine.Both">
                                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false" Dialog="@DialogParams">

                                </GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                <GridPageSettings PageSizes="true"></GridPageSettings>

                                <GridAggregates>
                                    <GridAggregate>
                                        <GridAggregateColumns>
                                            <GridAggregateColumn Field=@nameof(ViewABscPerspectivesDetailDto.PerspectiveTotalWeight) Type="Syncfusion.Blazor.Grids.AggregateType.Sum">
                                                <FooterTemplate>
                                                    @{
                                                        aggregate = (context as AggregateTemplateContext);
                                                        <div>
                                                            @if (@aggregate != null)
                                                            {
                                                                <p style="color:purple;">Total Percentage: @aggregate.Sum %</p>
                                                            }                                                            
                                                        </div>
                                                    }
                                                </FooterTemplate>
                                            </GridAggregateColumn>
                                        </GridAggregateColumns>
                                    </GridAggregate>
                                </GridAggregates>

                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell" CellSelectionMode="CellSelectionMode.Box"></GridSelectionSettings>

                                <GridEvents 
                                    CellSelected="PerspectiveCellSelectHandler"
                                    RowDataBound="RowDataBoundHandler"
                                    QueryCellInfo="QueryCellInfoHandlerChild"
                                    TValue="ViewABscPerspectivesDetailDto">
                                  </GridEvents>

                                <GridColumns>
                                    <GridColumn Type="ColumnType.CheckBox" Width="50" Visible="false"></GridColumn>
                                    <GridColumn Field=@nameof(ViewABscPerspectivesDetailDto.BscPerspectiveDetailId) 
                                        HeaderText="BscPerspectiveDetailId" 
                                        AllowEditing="false" 
                                        IsPrimaryKey="true" 
                                        Width="150" 
                                        Visible="false">
                                    </GridColumn>
                                    <GridForeignColumn Field=@nameof(ViewABscPerspectivesDetailDto.BscPerspectiveTypeId)
                                                       HeaderText="Perspective"
                                                       Width="120"
                                                       AllowEditing="false"
                                                       ForeignKeyField="@(nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeId))"
                                                       ForeignKeyValue="@(nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeDescription))"
                                                       ForeignDataSource="@BscPerspectiveTypeData"
                                                       AllowFiltering="false"
                                                       IsFrozen="false"
                                                       CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                                    </GridForeignColumn>

                                    <GridColumn Field=@nameof(ViewABscPerspectivesDetailDto.PerspectiveTotalWeight)
                                                HeaderText="Perspective Total Weight"
                                                TextAlign="TextAlign.Right"
                                                AllowEditing="true"
                                                ValidationRules="@(new ValidationRules { Required = true, Min = 1 , Max=100 })"
                                                EditType="EditType.NumericEdit"
                                                Format="###.##"
                                                Width="70"                                                
                                                ClipMode="ClipMode.EllipsisWithTooltip"
                                                CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                                    </GridColumn>

                                    <GridForeignColumn Field=@nameof(ViewABscPerspectivesDetailDto.MeasurementMetricId)
                                                       HeaderText="Basic Unit"
                                                       Width="70"
                                                       AllowEditing="false"
                                                       ValidationRules="@(new ValidationRules { Required = true})"
                                                       ForeignKeyField="@(nameof(AMeasurementMetricDto.MeasurementMetricId))"
                                                       ForeignKeyValue="@(nameof(AMeasurementMetricDto.MeasurementMetricDesc))"
                                                       ForeignDataSource="@MeasurementUnitData"
                                                       CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                                    </GridForeignColumn>

                                </GridColumns>
                            </SfGrid>

                        </div>

                    </div>
                }
            }
        </Template> 

        <FooterTemplate>
            
            @if (@aggregate != null && Convert.ToInt32(@aggregate.Sum) == 70)
            {
                <button @onclick="@onSubmitForm" class="btn btn-success" data-ripple="true" style="margin-right:10px;">Save</button>
                <button @onclick="@DialogCancelBtnclicked" class="btn btn-danger" data-ripple="true">Cancel</button>
            }
            else
            {
                <h6 style="background-color:red; color:ghostwhite; text-align:center;">Ensure yout total percentage is equal to 70%. Please revise your scores</h6>
            }
        </FooterTemplate>
        

    </GridEditSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="30"></GridColumn>
        <GridColumn Field=@nameof(ABscPerspectivesDto.BscPerspectiveId) Visible=false HeaderText="Perspective Id" AllowEditing="false" IsPrimaryKey="true"></GridColumn>
        
        <GridForeignColumn Field=@nameof(ABscPerspectivesDto.FinancialYearId)
                           HeaderText="Financial Year"
                           Width="80"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(AFinancialYear.Id))"
                           ForeignKeyValue="@(nameof(AFinancialYear.FinancialYear))"
                           ForeignDataSource="@FinancialYearData"
                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridForeignColumn>
        <GridForeignColumn Field=@nameof(ABscPerspectivesDto.DepartmentId)
                           HeaderText="Department"
                           Width="80"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ADepartment.DepartmentId))"
                           ForeignKeyValue="@(nameof(ADepartment.DepartmentDescription))"
                           ForeignDataSource="@DepartmentsData"
                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridForeignColumn>
    </GridColumns>
</SfGrid>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="20%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

@code {
    #region Declarations
    private static ABscPerspectivesDto? KpiData { get; set; }
    SfGrid<ABscPerspectivesDto>? BscPerspectiveGrid;
    SfGrid<ViewABscPerspectivesDetailDto>? ChildDataGrid;
    SfGrid<ABscPerspectivesDetailDto> DetailsDataGrid { get; set; }
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "40vh", Width = "65%" };
    List<BscPerspectivesDto>? BscPerspectiveData { get; set; }
    List<ViewPerspectiveTotalWeightSumDto>? BscPerspectiveSumData { get; set; }
    List<ViewFinancialYearDto>? FinancialYearData { get; set; }
    List<ADepartmentDto>? DepartmentsData { get; set; }
    List<ABscPerspectivesTypeDto>? BscPerspectiveTypeData { get; set; }
    List<AMeasurementMetricDto>? MeasurementUnitData { get; set; }
    List<ViewABscPerspectivesDetailDto>? PerspectivesDetailData { get; set; }
    Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }
    EmployeeRegistrationModel inputmodel { get; set; } = new EmployeeRegistrationModel();
    [Parameter]
    public int? finyear { get; set; }
    LoginResultModel? Credentials { get; set; }
    public bool WeightTextBox = true;
    public bool BasicUnitDD = true;
    public bool DepartmentDD = false;
    private static ViewEmployeeDropDownDto? employeeno { get; set; }
    List<ViewEmployeeDropDownDto>? EmployeeData { get; set; }
    SfSpinner? SpinnerObj;
    private Dictionary<string, object> GridAttributes { get; set; } = new Dictionary<string, object>();
    bool isFinancialYearEnabled { get; set; } = false;
    int? finyearid = null;
    SfDialog? LoadingDialogue;
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    int countid = -1000;
    int? YrId = null;
    string? weighttotalpercentage  = "70";
    Syncfusion.Blazor.Grids.Action _previous { get; set; }

    private List<object> ToolbarMenu = new List<object>()
    {
            new ItemModel() { Text = "Add Weight", PrefixIcon = "e-add", Id = "Grid_add"},
            new ItemModel(){ Text = "Edit Weight", PrefixIcon= "e-edit", Id="Grid_edit"},
    };

    #endregion Declarations

    protected override async Task OnInitializedAsync()
    {
        Credentials = await AuthService.GetUserCredentials();

        employeeno = null;
        List<Task> t = new List<Task>();
        t.Add(Task.Run(async () =>
        {
            var responsebscperspective = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
            if (responsebscperspective.IsSuccessStatusCode)
            {
                var contentbscperspective = await responsebscperspective.Content.ReadAsStringAsync();
                BscPerspectiveData = JsonSerializer.Deserialize<List<BscPerspectivesDto>>(contentbscperspective, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsebscperspectivedetail = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesDetail");
            if (responsebscperspectivedetail.IsSuccessStatusCode)
            {
                var contentbscperspectivedetail = await responsebscperspectivedetail.Content.ReadAsStringAsync();
                PerspectivesDetailData = JsonSerializer.Deserialize<List<ViewABscPerspectivesDetailDto>>(contentbscperspectivedetail, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsefinyear = await Http.GetAsync($"FinancialYear/list");
            if (responsefinyear.IsSuccessStatusCode)
            {
                var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
                FinancialYearData = JsonSerializer.Deserialize<List<ViewFinancialYearDto>>(contentfinyear, _options);

                DateTime currentdate = DateTime.Now;
                string? financialyeardesc = null;
                if (currentdate.Month >= 6)
                {
                    financialyeardesc = $"{currentdate.Year}/{(currentdate.Year + 1)}";
                }
                else if (currentdate.Month < 6)
                {
                    financialyeardesc = $"{(currentdate.Year - 1)}/{currentdate.Year}";
                }

                var b = FinancialYearData.FirstOrDefault(o => o.FinancialYear.Trim() == financialyeardesc.Trim());
                if (b != null)
                {
                    finyearid = b.Id;
                }
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
            if (responsebscperspectivetype.IsSuccessStatusCode)
            {
                var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesTypeDto>>(contentbscperspectivetype, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
            if (responsedepartment.IsSuccessStatusCode)
            {
                var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
                DepartmentsData = JsonSerializer.Deserialize<List<ADepartmentDto>>(contentdepartment, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
            if (responsemetric.IsSuccessStatusCode)
            {
                var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetricDto>>(contentmetric, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseemployee = await Http.GetAsync($"Utilities/GetEmployeeDD");
            if (responseemployee.IsSuccessStatusCode)
            {
                var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDownDto>>(contentemployee, _options);
            }
        }));

        Task _t = Task.WhenAll(t);
        await _t;
    }

    public async Task onSubmitForm()
    {
        try
        {
            await LoadingDialogue.ShowAsync();
            if (ChildDataGrid != null)
            {
                await ChildDataGrid.EndEditAsync();
            }

            if (BscPerspectiveGrid != null)
            {
                await BscPerspectiveGrid.EndEditAsync();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowWarning(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    public async void DialogCancelBtnclicked()
    {
        if (ChildDataGrid != null)
        {
            await ChildDataGrid.CloseEditAsync();
        }
        if (BscPerspectiveGrid != null)
        {
            await BscPerspectiveGrid.CloseEditAsync();
        }
    }

    public async void OnYearChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewFinancialYearDto> args)
    {
        try
        {
            await LoadingDialogue.ShowAsync();
            YrId = args.ItemData.Id;

            List<Task> t = new List<Task>();

            t.Add(Task.Run(async () =>
            {
                var responsebscperspectivedetail = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesDetail?YearId={YrId}");
                if (responsebscperspectivedetail.IsSuccessStatusCode)
                {
                    var contentbscperspectivedetail = await responsebscperspectivedetail.Content.ReadAsStringAsync();
                    PerspectivesDetailData = JsonSerializer.Deserialize<List<ViewABscPerspectivesDetailDto>>(contentbscperspectivedetail, _options);
                }
            }));


            t.Add(Task.Run(async () =>
            {
                var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
                if (responsebscperspectivetype.IsSuccessStatusCode)
                {
                    var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                    BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesTypeDto>>(contentbscperspectivetype, _options);
                }
            }));

            Task _t = Task.WhenAll(t);
            await _t;

            if (PerspectivesDetailData != null)
            {
                KpiData.ABscPerspectivesDetail = PerspectivesDetailData;
            }
            if (KpiData.ABscPerspectivesDetail == null)
            {
                KpiData.ABscPerspectivesDetail = new List<ViewABscPerspectivesDetailDto>();
            }

            foreach (var item in BscPerspectiveTypeData)
            {
                var exist = KpiData.ABscPerspectivesDetail
                .FirstOrDefault(o => o.BscPerspectiveTypeId == item.BscPerspectiveTypeId);

                if (exist == null)
                {
                    var m = new ViewABscPerspectivesDetailDto();
                    m.BscPerspectiveDetailId = countid;
                    m.BscPerspectiveTypeId = item.BscPerspectiveTypeId;

                    KpiData.ABscPerspectivesDetail.Add(m);
                    countid++;
                }
            }
            KpiData.ABscPerspectivesDetail = KpiData.ABscPerspectivesDetail.OrderBy(o => o.BscPerspectiveTypeId).ToList();

            StateHasChanged();

            
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {
            await LoadingDialogue.HideAsync();
        }
    }

    public async Task RowSelectingHandler(RowSelectingEventArgs<ABscPerspectivesDto> args)
    {
        await BscPerspectiveGrid.ClearSelectionAsync();   //clear selection
    }

    public async void OnPerspectivesActionBegin(ActionEventArgs<ABscPerspectivesDto> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                _previous = args.RequestType;                   
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                _previous = args.RequestType;
                args.RowData.FinancialYearId = finyearid;
                args.RowData.ABscPerspectivesDetail = new List<ViewABscPerspectivesDetailDto>();
                
                if (Credentials.StaffId > 0)
                {
                    employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Credentials.StaffId);
                    if (employeeno != null)
                    {
                        args.Data.DepartmentId = employeeno.DepartmentId;
                    }
                }

                List<Task> t = new List<Task>();

                t.Add(Task.Run(async () =>
                {
                    var responsebscperspectivedetail = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesDetail?YearId={finyearid}");
                    if (responsebscperspectivedetail.IsSuccessStatusCode)
                    {
                        var contentbscperspectivedetail = await responsebscperspectivedetail.Content.ReadAsStringAsync();
                        PerspectivesDetailData = JsonSerializer.Deserialize<List<ViewABscPerspectivesDetailDto>>(contentbscperspectivedetail, _options);
                    }
                }));


                t.Add(Task.Run(async () =>
                {
                    var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
                    if (responsebscperspectivetype.IsSuccessStatusCode)
                    {
                        var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                        BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesTypeDto>>(contentbscperspectivetype, _options);
                    }
                }));

                Task _t = Task.WhenAll(t);
                await _t;

                if (PerspectivesDetailData != null)
                {
                    args.RowData.ABscPerspectivesDetail = PerspectivesDetailData;
                }
                if (args.RowData.ABscPerspectivesDetail == null)
                {
                    args.RowData.ABscPerspectivesDetail = new List<ViewABscPerspectivesDetailDto>();
                }

                foreach (var item in BscPerspectiveTypeData)
                {
                    var exist = args.RowData.ABscPerspectivesDetail.FirstOrDefault(o => o.BscPerspectiveTypeId == item.BscPerspectiveTypeId);
                    if (exist == null)
                    {
                        var m = new ViewABscPerspectivesDetailDto();
                        m.BscPerspectiveDetailId = countid;
                        m.BscPerspectiveTypeId = item.BscPerspectiveTypeId;

                        args.RowData.ABscPerspectivesDetail.Add(m);
                        countid++;
                    }
                }
                args.RowData.ABscPerspectivesDetail = args.RowData.ABscPerspectivesDetail.OrderBy(o => o.BscPerspectiveTypeId).ToList();

                StateHasChanged();
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Data.FinancialYearId == null)
                {
                    toastService.ShowWarning("Please select a financial year.");
                    args.Cancel = true;
                }
                else if (args.Data.DepartmentId == null)
                {
                    toastService.ShowWarning("Please select a department.");
                    args.Cancel = true;
                }

                else
                {
                    var countdata = BscPerspectiveData?.FirstOrDefault(o => o.FinancialYearId == args.Data.FinancialYearId && o.DepartmentId == args.Data.DepartmentId);

                    if (countdata != null && args.Action == "Add")
                    {
                        var findesc = FinancialYearData?.FirstOrDefault(o=>o.Id == countdata.FinancialYearId);
                        var depdesc = DepartmentsData?.FirstOrDefault(o => o.DepartmentId == countdata.DepartmentId);

                        toastService.ShowWarning("You have arleady captured weights for your department (" + depdesc.DepartmentDescription + ") in the Financial Year (" + findesc.FinancialYear + ") . Record Not Saved");
                        args.Cancel = true;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
    }

    public async Task OnPerspectiveActionComplete(ActionEventArgs<ABscPerspectivesDto> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            BscPerspectiveGrid?.PreventRender(false);
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            List<Task> t = new List<Task>();
            t.Add(Task.Run(async () =>
            {
                var responsebscperspective = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
                if (responsebscperspective.IsSuccessStatusCode)
                {
                    var contentbscperspective = await responsebscperspective.Content.ReadAsStringAsync();
                    BscPerspectiveData = JsonSerializer.Deserialize<List<BscPerspectivesDto>>(contentbscperspective, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsebscperspectivedetail = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesDetail");
                if (responsebscperspectivedetail.IsSuccessStatusCode)
                {
                    var contentbscperspectivedetail = await responsebscperspectivedetail.Content.ReadAsStringAsync();
                    PerspectivesDetailData = JsonSerializer.Deserialize<List<ViewABscPerspectivesDetailDto>>(contentbscperspectivedetail, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsefinyear = await Http.GetAsync($"FinancialYear/list");
                if (responsefinyear.IsSuccessStatusCode)
                {
                    var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
                    FinancialYearData = JsonSerializer.Deserialize<List<ViewFinancialYearDto>>(contentfinyear, _options);

                    DateTime currentdate = DateTime.Now;
                    string? financialyeardesc = null;
                    if (currentdate.Month >= 6)
                    {
                        financialyeardesc = $"{currentdate.Year}/{(currentdate.Year + 1)}";
                    }
                    else if (currentdate.Month < 6)
                    {
                        financialyeardesc = $"{(currentdate.Year - 1)}/{currentdate.Year}";
                    }

                    var b = FinancialYearData.FirstOrDefault(o => o.FinancialYear.Trim() == financialyeardesc.Trim());
                    if (b != null)
                    {
                        finyearid = b.Id;
                    }
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
                if (responsebscperspectivetype.IsSuccessStatusCode)
                {
                    var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                    BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesTypeDto>>(contentbscperspectivetype, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
                if (responsedepartment.IsSuccessStatusCode)
                {
                    var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
                    DepartmentsData = JsonSerializer.Deserialize<List<ADepartmentDto>>(contentdepartment, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
                if (responsemetric.IsSuccessStatusCode)
                {
                    var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                    MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetricDto>>(contentmetric, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responseemployee = await Http.GetAsync($"Utilities/GetEmployeeDD");
                if (responseemployee.IsSuccessStatusCode)
                {
                    var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                    EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDownDto>>(contentemployee, _options);
                }
            }));

            Task _t = Task.WhenAll(t);
            await _t;
        }
    }

    //For Child Grid
    //Enable cell edit on single click
    public async Task PerspectiveCellSelectHandler(CellSelectEventArgs<ViewABscPerspectivesDetailDto> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await ChildDataGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await ChildDataGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await ChildDataGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    
    public async Task RowDataBoundHandler(RowDataBoundEventArgs<ViewABscPerspectivesDetailDto> args)
    {
        var index = await ChildDataGrid.GetRowIndexByPrimaryKeyAsync(args.Data.BscPerspectiveDetailId);

        //Assign 10 as weight in Learning and Growth
        if (_previous == Syncfusion.Blazor.Grids.Action.Add && args.Data.BscPerspectiveTypeId == 4)
        {
            await ChildDataGrid.UpdateCellAsync(index, nameof(ViewABscPerspectivesDetailDto.PerspectiveTotalWeight),Convert.ToDouble(10));
        }

        //Assign % as basic unit
        await ChildDataGrid.UpdateCellAsync(index, nameof(ViewABscPerspectivesDetailDto.MeasurementMetricId),1);
    }

    public async void QueryCellInfoHandlerChild(QueryCellInfoEventArgs<ViewABscPerspectivesDetailDto> Args)
    {
        if (Args.Column.Field == nameof(ViewABscPerspectivesDetailDto.PerspectiveTotalWeight))
        {
            //Disable Learning and Growth
            if (Args.Data.BscPerspectiveTypeId == 4)
            {
                Args.Cell.AddClass(new string[] { "disablecell" });
            }
        }

        if (Args.Column.Field == nameof(ViewABscPerspectivesDetailDto.MeasurementMetricId))
        {
            //Disable Basic Unit
            Args.Cell.AddClass(new string[] { "disablebasicunit" });
        }
    }


    public async void LoadHandler()
    {
        SpinnerObj.ShowAsync();
        GridAttributes.Add("disable", "yes");
    }

    public async void DataBound()
    {
        GridAttributes["disable"] = "no";
        await SpinnerObj.HideAsync();

        //Check if there are records arleady and only allow editing
        if(BscPerspectiveGrid != null && BscPerspectiveGrid.CurrentViewData.Count() > 0)
        {
            ToolbarMenu = new List<object>()
            {
                new ItemModel(){ Text = "Edit Weight", PrefixIcon= "e-edit", Id="Grid_edit"}
            };
        }
    }

    #region BscPerspectiveAdapter
    public class BscPerspectiveAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        IAuthenticationService _AuthService;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public BscPerspectiveAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , IAuthenticationService authservice, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var credentials = await _AuthService.GetUserCredentials();
            
            int? EmployeeId = credentials.StaffId;
            var data = new List<ABscPerspectivesDto>();

            try
            {
                var response = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<ABscPerspectivesDto>>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ABscPerspectivesDto>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as ABscPerspectivesDto);
                if (val != null)
                {
                    if (val.BscPerspectiveId == 0)
                    {
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"BscPerspectives/CreateBSCPerspective?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as ABscPerspectivesDto);
                if (val != null)
                {
                    if (val.BscPerspectiveId != 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"BscPerspectives/UpdateBSCPerspective?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }

    public string GetWeightHeader(ABscPerspectivesDto Value)
    {
        if (Value.BscPerspectiveId == 0)
        {
            return "Add a Departmental Weights";
        }
        else
        {
            return "Edit Departmental Details";
        }
    }
    #endregion BscPerspectiveAdapter

    #region DetailsRegion
    public class PerspectivesDetailsAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        IAuthenticationService _AuthService;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public PerspectivesDetailsAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , IAuthenticationService authservice, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var credentials = await _AuthService.GetUserCredentials();
            
            int? EmployeeId = credentials.StaffId;
            var data = new List<ABscPerspectivesDetailDto>();

            try
            {
                var response = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesDetailAll");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<ABscPerspectivesDetailDto>>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ABscPerspectivesDetailDto>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
    }

    #endregion DetailsRegion
}
