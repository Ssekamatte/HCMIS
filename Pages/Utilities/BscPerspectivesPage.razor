@page "/BscPerspectivesPage"
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@using HCMIS.SHARED.DTOs.BSC;
@using HCMIS.SHARED.DTOs.Utilities;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;

<style>
 
    /*Disable Grid on Load and Enable it on DataBound*/
    .e-grid[disable="yes"] {
        opacity: .5;
        pointer-events: none;
        -ms-touch-action: none;
        touch-action: none;
        cursor: no-drop;
    }

     /*hide the Default Grid spinner */
    .e-grid .e-spinner-pane {
        display: none;
    }

    /*Disable select all on grid checkbox*/
    .e-headercelldiv.e-headerchkcelldiv .e-checkbox-wrapper.e-css {
        pointer-events: none;
        opacity: 0.5;
    }

    /*Change Dialog Header Close Button*/
    .e-dialog .e-btn .e-btn-icon.e-icon-dlg-close {
        float: right;
        font-size: 12px;
        width: auto;
    }

    .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {
        background-color: #d9edf7;
        border-color: #d9edf7;
        border-radius: 1px;
        bottom: 0;
        float: right;
        height: 32px;
        left: 15px;
        position: relative;
        width: 15px;
        padding: 1px 9px;
    }

    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #964B00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    .pp {
        color: ghostwhite;
        background-color: #2ecc71;
        padding: 10px;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25"/> HCMIS
        </strong>| PERSPECTIVES
    </li>
</ol>

@{
    var Div = (new string[] { "FinancialYearId" });
}

<SfSpinner @ref="SpinnerObj" Label="Loading Please Wait....." Size="50">
    @*Render custom spinner component.*@
</SfSpinner>

<SfGrid @ref="@BscPerspectiveGrid" TValue="ABscPerspectives" AllowPaging="true"
        AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
        AllowTextWrap="true"
        AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Cancel", "Update"})">
        <GridGroupSettings Columns="@Div" ShowDropArea="false">
            <CaptionTemplate>
                @{
                    var dvn = (context as CaptionTemplateContext);
                    string text = "";
                    if (dvn.Field == "FinancialYearId" && FinancialYearData != null)
                    {
                        var data = FinancialYearData.FirstOrDefault(o => o.Id != null && o.Id.ToString() == dvn.Key);
                        if (data != null)
                        {
                            text = data.FinancialYear;
                        }
                    }
                    <div><p class="pp"><strong>@text</strong></p></div>
                }
            </CaptionTemplate>
        </GridGroupSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <SfDataManager AdaptorInstance="@typeof(BscPerspectiveAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEvents 
        OnActionComplete="@OnPerspectiveActionComplete" 
        OnActionBegin="@OnPerspectivesActionBegin" 
        RowSelecting="RowSelectingHandler"
                OnLoad="LoadHandler"
                DataBound="DataBound"
        TValue="ABscPerspectives">
    </GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams">
        <HeaderTemplate>
            @{
                var text = GetBscPerspectivesHeader((context as ABscPerspectives));
                <div class="headerbandimg">
                    <span>@text</span>
                </div>
            }
        </HeaderTemplate>
        <Template Context="BscPerspectivesContext">
            @{
                KpiData = (BscPerspectivesContext as ABscPerspectives);
                @if (KpiData != null)
                {
                    <div class="row">
                        <div class="col-md-12" hidden>
                            <SfNumericTextBox @bind-Value="@(KpiData.BscPerspectiveId)" Enabled="false" Placeholder="Perspective Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>

                        <div class="col-md-6">
                            <p>Financial Year:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.FinancialYearId)"
                                    Enabled="true" TItem="ViewFinancialYearDto" TValue="int?"
                                    DataSource="@FinancialYearData" Placeholder="Please select"
                                    FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(AFinancialYear.Id)"
                                                   Text="@nameof(AFinancialYear.FinancialYear)">
                                </DropDownListFieldSettings>
                                @*<DropDownListEvents TValue="int?"
                                  TItem="ViewBscEmployeeDto" ValueChange="OnEmployeeChange">
                                  </DropDownListEvents>*@
                            </SfDropDownList>
                        </div>

                        <div class="col-md-6">
                            <p>Department:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.DepartmentId)"
                                    Enabled="@DepartmentDD" TItem="ADepartmentDto" TValue="int?"
                                    DataSource="@DepartmentsData" Placeholder="Please select"
                                    FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(ADepartmentDto.DepartmentId)"
                                                           Text="@nameof(ADepartmentDto.DepartmentDescription)">
                                </DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        
                        <div class="col-md-6">
                            <p>Perspective Description:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.BscPerspectiveTypeId)"
                                    Enabled="true" TItem="ABscPerspectivesTypeDto" TValue="int?"
                                    DataSource="@BscPerspectiveTypeData" Placeholder="Please select"
                                    FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeId)"
                                    Text="@nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeDescription)">
                                </DropDownListFieldSettings>
                                <DropDownListEvents TValue="int?"
                                                    TItem="ABscPerspectivesTypeDto" ValueChange="OnPerspectiveChange">
                                </DropDownListEvents>
                            </SfDropDownList>
                        </div>
                        <div class="col-md-6">
                            <p>Perspective Total Weight:<span style="color:red;">*</span></p>
                            <SfNumericTextBox @bind-Value="@(KpiData.PerspectiveTotalWeight)" Enabled="@WeightTextBox" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>
                        <div class="col-md-12">
                            <p>Basic Unit:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.MeasurementMetricId)"
                                            Enabled="@BasicUnitDD" TItem="AMeasurementMetricDto" TValue="int?"
                                            DataSource="@MeasurementUnitData" Placeholder="Please select"
                                    FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(AMeasurementMetricDto.MeasurementMetricId)"
                                                           Text="@nameof(AMeasurementMetricDto.MeasurementMetricDesc)">
                                </DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                }
            }
        </Template>
    </GridEditSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="30"></GridColumn>
        <GridColumn Field=@nameof(ABscPerspectives.BscPerspectiveId) Visible=false HeaderText="Perspective Id" AllowEditing="false" IsPrimaryKey="true"></GridColumn>
        <GridForeignColumn Field=@nameof(ABscPerspectives.BscPerspectiveTypeId)
                           HeaderText="Perspective"
                           Width="120"
                           AllowEditing="false"
                           ForeignKeyField="@(nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeId))"
                           ForeignKeyValue="@(nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeDescription))"
                           ForeignDataSource="@BscPerspectiveTypeData"
                           AllowFiltering="false"
                           IsFrozen="false"
                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridForeignColumn>
        <GridForeignColumn Field=@nameof(ABscPerspectives.FinancialYearId)
             HeaderText="Financial Year"
             Width="80"
             AllowEditing="true"
             ForeignKeyField="@(nameof(AFinancialYear.Id))"
             ForeignKeyValue="@(nameof(AFinancialYear.FinancialYear))"
             ForeignDataSource="@FinancialYearData"
             CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridForeignColumn>
        <GridForeignColumn Field=@nameof(ABscPerspectives.DepartmentId)
             HeaderText="Department"
             Width="80"
             AllowEditing="true"
             ForeignKeyField="@(nameof(ADepartment.DepartmentId))"
             ForeignKeyValue="@(nameof(ADepartment.DepartmentDescription))"
             ForeignDataSource="@DepartmentsData"
             CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridForeignColumn>
        <GridColumn Field=@nameof(ABscPerspectives.PerspectiveTotalWeight)
             HeaderText="Perspective Total Weight"
             TextAlign="TextAlign.Right"
             AllowEditing="true"
             ValidationRules="@(new ValidationRules { Required = false })"
             EditType="EditType.NumericEdit"
             Format="###.##"
             Width="80"
             CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridColumn>
        <GridForeignColumn Field=@nameof(ABscPerspectives.MeasurementMetricId)
             HeaderText="Basic Unit"
             Width="70"
             AllowEditing="true"
             ForeignKeyField="@(nameof(AMeasurementMetricDto.MeasurementMetricId))"
             ForeignKeyValue="@(nameof(AMeasurementMetricDto.MeasurementMetricDesc))"
             ForeignDataSource="@MeasurementUnitData"
             CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridForeignColumn>
    </GridColumns>
</SfGrid>


@code {
    #region Declarations
    private static ABscPerspectives? KpiData { get; set; }
    SfGrid<ABscPerspectives>? BscPerspectiveGrid;
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "40vh", Width = "65%" };
    List<BscPerspectivesDto>? BscPerspectiveData { get; set; }
    List<ViewPerspectiveTotalWeightSumDto>? BscPerspectiveSumData { get; set; }
    List<ViewFinancialYearDto>? FinancialYearData { get; set; }
    List<ADepartmentDto>? DepartmentsData { get; set; }
    List<ABscPerspectivesTypeDto>? BscPerspectiveTypeData { get; set; }
    List<AMeasurementMetricDto>? MeasurementUnitData { get; set; }

    EmployeeRegistrationModel inputmodel { get; set; } = new EmployeeRegistrationModel();
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    [Parameter]
    public int? finyear { get; set; }
    LoginResultModel? Credentials { get; set; }
    public bool WeightTextBox = true;
    public bool BasicUnitDD = true;
    public bool DepartmentDD = false;
    private static EmployeeDto? employeeno { get; set; }
    List<EmployeeDto>? EmployeeData { get; set; }
    SfSpinner? SpinnerObj;
    private Dictionary<string, object> GridAttributes { get; set; } = new Dictionary<string, object>();

    #endregion Declarations

    protected override async Task OnInitializedAsync()
    {
        Credentials = await AuthService.GetUserCredentials();
        JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

        employeeno = null;
        List<Task> t = new List<Task>();
        t.Add(Task.Run(async () =>
        {
            var responsebscperspective = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
            if (responsebscperspective.IsSuccessStatusCode)
            {
                var contentbscperspective = await responsebscperspective.Content.ReadAsStringAsync();
                BscPerspectiveData = JsonSerializer.Deserialize<List<BscPerspectivesDto>>(contentbscperspective, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsebscperspectivesum = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesSum");
            if (responsebscperspectivesum.IsSuccessStatusCode)
            {
                var contentbscperspectivesum = await responsebscperspectivesum.Content.ReadAsStringAsync();
                BscPerspectiveSumData = JsonSerializer.Deserialize<List<ViewPerspectiveTotalWeightSumDto>>(contentbscperspectivesum, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsefinyear = await Http.GetAsync($"FinancialYear/list");
            if (responsefinyear.IsSuccessStatusCode)
            {
                var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
                FinancialYearData = JsonSerializer.Deserialize<List<ViewFinancialYearDto>>(contentfinyear, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
            if (responsebscperspectivetype.IsSuccessStatusCode)
            {
                var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesTypeDto>>(contentbscperspectivetype, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
            if (responsedepartment.IsSuccessStatusCode)
            {
                var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
                DepartmentsData = JsonSerializer.Deserialize<List<ADepartmentDto>>(contentdepartment, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
            if (responsemetric.IsSuccessStatusCode)
            {
                var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetricDto>>(contentmetric, _options);
            }
        }));

        t.Add(Task.Run(async () =>
        {
            var responseemployee = await Http.GetAsync($"Employeez/GetMasterList");
            if (responseemployee.IsSuccessStatusCode)
            {
                var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                EmployeeData = JsonSerializer.Deserialize<List<EmployeeDto>>(contentemployee, _options);
            }
        }));

        ////To Get Department Data
        //var response = await Http.GetAsync($"Employeez/GetEmployeePrimaryDataList");
        //var content = await response.Content.ReadAsStringAsync();
        //if (response.IsSuccessStatusCode)
        //{
        //    var _EmployeeRegistrationModel = JsonSerializer.Deserialize<EmployeeRegistrationModel>(content, _options);

        //    if (_EmployeeRegistrationModel != null)
        //    {
        //        DepartmentsData = _EmployeeRegistrationModel.Departments;
        //    }
        //}
    }

    public async void OnPerspectiveChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ABscPerspectivesTypeDto> args)
    {
        if(args.ItemData.BscPerspectiveTypeId == 4)
        {
            KpiData.PerspectiveTotalWeight =  10;
            KpiData.MeasurementMetricId = 1;
            WeightTextBox = false;
            BasicUnitDD = false;
        }
        else
        {
            WeightTextBox = true;
            BasicUnitDD = true;
            KpiData.PerspectiveTotalWeight =  null;
            KpiData.MeasurementMetricId = null;
        }
    }

    #region PerspectiveAdapter
    public class BscPerspectiveAdapter : DataAdaptor
    {
        HttpClient Http;
        ApiConfig _ApiConfig;
        private readonly JsonSerializerOptions _options;
        public IToastService toastService;
        private readonly NavigationManager Navigation;
        public BscPerspectiveAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;

        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<ABscPerspectives>();
            try
            {
                var response = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    toastService.ShowError(response.ReasonPhrase);
                }
                data = JsonSerializer.Deserialize<List<ABscPerspectives>>(content, _options);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ABscPerspectives>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as ABscPerspectives);

                if (val.BscPerspectiveId == 0)
                {
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var result = await Http.PostAsync($"BscPerspectives/CreateBSCPerspective", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        toastService.ShowSuccess("Record sucessfully added");
                    }
                    else
                    {
                        // toastService.ShowError(result.Content.);
                    }
                }
                else
                {
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var result = await Http.PutAsync($"BscPerspectives/CreateBSCPerspective", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        toastService.ShowSuccess("Record sucessfully added");
                    }
                    else
                    {
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as ABscPerspectives);


                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                var result = await Http.PostAsync($"BscPerspectives/CreateBSCPerspective", httpContent);
                if (result.IsSuccessStatusCode)
                {
                    toastService.ShowSuccess("Record sucessfully");
                }
                else
                {
                    toastService.ShowError(result.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }

    }
    public async void OnPerspectivesActionBegin(ActionEventArgs<ABscPerspectives> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                BasicUnitDD = true;
                WeightTextBox = true;
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                if(Credentials.StaffId > 0)
                {
                    employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Credentials.StaffId);
                    if(employeeno != null)
                    {
                        args.Data.DepartmentId = employeeno.DepartmentId;
                    }
                }

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Data.FinancialYearId == null)
                {
                    toastService.ShowWarning("Please select a financial year.");
                    args.Cancel = true;
                }
                else if (args.Data.DepartmentId == null)
                {
                    toastService.ShowWarning("Please select a department.");
                    args.Cancel = true;
                }
                else if (args.Data.BscPerspectiveTypeId == null)
                {
                    toastService.ShowWarning("Please select the perspective type.");
                    args.Cancel = true;
                }
                else if (args.Data.PerspectiveTotalWeight == null)
                {
                    toastService.ShowWarning("Please enter the perspective total weight.");
                    args.Cancel = true;
                }
                else if (args.Data.MeasurementMetricId == null)
                {
                    toastService.ShowWarning("Please select the basic unit.");
                    args.Cancel = true;
                }

                else if (args.Data.MeasurementMetricId == 1 && args.Data.PerspectiveTotalWeight > 100)
                {
                    toastService.ShowWarning("The percentage cannot be beyond 100%. Please revise your perspective total weight.");
                    args.Cancel = true;
                }

                else
                {
                    var countdata = BscPerspectiveData?.FirstOrDefault(o => o.BscPerspectiveTypeId == args.Data.BscPerspectiveTypeId && o.FinancialYearId == args.Data.FinancialYearId && o.DepartmentId == args.Data.DepartmentId);
                    var sumdata = BscPerspectiveSumData?.FirstOrDefault(o =>o.FinancialYearId == args.Data.FinancialYearId && o.DepartmentId == args.Data.DepartmentId);

                    if (countdata != null && args.Action == "Add")
                    {
                        var findesc = FinancialYearData?.FirstOrDefault(o=>o.Id == countdata.FinancialYearId);
                        var perdesc = BscPerspectiveTypeData?.FirstOrDefault(o => o.BscPerspectiveTypeId == countdata.BscPerspectiveTypeId);
                        var depdesc = DepartmentsData?.FirstOrDefault(o => o.DepartmentId == countdata.DepartmentId);

                        toastService.ShowWarning("You have arleady captured a value for this perspective (" + perdesc.BscPerspectiveTypeDescription + ") in the Financial Year (" + findesc.FinancialYear + ") in the department (" + depdesc.DepartmentDescription + "). Record Not Saved");
                        args.Cancel = true;
                    }              

                    else if (sumdata != null)
                    {
                        if(args.Action == "Add")
                        {
                            //To ensure that all the four perspectives do not exceed 70%
                            double? setpercentage = 70;
                            double? newtotal = sumdata.TotalWeight + args.Data.PerspectiveTotalWeight;
                            if (newtotal > setpercentage)
                            {
                                var basicunitdesc = MeasurementUnitData?.FirstOrDefault(o => o.MeasurementMetricId == args.Data.MeasurementMetricId);
                                toastService.ShowWarning("Make sure all the four perspectives are not exceeding 70 and are not less than 70 " + basicunitdesc.MeasurementMetricDesc + " Record Not Saved");
                                //toastService.ShowWarning("Make sure all the four perspectives are not exceeding 70 and are not less than 70 " + basicunitdesc.MeasurementMetricDesc + ". Your acceptable percentage is ( " + (setpercentage - sumdata.TotalWeight) + "). Record Not Saved");
                                args.Cancel = true;
                            }
                        }
                        else if(args.Action == "Edit")
                        {
                            //To ensure that all the four perspectives do not exceed 70%
                            double? balance = args.RowData.PerspectiveTotalWeight;
                            double? newtotal = (sumdata.TotalWeight - args.RowData.PerspectiveTotalWeight) + args.Data.PerspectiveTotalWeight;

                            double? setpercentage = 70;
                            if (newtotal > setpercentage)
                            {
                                var basicunitdesc = MeasurementUnitData?.FirstOrDefault(o => o.MeasurementMetricId == args.Data.MeasurementMetricId);
                                toastService.ShowWarning("Make sure all the four perspectives are not exceeding 70 and are not less than 70 " + basicunitdesc.MeasurementMetricDesc + " Record Not Saved");
                                //toastService.ShowWarning("Make sure all the four perspectives are not exceeding 70 and are not less than 70 " + basicunitdesc.MeasurementMetricDesc + ". Your acceptable percentage is ( " + (setpercentage - sumdata.TotalWeight) + "). Record Not Saved");
                                args.Cancel = true;
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
    }

    public void OnPerspectiveActionComplete(ActionEventArgs<ABscPerspectives> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            BscPerspectiveGrid?.PreventRender(false);
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

            employeeno = null;
            List<Task> t = new List<Task>();
            t.Add(Task.Run(async () =>
            {
                var responsebscperspective = await Http.GetAsync($"BscPerspectives/GetBscPerspectives");
                if (responsebscperspective.IsSuccessStatusCode)
                {
                    var contentbscperspective = await responsebscperspective.Content.ReadAsStringAsync();
                    BscPerspectiveData = JsonSerializer.Deserialize<List<BscPerspectivesDto>>(contentbscperspective, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsebscperspectivesum = await Http.GetAsync($"BscPerspectives/GetBscPerspectivesSum");
                if (responsebscperspectivesum.IsSuccessStatusCode)
                {
                    var contentbscperspectivesum = await responsebscperspectivesum.Content.ReadAsStringAsync();
                    BscPerspectiveSumData = JsonSerializer.Deserialize<List<ViewPerspectiveTotalWeightSumDto>>(contentbscperspectivesum, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsefinyear = await Http.GetAsync($"FinancialYear/list");
                if (responsefinyear.IsSuccessStatusCode)
                {
                    var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
                    FinancialYearData = JsonSerializer.Deserialize<List<ViewFinancialYearDto>>(contentfinyear, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsebscperspectivetype = await Http.GetAsync($"Utilities/BSCPerspectiveType");
                if (responsebscperspectivetype.IsSuccessStatusCode)
                {
                    var contentbscperspectivetype = await responsebscperspectivetype.Content.ReadAsStringAsync();
                    BscPerspectiveTypeData = JsonSerializer.Deserialize<List<ABscPerspectivesTypeDto>>(contentbscperspectivetype, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsedepartment = await Http.GetAsync($"Utilities/GetDepartment");
                if (responsedepartment.IsSuccessStatusCode)
                {
                    var contentdepartment = await responsedepartment.Content.ReadAsStringAsync();
                    DepartmentsData = JsonSerializer.Deserialize<List<ADepartmentDto>>(contentdepartment, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsemetric = await Http.GetAsync($"Utilities/GetMeasurementMetric");
                if (responsemetric.IsSuccessStatusCode)
                {
                    var contentmetric = await responsemetric.Content.ReadAsStringAsync();
                    MeasurementUnitData = JsonSerializer.Deserialize<List<AMeasurementMetricDto>>(contentmetric, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responseemployee = await Http.GetAsync($"Employeez/GetMasterList");
                if (responseemployee.IsSuccessStatusCode)
                {
                    var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                    EmployeeData = JsonSerializer.Deserialize<List<EmployeeDto>>(contentemployee, _options);
                }
            }));
        }
    }

    public async Task RowSelectingHandler(RowSelectingEventArgs<ABscPerspectives> args)
    {
        await BscPerspectiveGrid.ClearSelection();   //clear selection
    }

    public async void LoadHandler()
    {
        SpinnerObj.ShowAsync();
        GridAttributes.Add("disable", "yes");
    }
    public async void DataBound()
    {
        GridAttributes["disable"] = "no";
        SpinnerObj.HideAsync();
    }

    public string GetBscPerspectivesHeader(ABscPerspectives Value)
    {
        if (Value.BscPerspectiveId == 0)
        {
            return "Add a new BSC Perspective";
        }
        else
        {
            return "Edit the Record" /*+ Value.BscPerspectiveDescription*/;
        }
    }
    #endregion PerspectiveAdapter
}
