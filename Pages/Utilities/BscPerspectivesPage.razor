@page "/BscPerspectivesPage"
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;
@using HCMIS.SHARED.DTOs.BSC;
@using HCMIS.SHARED.DTOs.Utilities;
@using HCMIS.ViewModel;
@inject IToastService toastService;

<style>
    .element.style {
        max-height: 531px;
        z-index: 1001;
        left: 0px;
        top: 0px;
        width: 1000px;
        position: relative;
    }

    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #964B00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    .pp {
        color: ghostwhite;
        background-color: #2ecc71;
        padding: 10px;
    }
</style>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>

<center>
    <h5>
        <strong>PERSPECTIVES</strong>
    </h5>
</center>

<SfGrid @ref="@BscPerspectiveGrid" TValue="ABscPerspectives" AllowPaging="true"
        AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
        AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update"})">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <SfDataManager AdaptorInstance="@typeof(BscPerspectiveAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEvents OnActionComplete="@OnPerspectiveActionComplete" OnActionBegin="@OnPerspectivesActionBegin" TValue="ABscPerspectives"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams">
        <HeaderTemplate>
            @{
                var text = GetBscPerspectivesHeader((context as ABscPerspectives));
                <div class="headerbandimg">
                    <span>@text</span>
                </div>
            }
        </HeaderTemplate>
        <Template Context="BscPerspectivesContext">
            @{
                var KpiData = (BscPerspectivesContext as ABscPerspectives);
                @if (KpiData != null)
                {
                    <div class="row">
                        <div class="col-md-12" hidden>
                            <SfNumericTextBox @bind-Value="@(KpiData.BscPerspectiveId)" Enabled="false" Placeholder="Perspective Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>

                        <div class="col-md-6">
                            <p>Financial Year:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.FinancialYearId)"
                                    Enabled="true" TItem="ViewFinancialYearDto" TValue="int?"
                                    DataSource="@FinancialYearData" Placeholder="Please select"
                                    FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(AFinancialYear.Id)"
                                                   Text="@nameof(AFinancialYear.FinancialYear)">
                                </DropDownListFieldSettings>
                                @*<DropDownListEvents TValue="int?"
                                  TItem="ViewBscEmployeeDto" ValueChange="OnEmployeeChange">
                                  </DropDownListEvents>*@
                            </SfDropDownList>
                        </div>

                        <div class="col-md-6">
                            <p>Department:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.DepartmentId)"
                                    Enabled="true" TItem="ADepartment" TValue="int?"
                                    DataSource="@DepartmentsData" Placeholder="Please select"
                                    FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(ADepartment.DepartmentId)"
                                    Text="@nameof(ADepartment.DepartmentDescription)">
                                </DropDownListFieldSettings>
                                @*<DropDownListEvents TValue="int?"
                                    TItem="ViewBscEmployeeDto" ValueChange="OnEmployeeChange">
                                </DropDownListEvents>*@
                            </SfDropDownList>
                        </div>
                        
                        <div class="col-md-6">
                            <p>Perspective Description:<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(KpiData.BscPerspectiveTypeId)"
                                    Enabled="true" TItem="ABscPerspectivesTypeDto" TValue="int?"
                                    DataSource="@BscPerspectiveTypeData" Placeholder="Please select"
                                    FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeId)"
                                    Text="@nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeDescription)">
                                </DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <div class="col-md-6">
                            <p>Perspective Total Weight:<span style="color:red;">*</span></p>
                            <SfNumericTextBox @bind-Value="@(KpiData.PerspectiveTotalWeight)" Enabled="true" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>
                    </div>
                }
            }
        </Template>
    </GridEditSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="30"></GridColumn>
        <GridColumn Field=@nameof(ABscPerspectives.BscPerspectiveId) Visible=false HeaderText="Perspective Id" AllowEditing="false" IsPrimaryKey="true"></GridColumn>
        <GridForeignColumn Field=@nameof(ABscPerspectives.BscPerspectiveTypeId)
                           HeaderText="Perspective"
                           Width="180"
                           AllowEditing="false"
                           ForeignKeyField="@(nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeId))"
                           ForeignKeyValue="@(nameof(ABscPerspectivesTypeDto.BscPerspectiveTypeDescription))"
                           ForeignDataSource="@BscPerspectiveTypeData"
                           AllowFiltering="false"
                           IsFrozen="false"
                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridForeignColumn>
        <GridForeignColumn Field=@nameof(ABscPerspectives.FinancialYearId)
             HeaderText="Financial Year"
             Width="180"
             AllowEditing="true"
             ForeignKeyField="@(nameof(AFinancialYear.Id))"
             ForeignKeyValue="@(nameof(AFinancialYear.FinancialYear))"
             ForeignDataSource="@FinancialYearData"
             CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridForeignColumn>
        <GridForeignColumn Field=@nameof(ABscPerspectives.DepartmentId)
             HeaderText="Department"
             Width="180"
             AllowEditing="true"
             ForeignKeyField="@(nameof(ADepartment.DepartmentId))"
             ForeignKeyValue="@(nameof(ADepartment.DepartmentDescription))"
             ForeignDataSource="@DepartmentsData"
             CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridForeignColumn>
        <GridColumn Field=@nameof(ABscPerspectives.PerspectiveTotalWeight)
             HeaderText="Perspective Total Weight%"
             TextAlign="TextAlign.Right"
             AllowEditing="true"
             ValidationRules="@(new ValidationRules { Required = false })"
             EditType="EditType.NumericEdit"
             Format="###.##"
             Width="180"
             CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
        </GridColumn>
    </GridColumns>
</SfGrid>


@code {
    #region Toasters
    public static string? ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast? DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters

    #region Declarations
    SfGrid<ABscPerspectives>? BscPerspectiveGrid;
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "40vh", Width = "65%" };
    List<BscPerspectivesDto>? BscPerspectiveData { get; set; }
    List<ViewFinancialYearDto>? FinancialYearData { get; set; }
    List<ADepartment>? DepartmentsData { get; set; }
    List<ABscPerspectivesTypeDto>? BscPerspectiveTypeData { get; set; }

    EmployeeRegistrationModel inputmodel { get; set; } = new EmployeeRegistrationModel();
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    [Parameter]
    public int? finyear { get; set; }

    #endregion Declarations

    protected override async Task OnInitializedAsync()
    {
        await _SystemSettings.GetLoginCredentials();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);

        var responsebscperspective = await Http.GetAsync($"{_ApiConfig.BaseUrl}BscPerspectives/GetBscPerspectives");
        var contentbscperspective = await responsebscperspective.Content.ReadAsStringAsync(); 
        var responsefinyear = await Http.GetAsync($"{_ApiConfig.BaseUrl}FinancialYear/list");
        var contentfinyear = await responsefinyear.Content.ReadAsStringAsync();
        //To Get Department Data
        var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Employeez/GetEmployeePrimaryDataList");
        var content = await response.Content.ReadAsStringAsync();
        var responsebscperspectivetype = await Http.GetAsync($"{_ApiConfig.BaseUrl}Utilities/BSCPerspectiveType");
        var contentbscperspectivetype = await responsebscperspective.Content.ReadAsStringAsync();  

        if (responsebscperspective.IsSuccessStatusCode)
        {
        BscPerspectiveData = await Http.GetFromJsonAsync<List<BscPerspectivesDto>>
        ($"{_ApiConfig.BaseUrl}BscPerspectives/GetBscPerspectives");
        }

        if (responsefinyear.IsSuccessStatusCode)
        {
        FinancialYearData = await Http.GetFromJsonAsync<List<ViewFinancialYearDto>>
        ($"{_ApiConfig.BaseUrl}FinancialYear/list");
        }

        if (responsebscperspectivetype.IsSuccessStatusCode)
        {
            BscPerspectiveTypeData = await Http.GetFromJsonAsync<List<ABscPerspectivesTypeDto>>
            ($"{_ApiConfig.BaseUrl}Utilities/BSCPerspectiveType");
        }

        if (response.IsSuccessStatusCode)
        {
            var _EmployeeRegistrationModel = JsonSerializer.Deserialize<EmployeeRegistrationModel>(content, _options);

            if (_EmployeeRegistrationModel != null)
            {
                DepartmentsData = _EmployeeRegistrationModel.Departments;
            }
        }
    }

    #region PerspectiveAdapter
    public class BscPerspectiveAdapter : DataAdaptor
    {
        HttpClient Http;
        ApiConfig _ApiConfig;
        SystemSettings _SystemSettings;
        private readonly JsonSerializerOptions _options;
        public IToastService toastService;
        private readonly NavigationManager Navigation;
        public BscPerspectiveAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _SystemSettings = systemSettings;

        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<ABscPerspectives>();
            try
            {
                var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}BscPerspectives/GetBscPerspectives");
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    toastService.ShowError(response.ReasonPhrase);
                }
                data = JsonSerializer.Deserialize<List<ABscPerspectives>>(content, _options);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ABscPerspectives>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as ABscPerspectives);
                
                if (val.BscPerspectiveId == 0)
                {
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}BscPerspectives/CreateBSCPerspective", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        toastService.ShowSuccess("Record sucessfully added");
                    }
                    else
                    {
                        // toastService.ShowError(result.Content.);
                    }
                }
                else
                {
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}BscPerspectives/CreateBSCPerspective", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        toastService.ShowSuccess("Record sucessfully added");
                    }
                    else
                    {
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as ABscPerspectives);
                await _SystemSettings.GetLoginCredentials();
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}BscPerspectives/CreateBSCPerspective", httpContent);
                if (result.IsSuccessStatusCode)
                {
                    toastService.ShowSuccess("Record sucessfully");
                }
                else
                {
                    toastService.ShowError(result.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    
    }
    public async void OnPerspectivesActionBegin(ActionEventArgs<ABscPerspectives> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Data.FinancialYearId == null)
                {
                    toastService.ShowWarning("Please select a financial year.");
                    args.Cancel = true;
                }
                else if (args.Data.DepartmentId == null)
                {
                    toastService.ShowWarning("Please select a department.");
                    args.Cancel = true;
                }
                else if (args.Data.BscPerspectiveTypeId == null)
                {
                    toastService.ShowWarning("Please select the perspective type.");
                    args.Cancel = true;
                }
                else if (args.Data.PerspectiveTotalWeight == null)
                {
                    toastService.ShowWarning("Please enter the perspective total weight.");
                    args.Cancel = true;
                }

                else
                {
                    string? AccessToken = _SystemSettings.AccessToken;
                    string? BaseUrl = _ApiConfig.BaseUrl;
                    int? financialyear = null;
                    int? dept = null;
                    int? persdescription = null;

                    if (args.Data.FinancialYearId != null)
                    {
                        finyear = args.Data.FinancialYearId;
                    }

                    if (args.Data.DepartmentId != null)
                    {
                        dept = args.Data.DepartmentId;
                    }

                    if (args.Data.BscPerspectiveTypeId != null)
                    {
                        persdescription = args.Data.BscPerspectiveTypeId;
                    }

                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AccessToken);
                    var response = await Http.GetAsync($"{BaseUrl}BscPerspectives/GetExistingBscPerspectives/{finyear}/{dept}/{persdescription}");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        await this.ToastObj.Show(new ToastModel { Title = "Error!", Content = "This record ( " + finyear + " ) Arleady Exists! Record will not be saved", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        args.Cancel = true;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastObj?.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        //finally { StateHasChanged(); }
    }

    public void OnPerspectiveActionComplete(ActionEventArgs<ABscPerspectives> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            BscPerspectiveGrid?.PreventRender(false);
        }
    }

    public string GetBscPerspectivesHeader(ABscPerspectives Value)
    {
        if (Value.BscPerspectiveId == 0)
        {
            return "Add a new BSC Perspective";
        }
        else
        {
            return "Edit the Record" /*+ Value.BscPerspectiveDescription*/;
        }
    }
    #endregion PerspectiveAdapter
}
