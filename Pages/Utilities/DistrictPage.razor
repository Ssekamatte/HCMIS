@*@page "/DistrictPage"*@
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@inject IJSRuntime JSRuntime

<style>
       .headerbandimg {
        background-image: url(/image/logonhcc.png);
        background-size: 20px;
        background-repeat: no-repeat;
        width: 20px;
        height: 20px;
        margin-right: 5px;
        vertical-align: top;
        display: inline-block;
        color: whitesmoke;
    }

    .pp {
        color: ghostwhite;
        background-color: #2ecc71;
        padding: 10px;
    }

    /*Increase font size for Multi Line Text Box Place Holder*/
    .e-multi-line-input label.e-float-text {
        font-size: 17px !important;
    }
</style>

<center>
    <h5>
        <strong>DISTRICT</strong>
    </h5>
</center>

<SfGrid @ref="@DataGrid" TValue="ADistrict" ID="Grid1" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update","ExcelExport","PdfExport","CsvExport", "Search"})">
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
        <HeaderTemplate>
            @{
                var text = GetDistrictsHeader((context as ADistrict));
                <div class="headerbandimg">
                    <span>@text</span>
                </div>
            }
        </HeaderTemplate>
        <Template Context="DistrictContext">
            @{
                var KpiData = (DistrictContext as ADistrict);
                @if (KpiData != null)
                {
                    <div class="row">
                        <div class="col-md-12" hidden>
                            <SfNumericTextBox @bind-Value="@(KpiData.DistrictId)" Enabled="false" Placeholder="District Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>
                        <div class="col-md-12">
                            <p>District<span style="color:red;">*</span></p>
                             @*@onkeypress='@KeyPressed'*@
                            <SfTextBox @ref="DistrictIdObj" ID="DistrictId" CssClass="requiredfield" Multiline=false @bind-Value="@(KpiData.DistrictDescription)" Width="100%" FloatLabelType="FloatLabelType.Never" @onclick="@((args) => OnClick(DistrictIdObj.ID))"></SfTextBox>
                        </div>
                    </div>
                }
            }
        </Template>

    </GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <SfDataManager AdaptorInstance="@typeof(DistrictAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <GridEvents 
        OnToolbarClick="@GridToolbarClick"
                OnActionBegin="@OnDistrictActionBegin"
                OnActionComplete="@OnDistrictActionComplete"
                TValue="ADistrict">
    </GridEvents>
    <GridColumns>
      <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
    	<GridColumn Field=@nameof(ADistrict.DistrictId) HeaderText="DistrictId" AllowEditing="false" IsPrimaryKey="true" Width="150" Visible="false"></GridColumn>
        <GridColumn Field=@nameof(ADistrict.DistrictDescription) HeaderText="District"  Width="150"></GridColumn>
    </GridColumns>
</SfGrid>


@code {
    SfGrid<ADistrict>? DataGrid { get; set; }
    List<ADistrict>? DistrictData { get; set; }
    SfTextBox DistrictIdObj;

    /// <summary>
    /// Event for Toolbar click for Grid Exporting
    /// </summary>
    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid1_excelexport")
        {
            this.DataGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid1_pdfexport")
        {
            this.DataGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid1_csvexport")
        {
            this.DataGrid.ExportToCsvAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        
        var responsedistrict = await Http.GetAsync($"Utilities/GetDistrict");
        var contentdistrict = await responsedistrict.Content.ReadAsStringAsync();  
        
        if (responsedistrict.IsSuccessStatusCode)
        {
            DistrictData = await Http.GetFromJsonAsync<List<ADistrict>>
            ($"Utilities/GetDistrict");
        }
    }

    public void KeyPressed()
    {
        Console.WriteLine("Key Pressed!");
    }

    public async void OnClick(string clickedid)
    {
        await JSRuntime.InvokeVoidAsync("RequiredFieldClearFunction", clickedid);
        //Console.WriteLine(clickedid);
    }

    #region Districts Region
    public class DistrictAdapter : DataAdaptor
    {
        HttpClient Http;
        ApiConfig _ApiConfig;
        SystemSettings _SystemSettings;
        private readonly JsonSerializerOptions _options;
        public IToastService toastService;
        private readonly NavigationManager Navigation;
        public DistrictAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _SystemSettings = systemSettings;

        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<ADistrict>();

            try
            {
                var response = await Http.GetAsync($"Utilities/GetDistrict");
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    toastService.ShowError(response.ReasonPhrase);
                }
                data = JsonSerializer.Deserialize<List<ADistrict>>(content, _options);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ADistrict>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as ADistrict);

                if (val.DistrictId == 0)
                {
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var result = await Http.PostAsync($"Utilities/CreateDistrict", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        toastService.ShowSuccess(val.DistrictDescription + " was sucessfully added");
                    }
                    else
                    {
                        // toastService.ShowError(result.Content.);
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as ADistrict);
                
                
                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                var result = await Http.PutAsync($"Utilities/UpdateDistrict", httpContent);
                if (result.IsSuccessStatusCode)
                {
                    toastService.ShowSuccess($"{val.DistrictDescription}  was sucessfully updated");
                }
                else
                {
                    toastService.ShowError(result.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }

    public async void OnDistrictActionComplete(ActionEventArgs<ADistrict> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) ||
        args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            DataGrid.PreventRender(false);
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            var responsedistrict = await Http.GetAsync($"Utilities/GetDistrict");
            var contentdistrict = await responsedistrict.Content.ReadAsStringAsync();

            if (responsedistrict.IsSuccessStatusCode)
            {
                DistrictData = await Http.GetFromJsonAsync<List<ADistrict>>
                ($"Utilities/GetDistrict");
            }
        }
    }

    public async void OnDistrictActionBegin(ActionEventArgs<ADistrict> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (string.IsNullOrEmpty(args.Data.DistrictDescription))
                {                    
                    toastService.ShowWarning("Please enter the district.");
                    args.Cancel = true;
                    await JSRuntime.InvokeVoidAsync("RequiredFieldFunction");
                }

                else
                {
                        var countdata = DistrictData?
                    .FirstOrDefault(o => o.DistrictDescription.Trim().ToLower()
                    == args.Data.DistrictDescription.Trim().ToLower());
                        if (countdata != null)
                        {
                            toastService.ShowWarning("This District " + args.Data.DistrictDescription + " already exists in the database and will not be saved.");
                            args.Cancel = true;
                        }
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
    }


    public string GetDistrictsHeader(ADistrict Value)
    {
        if (Value.DistrictId == 0)
        {
            return "Add a new District";
        }
        else
        {
            return "Edit Details for " + Value.DistrictDescription;
        }
    }

    #endregion Districts Region



}
