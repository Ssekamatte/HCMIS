@using HCMIS.Data
@using HCMIS.Interface
@using HCMIS.Model
@using System.Text.Json
@using HCMIS.SHARED.DTO
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Collections;
@inject HttpClient Http
@inject AppState AppState
@inject ApiConfig _ApiConfig;
@inject NavigationManager Navigation
@inject DocumentUploadModel _DocumentUploadModel;
@inject IToastService toasterservice;
@inject IAuthenticationService authService;

<style>
    /*Manage Records Delete Button*/
    .e-btn.e-flat, .e-css.e-btn.e-flat {
    background: red;
    border-color: black;
    box-shadow: none;
    color: white;
    font-weight: 600;
}

    /*Auto complete search icon*/

    .e-ddl.e-input-group.e-control-wrapper:has(#universityauto) .e-ddl-icon::before {
        content: "\e754";
        font-family: 'e-icons';
        font-size: 16px;
        opacity: 0.4;
    }
</style>

<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h3>Qualification</h3>
    </div>
    <div class="col-md-12">
        <SfGrid @ref="QualificationGrid" TValue="NonStaffQualification" Query="@mainQuery"
                Toolbar="@(new string[] {"Add"})" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                AllowPaging="true" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" GridLines="GridLine.Both" AllowSelection="true">
            @*<GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>*@
            <SfDataManager AdaptorInstance="@typeof(NonStaffQualificationAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
            <GridEvents 
                        CellSelected="CellSelectHandler"
                        CellSaved="CellSavedHandler"
                        OnBatchAdd="BatchAddHandler"
                        CommandClicked="OnCommandClicked"
                        TValue="NonStaffQualification">
            </GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Batch" ShowConfirmDialog=false NewRowPosition="NewRowPosition.Bottom">

                <HeaderTemplate>
                    @{
                        var text = GetQualificationHeader((context as NonStaffQualification));
                        <div class="headerbandimg" />

                        <span>@text</span>
                    }
                </HeaderTemplate>
                <Template Context="QualificationContext">
                    @{
                        QualificationReviewData = (QualificationContext as NonStaffQualification);
                        if (QualificationReviewData != null)
                        {
                            QualificationReviewData.NonStaffid = NonstaffId;
                            <div style="padding:15px;">
                                <div class="row">
                                    <div class="col-md-12" hidden>
                                        <SfNumericTextBox @bind-Value="@(QualificationReviewData.QualificationId)" Enabled="false" Placeholder="BranchId" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                    </div>
                                    <div class="col-md-6">
                                        @if (UniversityData != null)
                                        {
                                            <p>Institution Name <span style="color:red;">*</span></p>
                                            <SfAutoComplete ID='universityauto' @bind-Value="@QualificationReviewData.InstitutionName" TValue="string" TItem="AUniversities" Placeholder="Start Typing ....." AllowCustom=true ShowPopupButton="true" DataSource="@UniversityData">
                                                <AutoCompleteFieldSettings Value="UniversityName" />
                                            </SfAutoComplete>
                                        }
                                        @*<SfTextBox Multiline="false" @bind-Value="@(QualificationReviewData.InstitutionName)" Enabled="true" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>*@
                                    </div>
                                    <div class="col-md-6">
                                        <p>Level of Education <span style="color:red;">*</span></p>
                                        <SfDropDownList @bind-Value="@(QualificationReviewData.LevelofEducationId)" Enabled="true" TItem="ALevelofEducation" TValue="int?" DataSource="@LevelofEducationData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                            <DropDownListFieldSettings Value="@nameof(ALevelofEducation.LevelofEducationId)" Text="@nameof(ALevelofEducation.LevelofEducationDesc)"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                    <div class="col-md-6">
                                        <p>Field of study <span style="color:red;">*</span></p>
                                        <SfDropDownList @bind-Value="@(QualificationReviewData.FieldOfStudyId)" Enabled="true" TItem="AFieldOfStudy" TValue="int?" DataSource="@FieldOfStudyData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                            <DropDownListFieldSettings Value="@nameof(AFieldOfStudy.FieldOfStudyId)" Text="@nameof(AFieldOfStudy.FieldOfStudyDesc)"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                    <div class="col-md-6">
                                        <p>Other Field of study</p>
                                        <SfTextBox Multiline="false" @bind-Value="@(QualificationReviewData.OtherFieldOfStudy)" Enabled="true" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                    </div>
                                    <div class="col-md-6">
                                        <p>From <span style="color:red;">*</span></p>
                                        <SfDatePicker @bind-Value="@(QualificationReviewData.StartDate)" Placeholder="Select Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                    </div>
                                    <div class="col-md-6">
                                        <p>To</p>
                                        <SfDatePicker @bind-Value="@(QualificationReviewData.EndDate)" Placeholder="Select Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                    </div>
                                    <div class="col-md-6" style="padding-top:35px; padding-bottom:10px;">
                                        <SfCheckBox Label="Is Current" @bind-Checked="@(QualificationReviewData.IsCurrent)"></SfCheckBox>
                                    </div>

                                    @if (!string.IsNullOrEmpty(QualificationReviewData.InstitutionName) && QualificationReviewData.LevelofEducationId != null)
                                    {
                                        <div class="form-group col-md-12">
                                            <p class="alert-info" style="padding:10px;">Ensure that the document does not exceed 5 Mega Bytes (MB) and is of the following formats (Microsoft Word, PDF or an Image (png,gif,jpeg and jpg))</p>
                                            <InputFile class="form-control" OnChange="@SingleUpload" />
                                            <div>
                                                <SfSpinner @ref="UploadAttachmentSpinner" CssClass="SpinnerClass" Visible="false" Size="30" Label="Saving document Please wait......."> </SfSpinner>
                                            </div>
                                        </div>
                                    }

                                    <div class="form-group col-md-12">
                                        @if (!string.IsNullOrEmpty(ImageString))
                                        {
                                            if (!string.IsNullOrEmpty(QualificationReviewData.QualificationDocumentExt) && QualificationReviewData.QualificationDocumentExt.ToLower().Contains("pdf"))
                                            {
                                                <embed src="@ImageString" width="100%" height="600px" style="border: none;" frameborder="0" allowfullscreen="true" />
                                            }
                                            else
                                            {
                                                <img src="@ImageString" class="img-thumbnail" height="500" width="100%" style="margin-bottom:10px; margin:10%; margin-right:auto;" />
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                    }
                </Template>
            </GridEditSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridColumns>
                <GridColumn Type="ColumnType.CheckBox" Width="50" Visible="false"></GridColumn>
                @*<GridColumn HeaderText="Edit"
                            Width="40"
                            TextAlign="TextAlign.Left">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>*@
                <GridColumn Field=@nameof(NonStaffQualification.QualificationId) HeaderText="PatientId" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="60"></GridColumn>
                <GridColumn Field=@nameof(NonStaffQualification.StartDate) Format="dd/MM/yyyy" HeaderText="From" Width="50"></GridColumn>
                <GridColumn Field=@nameof(NonStaffQualification.EndDate) Format="dd/MM/yyyy" HeaderText="To" Width="50"></GridColumn>
                
                <GridForeignColumn Field=@nameof(NonStaffQualification.LevelofEducationId) HeaderText="Level of Education" Width="80" ForeignKeyField="@(nameof(ALevelofEducation.LevelofEducationId))" ForeignKeyValue="@(nameof(ALevelofEducation.LevelofEducationDesc))" ForeignDataSource="@LevelofEducationData"></GridForeignColumn>
                                
                <GridForeignColumn Field=@nameof(NonStaffQualification.DegreeClassId) HeaderText="Degree Class" Width="80" ForeignKeyField="@(nameof(ADegreeClass.DegreeClassId))" ForeignKeyValue="@(nameof(ADegreeClass.DegreeClassDesc))" ForeignDataSource="@DegreeClassData" AllowEditing="degreeclassenabled"></GridForeignColumn>
                
                <GridColumn Field=@nameof(NonStaffQualification.InstitutionName) HeaderText="Institution" Width="100">
                    <EditTemplate>
                        <SfAutoComplete TItem="AUniversities" TValue="string" ID="InstitutionName" @bind-Value="@((context as AUniversities).UniversityName)" DataSource="@UniversityData">
                            <AutoCompleteFieldSettings Value="UniversityName"></AutoCompleteFieldSettings>
                        </SfAutoComplete>
                    </EditTemplate>
                </GridColumn>
               
                <GridColumn Field=@nameof(EmployeeQualification.InstitutionName)
                            HeaderText="Institution"
                            Width="80"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                </GridColumn>

                <GridColumn Field=@nameof(EmployeeQualification.QualificationAttained)
                            HeaderText="Award/Qualification Attained"
                            Width="80"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
                </GridColumn>
                
                <GridColumn HeaderText="Action"
                            TextAlign="TextAlign.Center"
                            Width="80"
                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-delete", CssClass = "e-flat"})" ID="Delete"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
    <div class="col-md-12">
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="alert-danger" style="padding:10px;">@ErrorMessage</p>
        }
    </div>
</div>


@*Confirm Deletion*@

<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationDeleteDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationApproveYes" />
            <DialogButton Content="No" OnClick="@ComfirmationApproveNo" />
        </DialogButtons>
    </SfDialog>
</div>
@*Saving Dialogue*@

@*Saving Dialogue*@
<div class="form-group col-md-12">
    <SfDialog Width="80%" Height="20vh" AllowDragging=true EnableResize=true
              CloseOnEscape=false IsModal=true ShowCloseIcon=false
              Target=".mainbody" @ref=@SavingDialog Visible=false>
        <DialogTemplates>
            <Content>
                <div class="dialogContent">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader-Saving-text"></div>
                    </div>
                    @*<p>Saving Record please wait......</p>*@
                </div>
            </Content>
        </DialogTemplates>
    </SfDialog>
</div>


@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters


    [Parameter]
    public int NonstaffId { get; set; }
    [Parameter]
    public string? AccessToken { get; set; }
    [Parameter]
    public List<AFieldOfStudy> FieldOfStudyData { get; set; }
    [Parameter]
    public List<ALevelofEducation> LevelofEducationData { get; set; }
    [Parameter]
    public List<AUniversities> UniversityData { get; set; }
    [Parameter]
    public List<ADegreeClass>? DegreeClassData { get; set; }
    SfSpinner UploadAttachmentSpinner;
    SfGrid<NonStaffQualification>? QualificationGrid;
    private NonStaffQualification? QualificationReviewData { get; set; }
    Query mainQuery { get; set; } = new();
    string? ErrorMessage { get; set; } = null;
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "95%" };
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    string? ImageString { get; set; }
    long maxFileSize = 5242880/* 1024L * 1024L * 1024L * 2L */;//5 Megabytes
    string fileName = string.Empty;
    SfDialog ConfirmationDeleteDialogue;
    string ConfirmationText { get; set; }
    NonStaffQualification selectedemployee { get; set; }
    SfDialog SavingDialog { get; set; }
    SfDropDownList<int?, ALevelofEducation> Dropdown;
    bool degreeclassenabled = false;
    public int IndexValue { get; set; }
    LoginResultModel? Credentials { get; set; }
    int random = -9999;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            mainQuery = new();
            mainQuery.AddParams("NonstaffId", NonstaffId).AddParams("AccessToken", AccessToken).AddParams("BaseUrl", _ApiConfig.BaseUrl);

            var tasks = new List<Task>();
            tasks.Add(Task.Run(async () =>
           {
               //
               //var response = await Http.GetAsync($"NonStaff/GetNonStaffById/{NonstaffId}");
               //var content = await response.Content.ReadAsStringAsync();
               //if (response.IsSuccessStatusCode)
               //{
               //    inputmodel = JsonSerializer.Deserialize<NonStaff>(content, _options);
               //}
           }));

            Task t = Task.WhenAll(tasks);
            await t;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        await base.OnInitializedAsync();
    }


    public async Task OnCommandClicked(CommandClickEventArgs<NonStaffQualification> args)
    {

        if (args.CommandColumn.ID == "Delete")
        {
            try
            {
                selectedemployee = args.RowData;
                ConfirmationText = "<p>Are you sure you want to delete this record? </p>";
                await this.ConfirmationDeleteDialogue.ShowAsync();
            }
            catch (Exception ex)
            {
                toasterservice.ClearAll();
                toasterservice.ShowError(ex.Message.ToString());
            }
            finally
            {
                StateHasChanged();
            }

        }
    }

    private async void ComfirmationApproveYes()
    {
        try
        {
            await this.ConfirmationDeleteDialogue.HideAsync();

            await SavingDialog.ShowAsync();

            string json = Newtonsoft.Json.JsonConvert.SerializeObject(selectedemployee);
            StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            var result = await Http.PostAsync($"NonStaff/DeleteQualification?qualificationid={selectedemployee.QualificationId}", httpContent);

            if (result.IsSuccessStatusCode)
            {
                try
                {
                    if(QualificationGrid != null)
                    {
                        await QualificationGrid.Refresh();
                    }

                    toasterservice.ClearAll();
                    toasterservice.ShowSuccess("Record Successfully Deleted");
                }
                catch (Exception ex)
                {

                }
                finally
                {
                    await SavingDialog.HideAsync();
                }

            }
            else
            {
                toasterservice.ClearAll();
                toasterservice.ShowError("Record Not Deleted");
            }
        }
        catch (Exception ex)
        {
            toasterservice.ClearAll();
            toasterservice.ShowError(ex.Message.ToString());
        }
        finally
        {
            await SavingDialog.HideAsync();
            StateHasChanged();
        }
    }

    private void ComfirmationApproveNo()
    {
        this.ConfirmationDeleteDialogue.HideAsync();
    }


    public class NonStaffQualificationAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        ApiConfig _ApiConfig;
        public IToastService toasterservice;
        IAuthenticationService _AuthService;

        //private UserManagement _userManagement;
        public NonStaffQualificationAdapter(HttpClient _http, IToastService ts/*, UserManagement userManagement*/
        ,ApiConfig apiConfig, IAuthenticationService authservice)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _ApiConfig = apiConfig;
            //_userManagement = userManagement;
            toasterservice = ts;
            _AuthService = authservice;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<NonStaffQualification>();
            try
            {
                int? NonstaffId = null;
                string? AccessToken = null;
                string? BaseUrl = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "NonstaffId").Value != null)
                    {
                        NonstaffId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "NonstaffId").Value.ToString());
                    }
                    if (val.FirstOrDefault(o => o.Key == "AccessToken").Value != null)
                    {
                        AccessToken = val.FirstOrDefault(o => o.Key == "AccessToken").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "BaseUrl").Value != null)
                    {
                        BaseUrl = val.FirstOrDefault(o => o.Key == "BaseUrl").Value.ToString();
                    }
                }


                var response = await Http.GetAsync($"NonStaff/GetQualificationForNonStaff/{NonstaffId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<NonStaffQualification>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toasterservice.ClearAll();
                toasterservice.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<NonStaffQualification>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {

                var val = (value as NonStaffQualification);
                if (val != null)
                {
                    if (val.QualificationId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"NonStaff/PostQualification", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toasterservice.ClearAll();
                                    toasterservice.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toasterservice.ClearAll();
                                    toasterservice.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toasterservice.ClearAll();
                            toasterservice.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"NonStaff/UpdateQualificationForNonStaff", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toasterservice.ClearAll();
                                    toasterservice.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toasterservice.ClearAll();
                                    toasterservice.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toasterservice.ClearAll();
                            toasterservice.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toasterservice.ClearAll();
                toasterservice.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            //try
            //{
            //    int data = (int)value;
            //    using (var dbContext = new MUCOBADIContext())
            //    {
            //        var exists = dbContext.AAdministrationPhase.FirstOrDefault(o => o.AdministrationPhaseId == data);
            //        if (exists != null)
            //        {
            //            dbContext.AAdministrationPhase.Remove(exists);
            //        }
            //        await dbContext.SaveChangesAsync();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    toasterservice.ShowError(ex.Message.ToString());
            //}


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {

                var val = (value as NonStaffQualification);
                if (val != null)
                {
                    if (val.QualificationId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"NonStaff/PostQualification", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toasterservice.ClearAll();
                                    toasterservice.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toasterservice.ClearAll();
                                    toasterservice.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toasterservice.ClearAll();
                            toasterservice.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"NonStaff/UpdateQualificationForNonStaff", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toasterservice.ClearAll();
                                    toasterservice.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toasterservice.ClearAll();
                                    toasterservice.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toasterservice.ClearAll();
                            toasterservice.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toasterservice.ClearAll();
                toasterservice.ShowError(ex.Message.ToString());
            }

            return value;
        }

        public override async Task<object> BatchUpdateAsync(DataManager dataManager, object changedRecords, object addedRecords, object deletedRecords, string primaryColumnName, string key, int? dropIndex)
        {
            int? NonstaffId = null;

            var credentials = await _AuthService.GetUserCredentials();
            if (credentials != null)
            {
                NonstaffId = credentials.StaffId;
            }

            object ReturnValue = changedRecords;
            if (changedRecords != null)
            {
                ReturnValue = changedRecords;

                var val = (changedRecords as List<NonStaffQualification>);
                if (val != null && val.Count > 0)
                {
                    foreach (var item in val)
                    {
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(item);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                        var result = await Http.PutAsync($"NonStaff/UpdateQualificationForNonStaff", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            toasterservice.ClearAll();
                            toasterservice.ShowSuccess("Record was sucessfully updated");
                        }
                        else
                        {
                            toasterservice.ClearAll();
                            toasterservice.ShowError("Ooops. Something went wrong");
                        }
                    }
                }
            }

            if (addedRecords != null)
            {
                ReturnValue = addedRecords;

                var val = (addedRecords as List<NonStaffQualification>);
                if (val != null && val.Count > 0)
                {
                    foreach (var item in val)
                    {
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(item);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                        var result = await Http.PostAsync($"NonStaff/PostQualification?NonstaffId={NonstaffId}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            toasterservice.ClearAll();
                            toasterservice.ShowSuccess("Record was sucessfully added");
                        }
                        else
                        {
                            toasterservice.ClearAll();
                            toasterservice.ShowError("Ooops. Something went wrong");
                        }
                    }
                }
            }

            return ReturnValue;
        }

    }

    public async Task CellEditHandler(CellEditArgs<NonStaffQualification> args)
    {
        IndexValue = await QualificationGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.QualificationId);
    }

    private async Task CellSavedHandler(CellSaveArgs<NonStaffQualification> args)
    {
        try
        {
            var index = await QualificationGrid.GetRowIndexByPrimaryKeyAsync(args.RowData.QualificationId);

            if (args.Value != null && (args.ColumnName == nameof(NonStaffQualification.LevelofEducationId)))
            {
                //Enable Degree Class Column for Bachelors only
                if (args.Data.LevelofEducationId == 6)
                {
                    this.degreeclassenabled = true;
                }
                else
                {
                    this.degreeclassenabled = false;
                    await QualificationGrid.UpdateCellAsync(index, nameof(NonStaffQualification.DegreeClassId), Convert.ToDouble(6));
                }                
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            toasterservice.ClearAll();
            toasterservice.ShowError(ex.Message);
        }
        finally
        {
            await QualificationGrid.EndEditAsync();
        }
    }

    public void BatchAddHandler(BeforeBatchAddArgs<NonStaffQualification> Args)
    {
        Args.DefaultData.QualificationId = random;
        random++;
    }

    //Enable cell edit on single click
    public async Task CellSelectHandler(CellSelectEventArgs<NonStaffQualification> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await QualificationGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await QualificationGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await QualificationGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }


    public async void OnQualificationActionBegin(ActionEventArgs<NonStaffQualification> Args)
    {
        try
        {
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {

            }

            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {

            }
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (String.IsNullOrEmpty(Args.Data.InstitutionName))
                {
                    toasterservice.ShowWarning("Please enter the institution name.");
                    Args.Cancel = true;
                }
                else if (Args.Data.LevelofEducationId == null)
                {
                    toasterservice.ShowWarning("Please select the level of education");
                    Args.Cancel = true;
                }
                else if (Args.Data.FieldOfStudyId == null)
                {
                    toasterservice.ShowWarning("Please select the field of study");
                    Args.Cancel = true;
                }
                else if (Args.Data.StartDate == null)
                {
                    toasterservice.ShowWarning("Please enter the start date");
                    Args.Cancel = true;
                }
                else if (Args.Data.StartDate > Args.Data.EndDate)
                {
                    toasterservice.ShowWarning("Your end date cannot be before the start date");
                    Args.Cancel = true;
                }
                else if (Args.Data.IsCurrent == false && Args.Data.EndDate == null)
                {
                    toasterservice.ShowWarning("Please enter the end date");
                    Args.Cancel = true;
                }
            }

        }
        catch (Exception ex)
        {

        }
        finally
        {

        }

    }

    public async Task OnQualificationActionComplete(ActionEventArgs<NonStaffQualification> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            QualificationGrid.PreventRender(false);
            if (!string.IsNullOrEmpty(args.RowData.QualificationDocumentName) && !string.IsNullOrEmpty(args.RowData.QualificationDocumentExt))
            {
                ImageString = await GetImageString(args.RowData.QualificationDocumentName, args.RowData.QualificationDocumentExt, "EmployeeQualification");
            }

        }
    }

    public string GetQualificationHeader(NonStaffQualification Value)
    {
        if (Value.QualificationId == 0)
        {
            return "Add a New Qualification";
        }
        else
        {
            return "Edit Details for " + Value.InstitutionName;
        }
    }

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        try
        {
            //IsSaveDisabled = true;
            await UploadAttachmentSpinner.ShowAsync();
            MemoryStream ms = new MemoryStream();
            await e.File.OpenReadStream(maxFileSize).CopyToAsync(ms);

            ms.Position = 0;
            System.IO.FileInfo info = new System.IO.FileInfo(e.File.Name);
            if (info.Extension.ToLower().Contains("png") || info.Extension.ToLower().Contains("gif") || info.Extension.ToLower().Contains("jpeg") || info.Extension.ToLower().Contains("jpg"))
            {
                var passextension = info.Extension.Split("/");
                var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);
                fileName = "EmployeeQualification_" + a.FieldOfStudyDesc + "_" + QualificationReviewData.InstitutionName + "." + passextension[1].Trim();

                byte[] bytes = ms.ToArray();
                //byte[] bytes = file.Stream.ToArray();
                string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);
                DocumentBytes m = new DocumentBytes()
                    {
                        DocumentName = fileName,
                        DocumentExt = info.Extension.Trim(),
                        DocumentByte = bytes,
                        DocumentFolder = "EmployeeQualification"
                    };

                await _DocumentUploadModel.UploadDocument(m);
                var result = "data:application/pdf;base64," + base64;
                QualificationReviewData.QualificationDocumentName = fileName;
                QualificationReviewData.QualificationDocumentExt = info.Extension.Trim();
                ImageString = result;
                bytes = null;

            }

            else if (info.Extension.ToLower().Contains("pdf") || info.Extension.ToLower().Contains("doc"))
            {
                string fileName = string.Empty;
                if (info.Extension.ToLower().Contains("doc"))
                {
                    ms.Position = 0;

                    var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);
                    fileName = a.FieldOfStudyDesc + "_" + QualificationReviewData.InstitutionName + "_" + NonstaffId + ".pdf";

                    //Create a new document
                    Syncfusion.DocIO.DLS.WordDocument document;
                    if (info.Extension.Contains("doc") && !info.Extension.Contains("docx"))
                    {
                        document = new Syncfusion.DocIO.DLS.WordDocument(ms, Syncfusion.DocIO.FormatType.Doc);
                    }
                    else
                    {
                        document = new Syncfusion.DocIO.DLS.WordDocument(ms, Syncfusion.DocIO.FormatType.Docx);
                    }
                    //Creates an instance of the DocToPDFConverter
                    DocIORenderer render = new DocIORenderer();//Converts Word document into PDF document
                    PdfDocument pdfDocument = render.ConvertToPDF(document);

                    MemoryStream _ms = new MemoryStream();
                    pdfDocument.Save(_ms);
                    _ms.Position = 0;


                    DocumentBytes m = new DocumentBytes();
                    m.DocumentName = fileName;
                    m.DocumentFolder = "EmployeeQualification";
                    m.DocumentByte = _ms.ToArray();
                    m.DocumentExt = "pdf";

                    await _DocumentUploadModel.UploadDocument(m);
                    _ms.Position = 0;
                    byte[] _bytes = _ms.ToArray();
                    string base64 = Convert.ToBase64String(_bytes, 0, _bytes.Length);

                    var result = "data:application/pdf;base64," + base64;
                    QualificationReviewData.QualificationDocumentName = fileName;
                    QualificationReviewData.QualificationDocumentExt = "pdf";
                    ImageString = result;
                }

                else
                {
                    var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);
                    fileName = a.FieldOfStudyDesc + "_" + QualificationReviewData.InstitutionName + "_" + NonstaffId + ".pdf";

                    ms.Position = 0;
                    byte[] bytes = ms.ToArray();
                    string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                    DocumentBytes m = new DocumentBytes()
                        {
                            DocumentName = fileName,
                            DocumentExt = info.Extension.Trim(),
                            DocumentByte = bytes,
                            DocumentFolder = "EmployeeQualification"
                        };

                    await _DocumentUploadModel.UploadDocument(m);
                    var result = "data:application/pdf;base64," + base64;
                    QualificationReviewData.QualificationDocumentName = fileName;
                    QualificationReviewData.QualificationDocumentExt = info.Extension.Trim();
                    ImageString = result;
                    bytes = null;
                }

            }
            else
            {
                toasterservice.ShowWarning("Please ensure that the uploaded document is an image(png/Jpeg/gif/jpg) or pdf or word document (doc,docx).");
            }
        }
        catch (Exception ex)

        {
            throw ex;
        }

        finally
        {
            ///IsSaveDisabled = false;
            await UploadAttachmentSpinner.HideAsync();
            StateHasChanged();
        }

    }

    private async Task<string> GetImageString(string imageUrl, string ext, string DocumentFolder)
    {
        string result = null;
        try
        {
            if (!string.IsNullOrEmpty(imageUrl))
            {
                var a = await _DocumentUploadModel.GetDocument(imageUrl, DocumentFolder);

                if (a != null)
                {
                    if (a.DocumentExt.Contains("pdf"))
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        result = "data:application/pdf;base64," + base64String;
                    }
                    else
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        result = "data:image/" + a.DocumentExt + ";base64," + base64String;
                    }

                }
            }
        }
        catch (Exception ex)
        {
            toasterservice.ShowError(ex.Message.ToString());
        }
        return result;
    }
}
