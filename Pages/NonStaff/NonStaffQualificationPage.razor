@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using HCMIS.SHARED.DTO
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Collections;
@inject HttpClient Http
@inject AppState AppState
@inject ApiConfig _ApiConfig;
@inject NavigationManager Navigation
@inject DocumentUploadModel _DocumentUploadModel;
@inject IToastService toasterservice;

<style>
     /*Manage Records Button*/
    .e-grid .e-icons:not(.e-btn-icon) 
    {
        color: #00cc00;
        color: floralwhite;
        font-size: smaller;
        font-weight: bolder;
    }

     /*Auto complete search icon*/
    /* .e-ddl.e-input-group.e-control-wrapper .e-ddl-icon::before {
        content: '\e275';
        font-family: 'e-icons';
        font-size: 16px;
        opacity: 0.4;
    } */
</style>

<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h3>Qualification</h3>
    </div>
     <div class="col-md-12">
         <SfGrid @ref="QualificationGrid" TValue="NonStaffQualification" Query="@mainQuery"
                                    Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                                    AllowPaging="true" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" GridLines="GridLine.Both" AllowSelection="true">
                                @*<GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>*@
                                <SfDataManager AdaptorInstance="@typeof(NonStaffQualificationAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                <GridSearchSettings IgnoreCase="true"></GridSearchSettings>                              
                                <GridEvents OnActionBegin="OnQualificationActionBegin" OnActionComplete="@OnQualificationActionComplete" TValue="NonStaffQualification"></GridEvents>
                                <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">

                                    <HeaderTemplate>
                                        @{
                                            var text = GetQualificationHeader((context as NonStaffQualification));
                                                    <div class="headerbandimg" /><span>@text</span>
                                        }
                                    </HeaderTemplate>
                                    <Template Context="QualificationContext">
                                        @{
                                            QualificationReviewData = (QualificationContext as NonStaffQualification);
                                            if(QualificationReviewData != null)
                                            {
                                                 QualificationReviewData.NonStaffid = NonstaffId;
                                                        <div style="padding:15px;">
                                                            <div class="row">
                                                                <div class="col-md-12" hidden>
                                                                    <SfNumericTextBox @bind-Value="@(QualificationReviewData.QualificationId)" Enabled="false" Placeholder="BranchId" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                                                </div>
                                                                <div class="col-md-6">
                                                                @if(UniversityData != null)
                                                                {
                                                                    <p>Institution Name <span style="color:red;">*</span></p>
                                                                    <SfAutoComplete @bind-Value="@QualificationReviewData.InstitutionName" TValue="string" TItem="AUniversities" Placeholder="Start Typing ....." AllowCustom=true DataSource="@UniversityData">
                                                                        <AutoCompleteFieldSettings Value="UniversityName" />
                                                                    </SfAutoComplete>
                                                                }
                                                                    @*<SfTextBox Multiline="false" @bind-Value="@(QualificationReviewData.InstitutionName)" Enabled="true" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>*@
                                                                </div>
                                                               <div class="col-md-6">
                                                                    <p>Level of Education <span style="color:red;">*</span></p>
                                                                    <SfDropDownList @bind-Value="@(QualificationReviewData.LevelofEducationId)" Enabled="true" TItem="ALevelofEducation" TValue="int?" DataSource="@LevelofEducationData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                        <DropDownListFieldSettings Value="@nameof(ALevelofEducation.LevelofEducationId)" Text="@nameof(ALevelofEducation.LevelofEducationDesc)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                <div class="col-md-6">
                                                                     <p>Field of study <span style="color:red;">*</span></p>
                                                                    <SfDropDownList @bind-Value="@(QualificationReviewData.FieldOfStudyId)" Enabled="true" TItem="AFieldOfStudy" TValue="int?" DataSource="@FieldOfStudyData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                        <DropDownListFieldSettings Value="@nameof(AFieldOfStudy.FieldOfStudyId)" Text="@nameof(AFieldOfStudy.FieldOfStudyDesc)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                <div class="col-md-6">
                                                                     <p>Other Field of study</p>
                                                                    <SfTextBox Multiline="false" @bind-Value="@(QualificationReviewData.OtherFieldOfStudy)" Enabled="true" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                </div>
                                                                <div class="col-md-6">
                                                                     <p>From <span style="color:red;">*</span></p>
                                                                    <SfDatePicker @bind-Value="@(QualificationReviewData.StartDate)" Placeholder="Select Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                                </div>
                                                                <div class="col-md-6">
                                                                     <p>To</p>
                                                                    <SfDatePicker @bind-Value="@(QualificationReviewData.EndDate)" Placeholder="Select Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                                </div>
                                                                <div class="col-md-6" style="padding-top:35px; padding-bottom:10px;">   
                                                                    <SfCheckBox Label="Is Current" @bind-Checked="@(QualificationReviewData.IsCurrent)"></SfCheckBox>
                                                                </div> 
                                                                
                                                                @if(!string.IsNullOrEmpty(QualificationReviewData.InstitutionName) && QualificationReviewData.LevelofEducationId != null)
                                                                {
                                                                    <div class="form-group col-md-12">
                                                                        <p class="alert-info" style="padding:10px;">Ensure that the document does not exceed 5 Mega Bytes (MB) and is of the following formats (Microsoft Word, PDF or an Image (png,gif,jpeg and jpg))</p>
                                                                        <InputFile class="form-control" OnChange="@SingleUpload" />
                                                                        <div>
                                                                            <SfSpinner @ref="UploadAttachmentSpinner" CssClass="SpinnerClass" Visible="false" Size="30" Label="Saving document Please wait......."> </SfSpinner>
                                                                        </div>
                                                                    </div>
                                                                }
                                                               
                                                                <div class="form-group col-md-12">
                                                                @if (!string.IsNullOrEmpty(ImageString))
                                                                {
                                                                    if (!string.IsNullOrEmpty(QualificationReviewData.QualificationDocumentExt) && QualificationReviewData.QualificationDocumentExt.ToLower().Contains("pdf"))
                                                                    {
                                                                            <embed src="@ImageString" width="100%" height="600px" style="border: none;" frameborder="0" allowfullscreen="true" />
                                                                    }
                                                                    else
                                                                    {
                                                                            <img src="@ImageString" class="img-thumbnail" height="500" width="100%" style="margin-bottom:10px; margin:10%; margin-right:auto;" />
                                                                    }
                                                                }
                                                                </div>
                                                            </div>
                                                        </div>
                                            }
                                           
                                        }
                                    </Template>
                                </GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                <GridPageSettings PageSize="20"></GridPageSettings>
                                <GridColumns>
                                    <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                                    <GridColumn HeaderText="Edit"
                                                Width="40"
                                                TextAlign="TextAlign.Left">
                                        <GridCommandColumns>
                                            <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                                        </GridCommandColumns>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(NonStaffQualification.QualificationId) HeaderText="PatientId" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="60"></GridColumn>
                                    <GridForeignColumn Field=@nameof(NonStaffQualification.LevelofEducationId) HeaderText="Level of Education" Width="80" ForeignKeyField="@(nameof(ALevelofEducation.LevelofEducationId))" ForeignKeyValue="@(nameof(ALevelofEducation.LevelofEducationDesc))" ForeignDataSource="@LevelofEducationData"></GridForeignColumn>
                                    <GridForeignColumn Field=@nameof(NonStaffQualification.FieldOfStudyId) HeaderText="field of study" Width="60" ForeignKeyField="@(nameof(AFieldOfStudy.FieldOfStudyId))" ForeignKeyValue="@(nameof(AFieldOfStudy.FieldOfStudyDesc))" ForeignDataSource="@FieldOfStudyData"></GridForeignColumn>
                                    <GridColumn Field=@nameof(NonStaffQualification.OtherFieldOfStudy) HeaderText="Other field of study" Width="60"></GridColumn>
                                    <GridColumn Field=@nameof(NonStaffQualification.InstitutionName) HeaderText="Institution" Width="60"></GridColumn>
                                    <GridColumn Field=@nameof(NonStaffQualification.StartDate) Format="dd/MM/yyyy" HeaderText="From" Width="50"></GridColumn>
                                    <GridColumn Field=@nameof(NonStaffQualification.EndDate) Format="dd/MM/yyyy" HeaderText="To" Width="50"></GridColumn>
                                    <GridColumn Field=@nameof(NonStaffQualification.IsCurrent) HeaderText="To Current" Width="50"></GridColumn>
                                </GridColumns>
                            </SfGrid>
    </div>
     <div class="col-md-12">
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="alert-danger" style="padding:10px;">@ErrorMessage</p>
        }
    </div>
</div>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters


    [Parameter]
    public int NonstaffId { get; set; }
    [Parameter]
    public string? AccessToken { get; set; }
    [Parameter]
    public List<AFieldOfStudy> FieldOfStudyData{ get; set; }
    [Parameter]
    public List<ALevelofEducation> LevelofEducationData{ get; set; }
    [Parameter]
    public List<AUniversities> UniversityData { get; set; }

    SfSpinner UploadAttachmentSpinner;
    SfGrid<NonStaffQualification>? QualificationGrid;
    private NonStaffQualification? QualificationReviewData{ get; set; }
    Query mainQuery { get; set; } = new();
    string? ErrorMessage { get; set; } = null;
    private DialogSettings DialogParams = new DialogSettings { Height="auto",MinHeight="85vh",Width="95%" };
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    string? ImageString { get; set; }
    long maxFileSize = 5242880/* 1024L * 1024L * 1024L * 2L */;//5 Megabytes
    string fileName = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            mainQuery = new();
            mainQuery.AddParams("NonstaffId", NonstaffId).AddParams("AccessToken", AccessToken).AddParams("BaseUrl",_ApiConfig.BaseUrl);

            var tasks = new List<Task>();
            tasks.Add(Task.Run(async () =>
           {
               // 
               //var response = await Http.GetAsync($"NonStaff/GetNonStaffById/{NonstaffId}");
               //var content = await response.Content.ReadAsStringAsync();
               //if (response.IsSuccessStatusCode)
               //{
               //    inputmodel = JsonSerializer.Deserialize<NonStaff>(content, _options);
               //}
           }));

            Task t = Task.WhenAll(tasks);
            await t;
        }
        catch(Exception ex)
        {
            ErrorMessage=$"Error: {ex.Message}";
        }
        await base.OnInitializedAsync();
    }

    public class NonStaffQualificationAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public IToastService toasterservice;
        //private UserManagement _userManagement;
        public NonStaffQualificationAdapter(HttpClient _http, IToastService ts/*, UserManagement userManagement*/
        ,SystemSettings systemSettings,ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _SystemSettings = systemSettings;
            _ApiConfig = apiConfig;
            //_userManagement = userManagement;
            toasterservice = ts;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<NonStaffQualification>();
            try
            {
                int? NonstaffId = null;
                string? AccessToken = null;
                string? BaseUrl = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "NonstaffId").Value != null)
                    {
                        NonstaffId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "NonstaffId").Value.ToString());
                    }
                    if (val.FirstOrDefault(o => o.Key == "AccessToken").Value != null)
                    {
                        AccessToken = val.FirstOrDefault(o => o.Key == "AccessToken").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "BaseUrl").Value != null)
                    {
                        BaseUrl = val.FirstOrDefault(o => o.Key == "BaseUrl").Value.ToString();
                    }
                }


                var response = await Http.GetAsync($"NonStaff/GetQualificationForNonStaff/{NonstaffId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<NonStaffQualification>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toasterservice.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<NonStaffQualification>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {

                var val = (value as NonStaffQualification);
                if(val != null)
                {
                    if (val.QualificationId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"NonStaff/PostQualification", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toasterservice.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toasterservice.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toasterservice.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"NonStaff/UpdateQualificationForNonStaff", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toasterservice.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toasterservice.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toasterservice.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toasterservice.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            //try
            //{
            //    int data = (int)value;
            //    using (var dbContext = new MUCOBADIContext())
            //    {
            //        var exists = dbContext.AAdministrationPhase.FirstOrDefault(o => o.AdministrationPhaseId == data);
            //        if (exists != null)
            //        {
            //            dbContext.AAdministrationPhase.Remove(exists);
            //        }
            //        await dbContext.SaveChangesAsync();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    toasterservice.ShowError(ex.Message.ToString());
            //}


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {

                var val = (value as NonStaffQualification);
                if(val != null)
                {
                    if (val.QualificationId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"NonStaff/PostQualification", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toasterservice.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toasterservice.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toasterservice.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"NonStaff/UpdateQualificationForNonStaff", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toasterservice.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toasterservice.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toasterservice.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toasterservice.ShowError(ex.Message.ToString());
            }

            return value;
        }
        public override async Task<object> BatchUpdateAsync(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            object? products = null;
            try
            {

                if (Changed != null)
                {
                    products = Changed;
                    foreach (var val in (List<NonStaffQualification>)Changed)
                    {
                        if(val != null)
                        {
                            if (val.QualificationId == 0)
                            {

                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"NonStaff/PostQualification", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<Response>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toasterservice.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toasterservice.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toasterservice.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {

                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"NonStaff/UpdateQualificationForNonStaff", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<Response>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toasterservice.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toasterservice.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toasterservice.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Added != null)
                {
                    products = Added;
                    foreach (var val in (List<NonStaffQualification>)Added)
                    {
                        if(val != null)
                        {
                            if (val.QualificationId == 0)
                            {

                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"NonStaff/PostQualification", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<Response>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toasterservice.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toasterservice.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toasterservice.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {

                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"NonStaff/UpdateQualificationForNonStaff", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<Response>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toasterservice.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toasterservice.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toasterservice.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Deleted != null)
                {
                    products = Deleted;
                    //foreach (var rec in (List<OrderDetails>)Deleted)
                    //{
                    //    Orders.Remove(Orders.Where(or => or.OrderID == rec.OrderID).FirstOrDefault());
                    //}

                }
            }
            catch (Exception ex)
            {
                toasterservice.ShowError(ex.Message.ToString());
            }
            return products;
        }
    }
    
    public async void OnQualificationActionBegin(ActionEventArgs<NonStaffQualification> Args)
    {
        try
        {
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                
            }

            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
               
            }
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (String.IsNullOrEmpty(Args.Data.InstitutionName))
                {
                    toasterservice.ShowWarning("Please enter the institution name.");
                    Args.Cancel = true;
                }
                else if (Args.Data.LevelofEducationId == null)
                {
                    toasterservice.ShowWarning("Please select the level of education");
                    Args.Cancel = true;
                }
                else if (Args.Data.FieldOfStudyId == null)
                {
                    toasterservice.ShowWarning("Please select the field of study");
                    Args.Cancel = true;
                }
                else if (Args.Data.StartDate == null)
                {
                    toasterservice.ShowWarning("Please enter the start date");
                    Args.Cancel = true;
                }
                else if (Args.Data.StartDate > Args.Data.EndDate)
                {
                    toasterservice.ShowWarning("Your end date cannot be before the start date");
                    Args.Cancel = true;
                }
                else if (Args.Data.IsCurrent == false && Args.Data.EndDate == null)
                {
                    toasterservice.ShowWarning("Please enter the end date");
                    Args.Cancel = true;
                }
            }

        }
        catch (Exception ex)
        {

        }
        finally
        {

        }

    }

    public async Task OnQualificationActionComplete(ActionEventArgs<NonStaffQualification> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            QualificationGrid.PreventRender(false);
            if(!string.IsNullOrEmpty(args.RowData.QualificationDocumentName) && !string.IsNullOrEmpty(args.RowData.QualificationDocumentExt))
            {
                ImageString = await GetImageString(args.RowData.QualificationDocumentName, args.RowData.QualificationDocumentExt,"EmployeeQualification");
            }

        }
    }
    
    public string GetQualificationHeader(NonStaffQualification Value)
    {
        if (Value.QualificationId == 0)
        {
            return "Add a New Qualification";
        }
        else
        {
            return "Edit Details for " + Value.InstitutionName;
        }
    }

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        try
        {
            //IsSaveDisabled = true;
            await UploadAttachmentSpinner.ShowAsync();
            MemoryStream ms = new MemoryStream();
            await e.File.OpenReadStream(maxFileSize).CopyToAsync(ms);

            ms.Position = 0;
            System.IO.FileInfo info = new System.IO.FileInfo(e.File.Name);
            if (info.Extension.ToLower().Contains("png") || info.Extension.ToLower().Contains("gif") || info.Extension.ToLower().Contains("jpeg") || info.Extension.ToLower().Contains("jpg"))
            {
                var passextension = info.Extension.Split("/");
                var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);
                fileName = "EmployeeQualification_" + a.FieldOfStudyDesc + "_" + QualificationReviewData.InstitutionName + "." + passextension[1].Trim();
                
                byte[] bytes = ms.ToArray();
                //byte[] bytes = file.Stream.ToArray();
                string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);
                DocumentBytes m = new DocumentBytes()
                    {
                        DocumentName = fileName,
                        DocumentExt = info.Extension.Trim(),
                        DocumentByte = bytes,
                        DocumentFolder = "EmployeeQualification"
                    };

                await _DocumentUploadModel.UploadDocument(m);
                var result = "data:application/pdf;base64," + base64;
                QualificationReviewData.QualificationDocumentName = fileName;
                QualificationReviewData.QualificationDocumentExt = info.Extension.Trim();
                ImageString = result;
                bytes = null;

            }

            else if (info.Extension.ToLower().Contains("pdf") || info.Extension.ToLower().Contains("doc"))
            {
                string fileName = string.Empty;
                if (info.Extension.ToLower().Contains("doc"))
                {
                    ms.Position = 0;

                    var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);
                    fileName = a.FieldOfStudyDesc + "_" + QualificationReviewData.InstitutionName + "_" + NonstaffId + ".pdf";

                    //Create a new document
                    Syncfusion.DocIO.DLS.WordDocument document;
                    if (info.Extension.Contains("doc") && !info.Extension.Contains("docx"))
                    {
                        document = new Syncfusion.DocIO.DLS.WordDocument(ms, Syncfusion.DocIO.FormatType.Doc);
                    }
                    else
                    {
                        document = new Syncfusion.DocIO.DLS.WordDocument(ms, Syncfusion.DocIO.FormatType.Docx);
                    }
                    //Creates an instance of the DocToPDFConverter
                    DocIORenderer render = new DocIORenderer();//Converts Word document into PDF document
                    PdfDocument pdfDocument = render.ConvertToPDF(document);

                    MemoryStream _ms = new MemoryStream();
                    pdfDocument.Save(_ms);
                    _ms.Position = 0;


                    DocumentBytes m = new DocumentBytes();
                    m.DocumentName = fileName;
                    m.DocumentFolder = "EmployeeQualification";
                    m.DocumentByte = _ms.ToArray();
                    m.DocumentExt = "pdf";

                    await _DocumentUploadModel.UploadDocument(m);
                    _ms.Position = 0;
                    byte[] _bytes = _ms.ToArray();
                    string base64 = Convert.ToBase64String(_bytes, 0, _bytes.Length);

                    var result = "data:application/pdf;base64," + base64;
                    QualificationReviewData.QualificationDocumentName = fileName;
                    QualificationReviewData.QualificationDocumentExt = "pdf";
                    ImageString = result;
                }

                else
                {
                    var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);
                    fileName = a.FieldOfStudyDesc +"_"+QualificationReviewData.InstitutionName + "_" + NonstaffId + ".pdf";

                    ms.Position = 0;
                    byte[] bytes = ms.ToArray();
                    string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                    DocumentBytes m = new DocumentBytes()
                        {
                            DocumentName = fileName,
                            DocumentExt = info.Extension.Trim(),
                            DocumentByte = bytes,
                            DocumentFolder = "EmployeeQualification"
                        };

                    await _DocumentUploadModel.UploadDocument(m);
                    var result = "data:application/pdf;base64," + base64;
                    QualificationReviewData.QualificationDocumentName = fileName;
                    QualificationReviewData.QualificationDocumentExt = info.Extension.Trim();
                    ImageString = result;
                    bytes = null;
                }

            }
            else
            {
                toasterservice.ShowWarning("Please ensure that the uploaded document is an image(png/Jpeg/gif/jpg) or pdf or word document (doc,docx).");
            }
        }
        catch (Exception ex)

        {
            throw ex;
        }

        finally
        {
            ///IsSaveDisabled = false;
            await UploadAttachmentSpinner.HideAsync();
            StateHasChanged();
        }

    }

    private async Task<string> GetImageString(string imageUrl, string ext, string DocumentFolder)
    {
        string result = null;
        try
        {
            if (!string.IsNullOrEmpty(imageUrl))
            {
                var a = await _DocumentUploadModel.GetDocument(imageUrl, DocumentFolder);

                if (a != null)
                {
                    if (a.DocumentExt.Contains("pdf"))
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        result = "data:application/pdf;base64," + base64String;
                    }
                    else
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        result = "data:image/" + a.DocumentExt + ";base64," + base64String;
                    }

                }
            }
        }
        catch (Exception ex)
        {
            toasterservice.ShowError(ex.Message.ToString());
        }
        return result;
    }
}
