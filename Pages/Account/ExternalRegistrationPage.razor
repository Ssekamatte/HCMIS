@page "/ExternalRegistrationPage"
@using HCMIS.Model
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Text.RegularExpressions
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IToastService toastService;


@*<h3>ExternalRegistrationPage</h3>*@
<style>
    /* .e-spinner-pane .e-spinner-inner .e-spin-bootstrap {
        fill: blue;
        stroke: blue;
    } */

    /*Spinner Label Color*/
    .e-spinner-pane .e-spinner-inner .e-spin-label {
        color: red;
    }

    h3{
        color:ghostwhite;
        background-color: #00cc00;
        padding:10px;
        width:100%;
        font-size: large;
    }

    /*Placeholder Padding*/
    .e-input-group input.e-input, .e-input-group.e-control-wrapper input.e-input, .e-input-group textarea.e-input, .e-input-group.e-control-wrapper textarea.e-input {
        border-color: #605e5c;
        padding-left: 0px;
    }
</style>

<MudOverlay @bind-Visible="@loadingspinner" DarkBackground="true" AutoClose="false" Absolute="true">
<SfSpinner @bind-Visible="loadingspinner" Type="@Syncfusion.Blazor.Spinner.SpinnerType.Bootstrap" Size="70" Label="Page loading">
</SfSpinner>
</MudOverlay>

<article class="content px-4">
    <BreadCrumbPage Module="ACCOUNT" Submodule="ACCOUNT REGISTRATION" />


    <EditForm Model="@inputmodel" OnValidSubmit="@Register" class="row" style="width:95vw; margin-bottom:20px;">
        
                    <div class="col-md-12">
                       <h3>Personal Information</h3>
                   </div>
                   <div class="col-md-4">
                       <p>First Name <span style="color:red;">*</span></p>
                       <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@inputmodel.NewNonStaff.FirstName" CssClass="form-control" Placeholder="Please enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                       <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.FirstName)" /></p>
                   </div>
                    <div class="col-md-4">
                        <p>Middle Name</p>
                       <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@inputmodel.NewNonStaff.MiddleName" CssClass="form-control" Placeholder="Please enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                       <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.MiddleName)" /></p>
                   </div>
                    <div class="col-md-4">
                        <p>Last Name <span style="color:red;">*</span></p>
                       <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@inputmodel.NewNonStaff.LastName" CssClass="form-control" Placeholder="Please enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                       <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.LastName)" /></p>
                   </div>
                   <div class="col-md-4">
                       <p>Gender <span style="color:red;">*</span></p>
                        <SfDropDownList @bind-Value="@(inputmodel.NewNonStaff.GenderId)" Enabled="true" TItem="AGender" TValue="int?" DataSource="@GenderData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                            <DropDownListFieldSettings Value="@nameof(AGender.GenderId)" Text="@nameof(AGender.GenderDesc)"></DropDownListFieldSettings>
                        </SfDropDownList>
                        <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.GenderId)" /></p>                        
                   </div>
                   <div class="col-md-4">
                       <p>Date of Birth <span style="color:red;">*</span></p>
                        <SfDatePicker @bind-Value="@(inputmodel.NewNonStaff.DoB)" Placeholder="Select Date" Format="dd-MMM-yy" FloatLabelType="FloatLabelType.Never"  AllowEdit="false" ShowClearButton="true">
                            <DatePickerEvents TValue="DateTime?" ValueChange="OnDOBChange"></DatePickerEvents>
                        </SfDatePicker>
                        <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.DoB)" /></p>
                        @if (isdobvalid == false)
                        {
                            <p style="color:red;font-size: .75rem;text-align: start;font-weight: 400;line-height: 1.66;letter-spacing: .03333em;">Date of birth is invalid. 18 Years and above is required</p>
                        }
                   </div>
                    <div class="col-md-4">
                        <p>Nationality <span style="color:red;">*</span></p>
                        <SfDropDownList @bind-Value="@(inputmodel.NewNonStaff.NationalityId)" Enabled="true" TItem="ACountry" TValue="int?" DataSource="@CountryData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                            <DropDownListFieldSettings Value="@nameof(ACountry.CoutryId)" Text="@nameof(ACountry.CountryDesc)"></DropDownListFieldSettings>
                        </SfDropDownList>
                        <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.NationalityId)" /></p>
                   </div>
                    <div class="col-md-4">
                        <p>Email Address <span style="color:red;">*</span></p>
                       <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@inputmodel.NewNonStaff.EmailAddress" CssClass="form-control" Placeholder="Please enter email" FloatLabelType="FloatLabelType.Never" Input="@InputHandler"></SfTextBox>
                       <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.EmailAddress)" /></p>
                   </div>
                   <div class="col-md-4">
                       <p style="margin-bottom:29px;">Identification Type <span style="color:red;">*</span></p>
                        <SfDropDownList @bind-Value="@(inputmodel.NewNonStaff.IdentificationTypeId)" Enabled="true" TItem="AIdentificationType" TValue="int?" DataSource="@IdentificationTypeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                            <DropDownListFieldSettings Value="@nameof(AIdentificationType.IdentificationTypeId)" Text="@nameof(AIdentificationType.IdentificationTypeDesc)"></DropDownListFieldSettings>
                        </SfDropDownList>
                        <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.IdentificationTypeId)" /></p>
                   </div>
                   <div class="col-md-4">
                        <p>Identification Number <span style="color:red;">*</span></p>
                       <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@inputmodel.NewNonStaff.IdentificationNumber" CssClass="form-control" Placeholder="Please enter Nin/Passport/Driving permit No" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                       <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.IdentificationNumber)" /></p>
                   </div>

                   @if(!string.IsNullOrEmpty(imageSource))
                   {
                    <div class="col-md-4">
                        <p>Mobile Phone Number<span style="color:red;">*</span></p>
                        <SfDropDownList TValue="int?" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" TItem="ACountry" Width="50px" DataSource="CountryData" 
                        PopupWidth="300px" @bind-Value="@(inputmodel.NewNonStaff.CoutryId)" PopupHeight="250px" Query="@LocalDataQuery" EnableVirtualization="true">
                            <DropDownListTemplates TItem="ACountry">
                                <ItemTemplate Context="itemcontext">
                                    <div>
                                        <p><img className="empImage" src="@imageSource/@((itemcontext as ACountry).Eimg).svg" height="11px" width="20px" alt="employee" />  @((itemcontext as ACountry).CountryDesc)  @((itemcontext as ACountry).CountryCode)</p>
                                    </div>
                                </ItemTemplate>
                                <ValueTemplate Context="valuecontext">
                                    <div>
                                        <img className="empImage" src="@imageSource/@((valuecontext as ACountry).Eimg).svg" height="11px" width="20px" alt="employee" />
                                    </div>
                                </ValueTemplate>
                            </DropDownListTemplates>
                            <DropDownListFieldSettings Value="CoutryId" Text="CountryDesc"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="int?" TItem="ACountry" ValueChange="changeHandler"></DropDownListEvents>
                        </SfDropDownList>

                        @* <SfTextBox Multiline="false" ID="DialCode" @bind-Value="@(inputmodel.NewNonStaff.DialCode)" FloatLabelType="FloatLabelType.Never" Enabled="false" Width="50px"></SfTextBox> *@

                        <SfMaskedTextBox Mask="@maskvalue" @bind-Value="@(inputmodel.NewNonStaff.OfficialPhoneNumber)" Width="150px" Enabled="@(inputmodel.NewNonStaff.CoutryId == null ? false : true)"></SfMaskedTextBox>

                    </div>
                   }

                   @if(!string.IsNullOrEmpty(imageSource))
                   {
                    <div class="col-md-4">
                        <p>Other Mobile Phone Number</p>

                        <SfDropDownList TValue="int?" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" TItem="ACountry" Width="50px" DataSource="CountryData"
                                        PopupWidth="300px" @bind-Value="@(inputmodel.NewNonStaff.OtherCoutryId)" PopupHeight="250px" Query="@LocalDataQuery" EnableVirtualization="true">
                            <DropDownListTemplates TItem="ACountry">
                                <ItemTemplate Context="itemcontext">
                                    <div>
                                        <p><img className="empImage" src="@imageSource/@((itemcontext as ACountry).Eimg).svg" height="11px" width="20px" alt="employee" />  @((itemcontext as ACountry).CountryDesc)  @((itemcontext as ACountry).CountryCode)</p>
                                    </div>
                                </ItemTemplate>
                                <ValueTemplate Context="valuecontext">
                                    <div>
                                        <img className="empImage" src="@imageSource/@((valuecontext as ACountry).Eimg).svg" height="11px" width="20px" alt="employee" />
                                    </div>
                                </ValueTemplate>
                            </DropDownListTemplates>
                            <DropDownListFieldSettings Value="CoutryId" Text="CountryDesc"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="int?" TItem="ACountry" ValueChange="otherchangeHandler"></DropDownListEvents>
                        </SfDropDownList>

                        @* <SfTextBox Multiline="false" ID="OtherDialCode" @bind-Value="@(inputmodel.NewNonStaff.OtherDialCode)" FloatLabelType="FloatLabelType.Never" Enabled="false" Width="50px"></SfTextBox> *@

                        <SfMaskedTextBox Mask="@maskvalue2" @bind-Value="@(inputmodel.NewNonStaff.MobileNumber)" Width="150px" Enabled="@(inputmodel.NewNonStaff.OtherCoutryId == null ? false : true)"></SfMaskedTextBox>
                        <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.MobileNumber)" /></p>


                    </div>
                   }


                   <div class="col-md-12">
                       <h3>Social Media Handles</h3>
                   </div>
                   <div class="col-md-4">
                        <p>LinkedIn</p>
                       <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@inputmodel.NewNonStaff.LinkedIn" CssClass="form-control" Placeholder="Please enter Profile URL" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                       <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.LinkedIn)" /></p>
                   </div>
                   <div class="col-md-4">
                        <p>Twitter</p>
                       <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@inputmodel.NewNonStaff.Twitter" CssClass="form-control" Placeholder="Please enter Profile URL" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                       <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.Twitter)" /></p>
                   </div>
                   <div class="col-md-4">
                        <p>Github</p>
                       <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@inputmodel.NewNonStaff.Github" CssClass="form-control" Placeholder="Please enter Profile URL" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                       <p> <ValidationMessage For="@(() => inputmodel.NewNonStaff.Github)" /></p>
                   </div>
                   <div class="col-md-12">
                       <h3>Account Credentials</h3>
                   </div>
                    <div class="col-md-4">
                        <p>Username <span style="color:red;">*</span></p>
                       <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@inputmodel.UserName" CssClass="form-control" Placeholder="Please enter Username" FloatLabelType="FloatLabelType.Never" Enabled="false"></SfTextBox>
                       <p> <ValidationMessage For="@(() => inputmodel.UserName)" /></p>
                   </div>
                   <div class="col-md-4">
                        <p>Password</p>
                       <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Password" @bind-Value="@inputmodel.Password" CssClass="form-control" Placeholder="Please enter Password" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                       <p> <ValidationMessage For="@(() => inputmodel.Password)" /></p>
                   </div>
                   <div class="col-md-4">
                        <p>Re-Enter Password</p>
                       <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Password" @bind-Value="@inputmodel.Repassword" CssClass="form-control" Placeholder="Please re-enter password" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                       <p> <ValidationMessage For="@(() => inputmodel.Repassword)" /></p>
                   </div>
                   <div class="col-md-12">
                        <button class="btn btn-success" style="margin-top:10px; margin-bottom:10px; float:right;" disabled=@IsSubmitDisabled>
                            <span class="button__text">Register
                            <i class="fa fa-sign-in"></i></span>
                        </button>
                   </div>
                   <div class="col-md-12">
                       <SfSpinner Visible=false @ref="@SavingSpinner" Label="Registering User Please wait..."></SfSpinner>
                   </div>
                    <div class="col-md-12">
                        <p class="alert-danger">
                             <DataAnnotationsValidator />
                            <ValidationSummary />
                        </p>
                        @if (!string.IsNullOrEmpty(RegisterError))
                        {
                             <p class="alert-danger" style="padding:10px;">
                                 @RegisterError
                            </p>
                        }
                        @if(missingfields != null && missingfields.Count > 0)
                        {
                            <p class="alert-danger" style="padding:10px;">
                                             <ul>
                                    @foreach(var a in missingfields)
                                    {
                                        <li>@a</li>
                                    }
                                </ul>
                             </p>
                        }
                        @if (!string.IsNullOrEmpty(RegisterSuccess))
                        {
                             <p class="alert-success"  style="padding:10px;">
                                 @RegisterSuccess
                            </p>
                        }
        </div>
    </EditForm>
</article>
@code {
    SfSpinner SavingSpinner;
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    NonStaffRegistrationModel inputmodel { get; set; } = new NonStaffRegistrationModel();
    string? RegisterError { get; set; }
    string? RegisterSuccess { get; set; }
    List<AGender>? GenderData{ get; set; }
    List<ACountry>? CountryData{ get; set; }
    List<AIdentificationType>? IdentificationTypeData{ get; set; }
    List<string>? missingfields{ get; set; } = new();
    bool IsSubmitDisabled;
    public bool loadingspinner { get; set; }
    public string maskvalue { get; set; } = "000 000 000 0";
    public string maskvalue2 { get; set; } = "000 000 000 0";
    bool isdobvalid = true;
    private string? imageSource = $"Image/flags/1x1/";
    public Query LocalDataQuery  = new Query().Take(15);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            inputmodel = new();
            inputmodel.NewNonStaff = new();
            loadingspinner = true;

            List<Task> t = new List<Task>();

            t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"NonStaff/GetRegistrationPrimartData");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        var _ExternalRegistrationModel = JsonSerializer.Deserialize<ExternalRegistrationModel>(content, _options);
                        if (_ExternalRegistrationModel != null)
                        {
                            GenderData = _ExternalRegistrationModel.Gender;
                            CountryData = _ExternalRegistrationModel.Coutry.OrderBy(o => o.CountryDesc).ToList();
                            IdentificationTypeData = _ExternalRegistrationModel.IdentificationType;
                        }
                    }
                }));

            Task _t = Task.WhenAll(t);
            await _t;
        }
        catch (Exception ex)
        {
            RegisterError = $"Error: {ex.Message}";
        }
        finally
        {
            loadingspinner = false;
        }
        await base.OnInitializedAsync();
    }

    protected async Task OnDOBChange(ChangedEventArgs<DateTime?> value)
    {
        DateTime today = DateTime.Today;
        DateTime dob = Convert.ToDateTime(value.Value);

        int months = today.Month - dob.Month;
        int years = today.Year - dob.Year;

        if (today.Day < dob.Day)
        {
            months--;
        }

        if (months < 0)
        {
            years--;
            months += 12;
        }

        int days = (today - dob.AddMonths((years * 12) + months)).Days;

        //toastService.ShowSuccess("Years , Months, Days" +years + months  + days);

        if (years >= 18)
        {
            isdobvalid = true;
            //toastService.ShowSuccess(">18");
        }
        else
        {
            isdobvalid = false;
            //toastService.ShowSuccess("<18");
        }

    }

    // public async void changeHandler(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ACountry> args)
    // {
    //     if (args.Value != null)
    //     {
    //         var _countrycode = CountryData.FirstOrDefault(o => o.CoutryId == args.ItemData.CoutryId);
    //         inputmodel.NewNonStaff.DialCode = _countrycode.CountryCode;
    //     }

    // }

    public async void changeHandler(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ACountry> args)
    {
        if (args.ItemData != null)
        {
            maskvalue = null;
            if (!string.IsNullOrEmpty(args.ItemData.CountryCode))
            {
                foreach (var item in args.ItemData.CountryCode.Trim())
                {
                    if (item != '-')
                    {
                        maskvalue += $@"\\{item}";
                    }
                }
                maskvalue += " 000 000 000";
            }
        }
        else
        {
            maskvalue = "000 000 000 000";
        }
    }

    public async void otherchangeHandler(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ACountry> args)
    {
        if (args.ItemData != null)
        {
            maskvalue2 = null;
            if (!string.IsNullOrEmpty(args.ItemData.CountryCode))
            {
                foreach (var item in args.ItemData.CountryCode.Trim())
                {
                    if (item != '-')
                    {
                        maskvalue2 += $@"\\{item}";
                    }
                }
                maskvalue2 += " 000 000 000";
            }
        }
        else
        {
            maskvalue2 = "000 000 000 000";
        }
    }


    //https://blazor.syncfusion.com/documentation/textbox/events -- textbox change

    private void InputHandler(InputEventArgs args)
    {
        inputmodel.UserName = args.Value;
    }

    private void ValueChangeHandler(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        // Here you can customize your code
    }

    private async Task Register()
    {
        try
        {

            IsSubmitDisabled = true;

            missingfields = new();
            RegisterError = null;
            RegisterSuccess= null;

            //If there is any error
            if ((string.IsNullOrEmpty(inputmodel.NewNonStaff.FirstName) ||
            (string.IsNullOrEmpty(inputmodel.NewNonStaff.LastName))
            || (inputmodel.NewNonStaff.GenderId == null)            
            ||(inputmodel.NewNonStaff.DoB== null)            
            ||(inputmodel.NewNonStaff.NationalityId == null)
            ||(string.IsNullOrEmpty(inputmodel.NewNonStaff.EmailAddress))
            ||(inputmodel.NewNonStaff.IdentificationTypeId == null)
            ||(string.IsNullOrEmpty(inputmodel.NewNonStaff.IdentificationNumber))
            ||(inputmodel.NewNonStaff.OfficialPhoneNumber== null)
            ||(inputmodel.UserName == null)))
            {
                if (string.IsNullOrEmpty(inputmodel.NewNonStaff.FirstName))
                {
                    missingfields.Add("First Name is required");
                }
                if (string.IsNullOrEmpty(inputmodel.NewNonStaff.LastName))
                {
                    missingfields.Add("Last Name is required");
                }
                if (inputmodel.NewNonStaff.GenderId == null)
                {
                    missingfields.Add("Gender is required");
                }
                if (inputmodel.NewNonStaff.DoB == null)
                {
                    missingfields.Add("Date of Birth is required");
                }

                if (inputmodel.NewNonStaff.NationalityId == null)
                {
                    missingfields.Add("Nationality is required");
                }
                if (string.IsNullOrEmpty(inputmodel.NewNonStaff.EmailAddress))
                {
                    missingfields.Add("Email Address is required");
                }
                if (inputmodel.NewNonStaff.IdentificationTypeId == null)
                {
                    missingfields.Add("Identification Type is required");
                }
                if (string.IsNullOrEmpty(inputmodel.NewNonStaff.IdentificationNumber))
                {
                    missingfields.Add("Identification Number is required");
                }
                if (inputmodel.NewNonStaff.OfficialPhoneNumber == null)
                {
                    missingfields.Add("Mobile Phone Number is required");
                }
                if (inputmodel.UserName == null)
                {
                    missingfields.Add("Username is required");
                }
            }

            else if(isdobvalid == false)
            {
                toastService.ShowWarning("Date of birth is invalid. 18 Years and above is required");
            }
            
            //If there is no error
            else
            {
                if (inputmodel.Password != inputmodel.Repassword)
                {
                    missingfields.Add("Password mismatch, Please ensure that the password and re-entered password are the same");
                }
                else
                {
                    var hasNumber = new Regex(@"[0-9]+");
                    var hasUpperChar = new Regex(@"[A-Z]+");
                    var hasMinimum8Chars = new Regex(@".{8,}");
                    var hasLowerChar = new Regex(@"[a-z]+");
                    var hasSymbols = new Regex(@"[!@#$%^&*()_+=\[{\]};:<>|./?,-]");
                    var isValidated = hasNumber.IsMatch(inputmodel.Password) && hasUpperChar.IsMatch(inputmodel.Password) && hasMinimum8Chars.IsMatch(inputmodel.Password) && hasLowerChar.IsMatch(inputmodel.Password) && hasSymbols.IsMatch(inputmodel.Password);
                    if (isValidated)
                    {
                        await SavingSpinner.ShowAsync();
                        inputmodel.ComfirmationUrl = $"{Navigation.BaseUri}AccountConfirmationPage";
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(inputmodel);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                        var result = await Http.PostAsync($"NonStaff/Register", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    RegisterSuccess = $"Success: {data.Message}";
                                    Navigation.NavigateTo("/SuccessfulRegistrationPage");

                                    //Clear Form on Save
                                    //inputmodel = new();

                                }
                                else
                                {
                                    RegisterError = $"Error: {data.Message}";
                                }
                            }

                            ///RegisterSuccess
                        }
                        else
                        {
                            RegisterError = $"Error: {result.ReasonPhrase}";
                        }
                    }
                    else
                    {
                        missingfields.Add("The password should contain atleast one upper case, one lower case, a special character, one numeric number and should also be atleast 8 characters long.");
                    }
                }
            }

            //Old

            // if (string.IsNullOrEmpty(inputmodel.NewNonStaff.FirstName))
            // {
            //     missingfields.Add("First Name is required");
            // }
            // if (string.IsNullOrEmpty(inputmodel.NewNonStaff.LastName))
            // {
            //     missingfields.Add("Last Name is required");
            // }
            // if (inputmodel.NewNonStaff.GenderId== null)
            // {
            //     missingfields.Add("Gender is required");
            // }
            // if (inputmodel.NewNonStaff.DoB== null)
            // {
            //     missingfields.Add("Date of Birth is required");
            // }

            // if (inputmodel.NewNonStaff.NationalityId== null)
            // {
            //     missingfields.Add("Nationality is required");
            // }            
            // if (string.IsNullOrEmpty(inputmodel.NewNonStaff.EmailAddress))
            // {
            //     missingfields.Add("Email Address is required");
            // }
            // if (inputmodel.NewNonStaff.IdentificationTypeId == null)
            // {
            //     missingfields.Add("Identification Type is required");
            // }
            // if (string.IsNullOrEmpty(inputmodel.NewNonStaff.IdentificationNumber))
            // {
            //     missingfields.Add("Identification Number is required");
            // }
            // if (inputmodel.NewNonStaff.OfficialPhoneNumber== null)
            // {
            //     missingfields.Add("Mobile Phone Number is required");
            // }
            // if (inputmodel.UserName == null)
            // {
            //     missingfields.Add("Username is required");
            // }
            // else
            // {
            //     if(inputmodel.Password != inputmodel.Repassword)
            //     {
            //         missingfields.Add("Password mismatch, Please ensure that the password and re-entered password are the same");
            //     }
            //     else
            //     {
            //         var hasNumber = new Regex(@"[0-9]+");
            //         var hasUpperChar = new Regex(@"[A-Z]+");
            //         var hasMinimum8Chars = new Regex(@".{8,}");
            //         var hasLowerChar = new Regex(@"[a-z]+");
            //         var hasSymbols = new Regex(@"[!@#$%^&*()_+=\[{\]};:<>|./?,-]");
            //         var isValidated = hasNumber.IsMatch(inputmodel.Password) && hasUpperChar.IsMatch(inputmodel.Password) && hasMinimum8Chars.IsMatch(inputmodel.Password) && hasLowerChar.IsMatch(inputmodel.Password) && hasSymbols.IsMatch(inputmodel.Password);
            //         if (isValidated)
            //         {
            //             await SavingSpinner.ShowAsync();
            //             inputmodel.ComfirmationUrl = $"{Navigation.BaseUri}AccountConfirmationPage";
            //             string json = Newtonsoft.Json.JsonConvert.SerializeObject(inputmodel);
            //             StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            //             var result = await Http.PostAsync($"NonStaff/Register", httpContent);
            //             if (result.IsSuccessStatusCode)
            //             {
            //                 var content = await result.Content.ReadAsStringAsync();
            //                 var data = JsonSerializer.Deserialize<Response>(content, _options);
            //                 if(data != null)
            //                 {
            //                     if (data.IsSuccess)
            //                     {
            //                         RegisterSuccess = $"Success: {data.Message}";
            //                         //Clear Form on Save
            //                         //inputmodel = new();

            //                     }
            //                     else
            //                     {
            //                         RegisterError = $"Error: {data.Message}";
            //                     }
            //                 }

            //                 ///RegisterSuccess
            //             }
            //             else
            //             {
            //                 RegisterError = $"Error: {result.ReasonPhrase}";
            //             }
            //         }
            //         else
            //         {
            //             missingfields.Add("The password should contain atleast one upper case, one lower case, a special character, one numeric number and should also be atleast 8 characters long.");
            //         }
            //     }
            // }

            //Old
        }
        catch (Exception ex)
        {
            RegisterError = $"Error: {ex.Message}";
        }
        finally
        {
            await SavingSpinner.HideAsync();
            IsSubmitDisabled = false;
        }
    }
}
