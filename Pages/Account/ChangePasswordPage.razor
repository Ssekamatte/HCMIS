@page "/ChangePasswordPage"
@using HCMIS.SHARED.Models.Usermanagement;
@using HCMIS.Interface;
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization;
@using System.Text.RegularExpressions;
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IToastService toasterService;
@inject IAuthenticationService AuthService;
@attribute [Authorize]


<BreadcrumbPage CategoryName="User management" PageName="Change Passwords" />
<EditForm Model="@viewModel" class="row" OnValidSubmit="@ChangePassword">
    <div class="col-md-3">
    </div>
    <div class="col-md-6">
        <div class="row">
            <div class="col col-md-12">
                <label>Username</label>
                <SfTextBox Multiline="false" @bind-value="viewModel.UserName" Enabled="false" CssClass="form-control" Placeholder="Username" FloatLabelType="FloatLabelType.Never" />
            </div>
            <div class="col col-md-12">
                <label>Current Password</label>
                <SfTextBox Multiline="false" @bind-value="viewModel.OldPassword" CssClass="form-control" Placeholder="Password" FloatLabelType="FloatLabelType.Never" />
            </div>
            <div class="col col-md-12">
                <label>New Password</label>
                <SfTextBox Multiline="false" @bind-value="viewModel.NewPassword" CssClass="form-control" Placeholder="Password" FloatLabelType="FloatLabelType.Never" />
            </div>
            <div class="col col-md-12">
                <label>Confirm Password</label>
                <SfTextBox Multiline="false" @bind-value="viewModel.ConfirmPassword" CssClass="form-control" Placeholder="Password" FloatLabelType="FloatLabelType.Never" />
            </div>
            <div class="col col-md-12">
                <button type="submit" class="btn btn-primary" style="float:right;">Change Password</button>
            </div>
            <div class="col col-md-12">
                @if (!string.IsNullOrEmpty(errormessage))
                {
                    <p class="alert-danger" style="padding:10px; margin-top:30px;">@errormessage</p>
                }
                else if (!string.IsNullOrEmpty(Successmessage))
                {
                    <p class="alert-success" style="padding: 10px; margin-top: 30px;">@Successmessage</p>
                }
            </div>
            <div class="col col-md-12">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>
        </div>
    </div>
    <div class="col-md-3">
    </div>
</EditForm>

@code {
    private ChangePasswordViewModel viewModel = new();
    string? errormessage { get; set; } = null;
    string? Successmessage { get; set; } = null;

    private async Task ChangePassword()
    {
        try
        {
            errormessage = null;
            Successmessage = null;
            var hasNumber = new Regex(@"[0-9]+");
            var hasUpperChar = new Regex(@"[A-Z]+");
            var hasMinimum8Chars = new Regex(@".{8,}");
            var hasLowerChar = new Regex(@"[a-z]+");
            var hasSymbols = new Regex(@"[!@#$%^&*()_+=\[{\]};:<>|./?,-]");
            var isValidated = hasNumber.IsMatch(viewModel.NewPassword) && hasUpperChar.IsMatch(viewModel.NewPassword) && hasMinimum8Chars.IsMatch(viewModel.NewPassword) && hasLowerChar.IsMatch(viewModel.NewPassword) && hasSymbols.IsMatch(viewModel.NewPassword);
            if (isValidated == true)
            {
                await AuthService.ChangePassword(viewModel);
            }
            else
            {
                errormessage = "The password should contain atleast one upper case, one lower case, a special character, one numeric number and should also be atleast 8 characters long";
            }
        }
        catch (Exception ex)
        {
            errormessage = ex.Message;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        viewModel = new();
        viewModel.UserName = user.Identity.Name;
        await base.OnInitializedAsync();
    }
}
