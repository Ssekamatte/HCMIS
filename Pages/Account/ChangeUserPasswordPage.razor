@using HCMIS.Interface;
@using HCMIS.Model;
@using HCMIS.SHARED.Models;
@using HCMIS.SHARED.Usermanagement;
@using System.Text.RegularExpressions;
@using System.Collections;
@inject IToastService toasterService;
@inject IAuthenticationService AuthService;
@inject ApiConfig _ApiConfig;
@inject NavigationManager _NavigationManager;

@*<h3>ChangeUserPasswordPage</h3>*@
<div class="row">
    <div class="col-md-12">
        <SfGrid @ref="AcountManagementGrid" TValue="ViewUserManagement" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
            @*<GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>*@
            <SfDataManager AdaptorInstance="@typeof(ChangeUserPasswordAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
            @*<GridEvents OnActionBegin="OnClientBranchActionBegin" OnActionComplete="@OnClientBranchActionComplete" TValue="ViewUserManagement"></GridEvents>*@
            <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="false" Mode="@EditMode.Dialog"></GridEditSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridColumns>
                <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                <GridColumn Field=@nameof(ViewUserManagement.Id) HeaderText="Id" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                <GridColumn Field=@nameof(ViewUserManagement.UserName) HeaderText="Username" Width="150"></GridColumn>
                <GridColumn Field=@nameof(ViewUserManagement.FullName) HeaderText="Account Holder" Width="150"></GridColumn>
                <GridColumn Field=@nameof(ViewUserManagement.RoleName) HeaderText="User Role" Width="150"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
    <div class="col-md-12">
        <SfDialog @ref="ResetPasswordDialog" Height="55%" Width="435px" AllowDragging="true" Target=".page"
        ShowCloseIcon="true" @bind-Visible="BatchVisibility" IsModal=true>
            <DialogTemplates>
                <Header>
                    <div id="template" title="Request Stock" class="e-icon-settings">Reset Password</div>
                </Header>
                <Content>
                    <div style="padding:25px">
                        <div class="form-row">
                            <div class="col-md-12">
                                <label>Username</label>
                                <SfTextBox ID="Username" Enabled="false" @bind-Value="model.UserName" Placeholder="User Name" FloatLabelType="FloatLabelType.Never" />
                            </div>
                            <div class="col-md-12">
                                <label>New Password</label>
                                <input type="password"  ID="Password" class="form-control" readonly  @bind-value="@model.Password" Placeholder="New Password"/>
                            </div>
                            @*<div class="col-md-12">
                            <SfTextBox ID="ConfirmPassword" @bind-Value="InputModel.ConfirmPassword" Placeholder="Confirm Password" FloatLabelType="FloatLabelType.Always" />
                            </div>*@
                        </div>
                        <div class="col-md-12">
                            <SfSpinner @ref="LoadingSpinner" CssClass="SpinnerClass" Visible="@LoadingSpinnerVisible" Size="50" Label="Resetting Pasword, Please wait......."> </SfSpinner>
                        </div>
                    </div>
                </Content>
                <FooterTemplate>
                    <input type="button" @onclick="(async ()=> { await ResetPasswordDialog.HideAsync(); })" style="float:right;" Class="btn btn-danger" value="Cancel" />
                    <input type="button" @onclick="@ResetPassword" style="float:right; margin-right:10px;" Class="btn btn-primary" value="Reset Password" />
                </FooterTemplate>
            </DialogTemplates>
        </SfDialog>
    </div>
    

    <div class="col-md-12">
        <input type="button" @onclick="@OnViewRecord" style="float:right; margin-top:10px;" Class="btn btn-primary" value="Reset User Password" />
    </div>
</div>

@code {
    SfGrid<ViewUserManagement>? AcountManagementGrid;
    SfDialog? ResetPasswordDialog;
    ChangePasswordModel? model { get; set; } = new();
    SfSpinner? LoadingSpinner;
    bool LoadingSpinnerVisible { get; set; } = false;
    private bool BatchVisibility { get; set; } = false;    

    private async Task OnViewRecord()
    {
        try
        {
            var record = await AcountManagementGrid.GetSelectedRecordsAsync();
            if (record.Count > 1)
            {
                toasterService.ShowInfo("Please select only one user whose password you would wish to reset.");
            }
            else if (record.Count == 1)
            {
                model = new();
                model.UserName = record[0].NormalizedUserName;
                model.Password = AuthService.RandomPassword();
                await ResetPasswordDialog.ShowAsync();
            }
            else if (record.Count == 0)
            {
                toasterService.ShowInfo("Please select the user you would wish to reset the password.");
            }
        }
        catch (Exception ex)
        {
            toasterService.ShowError(ex.Message.ToString());
        }
    }

    private async Task ResetPassword()
    {
        try
        {
            model.baseurl = _NavigationManager.BaseUri;
            BatchVisibility = true;
            LoadingSpinnerVisible = true;
            if (string.IsNullOrEmpty(model.Password))
            {
                toasterService.ShowInfo("Please enter the new password for the user.");
            }
            else
            {

                var hasNumber = new Regex(@"[0-9]+");
                var hasUpperChar = new Regex(@"[A-Z]+");
                var hasMinimum8Chars = new Regex(@".{8,}");
                var hasLowerChar = new Regex(@"[a-z]+");
                var hasSymbols = new Regex(@"[!@#$%^&*()_+=\[{\]};:<>|./?,-]");
                var isValidated = hasNumber.IsMatch(model.Password) && hasUpperChar.IsMatch(model.Password) && hasMinimum8Chars.IsMatch(model.Password) && hasLowerChar.IsMatch(model.Password) && hasSymbols.IsMatch(model.Password);

                if (isValidated == true)
                {
                    await AuthService.ChangeUserPassword(model);
                }
                else
                {
                    toasterService.ShowError("The password should contain atleast one upper case, one lower case, a special character, one numeric number and should also be atleast 8 characters long");
                }

            }
        }
        catch (Exception ex)
        {
            toasterService.ShowError(ex.Message.ToString());
        }
        finally
        {
            BatchVisibility = false;
            LoadingSpinnerVisible = false;
        }
    }
    public class ChangeUserPasswordAdapter : DataAdaptor
    {
        private IToastService toastService;
        private IAuthenticationService AuthService;
        public ChangeUserPasswordAdapter(IAuthenticationService AuthService, IToastService ts)
        {
            toastService = ts;
            this.AuthService = AuthService;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<ViewUserManagement>();
            try
            {

                data = await AuthService.GetSystemUsers();

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ViewUserManagement>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as ViewUserManagement);

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as ViewUserManagement);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }
}
