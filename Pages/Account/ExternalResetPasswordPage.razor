@page "/ExternalResetPasswordPage"
@page "/ExternalResetPasswordPage/{Id}"
@using HCMIS.SHARED.Models;
@using HCMIS.SHARED.Models.Usermanagement;
@using HCMIS.Interface;
@using System.Text.RegularExpressions;
@inject IAuthenticationService AuthService;
@inject NavigationManager NavManager;
@inject IToastService toastService;
@*<h3>ExternalResetPasswordPage</h3>*@

<style>
    body {
        margin: 0px;
        padding: 0px;
        background: url(/image/nhcc1.jpg);
        background-attachment: fixed;
        background-repeat: no-repeat;
        background-size: cover;
        background-position-y: -68px;
        height: 100%;
        background-color: #000 !important;
        font-family: 'Roboto', 'Roboto Condensed' !important;
        width: 100%;
        overflow-x: hidden !important;
    }

    .center-screen {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        min-height: 100vh;
        /*width:40%;*/
    }

    h3 {
        color: #ffc107;
        font-family: 'Roboto', 'Roboto Condensed' !important;
    }

    p {
        word-wrap: break-word;
    }

    .page[b-rutikf73sn] {
        position: relative;
        display: block;
    }
</style>
<div class="center-screen">
    <div style="width:35%;">
        <h3>Reset Password</h3>
        <p>Please input the new Password you would like to use to access your account</p>
        <EditForm Model="@InputModel" class="signin-form" OnValidSubmit="@ResetPassword">
            <div class="form-group mb-3">
                <label class="label" for="Password" style="color:#96CFF0;float:left;">Password</label>
                <input type="password" @bind-value="@InputModel.Password" class="form-control" placeholder="Password" required>
            </div>
            <div class="form-group mb-3">
                <label class="label" for="ConfirmPassword" style="color:#96CFF0;float:left;">Confirm Password</label>
                <input type="password" @bind-value="@InputModel.ConfirmPassword" class="form-control" placeholder="Confirm Password" required>
            </div>
            <div class="form-group">
                <button type="submit" class="form-control btn btn-primary rounded submit px-3">Reset Password</button>
            </div>
            <DataAnnotationsValidator />
            <ValidationSummary />
        </EditForm>
        <p class="text-center">Do you want to return to the login page? <a data-toggle="tab" href="#" @onclick="@BackToLoginClick">Click here</a></p>

    </div>
</div>

@code {
    [Parameter]
    public string? Id { get; set; }
    private ChangePasswordModel InputModel { get; set; } = new ChangePasswordModel();
    List<ViewUserManagement>? SystemUsers { get; set; }
    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            byte[] b = Convert.FromBase64String(Id);
            var decriptedSring = System.Text.ASCIIEncoding.ASCII.GetString(b);
            if (SystemUsers != null)
            {
                var exists = SystemUsers.FirstOrDefault(o => o.Id == decriptedSring);
                if (exists != null)
                {
                    InputModel.UserName = exists.UserName;
                    InputModel.baseurl = NavManager.BaseUri;
                }
            }
        }
        base.OnParametersSet();
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SystemUsers = await AuthService.GetSystemUsers();
    }
    private async Task ResetPassword()
    {
        try
        {
            if (InputModel.Password != InputModel.ConfirmPassword)
            {
                toastService.ShowInfo("Password and Confirm password are not the same", "Password Mismatch");
            }
            else
            {
                var hasNumber = new Regex(@"[0-9]+");
                var hasUpperChar = new Regex(@"[A-Z]+");
                var hasMinimum8Chars = new Regex(@".{8,}");
                var hasLowerChar = new Regex(@"[a-z]+");
                var hasSymbols = new Regex(@"[!@#$%^&*()_+=\[{\]};:<>|./?,-]");
                var isValidated = hasNumber.IsMatch(InputModel.Password) && hasUpperChar.IsMatch(InputModel.Password)
                && hasMinimum8Chars.IsMatch(InputModel.Password) && hasLowerChar.IsMatch(InputModel.Password)
                && hasSymbols.IsMatch(InputModel.Password);

                if (isValidated == true)
                {
                    await AuthService.ChangeUserPassword(InputModel);
                }
                else
                {
                    toastService.ShowError("The password should contain atleast one upper case, one lower case, a special character, one numeric number and should also be atleast 8 characters long");
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
    private void BackToLoginClick()
    {
        NavManager.NavigateTo("/LoginPage", true);
    }
}
