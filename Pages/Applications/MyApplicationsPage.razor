@* @page "/MyApplicationsPageOld" *@
@using HCMIS.Interface
@using HCMIS.Model
@using HCMIS.SHARED.Models
@using System.Text.Json
@using HCMIS.ViewModel
@inject HttpClient Http
@inject NavigationManager navManager
@inject IAuthenticationService AuthService;
@inject IToastService toastService;
@inject DocumentUploadModel _DocumentUploadModel;
@inject IJSRuntime _JSRuntime;

@* https://blazor.syncfusion.com/documentation/card/style *@@*  Link to styling card elements *@
<style>
    /*Submit Button color on hover*/
    .e-btn.e-success:hover, .e-css.e-btn.e-success:hover {
        background: lightgreen;
        border-color: #0a5f0a;
        box-shadow: 0 0 rgba(0,0,0,0);
        color: #fff;
    }

    /*Responsive HTML Table*/
    table.center {
        margin-left: auto;
        margin-right: auto;
    }

    table, th, td {
        border-collapse: collapse;
        border-spacing: 0;
        width: auto;
        border: 1px solid #ddd;
        border: 1px solid black;
        border-collapse: collapse;
        text-align: left;
        padding: 8px;
        margin-left: 60px;
        margin-right: 20px;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2
    }

    /*Responsive HTML Table*/

    #target {
        max-height: 800px;
        height: 400px;
    }

    h3 {
        color: ghostwhite;
        background-color: #00cc00;
        padding: 10px;
        width: 100%;
        font-size: large;
    }

    li {
        margin: 0px 0px 4px;
        line-height: 1.8;
        color: rgb(102, 102, 102);
        font-family: "Open Sans", sans-serif;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        text-indent: 0px;
        white-space: normal;
        /* background-color: rgb(255, 255, 255);*/
        text-align: justify;
    }

    p {
        margin: 0px 0px 4px;
        line-height: 1.8;
        color: rgb(102, 102, 102);
        font-family: "Open Sans", sans-serif;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        text-indent: 0px;
        white-space: normal;
        /* background-color: rgb(255, 255, 255);*/
        text-align: justify;
    }

    h5 {
        color: #06c;
    }

    label {
        margin-top: 15px;
    }

    ul.e-list-parent .e-ul > li {
        min-height: 10vh;
    }
</style>

@* Url to bootstrap card formats *@
@* https://ordinarycoders.com/blog/article/codepen-bootstrap-card-hovers *@

@if (AvailableJobsData != null)
{
    <div class="row e-card-layout" style="text-align:center;">
        @foreach (var data in AvailableJobsData)
        {
            string ContractLengthTypeDesc = string.Empty;
            string JobTitleDesc = string.Empty;
            string JobTypeDesc = string.Empty;
            string _imageurl = string.Empty;

            var _jobdesc = JobDescriptionData.FirstOrDefault(o => o.JobDescriptionId == data.JobDescriptionId);
            var _jobtitle = JobTitleData.FirstOrDefault(o => o.JobTitleId == _jobdesc.JibTitleId);
            var _dept = DepartmentData.FirstOrDefault(o => o.DepartmentId == _jobdesc.DepartmentId);
            var _jobtype = JobTypeData.FirstOrDefault(o => o.JobTypeId == _jobdesc.JobTypeId);
            var _contractlength = ContractLengthTypeData.FirstOrDefault(o => o.ContractLengthTypeId == _jobdesc.ContractLengthTypeId);

            if (_jobtitle != null)
            {
                JobTitleDesc = _jobtitle.JobTitleDescription;
            }

            if (_contractlength != null)
            {
                ContractLengthTypeDesc = _contractlength.ContractLengthTypeDesc;
            }

            if (_jobtype != null)
            {
                JobTypeDesc = _jobtype.TypeDescription;
            }

            @*Images*@
            if (_jobdesc.DepartmentId == 1)
            {
                _imageurl = "/image/NHCC1.jeg";
            }
            else if (_jobdesc.DepartmentId == 2)
            {
                _imageurl = "/image/NHCC9.avif";
            }
            else if (_jobdesc.DepartmentId == 3)
            {
                _imageurl = "/image/NHCC3.jpg";
            }
            else if (_jobdesc.DepartmentId == 4)
            {
                _imageurl = "/image/NHCC4.jpeg";
            }
            else if (_jobdesc.DepartmentId == 5)
            {
                _imageurl = "/image/NHCC5.png";
            }
            else if (_jobdesc.DepartmentId == 6)
            {
                _imageurl = "/image/NHCC6.png";
            }
            else if (_jobdesc.DepartmentId == 7)
            {
                _imageurl = "/image/NHCC7.jpg";
            }
            else if (_jobdesc.DepartmentId == 8)
            {
                _imageurl = "/image/NHCC8.jpg";
            }

            <div class="col-lg-3 col-md-3 col-sm-6" style="margin-top:10px;">
                <MudCard>
                    <MudCardMedia Image="@_imageurl" Height="60" />
                    <MudCardContent>
                        <MudText Typo="Typo.h5" Style="font-size:0.9rem; font-weight:bolder;"><i class="fa fa-briefcase"></i> @JobTitleDesc</MudText>
                            <MudText Typo="Typo.body2" Style="font-size:0.7rem;text-align: center;"><i class="fa fa-list-ol"></i> @data.ReferenceNumber</MudText>
                            <MudText Typo="Typo.body2" Style="font-size:0.7rem;text-align: center;"><i class="fa fa-share-square-o"></i> @JobTypeDesc</MudText>
                            @if(_jobdesc.ContractLength != null)
                            {
                                <MudText Typo="Typo.body2" Style="font-size:0.7rem;text-align: center;"><i class="fa fa-google-wallet"></i> @_jobdesc.ContractLength @ContractLengthTypeDesc</MudText>
                            }
                            
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick=@(()=>{downloadJobClick(data);})>Download</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Primary"  @onclick=@(()=>{viewJobClick(data);})>View Job</MudButton>
                        </MudCardActions>
                    </MudCard>
             </div>
            
        }
    </div>
}

else
{
    <div class="col-lg-3 col-md-12 col-sm-6">
        <MudAlert Severity="Severity.Error" Elevation="3">
            There are no current openings.
        </MudAlert>
    </div>    
}

@*View Full Job Description*@


<div class="col-md-12">
    <SfDialog Width="auto" ShowCloseIcon="true" @bind-Visible="Visibility" AllowDragging="true" EnableResize="true" IsModal="true">
        <DialogEvents OnOpen="@DialogOpen" Closed="@DialogClose"></DialogEvents>
        <DialogTemplates>
            <Header>Job Details</Header>
            <Content>

                @if (SelectedJobsModel != null)
                {
                    var _jobdesc = JobDescriptionData.FirstOrDefault(o => o.JobDescriptionId == SelectedJobsModel.JobDescriptionId);
                    var _jobtitle = JobTitleData.FirstOrDefault(o => o.JobTitleId == _jobdesc.JibTitleId);
                    var _dept = DepartmentData.FirstOrDefault(o => o.DepartmentId == _jobdesc.DepartmentId);
                    var _jobtype = JobTypeData.FirstOrDefault(o => o.JobTypeId == _jobdesc.JobTypeId);
                    var _contractlength = ContractLengthTypeData.FirstOrDefault(o => o.ContractLengthTypeId == _jobdesc.ContractLengthTypeId);

                    <div style="overflow-x:auto;">
                        <table class="center" style="margin:10px;">
                            <tr>
                                <td colspan="2" style="text-align: center;font-size: large;font-weight: bold;">
                                    <img src="/Image/logonhcc.png" width="40" height="25" /> NATIONAL HOUSING AND CONSTRUCTION COMPANY LIMITED
                                </td>
                            </tr>
                            <tr style="font-weight: bold;">
                                <td>Post:</td>
                                <td style="font-weight:bold">@_jobtitle.JobTitleDescription - @_jobdesc.Vacancies Post(s)</td>
                            </tr>

                            <tr style="font-weight: bold;">
                                <td>Reference No:</td>
                                <td style="font-weight:bold">@SelectedJobsModel.ReferenceNumber </td>
                            </tr>

                            <tr style="font-weight: bold;">
                                <td>Reports To:</td>
                                <td>@_jobtitle.ReportsTo</td>
                            </tr>

                            <tr style="font-weight: bold;">
                                <td>Responsible For:</td>
                                <td>@_jobdesc.ResponsibleFor</td>
                            </tr>

                            <tr style="font-weight: bold;">
                                <td>Job Purpose:</td>
                                <td>@_jobdesc.OtherRequirements</td>
                            </tr>

                            <tr style="font-weight: bold;">
                                <td>Key Duties and Responsibilities:</td>
                                <td>@((MarkupString)_jobdesc.JobDescription1)</td>
                            </tr>

                            <tr style="font-weight: bold;">
                                <td>Relevant Competencies:</td>
                                <td> @_jobdesc.RequiredWorkExperience</td>
                            </tr>
                        </table>
                    </div>
                }

               
            </Content>
            <FooterTemplate>
                <button @onclick="@ApplyBtnclicked" class="btn btn-success" data-ripple="true">Apply</button>
                <button @onclick="@DialogCancelBtnclicked" class="btn btn-danger" data-ripple="true">Cancel</button>
            </FooterTemplate>
        </DialogTemplates>
        <DialogPositionData X="center" Y="center"></DialogPositionData>
    </SfDialog>
</div>

@code {
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<ViewDepartmentSections>? DepartmentSectionsData { get; set; }
    List<ADepartment>? DepartmentData { get; set; }
    List<JobOpening>? AvailableJobsData { get; set; }
    List<AJobType>? JobTypeData { get; set; }
    List<AJobTitle>? JobTitleData { get; set; }
    List<JobDescription>? JobDescriptionData { get; set; }
    List<AContractLengthType>? ContractLengthTypeData { get; set; }
    private bool Visibility { get; set; } = false;

    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    LoginResultModel? Credentials { get; set; }
    private bool ShowButton { get; set; } = false;
    JobOpening? SelectedJobsModel { get; set; } = new();

    private void DialogOpen(Object args)
    {
        this.ShowButton = false;
    }
    private void DialogClose(Object args)
    {
        this.ShowButton = true;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            var isAuthenticated = await AuthService.CheckAuthenticationStatus();
            if (isAuthenticated == false)
            {
                navManager.NavigateTo("/LoginPage", true);
            }
            else
            {
                Credentials = await AuthService.GetUserCredentials();

                List<Task> t = new List<Task>();

                t.Add(Task.Run(async () =>
                {
                    var responseemployee = await Http.GetAsync($"HumanResource/GetAvailableJobs");
                    if (responseemployee.IsSuccessStatusCode)
                    {
                        var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                        AvailableJobsData = JsonSerializer.Deserialize<List<JobOpening>>(contentemployee, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var responseemployee = await Http.GetAsync($"Utilities/GetEmployeeDD");
                    if (responseemployee.IsSuccessStatusCode)
                    {
                        var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                        EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(contentemployee, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetDepartment");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetDepartmentSections");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        DepartmentSectionsData = JsonSerializer.Deserialize<List<ViewDepartmentSections>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                 {

                     var response = await Http.GetAsync($"Utilities/GetJobType");
                     var content = await response.Content.ReadAsStringAsync();
                     if (response.IsSuccessStatusCode)
                     {
                         JobTypeData = JsonSerializer.Deserialize<List<AJobType>>(content, _options);
                     }
                 }));

                t.Add(Task.Run(async () =>
              {

                  var response = await Http.GetAsync($"HumanResource/GetJobTitle");
                  var content = await response.Content.ReadAsStringAsync();
                  if (response.IsSuccessStatusCode)
                  {
                      JobTitleData = JsonSerializer.Deserialize<List<AJobTitle>>(content, _options);
                  }
              }));

                t.Add(Task.Run(async () =>
                {

                    var response = await Http.GetAsync($"HumanResource/GetJobDescription");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        JobDescriptionData = JsonSerializer.Deserialize<List<JobDescription>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {

                    var response = await Http.GetAsync($"Utilities/GetContractLengthType");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        ContractLengthTypeData = JsonSerializer.Deserialize<List<AContractLengthType>>(content, _options);
                    }
                }));
                Task _t = Task.WhenAll(t);
                await _t;

            }            
        }
        catch(Exception ex)
        {
            throw ex;
        }

    }

    private void viewJobClick(JobOpening value)
    {
        try
        {
            SelectedJobsModel = value;
            this.Visibility = true;
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
    }

    private async void downloadJobClick(JobOpening value)
    {
        try
        {
            var _jobdesc = JobDescriptionData.FirstOrDefault(o => o.JobDescriptionId == value.JobDescriptionId);
            
            if (_jobdesc != null && !string.IsNullOrEmpty(_jobdesc.DocumentName))
            {
                var a = await _DocumentUploadModel.GetDocument(_jobdesc.DocumentName, "JobDescription");

                if (a != null && a.DocumentByte != null && a.DocumentByte.Length > 0)
                {
                    if (a.DocumentExt.Contains("pdf"))
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        await _JSRuntime.InvokeAsync<object>("saveAsFile", _jobdesc.DocumentName, base64String);
                    }
                    else
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        await _JSRuntime.InvokeAsync<object>("saveAsFile", _jobdesc.DocumentName, base64String);
                    }

                }
            }
            else
            {
                toastService.ShowError("Attachment is not provided for this position");
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    public async Task ApplyBtnclicked()
    {
        try
        {

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            
        }
    }

    public void DialogCancelBtnclicked()
    {
        this.Visibility = false;
    }
}
