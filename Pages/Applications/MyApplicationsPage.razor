@page "/MyApplicationsPage"
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Data
@using HCMIS.Interface
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;
@inject IJSRuntime JSRuntime;
@inject IAuthenticationService AuthService;
@using HCMIS.ViewModel;
@inject IToastService toastService;

<style>
    /*to remove the edit button alone*/
    .e-removeEditcommand .e-unboundcell .e-unboundcelldiv button.e-Editbutton {
        display: none;
    }

    /*to remove the delete button alone*/
    .e-removeDeletecommand .e-unboundcell .e-unboundcelldiv button.e-Deletebutton {
        display: none;
    }
</style>

<style>
   
    .headerbandimg {
        background-image: url(/image/logonhcc.png);
        background-size: 20px;
        background-repeat: no-repeat;
        width: 20px;
        height: 20px;
        margin-right: 5px;
        vertical-align: top;
        display: inline-block;
        color: whitesmoke;
    }

    .pp {
        color: ghostwhite;
        background-color: #2ecc71;
        padding: 10px;
    }

    /*Increase font size for Multi Line Text Box Place Holder*/
    .e-multi-line-input label.e-float-text {
        font-size: 17px !important;
    }
</style>

@{
    var Div = (new string[] { "DistrictId" });
}

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| MY APPLICATIONS
    </li>
</ol>

<SfGrid @ref="@DataGrid" TValue="AppliedForJobs" ID="Grid1" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true">
    
    
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <SfDataManager AdaptorInstance="@typeof(MyApplicationsAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
    </GridEditSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <GridEvents 
                RowDataBound="RowBound"
                CommandClicked="OnCommandClicked"
                TValue="AppliedForJobs">
    </GridEvents>
    <GridColumns>
        
        <GridColumn Field=@nameof(AppliedForJobs.AppliedForJobsId) HeaderText="Applied For Jobs Id" AllowEditing="false" IsPrimaryKey="true" Width="150" Visible="false"></GridColumn>
        
        <GridForeignColumn Field=@nameof(AppliedForJobs.AppliedForJobsId)
                           HeaderText="Application Ref No"
                           Width="50"
                           AllowEditing="false"
                           ForeignKeyField="@(nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId))"
                           ForeignKeyValue="@(nameof(ViewAppliedForJobsDetails2024.ApplicationJobReferenceNo))"
                           ForeignDataSource="@AppliedforJobsDetailData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>
        
        <GridForeignColumn Field=@nameof(AppliedForJobs.AppliedForJobsId)
                           HeaderText="Applicant"
                           Width="60"
                           AllowEditing="false"
                           ForeignKeyField="@(nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId))"
                           ForeignKeyValue="@(nameof(ViewAppliedForJobsDetails2024.FullName))"
                           ForeignDataSource="@AppliedforJobsDetailData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

        <GridForeignColumn Field=@nameof(AppliedForJobs.AppliedForJobsId)
                           HeaderText="Position"
                           Width="50"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId))"
                           ForeignKeyValue="@(nameof(ViewAppliedForJobsDetails2024.JobTitleDescription))"
                           ForeignDataSource="@AppliedforJobsDetailData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

        <GridForeignColumn Field=@nameof(AppliedForJobs.AppliedForJobsId)
                           HeaderText="Application Date"
                           Width="50"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId))"
                           ForeignKeyValue="@(nameof(ViewAppliedForJobsDetails2024.ApplicationDate))"
                           ForeignDataSource="@AppliedforJobsDetailData" AllowFiltering="false"
                           Format="dd/MMMM/yyyy HH:mm:ss"
                           CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

        <GridForeignColumn Field=@nameof(AppliedForJobs.AppliedForJobsId)
                           HeaderText="Application Status"
                           Width="50"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId))"
                           ForeignKeyValue="@(nameof(ViewAppliedForJobsDetails2024.ApplicationStatusDesc))"
                           ForeignDataSource="@AppliedforJobsDetailData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

        <GridColumn HeaderText="Action"
                    TextAlign="TextAlign.Center"
                    Width="50"
                    AllowEditing="aptitudebuttonbool"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })" ID="TakeTest"></GridCommandColumn>
                @*<GridCommandColumn Type="CommandButtonType.None" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-edit", CssClass = "e-flat"})" ID="TakeTest"></GridCommandColumn>*@
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    SfGrid<AppliedForJobs>? DataGrid { get; set; }
    List<ViewAppliedForJobsDetails2024>? AppliedforJobsDetailData { get; set; }
    LoginResultModel? Credentials { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    List<AJobTitle>? JobTitleData { get; set; }
    List<JobDescription>? JobDescriptionData { get; set; }
    List<ViewJobDescOpening2024>? JobOpeningData { get; set; }
    bool aptitudebuttonbool { get; set; } = false;
    /// <summary>
    /// Event for Toolbar click for Grid Exporting
    /// </summary>
    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid1_excelexport")
        {
            this.DataGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid1_pdfexport")
        {
            this.DataGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid1_csvexport")
        {
            this.DataGrid.ExportToCsvAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();


        var isAuthenticated = await AuthService.CheckAuthenticationStatus();
        if (isAuthenticated == false)
        {
            navigation.NavigateTo("/LoginPage", true);
        }

        else
        {
            Credentials = await AuthService.GetUserCredentials();
            var tasks = new List<Task>();

            tasks.Add(Task.Run(async () =>
            {

                var response = await Http.GetAsync($"HumanResource/GetAppliedForJobsDetail");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    AppliedforJobsDetailData = JsonSerializer.Deserialize<List<ViewAppliedForJobsDetails2024>>(content, _options);
                }
            }));

            tasks.Add(Task.Run(async () =>
             {

                 var response = await Http.GetAsync($"HumanResource/GetJobTitle");
                 var content = await response.Content.ReadAsStringAsync();
                 if (response.IsSuccessStatusCode)
                 {
                     JobTitleData = JsonSerializer.Deserialize<List<AJobTitle>>(content, _options);
                 }
             }));

            tasks.Add(Task.Run(async () =>
            {

                var response = await Http.GetAsync($"HumanResource/GetJobDescription");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    JobDescriptionData = JsonSerializer.Deserialize<List<JobDescription>>(content, _options);
                }
            }));

            tasks.Add(Task.Run(async () =>
            {

                var response = await Http.GetAsync($"HumanResource/GetJobOpening");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    JobOpeningData = JsonSerializer.Deserialize<List<ViewJobDescOpening2024>>(content, _options);
                }
            }));

            Task _t = Task.WhenAll(tasks);
            await _t;
        }
    }

    public async Task OnCommandClicked(CommandClickEventArgs<AppliedForJobs> args)
    {
        if (args.CommandColumn.ID == "TakeTest")
        {
            int _jobtitleid = 0;
            int _AppliedForJobsId = args.RowData.AppliedForJobsId;

            if (JobOpeningData != null && JobDescriptionData != null && JobTitleData != null)
            {
                var _jobopening = JobOpeningData.FirstOrDefault(o => o.JobOpeningId == args.RowData.JobOpeningId);
                if (_jobopening != null)
                {
                    var _jobdesc = JobDescriptionData.FirstOrDefault(o => o.JobDescriptionId == _jobopening.JobDescriptionId);
                    if (_jobdesc != null)
                    {                        
                        var _jobtitle = JobTitleData.FirstOrDefault(o => o.JobTitleId == _jobdesc.JibTitleId);
                        if(_jobtitle != null)
                        {
                            _jobtitleid = _jobtitle.JobTitleId;
                        }                       
                    }                    
                }
            }


            navigation.NavigateTo($"/ApplicantAptituddeTestPage/{_jobtitleid}/{_AppliedForJobsId}", true);
        }
    }

    public void RowBound(RowDataBoundEventArgs<AppliedForJobs> Args)
    {
        if (Args.Data.ApplicationStatusId != 4)
        {
            Args.Row.AddClass(new string[] { "e-removeEditcommand" });
        }
        // else
        // {
        //     Args.Row.AddClass(new string[] { "e-removeDeletecommand" });
        // }
    }

    public void RowDataBoundHandler(RowDataBoundEventArgs<AppliedForJobs> args)
    {
        if(args.Data.ApplicationStatusId == 4)
        {
            aptitudebuttonbool = true;
        }
        else
        {
            aptitudebuttonbool = false;            
        }
    }
    
    #region My Applications Region
    public class MyApplicationsAdapter : DataAdaptor
    {
        HttpClient Http;
        ApiConfig _ApiConfig;
        SystemSettings _SystemSettings;
        private readonly JsonSerializerOptions _options;
        public IToastService toastService;
        private readonly NavigationManager Navigation;
        IAuthenticationService _AuthService;


        public MyApplicationsAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , SystemSettings systemSettings, ApiConfig apiConfig, IAuthenticationService authservice)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _SystemSettings = systemSettings;
            _AuthService = authservice;

        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<AppliedForJobs>();

            try
            {
                int? ApplicantId = null;

                var credentials = await _AuthService.GetUserCredentials();
                if (credentials != null)
                {
                    ApplicantId = credentials.StaffId;
                }


                var response = await Http.GetAsync($"HumanResource/GetMyApplications?ApplicantId={ApplicantId}");
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    toastService.ShowError(response.ReasonPhrase);
                }
                data = JsonSerializer.Deserialize<List<AppliedForJobs>>(content, _options);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<AppliedForJobs>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

    }


    #endregion My Applications Region



}

