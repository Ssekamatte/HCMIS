@page "/AvailableJobsPage"
@using HCMIS.Interface
@using HCMIS.Model;
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Collections
@inject HttpClient Http
@inject AppState AppState
@inject ApiConfig _ApiConfig;
@inject IToastService toastService;
@inject IAuthenticationService AuthService;
@inject NavigationManager navManager;
@inject IJSRuntime JSRuntime;
@inject DocumentUploadModel _DocumentUploadModel;

<style>
    /*Submit Button color on hover*/
    .e-btn.e-success:hover, .e-css.e-btn.e-success:hover 
    {
        background: lightgreen;
        border-color: #0a5f0a;
        box-shadow: 0 0 rgba(0,0,0,0);
        color: #fff;
    }

    /*Responsive HTML Table*/
    table.center {
  margin-left: auto; 
  margin-right: auto;
}

    table, th, td {
        border-collapse: collapse;
        border-spacing: 0;
        width: auto;
        border: 1px solid #ddd;

        border: 1px solid black;
        border-collapse: collapse;

        text-align: left;
        padding: 8px;

        margin-left: 60px;
        margin-right: 20px;
    }
    tr:nth-child(even) {
        background-color: #f2f2f2
    }

    /*Responsive HTML Table*/

	#target {
			max-height: 800px;
			height: 400px;
	}

    h3 {
        color: ghostwhite;
        background-color: #00cc00;
        padding: 10px;
        width: 100%;
        font-size: large;
    }

    li{
        margin: 0px 0px 4px;
        line-height: 1.8;
        color: rgb(102, 102, 102);
        font-family: "Open Sans", sans-serif;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        text-indent: 0px;
        white-space: normal;
       /* background-color: rgb(255, 255, 255);*/
        text-align: justify;
    }
    p{
        margin: 0px 0px 4px;
        line-height: 1.8;
        color: rgb(102, 102, 102);
        font-family: "Open Sans", sans-serif;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        text-indent: 0px;
        white-space: normal;
       /* background-color: rgb(255, 255, 255);*/
        text-align: justify;
    }
    h5{
        color:#06c;
    }
    label{
        margin-top:15px;
    }

    ul.e-list-parent .e-ul >li {
        min-height:10vh;
    }
</style>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
@* <BreadcrumbPage CategoryName="Applications" PageName="Available Jobs" /> *@

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| AVAILABLE JOBS
    </li>
</ol>

<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <div style="padding:10px;">
                            <EditForm Model="@InputModel" OnValidSubmit="@SearchRecords">
                                <div class="row">
                                    <div class="col-md-12">
                                        <p>Department</p>
                                        <SfMultiSelect @bind-Value="@InputModel.DepartmentId" TValue="int?[]" TItem="ADepartment" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@DepartmentData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search District" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(ADepartment.DepartmentId)" Text="@nameof(ADepartment.DepartmentDescription)"></MultiSelectFieldSettings>
                                            @* <MultiSelectEvents TValue="int?[]" TItem="ADepartment" ValueChange="OnDistrictChange"></MultiSelectEvents> *@
                                        </SfMultiSelect>
                                    </div>
                                    <div class="col-md-12" style="padding-top:10px;">
                                        <SfButton CssClass="e-success" data-ripple="true" style="margin-right:10px;">Search</SfButton>
                                        <SfButton CssClass="e-danger" data-ripple="true" @onclick="ClearSearchBtnClick">Clear Search</SfButton>
                                    </div>
                                    <div class="form-group col-md-12">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>

    </div>
</div>

<div class="row">
    @* <div class="col-md-12">
        <div class="row" style="margin:10px;">
            <div class="col-md-12">
                <input class="form-control" type="text" placeholder="search department / Job Title" style="margin-bottom:10px;" @oninput="@FilterChangedAsync" />
            </div>
            <div class="col-md-12">

            </div>
        </div>
    </div> *@

    @if (availableJobsModel != null && availableJobsModel.Count > 0 && JobDecriptionModel != null && JobDecriptionModel.Count > 0)
    {
        var listData = JobDecriptionModel.Skip(SkipValue).Take(TakeValue).ToList();
        <div class="col-md-12">
            <SfListView TValue="ViewAvailableJobs" DataSource="@listData" EnableVirtualization="false" CssClass="e-list-template">
                <ListViewFieldSettings Id="JobDescriptionId" Text="JobTitleDescription" GroupBy="DepartmentDescription" TValue="ViewAvailableJobs" />
                <ListViewTemplates TValue="ViewAvailableJobs">
                    <Template>
                        @{
                            var data = (context as ViewAvailableJobs);
                        }
                        <div class="row" style="margin:10px; border-color:gray; border-style:solid; border-width:1px;">
                            <div class="col-md-5" style="padding:10px;">
                                <h5>@data.JobTitleDescription?.Replace("(1)","")</h5>
                                <p>Ref No: @data.ReferenceNumber</p>
                                <p>Job Type: @data.TypeDescription</p>
                                <p>Reports To: @data.ReportsToDesc?.Replace("(1)","")</p>
                            </div>
                            <div class="col-md-4" style="padding:10px;">
                                @if(data.JobTypeId==3){
                                    <p>contract length: @data.ContractLength @data.ContractLengthTypeDesc</p>
                                }
                                <p>Salary Scale: @data.SalaryScaleDescription</p>
                                <p>Vacancies: @data.Vacancies</p>
                                <p>Deadline: @data.ApplicationClosingDate.Value.ToString("dd MMMM yyyy") at @data.ApplicationClosingDate.Value.ToString("hh:mm tt")</p>
                            </div>

                             @* <div class="col-md-3" style="padding:10px;">
                                <button class="btn btn-primary" @onclick=@(()=>{viewJobClick(data);})><i class="oi oi-eye"></i> View Job</button>
                            </div> *@

                            @if (AppliedForJobsData != null && Credentials != null)
                            {
                                //For non staff
                                if(Credentials.UserRole == "Non-Staff")
                                {
                                    var nonstaffjobs = AppliedForJobsData.FirstOrDefault(o=>o.NonStaffid == Credentials.StaffId && o.JobOpeningId == data.JobOpeningId);
                                    if(nonstaffjobs != null)
                                    {
                                        <div class="col-md-3" style="padding:10px;font-size:small;">
                                            <h5 style="background-color:green;color:white;font-size:smaller;height: 20px;border-radius: 160px;">You applied for this job on: @nonstaffjobs.ApplicationDate.Value.ToString("dd/MM/yyyy  HH:mm:ss")</h5>
                                        </div>                                        
                                    }
                                    else
                                    {
                                        <div class="col-md-3" style="padding:10px;">
                                            <button class="btn btn-success" @onclick=@(()=>{downloadJobClick(data);})><i class="oi oi-cloud-download"></i> Download</button>

                                            <button class="btn btn-primary" @onclick=@(()=>{viewJobClick(data);})><i class="oi oi-eye"></i> View Job</button>
                                        </div>
                                    }
                                }
                                //For continuing employees
                                else
                                {
                                    var nonstaffjobs = AppliedForJobsData.FirstOrDefault(o => o.Employeeid == Credentials.StaffId && o.JobOpeningId == data.JobOpeningId);
                                    if (nonstaffjobs != null)
                                    {
                                        <div class="col-md-3" style="padding:10px;font-size:small;">
                                            <h5 style="background-color:green;color:white;font-size:smaller;height: 20px;border-radius: 160px;">You applied for this job on: @nonstaffjobs.ApplicationDate.Value.ToString("dd/MM/yyyy  HH:mm:ss")</h5>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-md-3" style="padding:10px;">
                                            <button class="btn btn-primary" @onclick=@(()=>{viewJobClick(data);})><i class="oi oi-eye"></i> View Job</button>
                                        </div>
                                    }
                                }
                            }     
                            else
                            {
                                <div class="col-md-3" style="padding:10px;">
                                    <button class="btn btn-primary" @onclick=@(()=>{viewJobClick(data);})><i class="oi oi-eye"></i> View Job</button>
                                </div>
                            }

                        </div>
                    </Template>
                    <GroupTemplate>
                        <div>
                            <span class="category">@context.Text</span>
                        </div>
                    </GroupTemplate>
                </ListViewTemplates>
            </SfListView>
        </div>
        <div class="col-md-12">
            <SfPager @ref="@Page" PageSize=5 NumericItemsCount=4 TotalItemsCount=@JobDecriptionModel.Count ItemClick="PaggerClick">
            </SfPager>
        </div>
    }
    else
    {
        if(IsPageLoaded==false){
            <div class="col-md-12">
                <div class="loader">
                    <div class="loader--dot"></div>
                    <div class="loader--dot"></div>
                    <div class="loader--dot"></div>
                    <div class="loader--dot"></div>
                    <div class="loader--dot"></div>
                    <div class="loader--dot"></div>
                    <div class="loader--text"></div>
                </div>
            </div>
        }
        else
        {
            <p class="alert-info" style="padding:10px;">There are no available jobs.</p>
        }
        
            
    }
    <div class="col-md-12">
        <SfDialog  Width="98%" ShowCloseIcon="true" @bind-Visible="Visibility" AllowDragging="true" EnableResize="true" IsModal="true">
            <DialogEvents OnOpen="@DialogOpen" Closed="@DialogClose"></DialogEvents>
            <DialogTemplates>
                <Header>Job Details</Header>	
                <Content>                   

                    @if(SelectedJobsModel != null)
                    {
                        <div style="overflow-x:auto;">
                            <table  class="center">
                                <tr>
                                    <td colspan="2" style="text-align: center;font-size: large;font-weight: bold;">
                                        <img src="/Image/logonhcc.png" width="40" height="25" /> NATIONAL HOUSING AND CONSTRUCTION COMPANY LIMITED
                                    </td>
                                </tr>
                                <tr style="font-weight: bold;">
                                    <td>Post:</td>
                                    <td style="font-weight:bold">@SelectedJobsModel.viewAvailableJobs?.JobTitleDescription?.Replace("(1)", "") - @SelectedJobsModel.viewAvailableJobs?.Vacancies Post(s) - @SelectedJobsModel.viewAvailableJobs?.ReferenceNumber </td>
                                </tr>

                                <tr style="font-weight: bold;">
                                    <td>Reports To:</td>
                                    <td>@SelectedJobsModel.viewAvailableJobs?.ReportsToDesc</td>
                                </tr>

                                <tr style="font-weight: bold;">
                                    <td>Responsible For:</td>
                                    <td>@SelectedJobsModel.viewAvailableJobs?.ResponsibleFor</td>
                                </tr>

                                <tr style="font-weight: bold;">
                                    <td>Job Purpose:</td>
                                    <td>@SelectedJobsModel.viewAvailableJobs?.OtherRequirements</td>
                                </tr>

                                <tr style="font-weight: bold;">
                                    <td>Key Duties and Responsibilities:</td>
                                    <td>@((MarkupString)SelectedJobsModel.viewAvailableJobs?.JobDescription)</td>
                                </tr>

                                <tr style="font-weight: bold;">
                                    <td>Relevant Competencies:</td>
                                    <td> @SelectedJobsModel.viewAvailableJobs?.RequiredWorkExperience?.Replace("(1)","")</td>
                                </tr>
                            </table>
                        </div>

                        <div>
                            <SfDialog @ref=@ApplicationDialog Width="90%" Height="98vh" ShowCloseIcon="true" Visible=false AllowDragging="true" EnableResize="true"
                                      IsModal="true">
                                <DialogTemplates>
                                    <Header>@SelectedJobsModel.viewAvailableJobs?.JobTitleDescription?.Replace("(1)", "")</Header>
                                    <Content>
                                        @if (appliedForJobsModel != null)
                                        {
                                            if (appliedForJobsModel.appliedForJobs != null)
                                            {
                                                @* var _minimum = LevelofEducationData.FirstOrDefault(o=>o.LevelofEducationId == @SelectedJobsModel.viewAvailableJobs?.); *@
                                                <div class="row">

                                                    <div class="col-md-12" style="margin-top:10px;">
                                                        @if (!string.IsNullOrEmpty(ErrorMessage))
                                                        {
                                                            <p class="alert alert-danger">
                                                                @((MarkupString)ErrorMessage)
                                                            </p>
                                                        }
                                                    </div>

                                                    <div class="col-md-6">
                                                        <p>DO YOU HAVE (A) @SelectedJobsModel.viewAvailableJobs?.LevelofEducationDesc.ToUpper() <span style="color:red;">*</span></p>
                                                        <SfRadioButton Label="Yes" Name="options" Value="true" TChecked="bool?" ValueChange="OnValueChange" @bind-Checked="@(appliedForJobsModel.appliedForJobs.HasMinimumLevelofEducation)"></SfRadioButton>
                                                        <SfRadioButton Label="No" Name="options" Value="false" TChecked="bool?" ValueChange="OnValueChange" @bind-Checked="@(appliedForJobsModel.appliedForJobs.HasMinimumLevelofEducation)"></SfRadioButton>
                                                    </div>

                                                    @if(appliedForJobsModel.appliedForJobs.HasMinimumLevelofEducation == true)
                                                    {
                                                        <div class="col-md-6">
                                                            <p>Level of Education<span style="color:red;">*</span></p>
                                                            <SfDropDownList @bind-Value="@(appliedForJobsModel.appliedForJobs.MinimumLevelOfEducationId)" TItem="ALevelofEducation" TValue="int?" Width="100%" PopupHeight="230px" DataSource="@LevelofEducationData" Placeholder="Please Select">
                                                                <DropDownListFieldSettings Text="LevelofEducationDesc" Value="LevelofEducationId"></DropDownListFieldSettings>
                                                            </SfDropDownList>
                                                        </div>
                                                    }                                                    

                                                    <div class="col-md-6">
                                                        <p>Years of Experience<span style="color:red;">*</span></p>
                                                        <SfDropDownList @bind-Value="@(appliedForJobsModel.appliedForJobs.MinimumYearsofExperience)" TItem="AYearsofExperience" TValue="double?" Width="100%" PopupHeight="230px" DataSource="@YearsofExperienceData" Placeholder="Please Select">
                                                            <DropDownListFieldSettings Text="YearsofExperienceDesc" Value="YearsofExperienceId"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                        
                                                    </div>

                                                    <div class="col-md-6">
                                                        <p>ARE YOU RELATED TO ANY STAFF OF THE COMPANY? <span style="color:red;">*</span></p>
                                                        <SfDropDownList @bind-Value="@(appliedForJobsModel.appliedForJobs.AreYouRelatedToAnyCompanyStaff)" TItem="AYesNo" TValue="int?" Width="100%" PopupHeight="230px" DataSource="@YesNoData">
                                                            <DropDownListFieldSettings Text="@(nameof(AYesNo.YesNoDesc))" Value="@(nameof(AYesNo.YesNoId))"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </div>
                                                    @* <div class="col-md-6">
                                                        <p>NUMBER OF CHILDREN</p>
                                                        <SfNumericTextBox @bind-Value="@(appliedForJobsModel.appliedForJobs.NoOfChildren)" TValue="int?" Width="100%" Format="N0" Placeholder="Children" Step="1" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                    </div> *@
                                                    <div class="col-md-6">
                                                        <p>
                                                            HAVE YOU PREVIOUSLY APPLIED FOR APPOINTMENT TO THE
                                                            SERVICE OF THE COMPANY FOR ANY OTHER VACANCY?<span style="color:red;">*</span>
                                                        </p>
                                                        <SfDropDownList @bind-Value="@(appliedForJobsModel.appliedForJobs.PreviouslyAppliedForAjob)" TItem="AYesNo" TValue="int?" Width="100%" PopupHeight="230px" DataSource="@YesNoData">
                                                            <DropDownListFieldSettings Text="@(nameof(AYesNo.YesNoDesc))" Value="@(nameof(AYesNo.YesNoId))"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </div>
                                                    @if (appliedForJobsModel.appliedForJobs.PreviouslyAppliedForAjob == 1)
                                                    {
                                                        <div class="col-md-12">
                                                            <p>IF SO GIVE BRIEF DETAILS OF THE APPOINTMENT</p>
                                                            <SfTextBox Multiline=true @bind-Value="@(appliedForJobsModel.appliedForJobs.AppointmentDetail)" Width="100%" Placeholder="Give a brief narrative" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                        </div>
                                                    }
                                                    <div class="col-md-12">
                                                        <p>
                                                            PERSONAL REFEREES <span style="color:red;">*</span>: (Give atleast two responsible and
                                                            professional persons who know you well, either in private or public life. Names of
                                                            candidate’s relatives should not be given)
                                                        </p>
                                                    </div>

                                                    <div class="col-md-12">
                                                        <SfGrid @ref="@JobRefereesGrid" TValue="AppliedForJobReferees" DataSource="@appliedForJobsModel.appliedForJobReferees"
                                                                AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true"
                                                                Toolbar="@(new List<string>() {"Add","Cancel"})">
                                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                            <GridPageSettings PageSizes="true"></GridPageSettings>
                                                            <GridEvents OnActionComplete="@OnJobRefereesActionComplete"
                                                                        OnActionBegin="OnJobRefereesActionBegin"
                                                                        CommandClicked="OnCommandClicked"
                                                                        OnBatchAdd="BatchAddHandler"
                                                                        TValue="AppliedForJobReferees">
                                                            </GridEvents>
                                                            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                                            <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                                                                <HeaderTemplate>
                                                                    @{
                                                                        var text = GetJobRefereesHeader((context as AppliedForJobReferees));
                                                                        <div class="headerbandimg">
                                                                            <span>@text</span>
                                                                        </div>
                                                                    }
                                                                </HeaderTemplate>
                                                                <Template>
                                                                    @{
                                                                        var ReferenceReviewData = (context as AppliedForJobReferees);
                                                                        if (ReferenceReviewData != null)
                                                                        {
                                                                            <div class="row">
                                                                                <div class="col-md-6">
                                                                                    <p>Name <span style="color:red;">*</span></p>
                                                                                    <SfTextBox Multiline=true @bind-Value="@(ReferenceReviewData.RefereeName)" Width="100%" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                </div>
                                                                                @*<div class="col-md-4">
                                                                                    <p>Gender <span style="color:red;">*</span></p>
                                                                                    <SfDropDownList @bind-Value="@(ReferenceReviewData.GenderId)" Enabled="true" TItem="AGender" TValue="int?" DataSource="@GenderData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                                        <DropDownListFieldSettings Value="@nameof(AGender.GenderId)" Text="@nameof(AGender.GenderDesc)"></DropDownListFieldSettings>
                                                                                    </SfDropDownList>
                                                                                </div>*@
                                                                                @*<div class="col-md-4">
                                                                                    <p>Nationality</p>
                                                                                    <SfDropDownList @bind-Value="@(ReferenceReviewData.CoutryId)" Enabled="true" TItem="ACountry" TValue="int?" DataSource="@CountryData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                                        <DropDownListFieldSettings Value="@nameof(ACountry.CoutryId)" Text="@nameof(ACountry.CountryDesc)"></DropDownListFieldSettings>
                                                                                    </SfDropDownList>
                                                                                </div>*@
                                                                                @*<div class="col-md-4">
                                                                                    <p>Title of the Current Job <span style="color:red;">*</span></p>
                                                                                    <SfTextBox Multiline=true @bind-Value="@(ReferenceReviewData.RefereeJobTitle)" Width="100%" Placeholder="Enter Title" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                </div>*@
                                                                                <div class="col-md-6">
                                                                                    <p>Current Organisation Name</p>
                                                                                    <SfTextBox Multiline=true @bind-Value="@(ReferenceReviewData.RefereeCompany)" Width="100%" Placeholder="Enter Organisation" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                    <p>Email <span style="color:red;">*</span></p>
                                                                                    <SfTextBox Multiline=false @bind-Value="@(ReferenceReviewData.RefereeEmail)" Width="100%" Placeholder="Enter Email" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                    <p>Phone Number <span style="color:red;">*</span></p>
                                                                                    <SfNumericTextBox @bind-Value="@(ReferenceReviewData.RefereePhoneNumber)" Width="100%" Placeholder="Phone Number" FloatLabelType="FloatLabelType.Never" Format="##" Decimals="0"></SfNumericTextBox>
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                    <p>Other Phone Number</p>
                                                                                    <SfNumericTextBox @bind-Value="@(ReferenceReviewData.RefereeOtherPhoneNumber)" Width="100%" Placeholder="Mobile" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                                                </div>
                                                                                @*<div class="col-md-4">
                                                                                    <p>Physical Address</p>
                                                                                    <SfTextBox Multiline=true @bind-Value="@(ReferenceReviewData.RefereePhysicalAddress)" Width="100%" Placeholder="Enter Address" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                </div>*@
                                                                            </div>
                                                                        }
                                                                    }
                                                                </Template>
                                                            </GridEditSettings>
                                                            <GridColumns>
                                                                <GridColumn HeaderText="Action"
                                                                            TextAlign="TextAlign.Center"
                                                                            Width="80"
                                                                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                                                                    <GridCommandColumns>
                                                                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-edit", CssClass = "e-flat"})"></GridCommandColumn>
                                                                        @* <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-delete", CssClass = "e-flat"})" ID="Delete"></GridCommandColumn> *@
                                                                    </GridCommandColumns>
                                                                </GridColumn>
                                                                @* <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn> *@
                                                                <GridColumn Field=@nameof(AppliedForJobReferees.AppliedForRefereeId) Visible=false HeaderText="JobDescriptionId" AllowEditing="false" IsPrimaryKey="true" Width="150"></GridColumn>
                                                                <GridColumn Field=@nameof(AppliedForJobReferees.AppliedForJobsId) Visible=false HeaderText="AppliedForJobsId" AllowEditing="false" Width="150"></GridColumn>
                                                                <GridColumn Field=@nameof(AppliedForJobReferees.RefereeName) Visible=true HeaderText="Name" AllowEditing="true" Width="150"></GridColumn>
                                                                @* <GridForeignColumn Field=@nameof(AppliedForJobReferees.GenderId) Visible=true HeaderText="Gender" AllowEditing="true" Width="100" ForeignKeyField="@(nameof(AGender.GenderId))" ForeignKeyValue="@(nameof(AGender.GenderDesc))" ForeignDataSource="@GenderData"></GridForeignColumn>
                                                                <GridForeignColumn Field=@nameof(AppliedForJobReferees.CoutryId) Visible=true HeaderText="Nationality" AllowEditing="true" Width="120" ForeignKeyField="@(nameof(ACountry.CoutryId))" ForeignKeyValue="@(nameof(ACountry.CountryDesc))" ForeignDataSource="@CountryData"></GridForeignColumn> *@
                                                                @* <GridColumn Field=@nameof(AppliedForJobReferees.RefereeJobTitle) Visible=true HeaderText="Title" AllowEditing="true" Width="150"></GridColumn> *@
                                                                <GridColumn Field=@nameof(AppliedForJobReferees.RefereeCompany) Visible=true HeaderText="Company" AllowEditing="true" Width="150"></GridColumn>
                                                                <GridColumn Field=@nameof(AppliedForJobReferees.RefereeEmail) Visible=true HeaderText="Email" AllowEditing="true" Width="150"></GridColumn>
                                                                <GridColumn Field=@nameof(AppliedForJobReferees.RefereePhoneNumber) Visible=true HeaderText="Offical Phone Number" AllowEditing="true" Width="150"></GridColumn>
                                                                @* <GridColumn Field=@nameof(AppliedForJobReferees.RefereePhysicalAddress) Visible=true HeaderText="Physical Address" AllowEditing="true" Width="150"></GridColumn> *@
                                                                
                                                            </GridColumns>
                                                        </SfGrid>
                                                    </div>
                                                    
                                                    <div class="col-md-12">
                                                        <p>HAVE YOU EVER BEEN CONVICTED?<span style="color:red;">*</span></p>
                                                        <SfDropDownList @bind-Value="@(appliedForJobsModel.appliedForJobs.EverBeenConvicted)" TItem="AYesNo" TValue="int?" Width="100%" PopupHeight="230px" DataSource="@YesNoData">
                                                            <DropDownListFieldSettings Text="@(nameof(AYesNo.YesNoDesc))" Value="@(nameof(AYesNo.YesNoId))"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </div>
                                                    
                                                    @if (appliedForJobsModel.appliedForJobs.EverBeenConvicted == 1)
                                                    {
                                                        <div class="col-md-12">
                                                            <p>
                                                                IF SO GIVE DETAILS OF THE
                                                                OFFENCE (S)<span style="color:red;">*</span>
                                                            </p>
                                                            <SfTextBox Multiline=true @bind-Value="@(appliedForJobsModel.appliedForJobs.ConvictionReason)" Width="100%" Placeholder="Give a brief narrative" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                        </div>
                                                    }

                                                    <div class="col-md-12" style="margin-top:10px;">
                                                        <p>Confirm</p>
                                                        <SfCheckBox @bind-Checked=@appliedForJobsModel.appliedForJobs.InformationAcknowledgement LabelPosition="Syncfusion.Blazor.Buttons.LabelPosition.After" Label="I hereby certify that to the best of my knowledge and belief, the particulars given in this form are true and complete in all aspects."></SfCheckBox>
                                                    </div>

                                                    @* <button @onclick="OnButtonClick" class="btn btn-primary">Click Button</button> *@
                                                </div>
                                            }
                                        }
                                    </Content>
                                    <FooterTemplate>
                                        @if (appliedForJobsModel != null && appliedForJobsModel.appliedForJobs != null && appliedForJobsModel.appliedForJobs.InformationAcknowledgement == true)
                                        {
                                            <SfButton CssClass="e-success" @onclick="@onSubmitApplication">Submit Application</SfButton>
                                        }
                                        <SfButton @onclick="@DialogCancelBtnclicked" CssClass="e-danger">Cancel</SfButton>
                                    </FooterTemplate>
                                </DialogTemplates>
                            </SfDialog>
                        </div>
                    }
                </Content>
                <FooterTemplate>
                    <button  @onclick="@ApplyBtnclicked" class="btn btn-primary" data-ripple="true">Apply for this job</button>
                    <button  @onclick="@DialogCancelBtnclicked" class="btn btn-danger" data-ripple="true">Cancel</button>
                </FooterTemplate>
            </DialogTemplates>
            <DialogPositionData X="center" Y="center"></DialogPositionData>
        </SfDialog>
    </div>
</div>


@*Confirm Deletion*@

<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationDeleteDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationApproveYes" />
            <DialogButton Content="No" OnClick="@ComfirmationApproveNo" />
        </DialogButtons>
    </SfDialog>
</div>
@*Saving Dialogue*@

@*Saving Dialogue*@
<div class="form-group col-md-12">
    <SfDialog Width="80%" Height="20vh" AllowDragging=true EnableResize=true
              CloseOnEscape=false IsModal=true ShowCloseIcon=false
              Target=".mainbody" @ref=@SavingDialog Visible=false>
        <DialogTemplates>
            <Content>
                <div class="dialogContent">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader-Saving-text"></div>
                    </div>
                    @*<p>Saving Record please wait......</p>*@
                </div>
            </Content>
        </DialogTemplates>
    </SfDialog>
</div>



@code {
    private bool Visibility { get; set; } = false;
    private bool ShowButton { get; set; } = false;
    private bool IsPageLoaded { get; set; } = false;
    private void DialogOpen(Object args)
    {
        this.ShowButton = false;
    }
    private void DialogClose(Object args)
    {
        this.ShowButton = true;
    }
    SfDialog? ApplicationDialog { get; set; }

    SfPager? Page;
    SfToast? ToastObj;
    private string ToastPosition = "Right";
    string? ErrorMessage { get; set; }
    List<AYesNo>? YesNoData{ get; set; }
    List<ACountry>? CountryData{ get; set; }
    List<AGender>? GenderData{ get; set; }
    List<ViewAvailableJobs>? JobDecriptionModel { get; set; } = new List<ViewAvailableJobs>();
    List<AvailableJobsModel>? availableJobsModel { get; set; } = new List<AvailableJobsModel>();
    AvailableJobsModel? SelectedJobsModel { get; set; } = new();
    AppliedForSaveModel appliedForJobsModel { get; set; } = new();
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "40vh", Width = "80%" };
    public int SkipValue { get; set; }
    public int pageSize { get; set; }
    public int TakeValue { get; set; } = 5;
    private UtilitiesSearchPanel InputModel = new();
    List<ADepartment>? DepartmentData { get; set; }
    List<AppliedForJobs>? AppliedForJobsData { get; set; }
    SfGrid<AppliedForJobReferees>? JobRefereesGrid;
    SfDialog ConfirmationDeleteDialogue;
    string ConfirmationText { get; set; }
    AppliedForJobReferees selectedemployee { get; set; }
    SfDialog SavingDialog { get; set; }
    LoginResultModel? Credentials { get; set; }
    List<ALevelofEducation>? LevelofEducationData { get; set; }
    List<AYearsofExperience>? YearsofExperienceData { get; set; }
    public bool? radiovalue;
    int random = -9999;

    private async void OnButtonClick()
    {
        await JSRuntime.InvokeVoidAsync("OnScrollEvent");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            await base.OnInitializedAsync();
            IsPageLoaded = false;
            await SearchRecords();

            var isAuthenticated = await AuthService.CheckAuthenticationStatus();
            if (isAuthenticated == false)
            {
                navManager.NavigateTo("/LoginPage", true);
            }

            else
            {
                Credentials = await AuthService.GetUserCredentials();

                var tasks = new List<Task>();
                tasks.Add(Task.Run(async () =>
               {

                   var response = await Http.GetAsync($"Utilities/GetCountry");
                   var content = await response.Content.ReadAsStringAsync();
                   if (response.IsSuccessStatusCode)
                   {
                       CountryData = JsonSerializer.Deserialize<List<ACountry>>(content, _options);
                   }
               }));
                tasks.Add(Task.Run(async () =>
                {

                    var response = await Http.GetAsync($"Utilities/GetGender");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        GenderData = JsonSerializer.Deserialize<List<AGender>>(content, _options);
                    }
                }));
                //  tasks.Add(Task.Run(async () =>
                // {

                //     var response = await Http.GetAsync($"HumanResource/GetAvailableJobs");
                //     var content = await response.Content.ReadAsStringAsync();
                //     if (response.IsSuccessStatusCode)
                //     {
                //         availableJobsModel = JsonSerializer.Deserialize<List<AvailableJobsModel>>(content, _options);
                //         if (availableJobsModel != null && availableJobsModel.Count > 0)
                //         {
                //             foreach (var item in availableJobsModel)
                //             {
                //                 JobDecriptionModel?.Add(item.viewAvailableJobs);
                //             }
                //         }
                //     }
                // }));
                tasks.Add(Task.Run(async () =>
                {

                    var response = await Http.GetAsync($"Utilities/GetYesNo");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        YesNoData = JsonSerializer.Deserialize<List<AYesNo>>(content, _options);
                    }
                }));

                tasks.Add(Task.Run(async () =>
               {

                   var response = await Http.GetAsync($"Utilities/GetDepartment");
                   var content = await response.Content.ReadAsStringAsync();
                   if (response.IsSuccessStatusCode)
                   {
                       DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(content, _options);
                   }
               }));

                tasks.Add(Task.Run(async () =>
                 {
                     //Get Non Staff
                     if (Credentials.UserRole == "Non-Staff")
                     {
                         var response = await Http.GetAsync($"HumanResource/GetAppliedForJobsForNonStaffApplicant/{Credentials.StaffId}");
                         if (response.IsSuccessStatusCode)
                         {
                             var content = await response.Content.ReadAsStringAsync();
                             AppliedForJobsData = JsonSerializer.Deserialize<List<AppliedForJobs>>(content, _options);
                         }
                     }
                     //Get Continuing Staff
                     else
                     {
                         var response = await Http.GetAsync($"HumanResource/GetAppliedForJobsForEmployeeApplicant/{Credentials.StaffId}");
                         if (response.IsSuccessStatusCode)
                         {
                             var content = await response.Content.ReadAsStringAsync();
                             AppliedForJobsData = JsonSerializer.Deserialize<List<AppliedForJobs>>(content, _options);
                         }
                     }

                 }));

                tasks.Add(Task.Run(async () =>
               {

                   var response = await Http.GetAsync($"Utilities/GetLevelofEducation");
                   var content = await response.Content.ReadAsStringAsync();
                   if (response.IsSuccessStatusCode)
                   {
                       LevelofEducationData = JsonSerializer.Deserialize<List<ALevelofEducation>>(content, _options);
                   }
               }));

                tasks.Add(Task.Run(async () =>
              {

                  var response = await Http.GetAsync($"Utilities/GetYearsofExperience");
                  var content = await response.Content.ReadAsStringAsync();
                  if (response.IsSuccessStatusCode)
                  {
                      YearsofExperienceData = JsonSerializer.Deserialize<List<AYearsofExperience>>(content, _options);
                  }
              }));

                Task t = Task.WhenAll(tasks);
                await t;

            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally{
            IsPageLoaded = true;
        }
    }

    private void OnValueChange(ChangeArgs<bool?> args)
    {
        radiovalue = args.Value;
    }

    // private void SearchRecords()
    private async Task SearchRecords()
    {
        try
        {
            JobDecriptionModel = new ();

            var tasks = new List<Task>();

            tasks.Add(Task.Run(async () =>
           {

               var response = await Http.GetAsync($"HumanResource/GetAvailableJobs");
               var content = await response.Content.ReadAsStringAsync();
               if (response.IsSuccessStatusCode)
               {
                   List<ViewAvailableJobs> _availablejobs = new List<ViewAvailableJobs>();

                   availableJobsModel = JsonSerializer.Deserialize<List<AvailableJobsModel>>(content, _options);
                   if (availableJobsModel != null && availableJobsModel.Count > 0)
                   {                       
                       // foreach (var item in availableJobsModel.Where(o=>(InputModel.DepartmentId == null || InputModel.DepartmentId.Any(a => a == o.viewAvailableJobs.DepartmentId))))
                       // {
                       //     JobDecriptionModel?.Add(item.viewAvailableJobs);
                       // }

                       foreach (var item in availableJobsModel)
                       {
                           JobDecriptionModel?.Add(item.viewAvailableJobs);
                       }

                       JobDecriptionModel.Where(o => (InputModel.DepartmentId == null || InputModel.DepartmentId.Any(a => a == o.DepartmentId)));
                   }
               }
           }));

            Task t = Task.WhenAll(tasks);
            await t;
        }

        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
    }

    private void ClearSearchBtnClick()
    {
        InputModel = new();
        JobDecriptionModel = new();
    }

    private void FilterChangedAsync(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        //SearchText = args.Value.ToString();
        //.ToLower().IndexOf(args.Value.ToString().ToLower(), StringComparison.OrdinalIgnoreCase) >= 0)
    }

    private async void downloadJobClick(ViewAvailableJobs value)
    {
        try
        {
            if (!string.IsNullOrEmpty(value.DocumentName))
            {
                var a = await _DocumentUploadModel.GetDocument(value.DocumentName, "JobDescription");

                if (a != null && a.DocumentByte != null && a.DocumentByte.Length > 0)
                {
                    if (a.DocumentExt.Contains("pdf"))
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        JSRuntime.InvokeAsync<object>("saveAsFile", value.DocumentName, base64String);
                    }
                    else
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        JSRuntime.InvokeAsync<object>("saveAsFile", value.DocumentName, base64String);
                    }

                }
            }
            else
            {
                toastService.ShowError("Attachment is not provided for this position");
            }

        }
        catch(Exception ex)
        {
            throw ex;
        }
    }

    private void viewJobClick(ViewAvailableJobs value)
    {
        try
        {
            SelectedJobsModel = availableJobsModel?.FirstOrDefault(o => o.viewAvailableJobs?.JobDescriptionId == value.JobDescriptionId);
            this.Visibility = true;
        } 
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
    }
    public void PaggerClick(Syncfusion.Blazor.Navigations.PagerItemClickEventArgs args)
    {
        SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
        TakeValue = Page.PageSize;
        //StateHasChanged();
    }
    public async Task ApplyBtnclicked()
    {
        try
        {
            appliedForJobsModel.appliedForJobs = new();
            appliedForJobsModel.appliedForJobReferees = new();
            appliedForJobsModel.appliedForJobs.JobOpeningId = SelectedJobsModel.viewAvailableJobs.JobOpeningId;
            appliedForJobsModel.appliedForJobs.ApplicationDate = DateTime.Now;
            appliedForJobsModel.appliedForJobs.ApplicationStatusId = 1;

            if (Credentials != null && Credentials.UserRole == "Non-Staff")
            {
                appliedForJobsModel.appliedForJobs.NonStaffid = Credentials.StaffId;
            }
            else
            {
                appliedForJobsModel.appliedForJobs.Employeeid = Credentials.StaffId;
            }
        }
        catch(Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await ApplicationDialog.ShowAsync();
        }
    }
    public void DialogCancelBtnclicked(){
        ApplicationDialog.HideAsync();
        this.Visibility = false;
    }
    public async Task onSubmitApplication()
    {
        try
        {
            string? error = string.Empty;
            var data = appliedForJobsModel.appliedForJobs;
            if (data.AreYouRelatedToAnyCompanyStaff == null || data.EverBeenConvicted == null
                || data.InformationAcknowledgement == false || /* data.NoOfChildren==null || */ data.PreviouslyAppliedForAjob==null)
            {
                await JSRuntime.InvokeVoidAsync("OnScrollEvent");
                //await JSRuntime.InvokeVoidAsync("topFunction");OnScrollEvent

                error = "<ul>";
                if(data.AreYouRelatedToAnyCompanyStaff == null)
                {
                    error += $"<li>Please select to indicate whether you are related to any staff in the company or not. </li>";
                }
                if(data.EverBeenConvicted == null)
                {
                    error += $"<li>Please select to indicate whether you have ever been convincted or not. </li>";
                }
                // if(data.NoOfChildren == null)
                // {
                //     error += $"<li>Please enter the number of children you have. </li>";
                // }
                if(data.PreviouslyAppliedForAjob == null)
                {
                    error += $"<li>Please select to indicator whether you had ever applied for a job at this company or not. </li>";
                }
            }
            else if((data.PreviouslyAppliedForAjob==1 && string.IsNullOrEmpty(data.AppointmentDetail)) || (data.EverBeenConvicted==1 && string.IsNullOrEmpty(data.ConvictionReason)))
            {
                error = "<ul>";
                if((data.PreviouslyAppliedForAjob==1 && string.IsNullOrEmpty(data.AppointmentDetail))){
                    error += $"<li>Please enter the appointment detail. </li>";
                }
                if((data.EverBeenConvicted==1 && string.IsNullOrEmpty(data.ConvictionReason))){
                    error += $"<li>Please enter the details of the offence. </li>";
                }
            }
            else if(appliedForJobsModel.appliedForJobReferees.Count < 2)
            {
                error = "<ul>";
                error += $"<li>Please enter atleast two personal referees. </li>";
            }
            else
            {
                await SavingDialog.ShowAsync();
                string? _baseurl = navManager.BaseUri;

                string json = Newtonsoft.Json.JsonConvert.SerializeObject(appliedForJobsModel);
                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                var result = await Http.PostAsync($"HumanResource/SaveAppliedForJobs?_baseurl={_baseurl}", httpContent);
                if (result.IsSuccessStatusCode)
                {
                    var content = await result.Content.ReadAsStringAsync();
                    var _data = JsonSerializer.Deserialize<Response>(content, _options);
                    if (_data != null)
                    {
                        if (_data.IsSuccess)
                        {
                            toastService.ShowSuccess(_data.Message);
                        }
                        else
                        {
                            toastService.ShowError(_data.Message);
                        }
                    }
                }
                else
                {
                    toastService.ShowError(result.ReasonPhrase);
                }
                await ApplicationDialog.HideAsync();
                this.Visibility = false;
            }

            if(!string.IsNullOrEmpty(error))
            {
                error += "</ul>";
                ErrorMessage = error;
            }
            
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await SavingDialog.HideAsync();
            StateHasChanged();
        }
    }

    public async Task OnCommandClicked(CommandClickEventArgs<AppliedForJobReferees> args)
    {

        if (args.CommandColumn.ID == "Delete")
        {
            try
            {
                selectedemployee = args.RowData;
                ConfirmationText = "<p>Are you sure you want to delete this record? </p>";
                await this.ConfirmationDeleteDialogue.ShowAsync();
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            finally
            {
                StateHasChanged();
            }

        }
    }

    private async void ComfirmationApproveYes()
    {
        try
        {
            await this.ConfirmationDeleteDialogue.HideAsync();

            await SavingDialog.ShowAsync();

            string json = Newtonsoft.Json.JsonConvert.SerializeObject(selectedemployee);
            StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            var result = await Http.PostAsync($"NonStaff/DeleteSkill?qualificationid={selectedemployee.AppliedForRefereeId}", httpContent);

            if (result.IsSuccessStatusCode)
            {
                try
                {
                    if (JobRefereesGrid != null)
                    {
                        await JobRefereesGrid.Refresh();
                    }

                    toastService.ShowSuccess("Record Successfully Deleted");
                }
                catch (Exception ex)
                {

                }
                finally
                {
                    await SavingDialog.HideAsync();
                }

            }
            else
            {
                toastService.ShowError("Record Not Deleted");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await SavingDialog.HideAsync();
            StateHasChanged();
        }
    }

    private void ComfirmationApproveNo()
    {
        this.ConfirmationDeleteDialogue.HideAsync();
    }


    public async Task OnJobRefereesActionComplete(ActionEventArgs<AppliedForJobReferees> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            JobRefereesGrid.PreventRender(false);
        }
    }

    public async void OnJobRefereesActionBegin(ActionEventArgs<AppliedForJobReferees> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (string.IsNullOrEmpty(args.Data.RefereeName))
                {
                    toastService.ShowWarning("Please enter the name of the referee.");
                    args.Cancel = true;
                }
                // else if (args.Data.GenderId == null)
                // {
                //     toastService.ShowWarning("Please select the gender.");
                //     args.Cancel = true;
                // }
                // else if (string.IsNullOrEmpty(args.Data.RefereeJobTitle))
                // {
                //     toastService.ShowWarning("Please enter the job title of the referee.");
                //     args.Cancel = true;
                // }
                // else if (string.IsNullOrEmpty(args.Data.RefereeCompany))
                // {
                //     toastService.ShowWarning("Please enter the organisation of the referee.");
                //     args.Cancel = true;
                // }
                else if (string.IsNullOrEmpty(args.Data.RefereeEmail))
                {
                    toastService.ShowWarning("Please enter the email of the referee.");
                    args.Cancel = true;
                }
                else if (args.Data.RefereePhoneNumber == null)
                {
                    toastService.ShowWarning("Please enter the phone number of the referee.");
                    args.Cancel = true;
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
    }

    public string GetJobRefereesHeader(AppliedForJobReferees Value)
    {
        if (Value.AppliedForRefereeId == 0)
        {
            return "Add a Referee";
        }
        else
        {
            return "Edit Details for " + Value.RefereeName;
        }
    }

    public void BatchAddHandler(BeforeBatchAddArgs<AppliedForJobReferees> Args)
    {
        Args.DefaultData.AppliedForRefereeId = random;
        random++;
    }
}
