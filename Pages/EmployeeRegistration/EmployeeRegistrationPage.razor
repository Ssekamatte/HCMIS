@page "/EmployeeRegistration"
@using HCMIS.SHARED.Data
@using HCMIS.SHARED
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using HCMIS.ViewModel
@using System.Collections;
@inject HttpClient Http
@inject ApiConfig _ApiConfig;
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings
@inject DocumentUploadModel _DocumentUploadModel;
@inject IToastService toastService;

<style>
    .e-dialog {
        max-height: 98%;
        max-width: 100%;
        min-width: 90%;
        position: absolute;
    }

    .test {
        .alert alert-primary;
        line-height: 100px;
    }

    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #ff4d00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    .e-checkbox-wrapper .e-frame+.e-label, .e-css.e-checkbox-wrapper .e-frame+.e-label {
    margin-left: 8px;
    display: none;
}
</style>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="width: 100%; color: darkblue; font-family: Cambria; padding: 5px; font: bolder;"><img src="/Image/logonhcc.png" height="35" width="50" /> <stong>|Employee Data</stong></li>
</ol>

@if (!string.IsNullOrEmpty(_SystemSettings.UserRole)
                && _SystemSettings.UserRole.Contains("Administrator"))
{
<div class="form-row">
    <div class="col-md-12">
        <SfAccordion ExpandMode="ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="true">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <div style="padding:10px;">
                            <EditForm Model="@SearchModel" OnValidSubmit="@SearchRecords">
                                <div class="form-row">
                                    <div class="col-md-6">
                                        <p>Employee</p>
                                        <SfMultiSelect @bind-Value="@SearchModel.Employeeid" TValue="int?[]" TItem="ViewBscEmployeeDto" 
                                        AllowFiltering="true" Placeholder="Please select" 
                                        Mode="@VisualMode.CheckBox" DataSource="@EmployeeData" 
                                        ShowSelectAll="true" 
                                        EnableSelectionOrder="true" 
                                        ShowDropDownIcon="true" 
                                        FilterBarPlaceholder="Search Employee" 
                                        FloatLabelType="FloatLabelType.Never" 
                                        PopupHeight="350px"
                                        FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                            <MultiSelectFieldSettings Value="@nameof(ViewBscEmployeeDto.Employeeid)" Text="@nameof(ViewBscEmployeeDto.EmployeeDetails)"></MultiSelectFieldSettings>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="col-md-6">
                                        <SfButton class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Search</SfButton>
                                        <SfButton class="btn btn-danger" data-ripple="true" @onclick="ClearSearchBtnClick">Clear Search</SfButton>
                                    </div>
                                    <div class="col-md-12">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary/>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </ContentTemplate>
            	</AccordionItem>
            </AccordionItems>
        </SfAccordion>

    </div>
</div>
}

<SfGrid @ref="EmployeeModelGrid" TValue="CreateEmployeeModel" ID="GridMain" Query="@mainQuery"
        Toolbar="@ToolbarMenu" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
        AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
    <SfDataManager AdaptorInstance="@typeof(EmployeeRecordAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <GridSearchSettings IgnoreCase="true" Fields="@( new string[] { "FirstName", "LastName" } )"></GridSearchSettings>
    @*OnDataBound="DataBoundHandler"
        DataBound="AfterDataBoundHandler"*@
    <GridEvents 
        OnActionBegin="OnEmployeeDtoActionBegin" 
        OnActionComplete="@OnEmployeeDtoActionComplete"  
        TValue="CreateEmployeeModel">
    </GridEvents>
    <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="@DialogParams">
 
        <Template Context="EmployeeContext">
         @{
                EmployeeReviewData = (EmployeeContext as CreateEmployeeModel).EmployeeHeader;
                @if (EmployeeReviewData != null)
                {
                    <div class="row" style="padding:15px;">
                         <div class="col-md-12">
                                <center><p class="alert alert-primary"> <b>EMPLOYEE DATA FORM</b></P></center>
                            </div>
                            <div class="col-md-12">
                                <p class="alert alert-primary"> <b>Personal Details</b></p>
                             </div>
                       <div class="col-md-12" hidden>
                          <SfNumericTextBox @bind-Value="@(EmployeeReviewData.Employeeid)" Enabled="false" Placeholder="Employeeid" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                         </div>
                      <div class=" col-md-8">
                                     <div class="row">
                                                <div class="col-md-4">
                                                    <p>First Name <span style="color:red;">*</span> </p>
                                                    <SfTextBox Multiline="false" @bind-Value="@(EmployeeReviewData.FirstName)" Enabled="true" Placeholder="First Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                </div>
                                                <div class="col-md-4">
                                                    <p>Middle Name</p>
                                                    <SfTextBox Multiline="false" @bind-Value="@(EmployeeReviewData.MiddleName)" Enabled="true" Placeholder="Middle Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                </div>
                                                <div class="col-md-4">
                                                    <p>Last Name <span style="color:red;">*</span></p>
                                                    <SfTextBox Multiline="false" @bind-Value="@(EmployeeReviewData.LastName)" Enabled="true" Placeholder="Last Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                </div>
                                                <div class="col-md-4">
                                                  <p>Gender <span style="color:red;">*</span></p>
                                                    <SfDropDownList @bind-Value="@(EmployeeReviewData.GenderId)" Enabled="true" TItem="AGender" TValue="int?" DataSource="@GenderData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(AGender.GenderId)" Text="@nameof(AGender.GenderDesc)"></DropDownListFieldSettings>
                                                    </SfDropDownList>
                                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.GenderId)" /></p>
                                                </div>
                                                <div class="col-md-4">
                                                     <p>Date of Birth <span style="color:red;">*</span></p>
                                                    <SfDatePicker @bind-Value="@(EmployeeReviewData.DoB)" Placeholder="Select Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.DoB)" /></p>
                                                </div>
                                                 <div class="col-md-4">
                                                  <p >Marital Status <span style="color:red;">*</span></p>
                                                    <SfDropDownList @bind-Value="@(EmployeeReviewData.MaritalStatusId)" Enabled="true" TItem="AMaritalStatus" TValue="int?" DataSource="@MaritalStatusData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(AMaritalStatus.MaritalStatusId)" Text="@nameof(AMaritalStatus.MaritalStatusDescription)"></DropDownListFieldSettings>
                                                    </SfDropDownList>
                                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.MaritalStatusId)" /></p>
                                                </div>
                                                <div class="col-md-4">
                                                   <p>Mobile Number <span style="color:red;">*</span></p>
                                                    <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.MobileNumber" CssClass="form-control" Placeholder="Mobile Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.MobileNumber)" /></p>
                                                </div>
                                                 <div class="col-md-4">
                                                   <p>P.O BOX Number</p>
                                                    <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.PoboxNumber" CssClass="form-control" Placeholder="PO Box Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.PoboxNumber)" /></p>
                                                </div>
                                                 <div class="col-md-4">
                                                  <p style="margin-bottom:29px;">Nationality <span style="color:red;">*</span></p>
                                                    <SfDropDownList @bind-Value="@(EmployeeReviewData.CoutryId)" Enabled="true" TItem="ACountry" TValue="int?" DataSource="@CountryData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(ACountry.CoutryId)" Text="@nameof(ACountry.CountryDesc)"></DropDownListFieldSettings>
                                                    </SfDropDownList>
                                                  <p> <ValidationMessage For="@(() => EmployeeReviewData.CoutryId)" /></p>
                                                </div>
                                     </div>
                                 </div>
                                    <div class="col-md-4">
                                        @if (!string.IsNullOrEmpty(EmployeeReviewData.FirstName) && !string.IsNullOrEmpty(EmployeeReviewData.LastName))
                                        {
                                            if (!string.IsNullOrEmpty(ProfilePicString))
                                            {
                                             <img src="@ProfilePicString" class="img-thumbnail" height="190" width="150" style="margin-bottom:4px; margin-left:20%; margin-right:auto;" />
                                            }
                                            else
                                            {
                                              <img src="/Image/blank-profile-picture.png" class="img-thumbnail" height="190" width="150" style="margin-bottom:4px; margin-left:20%; margin-right:auto;" />
                                            }
                                                <div class="col-md-12">
                                                    <p class="alert-primary" style="padding:10px;">Upload  png or Jpeg image</p>
                                                    <SfUploader AutoUpload="true" ShowFileList="false">
                                                        <UploaderEvents ValueChange="OnImageChange"></UploaderEvents>
                                                    </SfUploader>
                                                    <SfSpinner @ref="@UploadImageSpinner" Visible="false" Label="UpLoading Image please wait.."></SfSpinner>
                                                </div>
                                        }
                                     </div>
                      @if (EmployeeReviewData.CoutryId == 259)
                        {
                                <div class="col-md-12">
                                    <p class="alert alert-primary"><b>Place Of Origin</b></p>
                                </div>
                                 <div class="col-md-3">
                                    <p style="margin-bottom:29px;">District <span style="color:red;">*</span></p>
                                    <SfDropDownList @bind-Value="@(EmployeeReviewData.PlaceofOriginDistrictId)" Enabled="true" TItem="ADistrict" TValue="int?" DataSource="@DistrictData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)" ></DropDownListFieldSettings>
                                         <DropDownListEvents TValue="int?" TItem="ADistrict" ValueChange="OnDistrictChange"></DropDownListEvents>
                                    </SfDropDownList>
                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.PlaceofOriginDistrictId)" /></p>
                                </div>
                                <div class="col-md-3">
                                    <p style="margin-bottom:29px;">Subcounty <span style="color:red;">*</span></p>
                                    <SfDropDownList @bind-Value="@(EmployeeReviewData.PlaceofOriginSubCountyId)"  Query="@DistrictChange"  Enabled="true" TItem="ASubCounty" TValue="int?" DataSource="@SubCountyData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Value="@nameof(ASubCounty.SubCountyId)" Text="@nameof(ASubCounty.SubCountyDescription)"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="int?" TItem="ASubCounty" ValueChange="OnSubCountyChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.PlaceofOriginSubCountyId)" /></p>
                                </div>
                                <div class="col-md-3">
                                      <p style="margin-bottom:29px;">Parish <span style="color:red;">*</span></p>
                                      <SfDropDownList @bind-Value="@(EmployeeReviewData.PlaceofOriginParishId)" Query="@SubCountyChange"  Enabled="true" TItem="AParish" TValue="int?" DataSource="@ParishData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Value="@nameof(AParish.ParishId)" Text="@nameof(AParish.ParishDesc)"></DropDownListFieldSettings>
                                       <DropDownListEvents TValue="int?" TItem="AParish" ValueChange="OnParishChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.PlaceofOriginParishId)" /></p>
                                </div>
                                   <div class=" col-md-3">
                                    <p style="margin-bottom:29px;">Village <span style="color:red;">*</span></p>
                                    <SfDropDownList @bind-Value="@(EmployeeReviewData.PlaceofOriginVillageId)" Query="@ParishChange"  Enabled="true" TItem="AVillage" TValue="int?" DataSource="@VillageData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Value="@nameof(AVillage.VillageId)" Text="@nameof(AVillage.ViallgeDescription)"></DropDownListFieldSettings>
                                       <DropDownListEvents TValue="int?" TItem="AVillage" ValueChange="OnVillageChange"></DropDownListEvents>
                                    </SfDropDownList>
                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.PlaceofOriginVillageId)" /></p>
                                </div>
                         }
                      <div class="col-md-12">
                                <p class="alert alert-primary"><b>Place of Residence</b></p>
                             </div>
                            <div class="col-md-3">
                                <p style="margin-bottom:29px;">District <span style="color:red;">*</span></p>
                                <SfDropDownList @bind-Value="@(EmployeeReviewData.PlaceofResidenceDistrictId)" Enabled="true" TItem="ADistrict" TValue="int?" DataSource="@DistrictData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                    <DropDownListFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="int?" TItem="ADistrict" ValueChange="OnRDistrictChange"></DropDownListEvents>
                                </SfDropDownList>
                                <p> <ValidationMessage For="@(() => EmployeeReviewData.PlaceofResidenceDistrictId)" /></p>
                            </div>
                            <div class="col-md-3">
                                    <p style="margin-bottom:29px;">Subcounty <span style="color:red;">*</span></p>
                                    <SfDropDownList @bind-Value="@(EmployeeReviewData.PlaceofResidenceSubCountyId)" Query="@DistrictRChange"  Enabled="true" TItem="ASubCounty" TValue="int?" DataSource="@SubCountyData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Value="@nameof(ASubCounty.SubCountyId)" Text="@nameof(ASubCounty.SubCountyDescription)"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="int?" TItem="ASubCounty" ValueChange="OnRSubCountyChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.PlaceofResidenceSubCountyId)" /></p>
                             </div>
                             <div class="col-md-3">
                                    <p style="margin-bottom:29px;">Parish <span style="color:red;">*</span></p>
                                    <SfDropDownList @bind-Value="@(EmployeeReviewData.PlaceofResidenceParishId)" Query="@SubRCountyChange"  Enabled="true" TItem="AParish" TValue="int?" DataSource="@ParishData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Value="@nameof(AParish.ParishId)" Text="@nameof(AParish.ParishDesc)"></DropDownListFieldSettings>
                                       <DropDownListEvents TValue="int?" TItem="AParish" ValueChange="OnRParishChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.PlaceofResidenceParishId)" /></p>
                                </div>
                            <div class="col-md-3">
                                    <p style="margin-bottom:29px;">Village <span style="color:red;">*</span></p>
                                    <SfDropDownList @bind-Value="@(EmployeeReviewData.PlaceofResidenceVillageId)" Query="@ParishRChange"   Enabled="true" TItem="AVillage" TValue="int?" DataSource="@VillageData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Value="@nameof(AVillage.VillageId)" Text="@nameof(AVillage.ViallgeDescription)"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="int?" TItem="AVillage" ValueChange="OnRVillageChange"></DropDownListEvents>
                                    </SfDropDownList>
                                    <p> <ValidationMessage For="@(() => EmployeeReviewData.PlaceofResidenceVillageId)" /></p>
                                </div>
                       
                    <div class="col-md-12">
                        <p class="alert alert-primary"><b>Employee Family</b></p>
                    </div>
                   <div class="col-md-12">
                            <p><b>Employee Parents</b></p>
                        </div>
                        <div class="col-md-4">
                                <p>Father's Name<span style="color:red;">*</span></p>
                                <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.EmployeFatherName" CssClass="form-control" Placeholder="Father's Name" Enabled=true FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                <p> <ValidationMessage For="@(() => EmployeeReviewData.EmployeFatherName)" /></p>
                         </div>
                            <div class="col-md-2">
                                <p>Is Alive?</p>
                                 <SfCheckBox Label="Is Alive?" @bind-Checked="@EmployeeReviewData.EmployeFatherIsLive"></SfCheckBox>
                             </div>
                              <div class="col-md-4">
                                <p>Mother's Name<span style="color:red;">*</span></p>
                                <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.EmployeMotherName" CssClass="form-control" Placeholder="Mother's Name" Enabled=true FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                 <p> <ValidationMessage For="@(() => EmployeeReviewData.EmployeMotherName)" /></p>
                            </div>
                        <div class="col-md-2">
                        <p>Is Alive?</p>
                            <SfCheckBox Label="Is Alive?" @bind-Checked="@EmployeeReviewData.EmployeMotherIsLive"></SfCheckBox>
                        </div>
                    <div class="col-md-12">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col-md-12">
                                        <p><b>Employee Spouse(s)</b></p>
                                    </div>
                                    @* Employee Spouse*@
                                    <div class="col-md-12">
                                         <SfGrid @ref="@AEmployeeSpouseGrid" TValue="EmployeeSpouse" DataSource="@((EmployeeContext as CreateEmployeeModel).Employeespouse)" AllowPaging="true"
                                         AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" 
                                         AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update","Search"})">
                                          <GridPageSettings PageSizes="true"></GridPageSettings>
                                             <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                            <GridEvents OnActionBegin="OnEmployeeSpouseActionBegin" OnActionComplete="@OnEmployeeSpouseActionComplete" TValue="EmployeeSpouse"></GridEvents>
                                            <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog">
                                             <Template Context="EmployeeSpouseContext">
                                         @{
                                                    var EmployeesSpouseReviewData = (EmployeeSpouseContext as EmployeeSpouse);
                                                     @if (EmployeesSpouseReviewData != null)
                                                     {
                                                      <div style="padding:10px;">
                                                      <div class="row">
                                                   <div class="col-md-12" hidden>
                                                          <SfNumericTextBox @bind-Value="@(EmployeesSpouseReviewData.EmployeeSpouseId)" Enabled="false" Placeholder="EmployeeSpouseId" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                                    </div>
                                                    <div class="col-md-12">
                                                     <div class="row">
                                                           <div class="col-md-4">
                                                                <p>First Name <span style="color:red;">*</span></p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(EmployeesSpouseReviewData.FirstName)" Enabled="true" Placeholder="Enter First Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <p>Middle Name</p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(EmployeesSpouseReviewData.MiddleName)" Enabled="true" Placeholder="Enter Middle Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                          <div class="col-md-4">
                                                                <p>Last Name <span style="color:red;">*</span></p>
                                                                 <SfTextBox Multiline="false" @bind-Value="@(EmployeesSpouseReviewData.LastName)" Enabled="true" Placeholder="Enter Last Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                    </div>
                                                    </div>
                                        
                                           </div>
                                                    </div>

                                                     }
                                             }
                                             </Template>                         
                                            </GridEditSettings>
                                             <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                         <GridPageSettings PageSize="20"></GridPageSettings>
                                          <GridColumns>
                                               <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                                               <GridColumn Field=@nameof(EmployeeSpouse.EmployeeSpouseId) HeaderText="EmployeeSpouseId" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                                               <GridColumn Field=@nameof(EmployeeSpouse.EmployeeId) HeaderText="Employee Id" Width="100"></GridColumn>
                                               <GridColumn Field=@nameof(EmployeeSpouse.FirstName) HeaderText="First Name" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(EmployeeSpouse.LastName) HeaderText="Last Name" Width="100"></GridColumn>
                                          </GridColumns>   
                                       </SfGrid>
                                      </div>
                                  </div>
                            </div>
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col-md-12">
                                        <p><b>Employee Children</b></p>
                                    </div>
                                    @* Employee Children*@
                                       <div class="col-md-12">
                                         <SfGrid @ref="@AEmployeeChildrenGrid" TValue="AEmployeeChildren" DataSource="@((EmployeeContext as CreateEmployeeModel).AEmployeechildren)" AllowPaging="true"
                                         AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" 
                                         AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update","Search"})">
                                         <GridPageSettings PageSizes="true"></GridPageSettings>
                                         <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                         <GridEvents OnActionBegin="OnEmployeeChildrenActionBegin" OnActionComplete="@OnEmployeeChildrenActionComplete" TValue="AEmployeeChildren"></GridEvents>
                                         <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog">
                                             <Template Context="EmployeeChildrenContext">
                                         @{
                                              EmployeeChildrenReviewData = (EmployeeChildrenContext as AEmployeeChildren);
                                            @if (EmployeeChildrenReviewData != null)
                                               {
                                                         <div style="padding:10px;">
                                                      <div class="row">
                                                   <div class="col-md-12" hidden>
                                                          <SfNumericTextBox @bind-Value="@(EmployeeChildrenReviewData.EmployeeKidsId)" Enabled="false" Placeholder="EmployeeNextOfKinId" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                                    </div>
                                                   <div class="col-md-12">
                                                     <div class="row">
                                                           <div class="col-md-6">
                                                                <p>First Name <span style="color:red;">*</span></p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(EmployeeChildrenReviewData.FirstName)" Enabled="true" Placeholder="Enter First Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <p>Middle Name</p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(EmployeeChildrenReviewData.MiddleName)" Enabled="true" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                          <div class="col-md-6">
                                                                <p>Last Name <span style="color:red;">*</span></p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(EmployeeChildrenReviewData.LastName)" Enabled="true" Placeholder="Enter Last Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <p>Date of Birth <span style="color:red;">*</span></p>
                                                                <SfDatePicker @bind-Value="@(EmployeeChildrenReviewData.DateOfBirth)" Placeholder=" Date of Birth" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                                 <p> <ValidationMessage For="@(() => EmployeeChildrenReviewData.DateOfBirth)" /></p>
                                                             </div>

                                                    </div>
                                                    </div>
                                     
                                        </div>
                                                    </div>
                                               }
                                             }
                                             </Template>                         
                                            </GridEditSettings>
                                             <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                         <GridPageSettings PageSize="20"></GridPageSettings>
                                          <GridColumns>
                                               <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                                               <GridColumn Field=@nameof(AEmployeeChildren.EmployeeKidsId) HeaderText="EmployeeKidsId" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                                               <GridColumn Field=@nameof(AEmployeeChildren.FirstName) HeaderText="First Name" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(AEmployeeChildren.LastName) HeaderText="Last Name" Width="150"></GridColumn>
                                          </GridColumns>   
                                       </SfGrid>
                                      </div>
                                  </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12">
                            <p><b>Employee Next of Kin</b></p>
                        </div>
                        <div class="col-md-6">
                            <p>Next of Kin Name<span style="color:red;">*</span></p>
                            <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.NextofKinName" CssClass="form-control" Placeholder="Next of Kin Name" Enabled=true FloatLabelType="FloatLabelType.Never"></SfTextBox>
                            <p> <ValidationMessage For="@(() => EmployeeReviewData.NextofKinName)" /></p>
                        </div>
                        <div class="col-md-3">
                            <p>Next of Kin Phone Number<span style="color:red;">*</span></p>
                            <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.NextofKinTelephoneNumber" CssClass="form-control" Placeholder="Telephone Number" Enabled=true FloatLabelType="FloatLabelType.Never"></SfTextBox>
                            <p> <ValidationMessage For="@(() => EmployeeReviewData.NextofKinTelephoneNumber)" /></p>
                        </div>
                        <div class="col-md-3">
                            <p style="margin-bottom:29px;">Relationship<span style="color:red;">*</span></p>
                            <SfDropDownList @bind-Value="@(EmployeeReviewData.NextofKinRelationShipId)" Enabled="true" TItem="ARelationship" TValue="int?" DataSource="@ARelationshipData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(ARelationship.RelationshipId)" Text="@nameof(ARelationship.RelationshipName)"></DropDownListFieldSettings>
                            </SfDropDownList>
                            <p> <ValidationMessage For="@(() => EmployeeReviewData.NextofKinRelationShipId)" /></p>
                        </div>
                    @*From here*@
                    <div class="col-md-12">
                                <p><b>Employee Person to be contacted in case of emergency</b></p>
                              </div>
                              <div class="col-md-6">
                                <p>Contact Person Name<span style="color:red;">*</span></p>
                                <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.ContactPersonName" CssClass="form-control" Placeholder="Contact Person Name" Enabled=true FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                 <p> <ValidationMessage For="@(() => EmployeeReviewData.ContactPersonName)" /></p>
                            </div>
                            <div class="col-md-3">
                                <p>Contact Person Phone Number<span style="color:red;">*</span></p>
                                   <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.ContactPersonTelephoneNumber" CssClass="form-control" Placeholder="Telephone Number" Enabled=true FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                 <p> <ValidationMessage For="@(() => EmployeeReviewData.ContactPersonTelephoneNumber)" /></p>
                            </div>
                            <div class="col-md-3">
                             <p  style="margin-bottom:29px;">Relationship<span style="color:red;">*</span></p>
                               <SfDropDownList @bind-Value="@(EmployeeReviewData.ContactPersonRelationShipId)" Enabled="true" TItem="ARelationship" TValue="int?" DataSource="@ARelationshipData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                <DropDownListFieldSettings Value="@nameof(ARelationship.RelationshipId)" Text="@nameof(ARelationship.RelationshipName)"></DropDownListFieldSettings>
                                </SfDropDownList>
                                 <p> <ValidationMessage For="@(() => EmployeeReviewData.ContactPersonRelationShipId)" /></p>
                            </div>
                            <div class="col-md-12"> 
                            <div class="row">
                                <div class="col-md-12">
                                 <p class="alert alert-primary"><b>Schools, colleges and institutions attended:</b></p>
                                </div>
                                @*Employee Qualifcation *@
                                 <div class="col-md-12">
                                     <SfGrid @ref="@QualificationGrid" TValue="EmployeeQualification" DataSource="@((EmployeeContext as CreateEmployeeModel).Employeequalifications)" AllowPaging="true"
                                     AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" 
                                     AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update","Search"})">
                                     <GridPageSettings PageSizes="true"></GridPageSettings>
                                     <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                     <GridEvents  OnActionBegin="OnEmployeeQualificationActionBegin" OnActionComplete="@OnQualificationActionComplete" TValue="EmployeeQualification"></GridEvents>
                                      <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                                              
                                                <Template Context="QualificationContext">
                                            @{
                                                QualificationReviewData = (QualificationContext as EmployeeQualification);
                                                if(QualificationReviewData != null)
                                                {
                                                    QualificationReviewData.Employeeid = (EmployeeContext as CreateEmployeeModel).EmployeeHeader.Employeeid;
                                                    <div style="padding:15px;">
                                                                            <div class="row">
                                                                                <div class="col-md-12" hidden>
                                                                   
                                                                                    <SfNumericTextBox @bind-Value="@(QualificationReviewData.QualificationId)" Enabled="false" Placeholder="BranchId" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                     <p>Institution Name</p>
                                                                                    <SfTextBox Multiline="false" @bind-Value="@(QualificationReviewData.InstitutionName)" Enabled="true" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                </div>
                                                                               <div class="col-md-6">
                                                                                    <p>Level of Education <span style="color:red;">*</span></p>
                                                                                    <SfDropDownList @bind-Value="@(QualificationReviewData.LevelofEducationId)" Enabled="true" TItem="ALevelofEducation" TValue="int?" DataSource="@LevelofEducationData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                                        <DropDownListFieldSettings Value="@nameof(ALevelofEducation.LevelofEducationId)" Text="@nameof(ALevelofEducation.LevelofEducationDesc)"></DropDownListFieldSettings>
                                                                                    </SfDropDownList>
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                     <p>Field of study <span style="color:red;">*</span></p>
                                                                                    <SfDropDownList @bind-Value="@(QualificationReviewData.FieldOfStudyId)" Enabled="true" TItem="AFieldOfStudy" TValue="int?" DataSource="@FieldOfStudyData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                                                        <DropDownListFieldSettings Value="@nameof(AFieldOfStudy.FieldOfStudyId)" Text="@nameof(AFieldOfStudy.FieldOfStudyDesc)"></DropDownListFieldSettings>
                                                                                    </SfDropDownList>
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                     <p>Other Field of study</p>
                                                                                    <SfTextBox Multiline="false" @bind-Value="@(QualificationReviewData.OtherFieldOfStudy)" Enabled="true" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                     <p>From <span style="color:red;">*</span></p>
                                                                                    <SfDatePicker @bind-Value="@(QualificationReviewData.StartDate)" Placeholder="Select Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                     <p>To</p>
                                                                                    <SfDatePicker @bind-Value="@(QualificationReviewData.EndDate)" Placeholder="Select Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                                                </div>
                                                                                <div class="col-md-6" style="padding-top:35px; padding-bottom:10px;">   
                                                                                    <SfCheckBox Label="Is Current" @bind-Checked="@(QualificationReviewData.IsCurrent)"></SfCheckBox>
                                                                                </div> 
                                                         
                                                                                @if(!string.IsNullOrEmpty(QualificationReviewData.InstitutionName) && QualificationReviewData.LevelofEducationId != null){
                                                                                     <div class="col-md-12">
                                                                                        <p class="alert-primary" style="padding:10px;">Please upload an image in png or Jpeg or gif  or jpg format Or a PDF Document not exceeding 5 Megabytes(MBs) in Size</p>
                                                                                        <SfUploader AutoUpload="true" ShowFileList="false">
                                                                                            <UploaderEvents ValueChange="OnQualificationChange"></UploaderEvents>
                                                                                        </SfUploader>
                                                                                        <SfSpinner @ref="@UploadQualificationSpinner" Visible="false" Label="UpLoading document please wait.."></SfSpinner>
                                                                                    </div>
                                                                              }
                                                                            <div class="col-md-12">
                                                                                    @if (!string.IsNullOrEmpty(QualificationDocumentString))
                                                                                {
                                                                                if (!string.IsNullOrEmpty(QualificationReviewData.QualificationDocumentExt) && QualificationReviewData.QualificationDocumentName.ToLower().Contains("pdf"))
                                                                                {
                                                                                    <embed src="@QualificationDocumentString" width="100%" height="600px" style="border: none;" frameborder="0" allowfullscreen="true" />
                                                                                }
                                                                                else
                                                                                {
                                                                                   <img src="@QualificationDocumentString" class="img-thumbnail" height="500" width="100%" style="margin-bottom:10px; margin:10%; margin-right:auto;" />
                                                                                }
                                                                        }
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                            }
                                                    }
                                                </Template>
                                            </GridEditSettings>
                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                            <GridPageSettings PageSize="20"></GridPageSettings>
                                            <GridColumns>
                                                <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                                                <GridColumn Field=@nameof(EmployeeQualification.QualificationId) HeaderText="QualificationId" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                                                <GridForeignColumn Field=@nameof(EmployeeQualification.LevelofEducationId) HeaderText="Level of Education" Width="150" Visible="false" ForeignKeyField="@(nameof(ALevelofEducation.LevelofEducationId))" ForeignKeyValue="@(nameof(ALevelofEducation.LevelofEducationDesc))" ForeignDataSource="@LevelofEducationData"></GridForeignColumn>
                                                 <GridColumn Field=@nameof(EmployeeQualification.InstitutionName) HeaderText="Institution Name" Width="150"></GridColumn>
                                                  <GridForeignColumn Field=@nameof(EmployeeQualification.FieldOfStudyId) HeaderText="Qualification" Width="150" ForeignKeyField="@(nameof(AFieldOfStudy.FieldOfStudyId))" ForeignKeyValue="@(nameof(AFieldOfStudy.FieldOfStudyDesc))" ForeignDataSource="@FieldOfStudyData"></GridForeignColumn>
                                                   <GridColumn Field=@nameof(EmployeeQualification.StartDate) Format="dd/MM/yyyy" HeaderText="From" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(EmployeeQualification.EndDate) Format="dd/MM/yyyy" HeaderText="To" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(EmployeeQualification.OtherFieldOfStudy) Visible="false"  HeaderText="Other field of study" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(EmployeeQualification.IsCurrent) Visible="false"   HeaderText="To Current" Width="180"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>  

                                 </div>
                            </div>
                            </div>
                            <div class="col-md-12">
                             <p class="alert alert-primary"><b>Administration Particulars</b></p>
                            </div>
                             <div class="col-md-3">
                                <p>Employee Number <span style="color:red;">*</span></p>
                                <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.EmployeeNumber" CssClass="form-control" Placeholder="Employee Number" Enabled=false FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                <p> <ValidationMessage For="@(() => EmployeeReviewData.EmployeeNumber)" /></p>
                            </div>
                             <div class="col-md-3">
                                  <p>NSSF Number</p>
                                  <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.Nssfno" CssClass="form-control" Placeholder="Please enter Nssf No" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                <p> <ValidationMessage For="@(() => EmployeeReviewData.Nssfno)" /></p>
                             </div>
                             <div class="col-md-3">
                                <p>Tax Identification Number</p>
                                <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.UraTinNo" CssClass="form-control" Placeholder="Please enter TIN" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                <p> <ValidationMessage For="@(() => EmployeeReviewData.UraTinNo)" /></p>
                            </div>
                              <div class="col-md-3">
                                  <p>Official Email Address <span style="color:red;">*</span></p>
                                   <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.EmailAddress" CssClass="form-control" Placeholder="Please enter email" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                   <p> <ValidationMessage For="@(() => EmployeeReviewData.EmailAddress)" /></p>
                             </div>
                             <div class="col-md-3">
                             <p  style="margin-bottom:29px;">Identification</p>
                              <SfDropDownList @bind-Value="@(EmployeeReviewData.IdentificationTypeId)" Enabled="true" TItem="AIdentificationType" TValue="int?" DataSource="@IdentificationTypeData" Placeholder="please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                               <DropDownListFieldSettings Value="@nameof(AIdentificationType.IdentificationTypeId)" Text="@nameof(AIdentificationType.IdentificationTypeDesc)"></DropDownListFieldSettings>
                                </SfDropDownList>
                                 <p> <ValidationMessage For="@(() => EmployeeReviewData.IdentificationTypeId)" /></p>
                            </div>
                             <div class="col-md-3">
                                <p> NIN Number<span style="color:red;">*</span></p>
                                <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.NationalIdentificationNumber" CssClass="form-control" Placeholder="Please enter NIN" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                <p> <ValidationMessage For="@(() => EmployeeReviewData.NationalIdentificationNumber)" /></p>
                            </div>
                            <div class="col-md-3">
                                  <p>Official Phone Number</p>
                                   <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.OfficialPhoneNumber" CssClass="form-control" Placeholder="Office Phone Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                   <p> <ValidationMessage For="@(() => EmployeeReviewData.OfficialPhoneNumber)" /></p>
                             </div>
                           <div class="col-md-3">
                              <p  style="margin-bottom:29px;">Designation</p>
                              <SfDropDownList @bind-Value="@(EmployeeReviewData.JobDescriptionId)" Enabled="true" TItem="JobDescription" TValue="int?" DataSource="@JobDescriptionData" Placeholder="please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                               <DropDownListFieldSettings Value="@nameof(JobDescription.JobDescriptionId)" Text="@nameof(JobDescription.JobDescription1)"></DropDownListFieldSettings>
                                </SfDropDownList>
                                 <p> <ValidationMessage For="@(() => EmployeeReviewData.JobDescriptionId)" /></p>
                            </div>
                            <div class="col-md-3">
                              <p  style="margin-bottom:29px;">Employee Level <span style="color:red;">*</span></p>
                              <SfDropDownList @bind-Value="@(EmployeeReviewData.EmployeeLevelId)" Enabled="true" TItem="AEmployeeLevelDto" TValue="int?" DataSource="@EmployeeLevelData" Placeholder="please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                               <DropDownListFieldSettings Value="@nameof(AEmployeeLevelDto.EmployeeLevelId)" Text="@nameof(AEmployeeLevelDto.EmployeeLevelDesc)"></DropDownListFieldSettings>
                                </SfDropDownList>
                                 <p> <ValidationMessage For="@(() => EmployeeReviewData.EmployeeLevelId)" /></p>
                            </div>
                            <div class="col-md-3">
                                <p  style="margin-bottom:29px;">Date of Appointment <span style="color:red;">*</span></p>
                                <SfDatePicker @bind-Value="@(EmployeeReviewData.DateJoined)" Placeholder="Reporting Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                 <p> <ValidationMessage For="@(() => EmployeeReviewData.DateJoined)" /></p>
                             </div>
                            <div class="col-md-3">
                                <p  style="margin-bottom:29px;">Bank (Where salary should be deposited) <span style="color:red;">*</span></p>
                                <SfDropDownList @bind-Value="@(EmployeeReviewData.BankId)" Enabled="true" TItem="ABank" TValue="int?" DataSource="@BankData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                    <DropDownListFieldSettings Value="@nameof(ABank.BankId)" Text="@nameof(ABank.BankDesc)"></DropDownListFieldSettings>
                                </SfDropDownList>
                                <p> <ValidationMessage For="@(() => EmployeeReviewData.BankId)" /></p>
                            </div>
                              <div class="col-md-3">
                                <p>Bank Branch<span style="color:red;">*</span></p>
                                <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.BankBranch" CssClass="form-control" Placeholder="Enter Bank Branch" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                <p> <ValidationMessage For="@(() => EmployeeReviewData.BankBranch)" /></p>
                            </div>
                          <div class="col-md-3">
                                <p>Account Number<span style="color:red;">*</span></p>
                                <SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Text" @bind-Value="@EmployeeReviewData.BankAccountNumber" CssClass="form-control" Placeholder="Enter Account Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                <p> <ValidationMessage For="@(() => EmployeeReviewData.BankAccountNumber)" /></p>
                            </div>
                    </div>
                }
            }
        </Template>
    </GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSize="20"></GridPageSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
        <GridColumn Field=@nameof(CreateEmployeeModel.Employeeid) HeaderText="Employeeid" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
         <GridColumn HeaderText="EMPLOYEE NUMBER" Width="80"
         CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
            <Template>
                @{
                    var data = (context as CreateEmployeeModel);
                    string displayvalue = string.Empty;
                    if (data != null)
                    {
                        var _data = data.EmployeeHeader;
                        if (_data != null)
                        {
                            displayvalue = _data.EmployeeNumber;
                        }
                    }
                    <p>@displayvalue</p>
                }
            </Template>
        </GridColumn>

        <GridColumn HeaderText="EMPLOYEE NAME" TextAlign="TextAlign.Center" Width="120"
        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
            <Template>
                @{
                    var employeedata = (context as CreateEmployeeModel);
                    string lastname = string.Empty;
                    string lmiddlename = string.Empty;
                    string firstname = string.Empty;

                    if (employeedata != null)
                    {
                       var _data = employeedata.EmployeeHeader;
                       if (_data != null)
                        {
                            lastname = _data.LastName;
                            lmiddlename = _data.MiddleName;
                            firstname = _data.FirstName;
                        }
                    }
                    <p>@lastname  @lmiddlename  @firstname</p>
                }
            </Template>
        </GridColumn>

        @*<GridColumn HeaderText="FIRST NAME" Width="100">
            <Template>
                @{
                    var data = (context as CreateEmployeeModel);
                    string displayvalue = string.Empty;
                    if (data != null)
                    {
                        var _data = data.EmployeeHeader;
                        if (_data != null)
                        {
                            displayvalue = _data.FirstName;
                        }
                    }
                    <p>@displayvalue</p>
                }
            </Template>
        </GridColumn>
        <GridColumn HeaderText="LAST NAME" Width="100">
            <Template>
                @{
                    var data = (context as CreateEmployeeModel);
                    string displayvalue = string.Empty;
                    if (data != null)
                    {
                        var _data = data.EmployeeHeader;
                        if (_data != null)
                        {
                            displayvalue = _data.LastName;
                        }
                    }
                    <p>@displayvalue</p>
                }
            </Template>
        </GridColumn>*@
         
        <GridColumn HeaderText="EDIT" Width="60" 
        HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" 
        TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left"
        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
            <GridCommandColumns>
             <GridCommandColumn Type="CommandButtonType.Edit" 
                ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit">
             </GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>

        @*Super Administrator, Administrator and CHRO*@
        @if (!string.IsNullOrEmpty(UserRole) 
        && (UserRole.Contains("f9e6ea81-9577-4622-b159-17f7ea11aca1", StringComparison.CurrentCultureIgnoreCase)
        || UserRole.Contains("f9e6ea81-9577-4622-b159-17f7ea11aca2", StringComparison.CurrentCultureIgnoreCase)
        || (UserJobTitleId != null && UserJobTitleId == 44)))
        {
            
            <GridColumn HeaderText="DELETE" 
            TextAlign="TextAlign.Center" 
            Width="60"
            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr3" }})">
                <Template Context="EmployeeRegContext">
                    @{
                        var employee = (EmployeeRegContext as CreateEmployeeModel);
                        <div class="Delete">
                            <SfButton IconCss="e-icons e-delete" CssClass="e-danger" OnClick="@(()=>DeleteRecord(employee))"></SfButton>
                        </div>
                    }
                </Template>
            </GridColumn>
        }

        
     </GridColumns>
</SfGrid>

<div class="form-group col-md-12">
        <SfDialog Width="80%" Height="20vh" AllowDragging=true EnableResize=true
        CloseOnEscape=false IsModal=true ShowCloseIcon=false
                  Target=".mainbody" @ref=@SavingDialog Visible=false>
            <DialogTemplates>
                <Content>
                    <div class="dialogContent">
                        <div class="loader">
							<div class="loader--dot"></div>
							<div class="loader--dot"></div>
							<div class="loader--dot"></div>
							<div class="loader--dot"></div>
							<div class="loader--dot"></div>
							<div class="loader--dot"></div>
                            <div class="loader-Saving-text"></div>
						</div>
                        @*<p>Saving Record please wait......</p>*@
                    </div>
                </Content>
            </DialogTemplates>
        </SfDialog>
    </div>


<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="20%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        @*<div class="loader-Loading-text"></div>*@
                        <div class="loader-Saving-text"></div>
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

@code {
    #region Toasters
    public static string? ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast? DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    #region Declarations
    SfGrid<EmployeeQualification>? QualificationGrid;
    private EmployeeQualification? QualificationReviewData { get; set; }
    [Parameter]
    public int Employeeid { get; set; }
    [Parameter]
    public string? AccessToken { get; set; }
    [Parameter]
    public List<AFieldOfStudy>? FieldOfStudyData { get; set; }
    [Parameter]
    public List<ALevelofEducation>? LevelofEducationData { get; set; }
    SfSpinner? UploadQualificationSpinner;
    Query mainQuery { get; set; } = new();
    string QualificationDocumentString { get; set; } = null;
    string? ErrorMessage { get; set; } = null;
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "95%" };
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    AEmployeeChildren? EmployeeChildrenReviewData { get; set; }
    EmployeeSpouse? EmployeeSpouseReviewData { get; set; }
    List<ARelationship>? ARelationshipData { get; set; }
    List<ABank>? BankData { get; set; }
    List<ADistrict>? DistrictData { get; set; }
    List<AParish>? ParishData { get; set; }
    List<ASubCounty>? SubCountyData { get; set; }
    List<AVillage>? VillageData { get; set; }
    string? CVString { get; set; } = null;
    List<string>? missingfields { get; set; } = new();
    SfSpinner? UploadImageSpinner;
    string? ProfilePicString { get; set; } = null;
    List<JobDescription>? JobDescriptionData { get; set; } = new();
    List<AEmployeeLevelDto>? EmployeeLevelData { get; set; } = new();
    List<AGender>? GenderData { get; set; } = new();
    List<AMaritalStatus>? MaritalStatusData { get; set; } = new();
    List<ACountry>? CountryData { get; set; } = new();
    SfGrid<Employee>? EmployeeGrid;
    SfGrid<CreateEmployeeModel>? EmployeeModelGrid;
    SfGrid<EmployeeSpouse>? AEmployeeSpouseGrid;
    SfGrid<AEmployeeChildren>? AEmployeeChildrenGrid;
    List<AIdentificationType>? IdentificationTypeData { get; set; }
    List<ASkillLevel>? SkillLevelData { get; set; }
    List<ALanguageProlific>? LanguageProlificData { get; set; }
    List<ALanguages>? LanguagesData { get; set; }
    List<ADepartment>? DepartmentsData { get; set; }
    List<ViewBscEmployeeDto>? EmployeeData { get; set; }
    string? RegisterError { get; set; }
    string? RegisterSuccess { get; set; }
    Query MainQuery = new();
    Employee? EmployeeReviewData { get; set; } 
    EmployeeRegistrationModel inputmodel { get; set; } = new EmployeeRegistrationModel();
    Syncfusion.Blazor.Grids.Action PreviousActionType { get; set; }
    Query SubCountyChange { get; set; } = new();
    Query ParishChange { get; set; } = new();
    Query DistrictChange { get; set; } = new();
    Query VillageChange { get; set; } = new();

    Query SubRCountyChange { get; set; } = new();
    Query ParishRChange { get; set; } = new();
    Query DistrictRChange { get; set; } = new();
    Query VillageRChange { get; set; } = new();
    private UtilitiesSearchPanel SearchModel = new();
    Syncfusion.Blazor.Grids.Action _previous { get; set; }
    EmployeeDto RecordToDelete { get; set; }
    SfDialog SavingDialog { get; set; }
    string UserRole { get; set; } 
    public static int UserJobTitleId { get; set; } = 0;
    SfDialog? LoadingDialogue;

    #endregion Declarations

    private List<object> ToolbarMenu = new List<object>()
    {
        new ItemModel() { Text = "Add Employee", PrefixIcon = "e-add", Id = "GridMain_add"},
        new ItemModel(){ Text = "Edit Employee", PrefixIcon= "e-edit", Id="GridMain_edit"},
        //new ItemModel(){ Text = "Delete Employee", PrefixIcon= "e-delete", Id="Grid_delete"},
        new ItemModel(){ Text = "Update Employee", PrefixIcon= "e-update", Id="GridMain_update"},
        new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="GridMain_cancel"}
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await _SystemSettings.GetLoginCredentials();
            mainQuery = new();
            mainQuery.AddParams("AccessToken", AccessToken).AddParams("BaseUrl", _ApiConfig.BaseUrl);

            inputmodel = new();
            //  EmployeeReviewData.EmployeeNumber =  "NHCC-" + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd");
            var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Employeez/GetEmployeePrimaryDataList");
            var content = await response.Content.ReadAsStringAsync();
            var responseemployeelevel = await Http.GetAsync($"{_ApiConfig.BaseUrl}Utilities/GetEmployeeLevel");
            var contentemployeelevel = await responseemployeelevel.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var _EmployeeRegistrationModel = JsonSerializer.Deserialize<EmployeeRegistrationModel>(content, _options);

                if (_EmployeeRegistrationModel != null)
                {
                    IdentificationTypeData = _EmployeeRegistrationModel.IdentificationType;
                    DistrictData = _EmployeeRegistrationModel.District;
                    SubCountyData = _EmployeeRegistrationModel.SubCounty;
                    VillageData = _EmployeeRegistrationModel.Village;
                    ParishData = _EmployeeRegistrationModel.Parish;
                    MaritalStatusData = _EmployeeRegistrationModel.MaritalStatus;
                    BankData = _EmployeeRegistrationModel.Bank;
                    FieldOfStudyData = _EmployeeRegistrationModel.FieldOfStudy;
                    LevelofEducationData = _EmployeeRegistrationModel.LevelofEducation;
                    SkillLevelData = _EmployeeRegistrationModel.SkillLevel;
                    ARelationshipData = _EmployeeRegistrationModel.Relationship;
                    LanguageProlificData = _EmployeeRegistrationModel.LanguageProlific;
                    LanguagesData = _EmployeeRegistrationModel.Languages;
                    DepartmentsData = _EmployeeRegistrationModel.Departments;
                    CountryData = _EmployeeRegistrationModel.Coutry;
                    GenderData = _EmployeeRegistrationModel.Gender;
                    JobDescriptionData = _EmployeeRegistrationModel.jobDescriptions;

                }
            }
            var responseemployee = await Http.GetAsync($"{_ApiConfig.BaseUrl}Employeez/GetMasterList");
            var contentemployee = await responseemployee.Content.ReadAsStringAsync();
            if (responseemployee.IsSuccessStatusCode)
            {
                //Change to EndPoint from Employee Data
                EmployeeData = await Http.GetFromJsonAsync<List<ViewBscEmployeeDto>>
                ($"{_ApiConfig.BaseUrl}BalanceScoreCard/GetEmployeeData");
            }

            if (responseemployeelevel.IsSuccessStatusCode)
            {
                EmployeeLevelData = await Http.GetFromJsonAsync<List<AEmployeeLevelDto>>
                ($"{_ApiConfig.BaseUrl}Utilities/GetEmployeeLevel");
            }

            var responseuserrole = await Http.GetAsync($"{_ApiConfig.BaseUrl}Utilities/GetUserRoleId");
            var contentuserrole = await responseuserrole.Content.ReadAsStringAsync();            
            if (responseuserrole.IsSuccessStatusCode)
            {
                UserRole = contentuserrole;
            }

            var responseuserjobtitleid = await Http.GetAsync($"{_ApiConfig.BaseUrl}Utilities/GetUserJobTitleId");
            var contentuserjobtitleid = await responseuserjobtitleid.Content.ReadAsStringAsync();
            if (responseuserjobtitleid.IsSuccessStatusCode)
            {
                UserJobTitleId = Convert.ToInt32(contentuserjobtitleid);
            }


            if (!string.IsNullOrEmpty(_SystemSettings.UserRole) != null &&
            (_SystemSettings.UserRole.Contains("Administrator")))

            {
                ToolbarMenu = new List<object>()
                    {
                        new ItemModel() { Text = "Add Employee", PrefixIcon = "e-add", Id = "GridMain_add"},
                        new ItemModel(){ Text = "Edit Employee", PrefixIcon= "e-edit", Id="GridMain_edit"},
                        //new ItemModel(){ Text = "Delete Employee", PrefixIcon= "e-delete", Id="Grid_delete"},
                        new ItemModel(){ Text = "Update Employee", PrefixIcon= "e-update", Id="GridMain_update"},
                        new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="GridMain_cancel"}
                    };
            }
            else
            {
                ToolbarMenu = new List<object>()
                    {
                        //new ItemModel() { Text = "Add Employee", PrefixIcon = "e-add", Id = "GridMain_add"},
                        new ItemModel(){ Text = "Edit Employee", PrefixIcon= "e-edit", Id="GridMain_edit"},
                        //new ItemModel(){ Text = "Delete Employee", PrefixIcon= "e-delete", Id="Grid_delete"},
                        new ItemModel(){ Text = "Update Employee", PrefixIcon= "e-update", Id="GridMain_update"},
                        new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="GridMain_cancel"}
                    };
            }
        }
        catch (Exception ex)
        {
            RegisterError = $"Error: {ex.Message}";
        }
        finally
        {

        }
        await base.OnInitializedAsync();
    }

    private void SearchRecords()
    {
        try
        {
            mainQuery = new Query();
            if (SearchModel.Employeeid != null)
            {
                mainQuery.AddParams("Employeeid", string.Join(",", SearchModel.Employeeid));
            }
        }

        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }

    private void ClearSearchBtnClick()
    {
        SearchModel = new();
        mainQuery = new Query();
    }

    private async Task DeleteHousehold(EmployeeDto Record)
    {
        if (Record != null)
        {
            RecordToDelete = Record;
            //await HouseholdDeleteDialog.ShowAsync();
        }
    }

    public async void DeleteRecord(CreateEmployeeModel val)
    {
        try
        {            
            if (EmployeeModelGrid != null)
            {
                await EmployeeModelGrid.EndEditAsync();
            }

            if (AEmployeeChildrenGrid != null)
            {
                await AEmployeeChildrenGrid.EndEditAsync();
            } 

            if (QualificationGrid != null)
            {
                await QualificationGrid.EndEditAsync();
            }

            if (EmployeeModelGrid != null)
            {
                await EmployeeModelGrid.EndEditAsync();
            } 

            int? employeeid = null;

            if(val.Employeeid != null)
            {
                employeeid = val.Employeeid;
            }

            await SavingDialog.ShowAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
            string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
            StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}Employeez/DeleteEmployee?employeeid={employeeid}", httpContent);

            if (result.IsSuccessStatusCode)
            {
                try
                {                    
                    EmployeeModelGrid.Refresh();
                    toastService.ShowSuccess("Record Successfully Deleted");
                }
                catch(Exception ex)
                {

                }
                finally
                {
                    await SavingDialog.HideAsync();
                }

            }
            else
            {                
                toastService.ShowError("Record Not Deleted");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    #region Employee
    public class EmployeeRecordAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        public IToastService toastService;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public EmployeeRecordAdapter(HttpClient _http, IToastService ts, SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            _SystemSettings = systemSettings;
            _ApiConfig = apiConfig;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<CreateEmployeeModel>();
            try
            {
                string Employeeid = null;

                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;

                    if (val.FirstOrDefault(o => o.Key == "Employeeid").Value != null)
                    {
                        Employeeid = val.FirstOrDefault(o => o.Key == "Employeeid").Value.ToString();
                    }
                }

                await _SystemSettings.GetLoginCredentials();
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                HttpResponseMessage response;

                //Administrators without filtering
                if (((!string.IsNullOrEmpty(_SystemSettings.UserRole)
                && _SystemSettings.UserRole.Contains("Administrator")) || (UserJobTitleId == 44)) 
                && string.IsNullOrEmpty(Employeeid))
                {
                    response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Employeez/GetEmployeeList");
                }

                //Administrators while filtering
                else if (((!string.IsNullOrEmpty(_SystemSettings.UserRole) 
                && _SystemSettings.UserRole.Contains("Administrator")) || (UserJobTitleId == 44)) 
                && !string.IsNullOrEmpty(Employeeid))
                {
                    response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Employeez/GetEmployeeByIdSearch?Employeeid={Employeeid}");
                }

                else
                {
                    response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Employeez/GetEmployeeById/{_SystemSettings.StaffId}");
                }


                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    toastService.ShowError(response.ReasonPhrase);
                }
                data = JsonSerializer.Deserialize<List<CreateEmployeeModel>>(content, _options);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            finally
            {

            }
            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<CreateEmployeeModel>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as CreateEmployeeModel);

                await _SystemSettings.GetLoginCredentials();
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                //if(_SystemSettings.UserRole){

                //}
                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}Employeez/SaveEmployeeRecord", httpContent);
                if (result.IsSuccessStatusCode)
                {
                    toastService.ShowSuccess($"{val.EmployeeHeader.FirstName}'s record was sucessfully saved");
                }
                else
                {
                    toastService.ShowError(result.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as CreateEmployeeModel);
                await _SystemSettings.GetLoginCredentials();
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}Employeez/SaveEmployeeRecord", httpContent);
                if (result.IsSuccessStatusCode)
                {
                    toastService.ShowSuccess($"{val.EmployeeHeader.FirstName}'s record was sucessfully updated");
                }
                else
                {
                    //  toastService.ShowError(result.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }
    public string GetEmployeeHeader(Employee Value)
    {
        if (Value.Employeeid == 0)
        {
            return "Add a New Employee";
        }
        else
        {
            return  Value.FirstName + " "+ Value.LastName;
        }
    }
    public async void OnEmployeeDtoActionBegin(ActionEventArgs<CreateEmployeeModel> args)
    {
        try
        {            
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {

                if (args.RowData.AEmployeechildren == null)
                {
                    args.RowData.AEmployeechildren = new List<AEmployeeChildren>();
                }
                if (args.RowData.Employeespouse == null)
                {
                    args.RowData.Employeespouse = new List<EmployeeSpouse>();
                }
                if (args.RowData.Employeequalifications == null)
                {
                    args.RowData.Employeequalifications = new List<EmployeeQualification>();
                }

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                args.RowData.AEmployeechildren = new List<AEmployeeChildren>();
                args.RowData.Employeespouse = new List<EmployeeSpouse>();
                args.RowData.Employeequalifications = new List<EmployeeQualification>();
                args.RowData.EmployeeHeader = new Employee();

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                try
                {
                    //await LoadingDialogue.ShowAsync();
                    if (string.IsNullOrEmpty(args.Data.EmployeeHeader.FirstName))
                    {
                        toastService.ShowWarning("Please fill in Employee First Name before saving this record.");
                        args.Cancel = true;
                    }
                    else if (string.IsNullOrEmpty(args.Data.EmployeeHeader.LastName))
                    {
                        toastService.ShowWarning("Please fill in Employee Last Name before saving this record.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.GenderId == null)
                    {
                        toastService.ShowWarning("Please select the gender.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.DoB == null)
                    {
                        toastService.ShowWarning("Please enter the Date of Birth.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.MaritalStatusId == null)
                    {
                        toastService.ShowWarning("Please select the marital status.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.MobileNumber == null)
                    {
                        toastService.ShowWarning("Please enter the mobile number.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.CoutryId == null)
                    {
                        toastService.ShowWarning("Please select the Employee Country of origin before saving this record.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.PlaceofResidenceDistrictId == null)
                    {
                        toastService.ShowWarning("Please select the Employee District of Residence before saving this record.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.PlaceofResidenceSubCountyId == null)
                    {
                        toastService.ShowWarning("Please select the Employee SubCounty of Residence before saving this record.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.PlaceofResidenceParishId == null)
                    {
                        toastService.ShowWarning("Please select the Employee Parish of Residence before saving this record.");
                        args.Cancel = true;
                    }

                    else  if (string.IsNullOrEmpty(args.Data.EmployeeHeader.EmployeFatherName))
                    {
                        toastService.ShowWarning("Please fill in Employee Father's Name before saving this record.");
                        args.Cancel = true;
                    }
                    else  if (string.IsNullOrEmpty(args.Data.EmployeeHeader.EmployeMotherName))
                    {
                        toastService.ShowWarning("Please fill in Employee Mother's Name before saving this record.");
                        args.Cancel = true;
                    }
                    else   if (string.IsNullOrEmpty(args.Data.EmployeeHeader.NextofKinName))
                    {
                        toastService.ShowWarning("Please fill in Employee Next of Kin's Name before saving this record.");
                        args.Cancel = true;
                    }
                    else  if (string.IsNullOrEmpty(args.Data.EmployeeHeader.NextofKinTelephoneNumber))
                    {
                        toastService.ShowWarning("Please fill in  Next of Kin Phone Number  before saving this record.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.NextofKinRelationShipId == null)
                    {
                        toastService.ShowWarning("Please select the Next of Kin Relationship with Employee before saving this record.");
                        args.Cancel = true;
                    }
                    else   if (string.IsNullOrEmpty(args.Data.EmployeeHeader.ContactPersonName))
                    {
                        toastService.ShowWarning("Please fill in Employee Contact Person's Name before saving this record.");
                        args.Cancel = true;
                    }
                    else  if (string.IsNullOrEmpty(args.Data.EmployeeHeader.NextofKinTelephoneNumber))
                    {
                        toastService.ShowWarning("Please fill in  Contact Person Phone Number  before saving this record.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.ContactPersonRelationShipId == null)
                    {
                        toastService.ShowWarning("Please select the Contact Person Relationship with Employee before saving this record.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.EmailAddress == null)
                    {
                        toastService.ShowWarning("Please provide the official email address.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.JobDescriptionId == null)
                    {
                        toastService.ShowWarning("Please select the designation.");
                        args.Cancel = true;
                    }
                    else if (args.Data.EmployeeHeader.EmployeeLevelId == null)
                    {
                        toastService.ShowWarning("Please select the employee level.");
                        args.Cancel = true;
                    }

                    else
                    {
                        var countdata = EmployeeData?
                        .FirstOrDefault(o => o.FirstName.Trim().ToLower() 
                        == args.Data.EmployeeHeader.FirstName.Trim().ToLower()
                        && o.LastName.Trim().ToLower() 
                        == args.Data.EmployeeHeader.LastName.Trim().ToLower()
                        && o.EmailAddress.Trim().ToLower() 
                        == args.Data.EmployeeHeader.EmailAddress.Trim().ToLower()
                        ); 

                        if (countdata != null && (countdata.Employeeid != args.Data.Employeeid))
                        {
                            toastService.ShowWarning("This employee has arleady been registered in the system as " + countdata.LastName + " " + countdata.FirstName + ". Record Not Saved");
                            args.Cancel = true;
                        }
                    }
                }
                catch (Exception ex)
                {

                }
                finally
                {
                    await LoadingDialogue.HideAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            //await LoadingDialogue.HideAsync();
        }
    }
    public async Task OnEmployeeDtoActionComplete(ActionEventArgs<CreateEmployeeModel> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) 
        || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            EmployeeModelGrid.PreventRender(false);
            ProfilePicString = await GetImageString(args.RowData.EmployeeHeader.Photograph, args.RowData.EmployeeHeader.PhotographExt, "ProfilePic");
        }

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            var responseemployee = await Http.GetAsync($"{_ApiConfig.BaseUrl}BalanceScoreCard/GetEmployeeData");
            var contentemployee = await responseemployee.Content.ReadAsStringAsync();
            if (responseemployee.IsSuccessStatusCode)
            {
                EmployeeData = await Http.GetFromJsonAsync<List<ViewBscEmployeeDto>>
                ($"{_ApiConfig.BaseUrl}BalanceScoreCard/GetEmployeeData");
            }
        }   
    }

    //event triggers before the rendering process starts which allows customization of DataGrid properties before the DataGrid rendering.

    public async void LoadHandler(object args)
    {
        try
        {
            await LoadingDialogue.ShowAsync();
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {
            await LoadingDialogue.HideAsync();
        }
    }

    //Triggers before data is bound to DataGrid.
    public async void DataBoundHandler(BeforeDataBoundArgs<CreateEmployeeModel> args)
    {
        try
        {
            await LoadingDialogue.ShowAsync();
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {
            
        }
    }

    //Triggers when data source is populated in the DataGrid.
    public async void AfterDataBoundHandler()
    {
        try
        {
            await LoadingDialogue.HideAsync();
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {
            
        }
    }

    #endregion Employee

    #region image
    private async void OnImageChange(UploadChangeEventArgs args)
    {
        try
        {
            await UploadImageSpinner.ShowAsync();
            foreach (var file in args.Files)
            {
                if (file.FileInfo.Size <= 5242880)
                {
                    file.Stream.Position = 0;
                    if (file.FileInfo.Type.ToLower().Contains("png") || file.FileInfo.Type.ToLower().Contains("gif") || file.FileInfo.Type.ToLower().Contains("jpeg") || file.FileInfo.Type.ToLower().Contains("jpg"))
                    {
                        string fileName = "Profile_" + EmployeeReviewData.FirstName + "_" + EmployeeReviewData.LastName + "_" + EmployeeReviewData.Employeeid + "." + file.FileInfo.Type.Trim();
                        byte[] bytes = file.Stream.ToArray();
                        string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);
                        ImageUpload m = new ImageUpload()
                            {
                                ImageName = fileName,
                                ImageExt = file.FileInfo.Type.Trim(),
                                Imagebyte = bytes,
                                Rootfolder = "ProfilePic"
                            };
                        var Requestresult = await _DocumentUploadModel.SaveDocument(m, _SystemSettings.AccessToken);
                        if (Requestresult != null && Requestresult.IsSuccess)
                        {
                            var result = "data:image/" + file.FileInfo.Type.Trim() + ";base64," + base64;
                            EmployeeReviewData.Photograph = fileName;
                            EmployeeReviewData.PhotographExt = file.FileInfo.Type.Trim();
                            ProfilePicString = result;
                            bytes = null;
                        }
                        else if (Requestresult != null)
                        {
                            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        }
                    }
                    else
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = "Please ensure that the uploaded document is an image(png/Jpeg/gif/jpg).", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await UploadImageSpinner.HideAsync();
            StateHasChanged();
        }

    }
    private async Task<string> GetImageString(string imageUrl, string ext, string Rootfolder)
    {
        string? result = null;
        try
        {
            if (!string.IsNullOrEmpty(imageUrl))
            {
                ImageUpload a = await _DocumentUploadModel.GetDocument(imageUrl, Rootfolder, _SystemSettings.AccessToken);

                if (a != null)
                {
                    if (a.Imagebyte != null)
                    {
                        if (!string.IsNullOrEmpty(a.ImageExt) && a.ImageExt.Contains("pdf"))
                        {
                            string base64String = Convert.ToBase64String(a.Imagebyte, 0, a.Imagebyte.Length);
                            result = "data:application/pdf;base64," + base64String;
                        }
                        else if (!string.IsNullOrEmpty(a.ImageExt))
                        {
                            string base64String = Convert.ToBase64String(a.Imagebyte, 0, a.Imagebyte.Length);
                            result = "data:image/" + a.ImageExt + ";base64," + base64String;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        return result;
    }
    private async void OnCVChange(UploadChangeEventArgs args)
    {
        try
        {
            await UploadImageSpinner.ShowAsync();
            foreach (var file in args.Files)
            {
                if (file.FileInfo.Size <= 5242880)
                {
                    file.Stream.Position = 0;
                    if (file.FileInfo.Type.ToLower().Contains("pdf") || file.FileInfo.Type.ToLower().Contains("doc"))
                    {

                        string fileName = string.Empty;
                        if (file.FileInfo.Type.Trim().Contains("doc"))
                        {
                    
                            fileName = "CV_" + EmployeeReviewData.FirstName + "_" + EmployeeReviewData.LastName + "_" + EmployeeReviewData.Employeeid + ".pdf";

                            //Create a new document
                            Syncfusion.DocIO.DLS.WordDocument document;
                            if (file.FileInfo.Type.Contains("doc") && !file.FileInfo.Type.Contains("docx"))
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Doc);
                            }
                            else
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Docx);
                            }
                            //Creates an instance of the DocToPDFConverter
                            DocIORenderer render = new DocIORenderer();//Converts Word document into PDF document
                            PdfDocument pdfDocument = render.ConvertToPDF(document);

                            MemoryStream _ms = new MemoryStream();
                            pdfDocument.Save(_ms);
                            _ms.Position = 0;

                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "CV"
                                };


                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, _SystemSettings.AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                EmployeeReviewData.Photograph = fileName;
                                EmployeeReviewData.PhotographExt = "pdf";
                                CVString = result;

                                bytes = null;
                                _ms.Close();
                                _ms.Dispose();
                                pdfDocument.Close();
                                pdfDocument.Dispose();
                                render.Dispose();
                                document.Close();
                                document.Dispose();
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                        else
                        {

                            fileName = "CV_" + EmployeeReviewData.FirstName + "_" + EmployeeReviewData.LastName + "_" + EmployeeReviewData.Employeeid + ".pdf";
                            MemoryStream ms = new MemoryStream();
                            file.Stream.WriteTo(ms);
                            ms.Position = 0;
                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "CV"
                                };

                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, _SystemSettings.AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                EmployeeReviewData.Photograph = fileName;
                                EmployeeReviewData.PhotographExt = file.FileInfo.Type.Trim();
                                CVString = result;
                                bytes = null;
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                    }
                    else if (file.FileInfo.Type.ToLower().Contains("png") || file.FileInfo.Type.ToLower().Contains("gif") || file.FileInfo.Type.ToLower().Contains("jpeg"))
                    {

                        string fileName = "CV_" + EmployeeReviewData.FirstName + "_" + EmployeeReviewData.LastName + "_" + EmployeeReviewData.Employeeid + "." + file.FileInfo.Type.Trim();

                        byte[] bytes = file.Stream.ToArray();
                        string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                        ImageUpload m = new ImageUpload()
                            {
                                ImageName = fileName,
                                ImageExt = file.FileInfo.Type.Trim(),
                                Imagebyte = bytes,
                                Rootfolder = "CV"
                            };

                        var Requestresult = await _DocumentUploadModel.SaveDocument(m, _SystemSettings.AccessToken);
                        if (Requestresult != null && Requestresult.IsSuccess)
                        {
                            var result = "data:image/" + file.FileInfo.Type.Trim() + ";base64," + base64;
                            EmployeeReviewData.Photograph = fileName;
                            EmployeeReviewData.PhotographExt = file.FileInfo.Type.Trim();
                            CVString = result;
                            bytes = null;
                        }
                        else if (Requestresult != null)
                        {
                            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        }
                    }
                    else
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = "Please ensure that the uploaded document is an image(png/Jpeg/gif).", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                    }

                    //Save infor into the DB
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await UploadImageSpinner.HideAsync();
            StateHasChanged();
        }

    }
    #endregion Image

    #region Methods
    public void OnDistrictChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ADistrict> args)
    {
        if (args.ItemData != null)
        {
            DistrictChange = new Query().Where(new WhereFilter() { Field = "DistrictId", Operator = "equal", value = args.ItemData.DistrictId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnSubCountyChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ASubCounty> args)
    {
        if (args.ItemData != null)
        {
            SubCountyChange = new Query().Where(new WhereFilter() { Field = "SubCountyId", Operator = "equal", value = args.ItemData.SubCountyId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnParishChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AParish> args)
    {
        if (args.ItemData != null)
        {
            ParishChange = new Query().Where(new WhereFilter() { Field = "ParishId", Operator = "equal", value = args.ItemData.ParishId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnVillageChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AVillage> args)
    {
        if (args.ItemData != null)
        {
            VillageChange = new Query().Where(new WhereFilter() { Field = "ParishId", Operator = "equal", value = args.ItemData.ParishId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    
    private async void OnQualificationChange(UploadChangeEventArgs args)
    {
        try
        {
            await UploadQualificationSpinner.ShowAsync();
            foreach (var file in args.Files)
            {
                if (file.FileInfo.Size <= 5242880)
                {
                    file.Stream.Position = 0;
                    if (file.FileInfo.Type.ToLower().Contains("pdf") || file.FileInfo.Type.ToLower().Contains("doc"))
                    {

                        string fileName = string.Empty;
                        if (file.FileInfo.Type.Trim().Contains("doc"))
                        {


                            var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);

                            fileName =  QualificationReviewData.InstitutionName + "_" + Employeeid + ".pdf";

                            //Create a new document
                            Syncfusion.DocIO.DLS.WordDocument document;
                            if (file.FileInfo.Type.Contains("doc") && !file.FileInfo.Type.Contains("docx"))
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Doc);
                            }
                            else
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Docx);
                            }
                            //Creates an instance of the DocToPDFConverter
                            DocIORenderer render = new DocIORenderer();//Converts Word document into PDF document
                            PdfDocument pdfDocument = render.ConvertToPDF(document);
                            MemoryStream _ms = new MemoryStream();
                            pdfDocument.Save(_ms);
                            _ms.Position = 0;

                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "Qualifications"
                                };

                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                QualificationReviewData.QualificationDocumentName = fileName;
                                QualificationReviewData.QualificationDocumentExt = "pdf";
                                QualificationDocumentString = result;

                                bytes = null;
                                _ms.Close();
                                _ms.Dispose();
                                pdfDocument.Close();
                                pdfDocument.Dispose();
                                render.Dispose();
                                document.Close();
                                document.Dispose();
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                        else
                        {

                            var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);

                            fileName = a.FieldOfStudyDesc + "_" + QualificationReviewData.InstitutionName + "_" + Employeeid + ".pdf";
                            MemoryStream ms = new MemoryStream();
                            file.Stream.WriteTo(ms);
                            ms.Position = 0;
                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "Qualifications"
                                };

                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                QualificationReviewData.QualificationDocumentName = fileName;
                                QualificationReviewData.QualificationDocumentExt = file.FileInfo.Type.Trim();
                                QualificationDocumentString = result;
                                bytes = null;
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                    }
                    else if (file.FileInfo.Type.ToLower().Contains("png") || file.FileInfo.Type.ToLower().Contains("gif") || file.FileInfo.Type.ToLower().Contains("jpeg"))
                    {

                        var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);

                        string fileName = a.FieldOfStudyDesc + "_" + QualificationReviewData.InstitutionName + "_" + Employeeid + "." + file.FileInfo.Type.Trim();

                        byte[] bytes = file.Stream.ToArray();
                        string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                        ImageUpload m = new ImageUpload()
                            {
                                ImageName = fileName,
                                ImageExt = file.FileInfo.Type.Trim(),
                                Imagebyte = bytes,
                                Rootfolder = "Qualifications"
                            };

                        var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                        if (Requestresult != null && Requestresult.IsSuccess)
                        {
                            var result = "data:image/" + file.FileInfo.Type.Trim() + ";base64," + base64;
                            QualificationReviewData.QualificationDocumentName = fileName;
                            QualificationReviewData.QualificationDocumentExt = file.FileInfo.Type.Trim();
                            QualificationDocumentString = result;
                            bytes = null;
                        }
                        else if (Requestresult != null)
                        {
                            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        }
                    }
                    else
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = "Please ensure that the uploaded document is either a pdf or doc or docx or image(png/Jpeg/gif).", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                    }

                    //Save infor into the DB
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await UploadQualificationSpinner.HideAsync();
            StateHasChanged();
        }

    }
   public async Task OnEmployeeSpouseActionBegin(ActionEventArgs<EmployeeSpouse> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
            }
        }
        catch (Exception ex)
        {
            //await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
      
    }
   public async Task OnEmployeeSpouseActionComplete(ActionEventArgs<EmployeeSpouse> args)
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {
                AEmployeeSpouseGrid.PreventRender(false);
            
            }
    }
    public string GetEmployeeSpouseHeader(EmployeeSpouse Value)
        {
            if (Value.EmployeeSpouseId == 0)
            {
                return "Create Employee spouse record";
            }
            else
            {
                return "Edit Details for " + Value.FirstName;
            }
        }
    public async Task OnEmployeeChildrenActionBegin(ActionEventArgs<AEmployeeChildren> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {

            }
        }
        catch (Exception ex)
        {
            //await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }

    }
    public async Task OnEmployeeChildrenActionComplete(ActionEventArgs<AEmployeeChildren> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            AEmployeeChildrenGrid.PreventRender(false);

        }
    }
    public string GetEmployeeChildrenHeader(AEmployeeChildren Value)
    {
        if (Value.EmployeeKidsId == 0)
        {
            return "Create employee child record";
        }
        else
        {
            return "Edit Details for " + Value.FirstName;
        }
    }
    public async Task OnEmployeeQualificationActionBegin(ActionEventArgs<EmployeeQualification> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {

            }
        }
        catch (Exception ex)
        {
            //await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }

    }
    public async Task OnQualificationActionComplete(ActionEventArgs<EmployeeQualification> args)
    {
        try
        {
             if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
        
            QualificationGrid.PreventRender(false);
            if (!string.IsNullOrEmpty(args.RowData.QualificationDocumentName) && !string.IsNullOrEmpty(args.RowData.QualificationDocumentExt))
            {
                QualificationDocumentString = await GetImageString(args.RowData.QualificationDocumentName, args.RowData.QualificationDocumentExt, "Qualifications");
            }

        }
        }
        catch (Exception ex)
        {
            
            throw;
        }
       
    }
    public string GetQualificationHeader(EmployeeQualification Value)
    {
        if (Value.QualificationId == 0)
        {
            return "Add Employee Qualification";
        }
        else
        {
            return "Edit Details for " + Value.InstitutionName;
        }
    }

   public void OnRDistrictChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ADistrict> args)
    {
        if (args.ItemData != null)
        {
            DistrictRChange = new Query().Where(new WhereFilter() { Field = "DistrictId", Operator = "equal", value = args.ItemData.DistrictId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnRSubCountyChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ASubCounty> args)
    {
        if (args.ItemData != null)
        {
            SubRCountyChange = new Query().Where(new WhereFilter() { Field = "SubCountyId", Operator = "equal", value = args.ItemData.SubCountyId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnRParishChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AParish> args)
    {
        if (args.ItemData != null)
        {
            ParishRChange = new Query().Where(new WhereFilter() { Field = "ParishId", Operator = "equal", value = args.ItemData.ParishId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnRVillageChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AVillage> args)
    {
        if (args.ItemData != null)
        {
            VillageRChange = new Query().Where(new WhereFilter() { Field = "VillageId", Operator = "equal", value = args.ItemData.ParishId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    
    
    #endregion Methods
}
