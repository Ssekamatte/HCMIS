@page "/EmployeeList"
<PageTitle>Employees</PageTitle>
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using HCMIS.Model.EmployeeLeaveModels;
@using HCMIS.Repository;
@using HCMIS.Services;
@using HCMIS.ViewModel
@using System.Collections;
@*@using Syncfusion.Blazor.Schedule;*@
@inject HttpClient Http
@inject ApiConfig _ApiConfig;
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings

@inject DocumentUploadModel _DocumentUploadModel;

    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="width: 100%; color: darkblue; font-family: Cambria; padding: 5px; font: bolder;"><img src="/Image/logonhcc.png" height="35" width="50" /> <stong>|Employees</stong></li>
</ol>
<SfGrid Width="1300px" DataSource="@EmployeeData" AllowTextWrap="true" AllowExcelExport="true" AllowPdfExport="true"
        AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
    <GridTemplates>
        <DetailTemplate>
            @{
                ViewEmployeeMasterDetails Employee = context as ViewEmployeeMasterDetails;
                var _tasks = new List<Task>();
                _tasks.Add(Task.Run(async () =>
                {
                    if (!string.IsNullOrEmpty(Employee.Photograph))
                    {
                        ProfilePicString = await GetImageString(Employee.Photograph, Employee.PhotographExt, "ProfilePic");
                    }
                }));
            }
            <SfTab Height="350" HeaderPlacement="HeaderPosition.Top">
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Personal Info"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div>
                                @if (!string.IsNullOrEmpty(ProfilePicString))
                                {
                                     <div style="float:left;padding:45px;padding-top:70px"><img src="@ProfilePicString" class="photo"/></div>
                                }
                                  else
                               {
                                    <div style="float:left;padding:45px;padding-top:70px"><img class="photo" src="/Image/blank-profile-picture.png"/></div>
                               }
                                <div style="padding-top:42px">
                                    <span style="font-size: large;font-weight: bold;">@Employee?.EmployeeFullName</span><br />
                                    <h6 style="font-weight:400 !important;">@Employee?.CountryDesc</h6><br />
                                    <span class="title">Residence:</span><span class="content">@Employee?.DistrictResidence</span>-<span class="content">@Employee?.VillageResidence</span> <br />
                                      <span class="title">DoB:</span><span class="content">@Employee?.DoB</span><br />
                                    <span class="title">Next of Kin:</span><span class="content">@Employee?.NextofKinName</span><br />
                                    <span class="title">Contact Person:</span><span class="content">@Employee?.ContactPersonName</span><br />
                                </div>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                      <TabHeader Text="Administration"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div style="padding-top:42px">
                                <span class="title">Employee No:</span> <span class="content">@Employee?.EmployeeNumber</span><br />
                                <span class="title">Department:</span><span class="content">@Employee?.DepartmentDescription</span><br />
                                <span class="title">Job Title:</span><span class="content">@Employee?.JobDescription</span><br />
                                <span class="title">Date Joined:</span><span class="content">@Employee?.DateJoined</span><br />
                                <span class="title">Duration:</span><span class="content">@Employee?.DurationatWork</span><br />
                                <span class="title">Bank:</span><span class="content">@Employee?.BankDesc</span>-<span class="content">@Employee?.BankBranch</span><br />
                                 <span class="title">Account Number:</span><span class="content">@Employee?.BankAccountNumber</span><br />
                                <span class="title">Office Number:</span><span class="content">@Employee?.OfficialPhoneNumber</span><br />
                                 <span class="title">Email Address:</span> <span class="content">@Employee?.EmailAddress</span><br/>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                         <ChildContent>
                           <TabHeader Text="Education"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                               <div style="padding:25px">
                                <SfGrid DataSource="@QualificationData" TValue="ViewQualificationMasterDetails" Query="@(new Query().Where("Employeeid", "equal", Employee?.Employeeid))"
                                        AllowPaging="true" AllowTextWrap="true"   GridLines="GridLine.Both" AllowSelection="true">
                                    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                    <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
                                     <GridPageSettings PageSize="4"></GridPageSettings>
                                     <GridColumns>
                                        <GridColumn Field=@nameof(ViewQualificationMasterDetails.LevelofEducationDesc) HeaderText="LEVEL OF EDUCATION" Width="200"> </GridColumn>
                                        <GridColumn Field=@nameof(ViewQualificationMasterDetails.FieldOfStudyDesc) HeaderText="FIELD OF STUDY" Width="200"></GridColumn>
                                        <GridColumn Field=@nameof(ViewQualificationMasterDetails.InstitutionName) HeaderText="SCHOOL/INSTITUTION" Width="200"></GridColumn>
                                        <GridColumn Field=@nameof(ViewQualificationMasterDetails.StartDate) HeaderText="START DATE" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                                         <GridColumn Field=@nameof(ViewQualificationMasterDetails.EndDate) HeaderText="END DATE" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                                     </GridColumns>
                                    </SfGrid>
                               </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Leave"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                        <div style="padding:25px">
                           <SfTab @ref="Tab" CssClass="BlazorTab" Height="auto" LoadOn="ContentLoad.Demand">
                               <TabItems>
                                   <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Annual"></TabHeader>
                                        </ChildContent>
                                 <ContentTemplate>
                                         <div style="padding:25px">
                                          <SfGrid @ref="EmployeeLeaveGrid" TValue="AnnualLeave" AllowPaging="true"
                                                 AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
                                                AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit"})">
                                                        <SfDataManager AdaptorInstance="@typeof(AnnualLeaveAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                                <GridPageSettings PageSizes="true"></GridPageSettings>
                                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                        <GridEvents OnActionBegin="OnEmployeeLeaveActionBegin" OnActionComplete="@OnEmployeeLeaveActionComplete" TValue="AnnualLeave"></GridEvents>
                                                        <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="@DialogParams">
                                                       <Template Context="AnnualLeaveContext">
                                                            @{

                                                          EmployeeLeaveData = (AnnualLeaveContext as AnnualLeave);
                                                         if(EmployeeLeaveData != null)
                                                         {
                                                       //      EmployeeLeaveData.LeaveTypeId = 1;
                                                             <div style="padding:10px;">
                                                           
                                                                     <div class="col-md-12">
                                                                        <SfNumericTextBox @bind-Value="@(EmployeeLeaveData.SchedularId)" Enabled="false" Placeholder="SchedularId" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                                                   </div>
                                                                 <div class="col-md-12">
                                                                    <div class="row">
                                                                      <div class="col-md-12">
                                                                         <div class="col-md-4">
                                                                             <p>Scheduled Start Date</p>
                                                                              <SfDatePicker @bind-Value="@(EmployeeLeaveData.ScheduledStartDate)" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                                              <p> <ValidationMessage For="@(() => EmployeeLeaveData.ScheduledStartDate)" /></p>
                                                                          </div>
                                                                         <div class="col-md-4">
                                                                             <p>Scheduled End Date</p>
                                                                              <SfDatePicker @bind-Value="@(EmployeeLeaveData.ScheduledEndDate)" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                                              <p> <ValidationMessage For="@(() => EmployeeLeaveData.ScheduledEndDate)" /></p>
                                                                          </div>
                                                                          <div class="col-md-4">
                                                                                 <p>Days Applied</p>
                                                                                 <SfNumericTextBox @bind-Value="@(EmployeeLeaveData.NumberofDays)" Enabled="true" Format="N0" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                                            </div>
                                                                      </div>
                                                                  
                                                                     </div>
                                                                     </div>
                                                                  </div>
                                                              }
                                                            }
                                                       </Template>
                                                 </GridEditSettings>
                                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                        <GridPageSettings PageSize="50"></GridPageSettings>
                                                        <GridColumns>
                                                            <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeave.SchedularId) HeaderText="SchedularId" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeave.NumberofDays) HeaderText="DAYS APPLIED" Width="200"></GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeave.ScheduledStartDate) HeaderText="START DATE" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="200"></GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeave.ScheduledEndDate) HeaderText="END DATE" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="200"></GridColumn>
                                                        </GridColumns>
                                        </SfGrid>
                                        </div>
                                </ContentTemplate>
                                   </TabItem>
                               </TabItems>
                            </SfTab>
                         </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Displinary"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div style="padding:25px">
                                <SfGrid Width="1200px" DataSource="@DisplinaryData" TValue="ViewDisplinaryMasterDetails" Query="@(new Query().Where("EmployeeID", "equal", Employee?.Employeeid))"
                                        AllowPaging="true" AllowTextWrap="true">
                                         <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                    <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
                                    <GridPageSettings PageSize="4"></GridPageSettings>
                                    <GridColumns>
                                        <GridColumn Field=@nameof(ViewDisplinaryMasterDetails.EmployeeDisplinaryNumber) HeaderText="DISCIPLINARY REF" Width="150"> </GridColumn>
                                        <GridColumn Field=@nameof(ViewDisplinaryMasterDetails.DisplinaryReasonDescription) HeaderText="DISCIPLINARY INCIDENCE" Width="250"></GridColumn>
                                        <GridColumn Field=@nameof(ViewDisplinaryMasterDetails.DisplinaryDate) HeaderText="INCIDENCE DATE" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                                        <GridColumn Field=@nameof(ViewDisplinaryMasterDetails.CaseStatusDescription) HeaderText="INCIDENCE STATUS" Width="200"></GridColumn>
                                        <GridColumn Field=@nameof(ViewDisplinaryMasterDetails.DisplinaryActionDescription) HeaderText="DISCIPLINARY ACTION" Width="250"></GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
        </DetailTemplate>
    </GridTemplates>
    <GridColumns>
        <GridColumn Field=@nameof(ViewEmployeeMasterDetails.EmployeeFullName) HeaderText="EMPLOYEE NAME" Width="250"></GridColumn>
    </GridColumns>
</SfGrid>
@code {
    #region Toasters
    public static string? ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast? DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    SfTab? Tab;
    [Inject]
    public IEmployeeService employeeService { get; set; }
    private List<ViewEmployeeMasterDetails>? EmployeeData;
    ViewEmployeeMasterDetails ViewInputmodel { get; set; } = new();
    ViewEmployeeMasterDetails? ViewEmployeeData { get; set; }
    private List<ViewDisplinaryMasterDetails>? DisplinaryData;
    private List<ViewLeaveMasterDetails>? LeaveData;
    private List<ViewQualificationMasterDetails>? QualificationData;
    AnnualLeave? EmployeeLeaveData { get; set; }
    SfGrid<AnnualLeave>? EmployeeLeaveGrid;
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "25vh", Width = "30%" };
    protected override async Task OnInitializedAsync()
    {
        try
        {
            EmployeeLeaveData = new AnnualLeave();
          
            EmployeeData = (await employeeService.GetEmployeeList()).ToList();
            DisplinaryData = (await employeeService.GetDisplinaryList()).ToList();
            LeaveData = (await employeeService.GetLeaveList()).ToList();
            QualificationData = (await employeeService.GetQualificationList()).ToList();
            var _tasks = new List<Task>();
            _tasks.Add(Task.Run(async () =>
           {
               if (!string.IsNullOrEmpty(ViewInputmodel.Photograph))
               {
                   ProfilePicString = await GetImageString(ViewInputmodel.Photograph, ViewInputmodel.PhotographExt, "ProfilePic");
               }
           }));
        }
        catch (Exception ex)
        {
            throw;
        }

    }
    #region EmployeeData
    #region Declarations
    SfGrid<EmployeeQualification>? QualificationGrid;
    private EmployeeQualification? QualificationReviewData { get; set; }
    [Parameter]
    public int Employeeid { get; set; }
    [Parameter]
    public string? AccessToken { get; set; }
    [Parameter]
    public List<AFieldOfStudy>? FieldOfStudyData { get; set; }
    [Parameter]
    public List<ALevelofEducation>? LevelofEducationData { get; set; }
    SfSpinner? UploadQualificationSpinner;
    Query mainQuery { get; set; } = new();
    string QualificationDocumentString { get; set; } = null;
    string? ErrorMessage { get; set; } = null;
    //private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "95%" };
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    AEmployeeChildren? EmployeeChildrenReviewData { get; set; }
    EmployeeSpouse? EmployeeSpouseReviewData { get; set; }
    List<ARelationship>? ARelationshipData { get; set; }
    List<ABank>? BankData { get; set; }
    List<ADistrict>? DistrictData { get; set; }
    List<AParish>? ParishData { get; set; }
    List<ASubCounty>? SubCountyData { get; set; }
    List<AVillage>? VillageData { get; set; }
    string? CVString { get; set; } = null;
    List<string>? missingfields { get; set; } = new();
    SfSpinner? UploadImageSpinner;
    string? ProfilePicString { get; set; } = null;
    List<JobDescription>? JobDescriptionData { get; set; } = new();
    List<AGender>? GenderData { get; set; } = new();
    List<AMaritalStatus>? MaritalStatusData { get; set; } = new();
    List<ACountry>? CountryData { get; set; } = new();
    SfGrid<Employee>? EmployeeGrid;
    SfGrid<CreateEmployeeModel>? EmployeeModelGrid;
    SfGrid<EmployeeSpouse>? AEmployeeSpouseGrid;
    SfGrid<AEmployeeChildren>? AEmployeeChildrenGrid;
    List<AIdentificationType>? IdentificationTypeData { get; set; }
    List<ASkillLevel>? SkillLevelData { get; set; }
    List<ALanguageProlific>? LanguageProlificData { get; set; }
    List<ALanguages>? LanguagesData { get; set; }
    List<ADepartment>? DepartmentsData { get; set; }
    string? RegisterError { get; set; }
    string? RegisterSuccess { get; set; }
    Query MainQuery = new();
    Employee? EmployeeReviewData { get; set; }
    EmployeeRegistrationModel inputmodel { get; set; } = new EmployeeRegistrationModel();
    Syncfusion.Blazor.Grids.Action PreviousActionType { get; set; }
    Query SubCountyChange { get; set; } = new();
    Query ParishChange { get; set; } = new();
    Query DistrictChange { get; set; } = new();
    Query VillageChange { get; set; } = new();
    Query SubRCountyChange { get; set; } = new();
    Query ParishRChange { get; set; } = new();
    Query DistrictRChange { get; set; } = new();
    Query VillageRChange { get; set; } = new();

    #endregion Declarations
    #region Functions
    public class EmployeeMasterAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        public IToastService toastService;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public EmployeeMasterAdapter(HttpClient _http, IToastService ts, SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            _SystemSettings = systemSettings;
            _ApiConfig = apiConfig;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<CreateEmployeeModel>();
            try
            {
                await _SystemSettings.GetLoginCredentials();
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                HttpResponseMessage response;
                if (!string.IsNullOrEmpty(_SystemSettings.UserRole) && _SystemSettings.UserRole.Contains("Administrator"))
                {
                    response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Employeez/GetEmployeeList");
                }
                else
                {
                    response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Employeez/GetEmployeeById/{_SystemSettings.StaffId}");
                }
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    toastService.ShowError(response.ReasonPhrase);
                }
                data = JsonSerializer.Deserialize<List<CreateEmployeeModel>>(content, _options);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<CreateEmployeeModel>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
    }
    #endregion Functions
    #region Methods
    private async void OnImageChange(UploadChangeEventArgs args)
    {
        try
        {
            await UploadImageSpinner.ShowAsync();
            foreach (var file in args.Files)
            {
                if (file.FileInfo.Size <= 5242880)
                {
                    file.Stream.Position = 0;
                    if (file.FileInfo.Type.ToLower().Contains("png") || file.FileInfo.Type.ToLower().Contains("gif") || file.FileInfo.Type.ToLower().Contains("jpeg") || file.FileInfo.Type.ToLower().Contains("jpg"))
                    {

                        string fileName = "Profile_" + EmployeeReviewData.FirstName + "_" + EmployeeReviewData.LastName + "_" + EmployeeReviewData.Employeeid + "." + file.FileInfo.Type.Trim();

                        byte[] bytes = file.Stream.ToArray();
                        string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);
                        ImageUpload m = new ImageUpload()
                            {
                                ImageName = fileName,
                                ImageExt = file.FileInfo.Type.Trim(),
                                Imagebyte = bytes,
                                Rootfolder = "ProfilePic"
                            };
                        var Requestresult = await _DocumentUploadModel.SaveDocument(m, _SystemSettings.AccessToken);
                        if (Requestresult != null && Requestresult.IsSuccess)
                        {
                            var result = "data:image/" + file.FileInfo.Type.Trim() + ";base64," + base64;
                            EmployeeReviewData.Photograph = fileName;
                            EmployeeReviewData.PhotographExt = file.FileInfo.Type.Trim();
                            ProfilePicString = result;
                            bytes = null;
                        }
                        else if (Requestresult != null)
                        {
                            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        }
                    }
                    else
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = "Please ensure that the uploaded document is an image(png/Jpeg/gif/jpg).", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await UploadImageSpinner.HideAsync();
            StateHasChanged();
        }

    }
    private async Task<string> GetImageString(string imageUrl, string ext, string Rootfolder)
    {
        string? result = null;
        try
        {
            if (!string.IsNullOrEmpty(imageUrl))
            {
                ImageUpload a = await _DocumentUploadModel.GetDocument(imageUrl, Rootfolder, _SystemSettings.AccessToken);

                if (a != null)
                {
                    if (a.Imagebyte != null)
                    {
                        if (!string.IsNullOrEmpty(a.ImageExt) && a.ImageExt.Contains("pdf"))
                        {
                            string base64String = Convert.ToBase64String(a.Imagebyte, 0, a.Imagebyte.Length);
                            result = "data:application/pdf;base64," + base64String;
                        }
                        else if (!string.IsNullOrEmpty(a.ImageExt))
                        {
                            string base64String = Convert.ToBase64String(a.Imagebyte, 0, a.Imagebyte.Length);
                            result = "data:image/" + a.ImageExt + ";base64," + base64String;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        return result;
    }
    private async void OnCVChange(UploadChangeEventArgs args)
    {
        try
        {
            await UploadImageSpinner.ShowAsync();
            foreach (var file in args.Files)
            {
                if (file.FileInfo.Size <= 5242880)
                {
                    file.Stream.Position = 0;
                    if (file.FileInfo.Type.ToLower().Contains("pdf") || file.FileInfo.Type.ToLower().Contains("doc"))
                    {

                        string fileName = string.Empty;
                        if (file.FileInfo.Type.Trim().Contains("doc"))
                        {

                            fileName = "CV_" + EmployeeReviewData.FirstName + "_" + EmployeeReviewData.LastName + "_" + EmployeeReviewData.Employeeid + ".pdf";

                            //Create a new document
                            Syncfusion.DocIO.DLS.WordDocument document;
                            if (file.FileInfo.Type.Contains("doc") && !file.FileInfo.Type.Contains("docx"))
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Doc);
                            }
                            else
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Docx);
                            }
                            //Creates an instance of the DocToPDFConverter
                            DocIORenderer render = new DocIORenderer();//Converts Word document into PDF document
                            PdfDocument pdfDocument = render.ConvertToPDF(document);

                            MemoryStream _ms = new MemoryStream();
                            pdfDocument.Save(_ms);
                            _ms.Position = 0;

                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "CV"
                                };


                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, _SystemSettings.AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                EmployeeReviewData.Photograph = fileName;
                                EmployeeReviewData.PhotographExt = "pdf";
                                CVString = result;

                                bytes = null;
                                _ms.Close();
                                _ms.Dispose();
                                pdfDocument.Close();
                                pdfDocument.Dispose();
                                render.Dispose();
                                document.Close();
                                document.Dispose();
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                        else
                        {

                            fileName = "CV_" + EmployeeReviewData.FirstName + "_" + EmployeeReviewData.LastName + "_" + EmployeeReviewData.Employeeid + ".pdf";
                            MemoryStream ms = new MemoryStream();
                            file.Stream.WriteTo(ms);
                            ms.Position = 0;
                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "CV"
                                };

                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, _SystemSettings.AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                EmployeeReviewData.Photograph = fileName;
                                EmployeeReviewData.PhotographExt = file.FileInfo.Type.Trim();
                                CVString = result;
                                bytes = null;
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                    }
                    else if (file.FileInfo.Type.ToLower().Contains("png") || file.FileInfo.Type.ToLower().Contains("gif") || file.FileInfo.Type.ToLower().Contains("jpeg"))
                    {

                        string fileName = "CV_" + EmployeeReviewData.FirstName + "_" + EmployeeReviewData.LastName + "_" + EmployeeReviewData.Employeeid + "." + file.FileInfo.Type.Trim();

                        byte[] bytes = file.Stream.ToArray();
                        string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                        ImageUpload m = new ImageUpload()
                            {
                                ImageName = fileName,
                                ImageExt = file.FileInfo.Type.Trim(),
                                Imagebyte = bytes,
                                Rootfolder = "CV"
                            };
                        var Requestresult = await _DocumentUploadModel.SaveDocument(m, _SystemSettings.AccessToken);
                        if (Requestresult != null && Requestresult.IsSuccess)
                        {
                            var result = "data:image/" + file.FileInfo.Type.Trim() + ";base64," + base64;
                            EmployeeReviewData.Photograph = fileName;
                            EmployeeReviewData.PhotographExt = file.FileInfo.Type.Trim();
                            CVString = result;
                            bytes = null;
                        }
                        else if (Requestresult != null)
                        {
                            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        }
                    }
                    else
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = "Please ensure that the uploaded document is an image(png/Jpeg/gif).", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await UploadImageSpinner.HideAsync();
            StateHasChanged();
        }

    }
    public void OnDistrictChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ADistrict> args)
    {
        if (args.ItemData != null)
        {
            DistrictChange = new Query().Where(new WhereFilter() { Field = "DistrictId", Operator = "equal", value = args.ItemData.DistrictId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnSubCountyChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ASubCounty> args)
    {
        if (args.ItemData != null)
        {
            SubCountyChange = new Query().Where(new WhereFilter() { Field = "SubCountyId", Operator = "equal", value = args.ItemData.SubCountyId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnParishChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AParish> args)
    {
        if (args.ItemData != null)
        {
            ParishChange = new Query().Where(new WhereFilter() { Field = "ParishId", Operator = "equal", value = args.ItemData.ParishId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnVillageChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AVillage> args)
    {
        if (args.ItemData != null)
        {
            VillageChange = new Query().Where(new WhereFilter() { Field = "ParishId", Operator = "equal", value = args.ItemData.ParishId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    private async void OnQualificationChange(UploadChangeEventArgs args)
    {
        try
        {
            await UploadQualificationSpinner.ShowAsync();
            foreach (var file in args.Files)
            {
                if (file.FileInfo.Size <= 5242880)
                {
                    file.Stream.Position = 0;
                    if (file.FileInfo.Type.ToLower().Contains("pdf") || file.FileInfo.Type.ToLower().Contains("doc"))
                    {

                        string fileName = string.Empty;
                        if (file.FileInfo.Type.Trim().Contains("doc"))
                        {


                            var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);

                            fileName = a.FieldOfStudyDesc + "_" + QualificationReviewData.InstitutionName + "_" + Employeeid + ".pdf";

                            //Create a new document
                            Syncfusion.DocIO.DLS.WordDocument document;
                            if (file.FileInfo.Type.Contains("doc") && !file.FileInfo.Type.Contains("docx"))
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Doc);
                            }
                            else
                            {
                                document = new Syncfusion.DocIO.DLS.WordDocument(file.Stream, Syncfusion.DocIO.FormatType.Docx);
                            }
                            //Creates an instance of the DocToPDFConverter
                            DocIORenderer render = new DocIORenderer();//Converts Word document into PDF document
                            PdfDocument pdfDocument = render.ConvertToPDF(document);
                            MemoryStream _ms = new MemoryStream();
                            pdfDocument.Save(_ms);
                            _ms.Position = 0;

                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "Qualifications"
                                };

                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                QualificationReviewData.QualificationDocumentName = fileName;
                                QualificationReviewData.QualificationDocumentExt = "pdf";
                                QualificationDocumentString = result;

                                bytes = null;
                                _ms.Close();
                                _ms.Dispose();
                                pdfDocument.Close();
                                pdfDocument.Dispose();
                                render.Dispose();
                                document.Close();
                                document.Dispose();
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                        else
                        {

                            var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);

                            fileName = a.FieldOfStudyDesc + "_" + QualificationReviewData.InstitutionName + "_" + Employeeid + ".pdf";
                            MemoryStream ms = new MemoryStream();
                            file.Stream.WriteTo(ms);
                            ms.Position = 0;
                            byte[] bytes = file.Stream.ToArray();
                            string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                            ImageUpload m = new ImageUpload()
                                {
                                    ImageName = fileName,
                                    ImageExt = file.FileInfo.Type.Trim(),
                                    Imagebyte = bytes,
                                    Rootfolder = "Qualifications"
                                };

                            var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                            if (Requestresult != null && Requestresult.IsSuccess)
                            {
                                var result = "data:application/pdf;base64," + base64;
                                QualificationReviewData.QualificationDocumentName = fileName;
                                QualificationReviewData.QualificationDocumentExt = file.FileInfo.Type.Trim();
                                QualificationDocumentString = result;
                                bytes = null;
                            }
                            else if (Requestresult != null)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            }
                        }
                    }
                    else if (file.FileInfo.Type.ToLower().Contains("png") || file.FileInfo.Type.ToLower().Contains("gif") || file.FileInfo.Type.ToLower().Contains("jpeg"))
                    {

                        var a = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == QualificationReviewData.FieldOfStudyId);

                        string fileName = a.FieldOfStudyDesc + "_" + QualificationReviewData.InstitutionName + "_" + Employeeid + "." + file.FileInfo.Type.Trim();

                        byte[] bytes = file.Stream.ToArray();
                        string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                        ImageUpload m = new ImageUpload()
                            {
                                ImageName = fileName,
                                ImageExt = file.FileInfo.Type.Trim(),
                                Imagebyte = bytes,
                                Rootfolder = "Qualifications"
                            };

                        var Requestresult = await _DocumentUploadModel.SaveDocument(m, AccessToken);
                        if (Requestresult != null && Requestresult.IsSuccess)
                        {
                            var result = "data:image/" + file.FileInfo.Type.Trim() + ";base64," + base64;
                            QualificationReviewData.QualificationDocumentName = fileName;
                            QualificationReviewData.QualificationDocumentExt = file.FileInfo.Type.Trim();
                            QualificationDocumentString = result;
                            bytes = null;
                        }
                        else if (Requestresult != null)
                        {
                            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = Requestresult.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        }
                    }
                    else
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = "Please ensure that the uploaded document is either a pdf or doc or docx or image(png/Jpeg/gif).", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                    }

                    //Save infor into the DB
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await UploadQualificationSpinner.HideAsync();
            StateHasChanged();
        }

    }
    public string GetEmployeeSpouseHeader(EmployeeSpouse Value)
    {
        if (Value.EmployeeSpouseId == 0)
        {
            return "Create Employee spouse record";
        }
        else
        {
            return "Edit Details for " + Value.FirstName;
        }
    }
    public string GetEmployeeChildrenHeader(AEmployeeChildren Value)
    {
        if (Value.EmployeeKidsId == 0)
        {
            return "Create employee child record";
        }
        else
        {
            return "Edit Details for " + Value.FirstName;
        }
    }
    public string GetQualificationHeader(EmployeeQualification Value)
    {
        if (Value.QualificationId == 0)
        {
            return "Add Employee Qualification";
        }
        else
        {
            return "Edit Details for " + Value.InstitutionName;
        }
    }
    public void OnRDistrictChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ADistrict> args)
    {
        if (args.ItemData != null)
        {
            DistrictRChange = new Query().Where(new WhereFilter() { Field = "DistrictId", Operator = "equal", value = args.ItemData.DistrictId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnRSubCountyChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ASubCounty> args)
    {
        if (args.ItemData != null)
        {
            SubRCountyChange = new Query().Where(new WhereFilter() { Field = "SubCountyId", Operator = "equal", value = args.ItemData.SubCountyId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnRParishChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AParish> args)
    {
        if (args.ItemData != null)
        {
            ParishRChange = new Query().Where(new WhereFilter() { Field = "ParishId", Operator = "equal", value = args.ItemData.ParishId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnRVillageChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AVillage> args)
    {
        if (args.ItemData != null)
        {
            VillageRChange = new Query().Where(new WhereFilter() { Field = "VillageId", Operator = "equal", value = args.ItemData.ParishId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    public void OnEmployeeDtoActionBegin(ActionEventArgs<CreateEmployeeModel> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {

                if (args.RowData.AEmployeechildren == null)
                {
                    args.RowData.AEmployeechildren = new List<AEmployeeChildren>();
                }
                if (args.RowData.Employeespouse == null)
                {
                    args.RowData.Employeespouse = new List<EmployeeSpouse>();
                }
                if (args.RowData.Employeequalifications == null)
                {
                    args.RowData.Employeequalifications = new List<EmployeeQualification>();
                }
            }
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    //public async Task OnEmployeeDtoActionComplete(ActionEventArgs<ViewEmployeeMasterDetails> args)
    //{
    //   // ProfilePicString = await GetImageString(args.RowData.Photograph, args.RowData.PhotographExt, "ProfilePic");
    //    if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeforeBeginEdit))
    //    {
    //       //EmployeeModelGrid.PreventRender(false);
    //        ProfilePicString = await GetImageString(args.RowData.Photograph, args.RowData.PhotographExt, "ProfilePic");
    //    }
    //}
    #endregion Methods
    #endregion EmployeeData
    public async Task OnEmployeeLeaveActionBegin(ActionEventArgs<AnnualLeave> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                //   args.RowData.LeaveTypeId = 1;
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                //   args.RowData.LeaveTypeId = 1;
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
            }
        }
        catch (Exception ex)
        {

        }

    }
    public async Task OnEmployeeLeaveActionComplete(ActionEventArgs<AnnualLeave> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            EmployeeLeaveGrid?.PreventRender(false);
        }
    }

    public class AnnualLeaveAdapter : DataAdaptor
    {
         HttpClient Http;
        private readonly JsonSerializerOptions _options;
        public IToastService toastService;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public AnnualLeaveAdapter(HttpClient _http, IToastService ts, SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            _SystemSettings = systemSettings;
            _ApiConfig = apiConfig;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<AnnualLeave>();
            try
            {
                await _SystemSettings.GetLoginCredentials();
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                HttpResponseMessage response;
                if (!string.IsNullOrEmpty(_SystemSettings.UserRole) && _SystemSettings.UserRole.Contains("Administrator"))
                {
                    response = await Http.GetAsync($"{_ApiConfig.BaseUrl}EmployeeLeave/GetAnnualLeaveList");
                }
                else
                {
                    response = await Http.GetAsync($"{_ApiConfig.BaseUrl}EmployeeLeave/GetAnnualLeaveById/{_SystemSettings.StaffId}");
                }
                var content = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    toastService.ShowError(response.ReasonPhrase);
                }
                data = JsonSerializer.Deserialize<List<AnnualLeave>>(content, _options);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<AnnualLeave>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as AnnualLeave);
                await _SystemSettings.GetLoginCredentials();
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}EmployeeLeave/CreateAnnualLeave", httpContent);
                if (result.IsSuccessStatusCode)
                {
                //    toastService.ShowSuccess($"{val.EmployeeHeader.FirstName}  record was sucessfully saved");
                }
                else
                {
                    toastService.ShowError(result.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

    }
}
<style type="text/css">
    .personal-wrap {
        float: left;
        padding: 45px;
        padding-top: 70px
    }

    .top-padding {
        padding-top: 42px;
    }

    .first-name {
        font-size: x-large;
        font-weight: bold;
    }

    .photo {
        width: 100px;
        height: 100px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0,0,0,0.2);
    }

    .title {
        font-size: large;
        font-weight: 500;
    }

    .title-font {
        font-weight: 400;
    }

    .left-div-wrap {
        height: 260px;
        width: 450px;
        float: left;
    }

    .right-div-wrap {
        width: 265px;
        float: left;
        padding: 40px;
    }

    .inner-padding {
        padding: 25px;
    }

    .schedule-div {
        width: 450px;
        padding: 25px;
    }

    .content {
        font-size: large;
    }

    .e-tab .e-content {
        overflow-y: hidden;
    }

    .e-tab .e-tab-header {
        border: 0;
    }

    .e-tab {
        padding: 10px;
    }
</style>
