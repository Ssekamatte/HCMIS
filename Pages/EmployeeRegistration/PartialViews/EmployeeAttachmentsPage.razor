@* <h3>EmployeeAttachment</h3> *@
@using Blazored.Toast.Services;
@using HCMIS.Data;
@using HCMIS.Interface;

@using HCMIS.SHARED.Data
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel;
@using Syncfusion.DocIORenderer;
@using Syncfusion.Pdf;
@inject IToastService toasterservice;
@inject DocumentUploadModel _DocumentUploadModel;

<style>
     /*Manage Records Button*/
    .e-grid .e-icons:not(.e-btn-icon) {
        color: #00cc00;
        color: floralwhite;
        font-size: smaller;
        font-weight: bolder;
    }
</style>


@if (DataSource != null)
{
    <SfGrid @ref="EmployeeAttachmentGrid" DataSource=@DataSource ID="BSCGrid" TValue="EmployeeAttachment"
            Toolbar="@BSCAttachmentToolbarItems" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
            AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
        <GridEvents OnActionBegin="OnAttachmentActionBegin"
                    OnActionComplete="@OnAttachmentActionComplete" TValue="EmployeeAttachment"></GridEvents>
        <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="AttachmentDialog">
            <Template Context="AttachmentContext">
                @{
                    AttachmentData = (AttachmentContext as EmployeeAttachment);
                    <div style="padding:15px;">
                        <div class="form-row">
                            <div class="form-group col-md-12" hidden>
                                <SfNumericTextBox ID="AttachmentId" @bind-Value="@(AttachmentData.AttachmentId)" Enabled="false" Placeholder="Attachment Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                            </div>

                            <div class="form-group col-md-12">
                                <p>Attachment Name <span style="color:red;">*</span></p>
                                <SfTextBox Multiline="true" @bind-Value="@(AttachmentData.AttachmentName)" Enabled="true" Placeholder="Attachment Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                            </div>

                            @if (!string.IsNullOrEmpty(AttachmentData.AttachmentName))
                            {
                                <div class="form-group col-md-12">
                                    <p class="alert-info" style="padding:10px;">Ensure that the document does not exceed 5 Mega Bytes (MB) and is of the following formats (Microsoft Word, PDF or an Image (png,gif,jpeg and jpg))</p>
                                    <InputFile class="form-control" OnChange="@SingleUpload" />
                                    <div>
                                        <SfSpinner @ref="UploadAttachmentSpinner" CssClass="SpinnerClass" Visible="false" Size="30" Label="Saving document Please wait......."> </SfSpinner>
                                    </div>
                                </div>
                            }

                            <div class="form-group col-md-12">
                                @if (!string.IsNullOrEmpty(ImageString))
                                {
                                    @if (!string.IsNullOrEmpty(AttachmentData.AttachmentUrl) && !string.IsNullOrEmpty(AttachmentData.AttachmentExt))
                                    {
                                        if (AttachmentData.AttachmentExt.Contains("pdf") || AttachmentData.AttachmentExt.Contains("doc") || AttachmentData.AttachmentExt.Contains("docx"))
                                        {
                                            <embed src="@ImageString" width="100%" height="600px" style="border: none;" frameborder="0" allowfullscreen="true" />
                                        }
                                        else
                                        {
                                            <img src="@ImageString" alt="@AttachmentData.AttachmentUrl" class="img-thumbnail Imagecenter" style="margin-bottom:10px; width:100%;" />
                                        }
                                    }

                                }


                            </div>
                        </div>
                    </div>
                }
            </Template>
            <FooterTemplate Context="AttachmentFooterContext">
                @if (IsSaveDisabled == false)
                {
                    <SfButton IsPrimary="true" Disabled="@IsSaveDisabled" OnClick="@OnSaveDocumentClick">Save Document</SfButton>
                    <SfButton IsPrimary="false" Disabled="@IsSaveDisabled" OnClick="@OnCloseDocumentClick">Close</SfButton>
                }

            </FooterTemplate>
        </GridEditSettings>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSize="20"></GridPageSettings>
        <GridColumns>
            @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
            <GridColumn Field=@nameof(EmployeeAttachment.AttachmentId) HeaderText="Attachment Id" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
            <GridColumn Field=@nameof(EmployeeAttachment.AttachmentName) HeaderText="Attachment"></GridColumn>
            <GridColumn HeaderText="Manage Records" Width="140">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="View" })" Title="View"></GridCommandColumn>
                    @*@if (!string.IsNullOrEmpty(UserRole) && (UserRole.Contains("Data Entry Officer") || UserRole.Contains("Administrator") || UserRole.Contains("Unit Head") || UserRole.Contains("Responsible Reporting Staff for Division")))
                {
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                }
                else
                {
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="View" })" Title="View"></GridCommandColumn>
                }*@
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    [Parameter]
    public List<EmployeeAttachment>? HeaderAttachmentData { get; set; }
    [Parameter]
    public int EmployeeId { get; set; }
    [Parameter]
    public EventCallback<List<EmployeeAttachment>?> OnHeaderAttachmentToggled { get; set; }
    SfGrid<EmployeeAttachment>? EmployeeAttachmentGrid { get; set; }
    List<EmployeeAttachment>? DataSource { get; set; }
    EmployeeAttachment? AttachmentData { get; set; }
    SfSpinner? UploadAttachmentSpinner;
    bool IsSaveDisabled { get; set; }
    [Parameter]
    public string? UserRole { get; set; }
    [Parameter]
    public List<object>? BSCAttachmentToolbarItems { get; set; }
    [Parameter]
    public string? AccessToken { get; set; }
    int? PreviousEmployeeId { get; set; }
    int? AttachmentId { get; set; }

    string? ImageString { get; set; }
    long maxFileSize = 5242880/* 1024L * 1024L * 1024L * 2L */;//5 Megabytes
    string fileName = string.Empty;
    int random = -9999;
    private DialogSettings AttachmentDialog = new DialogSettings { Height = "auto", MinHeight = "5vh", Width = "80%" };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            if (PreviousEmployeeId != EmployeeId)
            {
                PreviousEmployeeId = EmployeeId;
                DataSource = new List<EmployeeAttachment>();
                if (HeaderAttachmentData != null && HeaderAttachmentData.Count() > 0)
                {
                    DataSource.AddRange(HeaderAttachmentData);
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    private async Task OnSaveDocumentClick()
    {
        if (EmployeeAttachmentGrid != null)
        {
            await EmployeeAttachmentGrid.EndEditAsync();
        }
    }
    private async Task OnCloseDocumentClick()
    {
        if (EmployeeAttachmentGrid != null)
        {
            await EmployeeAttachmentGrid.CloseEditAsync();
        }
    }

    public async Task OnAttachmentActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<EmployeeAttachment> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            args.Data.AttachmentId = random;
            random++;
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (string.IsNullOrEmpty(args.Data.AttachmentName))
            {
                toasterservice.ShowWarning("Please enter the Report/Attachment Name");
                args.Cancel = true;
            }
            // else if (string.IsNullOrEmpty(args.Data.AttachmentUrl))
            // {
            //     toasterservice.ShowWarning("Please enter upload the Report/attachment");
            //     args.Cancel = true;
            // }
            else
            {
                //args.Data.EmployeeId = EmployeeId.Value;
            }
        }
    }


    public async Task OnAttachmentActionComplete(Syncfusion.Blazor.Grids.ActionEventArgs<EmployeeAttachment> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            EmployeeAttachmentGrid.PreventRender(false);
            if (!string.IsNullOrEmpty(args.RowData.AttachmentUrl) && !string.IsNullOrEmpty(args.RowData.AttachmentExt))
            {
                ImageString = await GetImageString(args.RowData.AttachmentUrl, args.RowData.AttachmentExt, "EmployeeQualification");
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Refresh))
        {
            await OnHeaderAttachmentToggled.InvokeAsync(DataSource);
        }
    }

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        try
        {
            IsSaveDisabled = true;
            await UploadAttachmentSpinner.ShowAsync();
            MemoryStream ms = new MemoryStream();
            await e.File.OpenReadStream(maxFileSize).CopyToAsync(ms);

            ms.Position = 0;

            if (e.File.ContentType.ToLower().Contains("png") || e.File.ContentType.ToLower().Contains("gif") || e.File.ContentType.ToLower().Contains("jpeg") || e.File.ContentType.ToLower().Contains("jpg"))
            {
                var passextension = e.File.ContentType.Split("/");
                fileName = "EmployeeQualification_" + AttachmentData.AttachmentName + "." + passextension[1].Trim();
                byte[] bytes = ms.ToArray();
                //byte[] bytes = file.Stream.ToArray();
                string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);
                DocumentBytes m = new DocumentBytes()
                    {
                        DocumentName = fileName,
                        DocumentExt = e.File.ContentType.Trim(),
                        DocumentByte = bytes,
                        DocumentFolder = "EmployeeQualification"
                    };

                await _DocumentUploadModel.UploadDocument(m);
                var result = "data:application/pdf;base64," + base64;
                AttachmentData.AttachmentUrl = fileName;
                AttachmentData.AttachmentExt = e.File.ContentType.Trim();
                ImageString = result;
                bytes = null;

            }

            else if (e.File.ContentType.ToLower().Contains("pdf") || e.File.ContentType.ToLower().Contains("doc"))
            {
                string fileName = string.Empty;
                if (e.File.ContentType.ToLower().Contains("doc"))
                {
                    ms.Position = 0;
                    fileName = "EmployeeQualification_" + AttachmentData.AttachmentName + ".pdf";
                    //Create a new document
                    Syncfusion.DocIO.DLS.WordDocument document;
                    if (e.File.ContentType.Contains("doc") && !e.File.ContentType.Contains("docx"))
                    {
                        document = new Syncfusion.DocIO.DLS.WordDocument(ms, Syncfusion.DocIO.FormatType.Doc);
                    }
                    else
                    {
                        document = new Syncfusion.DocIO.DLS.WordDocument(ms, Syncfusion.DocIO.FormatType.Docx);
                    }
                    //Creates an instance of the DocToPDFConverter
                    DocIORenderer render = new DocIORenderer();//Converts Word document into PDF document
                    PdfDocument pdfDocument = render.ConvertToPDF(document);

                    MemoryStream _ms = new MemoryStream();
                    pdfDocument.Save(_ms);
                    _ms.Position = 0;


                    DocumentBytes m = new DocumentBytes();
                    m.DocumentName = fileName;
                    m.DocumentFolder = "EmployeeQualification";
                    m.DocumentByte = _ms.ToArray();
                    m.DocumentExt = "pdf";

                    await _DocumentUploadModel.UploadDocument(m);
                    _ms.Position = 0;
                    byte[] _bytes = _ms.ToArray();
                    string base64 = Convert.ToBase64String(_bytes, 0, _bytes.Length);

                    var result = "data:application/pdf;base64," + base64;
                    AttachmentData.AttachmentUrl = fileName;
                    AttachmentData.AttachmentExt = "pdf";
                    ImageString = result;
                }

                else
                {
                    fileName = "EmployeeQualification_" + AttachmentData.AttachmentName + ".pdf";

                    ms.Position = 0;
                    byte[] bytes = ms.ToArray();
                    string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                    DocumentBytes m = new DocumentBytes()
                        {
                            DocumentName = fileName,
                            DocumentExt = e.File.ContentType.Trim(),
                            DocumentByte = bytes,
                            DocumentFolder = "EmployeeQualification"
                        };

                    await _DocumentUploadModel.UploadDocument(m);
                    var result = "data:application/pdf;base64," + base64;
                    AttachmentData.AttachmentUrl = fileName;
                    AttachmentData.AttachmentExt = e.File.ContentType.Trim();
                    ImageString = result;
                    bytes = null;
                }

            }
            else
            {
                toasterservice.ShowWarning("Please ensure that the uploaded document is an image(png/Jpeg/gif/jpg) or pdf or word document (doc,docx).");
            }
        }
        catch (Exception ex)

        {
            throw ex;
        }

        finally
        {
            IsSaveDisabled = false;
            await UploadAttachmentSpinner.HideAsync();
            StateHasChanged();
        }

    }

    private async Task<string> GetImageString(string imageUrl, string ext, string DocumentFolder)
    {
        string result = null;
        try
        {
            if (!string.IsNullOrEmpty(imageUrl))
            {
                var a = await _DocumentUploadModel.GetDocument(imageUrl, DocumentFolder);

                if (a != null)
                {
                    if (a.DocumentExt.Contains("pdf"))
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        result = "data:application/pdf;base64," + base64String;
                    }
                    else
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        result = "data:image/" + a.DocumentExt + ";base64," + base64String;
                    }

                }
            }
        }
        catch (Exception ex)
        {
            toasterservice.ShowError(ex.Message.ToString());
        }
        return result;
    }


}

