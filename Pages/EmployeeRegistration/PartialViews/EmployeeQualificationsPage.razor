@* @page "/EmployeeQualificationsPage" *@
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@using HCMIS.Interface;
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using System.Collections;
@using System.IO;
@using HCMIS.SHARED.Models;
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation;
@inject SystemSettings _SystemSettings;
@using HCMIS.ViewModel;
@inject IToastService toastService;
@inject IAuthenticationService AuthService;

<SfGrid @ref="@EmployeeQualificationGrid" DataSource="@datasource" GridLines="GridLine.Both"
        TValue="EmployeeQualification" ID="Grid1" AllowTextWrap="true" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit","Cancel"})">
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false" NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" CellSelectionMode="CellSelectionMode.Box" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
    <GridEvents CellSelected="CellSelectHandler"
                CellSaved="CellSavedHandler"
                OnBatchAdd="BatchAddHandler"
                TValue="EmployeeQualification">
    </GridEvents>

    <GridColumns>
        <GridColumn Field=@nameof(EmployeeQualification.QualificationId)
                    HeaderText="Qualification Id"
                    TextAlign="TextAlign.Justify"
                    IsPrimaryKey="true"
                    IsIdentity="true"
                    Visible="false"
                    Width="180"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeQualification.InstitutionName)
                    HeaderText="Institution"
                    TextAlign="TextAlign.Justify"
                    AllowEditing="true"
                    ValidationRules="@(new ValidationRules { Required = false })"
                    Width="80"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
        <GridForeignColumn Field=@nameof(EmployeeQualification.LevelofEducationId)
                           HeaderText="Education Level"
                           Width="80"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ALevelofEducation.LevelofEducationId))"
                           ForeignKeyValue="@(nameof(ALevelofEducation.LevelofEducationDesc))"
                           ForeignDataSource="@LevelofEducationData"
                           AllowFiltering="false"
                           IsFrozen="false"
                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridForeignColumn>
        <GridForeignColumn Field=@nameof(EmployeeQualification.DegreeClassId)
                           HeaderText="Degree Class"
                           Width="80"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ADegreeClass.DegreeClassId))"
                           ForeignKeyValue="@(nameof(ADegreeClass.DegreeClassDesc))"
                           ForeignDataSource="@DegreeClassData"
                           AllowFiltering="false"
                           IsFrozen="false"
                           CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridForeignColumn>
        <GridColumn Field=@nameof(EmployeeQualification.QualificationAttained)
                    HeaderText="Award/Qualification Attained"
                    Width="80"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeQualification.StartDate)
                    HeaderText="From"
                    EditType="EditType.DatePickerEdit"
                    Format="dd/MMMM/yyyy"
                    Type="ColumnType.Date"
                    Width="80"
                    AllowEditing="true"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeQualification.IsCurrent)
                    HeaderText="Current"
                    DisplayAsCheckBox="true"
                    Width="150"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
        <GridColumn Field=@nameof(EmployeeQualification.EndDate)
                    HeaderText="To"
                    EditType="EditType.DatePickerEdit"
                    Format="dd/MMMM/yyyy"
                    Type="ColumnType.Date"
                    Width="80"
                    AllowEditing="true"
                    CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    [Parameter]
    public List<EmployeeQualification>? appraiseecommentsdata { get; set; }
    [Parameter]
    public int EmployeeId { get; set; }
    [Parameter]
    public EventCallback<List<EmployeeQualification>?> onscorecardtoggle { get; set; }
    public SfGrid<EmployeeQualification>? EmployeeQualificationGrid { get; set; }
    List<EmployeeQualification>? datasource { get; set; }

    Syncfusion.Blazor.Grids.AggregateTemplateContext? aggregate { get; set; }
    int? previousEmployeeId { get; set; }
    [Parameter]
    public Syncfusion.Blazor.Grids.Action _previous { get; set; }
    int random = -9999;

    [Parameter]
    public List<ADegreeClass>? DegreeClassData { get; set; }

    [Parameter]
    public List<ALevelofEducation>? LevelofEducationData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (previousEmployeeId != EmployeeId)
        {
            int countid = -10000;
            previousEmployeeId = EmployeeId;
            datasource = new List<EmployeeQualification>();
            if (appraiseecommentsdata != null && appraiseecommentsdata.Count() > 0)
            {
                datasource.AddRange(appraiseecommentsdata);
            }
        }
    }

    //Enable cell edit on single click
    public async Task CellSelectHandler(CellSelectEventArgs<EmployeeQualification> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await EmployeeQualificationGrid.GetSelectedRowCellIndexes();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await EmployeeQualificationGrid.GetColumnFieldNames();
            // edit the selected cell using the cell index and column name
            await EmployeeQualificationGrid.EditCell(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }

    private async Task CellSavedHandler(CellSaveArgs<EmployeeQualification> args)
    {
        try
        {

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            await EmployeeQualificationGrid.EndEdit();
            await onscorecardtoggle.InvokeAsync(datasource);
        }
    }

    public void BatchAddHandler(BeforeBatchAddArgs<EmployeeQualification> Args)
    {
        Args.DefaultData.QualificationId = random;
        random++;
    }

}


