@page "/JobDescriptionPage"

@using HCMIS.Data
@using HCMIS.Interface
@using HCMIS.Model
@using System.Text.Json
@using HCMIS.SHARED.DTO
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Collections;
@inject HttpClient Http
@inject AppState AppState
@inject ApiConfig _ApiConfig;
@inject NavigationManager navManager
@inject DocumentUploadModel _DocumentUploadModel;
@inject IToastService toastService;
@inject IJSRuntime JSRuntime;
@inject IAuthenticationService AuthService;

<style>

    p {
        margin-top: 0;
        margin-bottom: 1rem;
        font-size: medium;
        font-weight: bold;
    }

</style>

<BreadCrumbPage Module="HCMIS" Submodule="JOB DESCRIPTION DETAILS" />

@if (isloading == true)
{
    <div style="padding:25px">
        <div class="loader">
            <div class="loader--dot"></div>
            <div class="loader--dot"></div>
            <div class="loader--dot"></div>
            <div class="loader--dot"></div>
            <div class="loader--dot"></div>
            <div class="loader--dot"></div>
            <div class="loader-Loading-text"></div>
        </div>
    </div>
}
else
{
    
}

<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="@ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false" CssClass="const">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <HCMIS.Pages.HR.JD.PartialView.JobDescriptionSearchPage JobTitleData="@JobTitleData"
                                                                                DepartmentData="@DepartmentData"
                                                                                onsearchtoggle="@ToggleSearchQuery">
                        </HCMIS.Pages.HR.JD.PartialView.JobDescriptionSearchPage>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>
    </div>
</div>

<SfGrid @ref="@JobDescriptionGrid" TValue="JobDescription" ID="Grid1" AllowPaging="true" AllowFiltering="true" AllowReordering="true" 
    AllowResizing="true" AllowGrouping="false" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" 
    Toolbar="@(new List<string>() {"Add", "Cancel", "Update","ExcelExport","PdfExport","CsvExport"})" Query="@MainQuery" Height="600"
        EnableVirtualMaskRow="true" EnableVirtualization="true" EnableColumnVirtualization="false">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <GridEvents OnToolbarClick="@GridToolbarClick" TValue="JobDescription"></GridEvents>
    <SfDataManager AdaptorInstance="@typeof(JobDescriptionAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEvents OnActionComplete="@OnJobDescriptionActionComplete" OnActionBegin="@OnJobDescriptionActionBegin" TValue="JobDescription"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
        <HeaderTemplate>
            @{
                var text = GetJobDescriptionHeader((context as JobDescription));
                                <div class="headerbandimg">
                            <span>@text</span>
                                </div>
            }
        </HeaderTemplate>
        <Template Context="JobDescriptionContext">
            @{
                JobDescriptionReviewData = (JobDescriptionContext as JobDescription);
                if(JobDescriptionReviewData != null)
                {
                            <SfTab HeaderPlacement="HeaderPosition.Top" LoadOn="ContentLoad.Demand" OverflowMode="@OverflowMode.Scrollable" >
                                <TabItems>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Job Description"></TabHeader> 
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div style="margin:10px;">
                                                <div class="row">
                                                    <div class="col-md-12" hidden>
                                                        <SfNumericTextBox @ref="@JobDescriptionIdTxt" @bind-Value="@(JobDescriptionReviewData.JobDescriptionId)" ID="JobDescriptionId" TValue="int" Width="100%" Format="N0" Placeholder="Job Description Id" Step="1" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                    </div>                                                    

                                                    <div class="col-md-6">
                                                         <p>Post:<span style="color:red;">*</span></p>
                                                          @*Query="@(JobTitleChildQuery)" *@
                                                        <SfDropDownList @ref="JobTitleObj" @bind-Value="@(JobDescriptionReviewData.JibTitleId)"TItem="AJobTitle" TValue="int?" Width="100%" PopupHeight="350px" 
                                                        AllowFiltering=true IgnoreAccent=true DataSource="@JobTitleData"  Placeholder="Please Select" 
                                                        @onclick="@((args) => OnClick(JobTitleObj.ID))" Query="@LocalDataQuery"  EnableVirtualization="true">
                                                            <DropDownListFieldSettings Value="JobTitleId" Text="@(nameof(AJobTitle.JobTitleDescription))"></DropDownListFieldSettings>
                                                            <DropDownListEvents TItem="AJobTitle" TValue="int?" ValueChange="@JobTitleValueChangeHandler" OnOpen="@((e)=>OnOpenHandler(JobTitleObj.ID))" ></DropDownListEvents>
                                                        </SfDropDownList>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <p>Department:<span style="color:red;">*</span></p>
                                                        <SfDropDownList @bind-Value="@(JobDescriptionReviewData.DepartmentId)" TItem="ADepartment" Enabled="false" TValue="int?" Width="100%" PopupHeight="230px" AllowFiltering=true IgnoreAccent=true DataSource="@DepartmentData"  Placeholder="Please Select">
                                                            <DropDownListFieldSettings Text="DepartmentDescription" Value="DepartmentId"></DropDownListFieldSettings>
                                                            @*<DropDownListEvents TItem="ADepartment" TValue="int?" ValueChange="@DepartmentValueChangeHandler" ></DropDownListEvents>*@
                                                        </SfDropDownList>
                                                    </div>

                                                    <div class="col-md-6">

                                                        <p>Job Type:<span style="color:red;">*</span></p>
                                                        <SfDropDownList @bind-Value="@(JobDescriptionReviewData.JobTypeId)" TItem="AJobType" TValue="int?" Width="100%" PopupHeight="230px" DataSource="@JobTypeData"  Placeholder="Please Select">
                                                            <DropDownListFieldSettings Text="TypeDescription" Value="JobTypeId"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </div>


                                                     <div class="col-md-6">
                                                         <p>Salary Scale:</p>
                                                        <SfDropDownList @bind-Value="@(JobDescriptionReviewData.SalaryScaleId)" TItem="ASalaryScale" TValue="int?" Width="100%" PopupHeight="350px" DataSource="@SalaryScaleData"  Placeholder="Please Select"  
                                                        Query="@LocalDataQuery"  EnableVirtualization="true">
                                                            <DropDownListFieldSettings Text="SalaryScaleDescription" Value="SalaryScaleId"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                     </div>                                                    

                                                    <div class="col-md-6">
                                                        <p>Minimum Level of Education:<span style="color:red;">*</span></p>
                                                        <SfDropDownList @bind-Value="@(JobDescriptionReviewData.MinimumLevelOfEducationId)" TItem="ALevelofEducation" TValue="int?" Width="100%" PopupHeight="350px" DataSource="@LevelofEducationData" 
                                                        Placeholder="Please Select"  Query="@LocalDataQuery"  EnableVirtualization="true">
                                                            <DropDownListFieldSettings Text="LevelofEducationDesc" Value="LevelofEducationId"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </div>

                                                    @if(JobDescriptionReviewData.MinimumLevelOfEducationId == 1 || JobDescriptionReviewData.MinimumLevelOfEducationId == 4 || JobDescriptionReviewData.MinimumLevelOfEducationId == 5 || JobDescriptionReviewData.MinimumLevelOfEducationId == 6 ||
                                                    JobDescriptionReviewData.MinimumLevelOfEducationId == 7 || JobDescriptionReviewData.MinimumLevelOfEducationId == 8)
                                                    {
                                                        <div class="col-md-6">
                                                            <p>Field of Study:<span style="color:red;">*</span></p>
                                                            <SfMultiSelect @ref="@FieldDatasourceObj" TValue="int[]" TItem="AFieldOfStudy" AllowFiltering="true" Enabled="true" Mode="@VisualMode.CheckBox" DataSource="@FieldOfStudyData" ShowSelectAll="true"
                                                                           EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Field" FloatLabelType="FloatLabelType.Never"
                                                                           FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" PopupHeight="350px" Query="@LocalDataQuery" EnableVirtualization="true">
                                                                <MultiSelectFieldSettings Value="@nameof(AFieldOfStudy.FieldOfStudyId)" Text="@nameof(AFieldOfStudy.FieldOfStudyDesc)"></MultiSelectFieldSettings>
                                                                <MultiSelectEvents TValue="int[]" TItem="AFieldOfStudy" ValueChange="OnFieldDatasourceChange" DataBound="OnFieldDatasourceBound"></MultiSelectEvents>
                                                            </SfMultiSelect>
                                                        </div>
                                                    }                                                    

                                                    <div class="col-md-6">
                                                        <p>Minimum Years of Experience:<span style="color:red;">*</span></p>
                                                        <SfDropDownList @bind-Value="@(JobDescriptionReviewData.MinimumYearsofExperience)" TItem="AYearsofExperience" TValue="double?" Width="100%" PopupHeight="350px" DataSource="@YearsofExperienceData"
                                                                Placeholder="Please Select" Query="@LocalDataQuery" EnableVirtualization="true">
                                                            <DropDownListFieldSettings Text="YearsofExperienceDesc" Value="YearsofExperienceId"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </div> 

                                                    <div class="col-md-6">
                                                        <p>No of Vacancies:<span style="color:red;">*</span></p>
                                                        <SfNumericTextBox @bind-Value="@(JobDescriptionReviewData.Vacancies)" TValue="int?" Width="100%" Format="N0" Placeholder="Enter Number" Step="1" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                    </div>  

                                                    <div class="col-md-6">
                                                        <p>Responsible For:<span style="color:red;">*</span></p>
                                                         <SfTextBox Multiline=true rows="2" @bind-Value="@(JobDescriptionReviewData.ResponsibleFor)" Placeholder="Type Here ...." Width="100%" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                    </div> 

                                                    <div class="col-md-12">
                                                        @*<p>Job Purpose</p>*@
                                                        <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;margin-top: 10px;height: 30px;vertical-align: middle;">Job Purpose:<span style="color:red;">*</span></h6>

                                                         <SfTextBox Multiline=true rows="6" @bind-Value="@(JobDescriptionReviewData.OtherRequirements)" Placeholder="Type Here ...." Width="100%" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                    </div>  

                                                    <div class="col-md-12">
                                                        @*<p>Duties and Responsibilities<span style="color:red;">*</span></p>*@
                                                        <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;margin-top: 10px;height: 30px;vertical-align: middle;">Key Duties and Responsibilities:<span style="color:red;">*</span></h6>

                                                        <SfRichTextEditor Height="400px" ShowCharCount="true" @bind-Value="@(JobDescriptionReviewData.JobDescription1)" Placeholder="Type something..." EnableResize=true EditorMode="EditorMode.HTML">
                                                            <RichTextEditorQuickToolbarSettings Link="@Link" />
                                                            <RichTextEditorToolbarSettings Type="@Tooltype" Items="@Tools" Enable=true EnableFloating="true" />
                                                        </SfRichTextEditor>
                                                    </div>  

                                                    <div class="col-md-12">
                                                        <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;margin-top: 10px;height: 30px;vertical-align: middle;">Minimum Qualification and Experience:<span style="color:red;">*</span></h6>
                                                        
                                                        <HCMIS.Pages.HR.JD.PartialView.MinimumQualificationandExperiencePage 
                                                                                                                     FieldOfStudyData="@FieldOfStudyData" 
                                                                                                                     JobDescriptionId="@JobDescriptionReviewData.JobDescriptionId" 
                                                                                                                     onsuspectedreactiontoggle="@ToggleMinimumQualificationsData"
                                                                                                                     suspectedreactiondata="@JobDescriptionReviewData.JobDescriptionKnowledge.ToList()">                                                        
                                                        </HCMIS.Pages.HR.JD.PartialView.MinimumQualificationandExperiencePage>

                                                        @*<div class="col-md-6">
                                                            <p>Type Here<span style="color:red;">*</span></p>
                                                            <SfTextBox Multiline=true rows="6" @bind-Value="@(JobDescriptionReviewData.Qualification)" Placeholder="Type Here ...." Width="100%" FloatLabelType="FloatLabelType.Never"></SfTextBox>                                                        
                                                        </div>
                                                        
                                                        <div class="col-md-6">
                                                            <p>Must Have Requirements</p>

                                                            <SfMultiSelect @ref="@FieldDatasourceObj" TValue="int[]" TItem="AFieldOfStudy" AllowFiltering="true" Enabled="true" Mode="@VisualMode.CheckBox" DataSource="@FieldOfStudyData" ShowSelectAll="true"
                                                                           EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Field" FloatLabelType="FloatLabelType.Never"
                                                                           FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" PopupHeight="350px" Query="@LocalDataQuery" EnableVirtualization="true">
                                                                <MultiSelectFieldSettings Value="@nameof(AFieldOfStudy.FieldOfStudyId)" Text="@nameof(AFieldOfStudy.FieldOfStudyDesc)"></MultiSelectFieldSettings>
                                                                <MultiSelectEvents TValue="int[]" TItem="AFieldOfStudy" ValueChange="OnFieldDatasourceChange" DataBound="OnFieldDatasourceBound"></MultiSelectEvents>
                                                            </SfMultiSelect>
                                                        </div>*@
                                                    </div>

                                                    <div class="col-md-12">
                                                        @*<p>Experience<span style="color:red;">*</span></p>*@
                                                        <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;margin-top: 10px;height: 30px;vertical-align: middle;">Relevant Competencies:<span style="color:red;">*</span></h6>

                                                        <SfTextBox Multiline=true rows="6" @bind-Value="@(JobDescriptionReviewData.RequiredWorkExperience)" Placeholder="Type Here ...." Width="100%" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                    </div>  

                                                    <div class="col-md-12">
                                                        @*<p>Experience<span style="color:red;">*</span></p>*@
                                                        <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;margin-top: 10px;height: 30px;vertical-align: middle;">Upload Attachment:<span style="color:red;">*</span></h6>

                                                    <div class="form-group col-md-12">
                                                        <p class="alert-info" style="padding:10px;">Ensure that the document does not exceed 5 Mega Bytes (MB) and is of the following formats (Microsoft Word, PDF or an Image (png,gif,jpeg and jpg))</p>
                                                        <InputFile class="form-control" OnChange="@SingleUpload" />
                                                        <div>
                                                            <SfSpinner @ref="UploadAttachmentSpinner" CssClass="SpinnerClass" Visible="false" Size="30" Label="Saving document Please wait......."> </SfSpinner>
                                                        </div>
                                                    </div>

                                                    <div class="form-group col-md-12">
                                                        @if (!string.IsNullOrEmpty(ImageString))
                                                        {
                                                            @if (!string.IsNullOrEmpty(JobDescriptionReviewData.DocumentName) && !string.IsNullOrEmpty(JobDescriptionReviewData.DocumentExt))
                                                            {
                                                                if (JobDescriptionReviewData.DocumentExt.Contains("pdf") || JobDescriptionReviewData.DocumentExt.Contains("doc") || JobDescriptionReviewData.DocumentExt.Contains("docx"))
                                                                {
                                                                    <embed src="@ImageString" width="100%" height="600px" style="border: none;" frameborder="0" allowfullscreen="true" />
                                                                }
                                                                else
                                                                {
                                                                    <img src="@ImageString" alt="@JobDescriptionReviewData.DocumentName" class="img-thumbnail Imagecenter" style="margin-bottom:10px; width:100%;" />
                                                                }
                                                            }

                                                        }

                                                    </div>


                                                    </div>  

                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>
                            </TabItems>
                            </SfTab>
                }
            }
        </Template>
    </GridEditSettings>
    <GridColumns>
        <GridColumn HeaderText="Manage"
                    Width="40"
                    TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit/View"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
      @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
    	<GridColumn Field=@nameof(JobDescription.JobDescriptionId) Visible=true HeaderText="JobDescriptionId" AllowEditing="false" IsPrimaryKey="true" Width="150"></GridColumn>
        <GridForeignColumn Field=@nameof(JobDescription.JibTitleId) HeaderText="Job Title"  Width="150" ForeignKeyField="@(nameof(AJobTitle.JobTitleId))" ForeignKeyValue="@(nameof(AJobTitle.JobTitleDescription))" ForeignDataSource="@JobTitleData"></GridForeignColumn>
        <GridForeignColumn Field=@nameof(JobDescription.DepartmentId) HeaderText="Department" Width="150" ForeignKeyField="@(nameof(ADepartment.DepartmentId))" ForeignKeyValue="@(nameof(ADepartment.DepartmentDescription))" ForeignDataSource="@DepartmentData"></GridForeignColumn>
        <GridForeignColumn Field=@nameof(JobDescription.SalaryScaleId) HeaderText="Salary Scale" Width="150" ForeignKeyField="@(nameof(ASalaryScale.SalaryScaleId))" ForeignKeyValue="@(nameof(ASalaryScale.SalaryScaleDescription))" ForeignDataSource="@SalaryScaleData"></GridForeignColumn>
        <GridColumn Field=@nameof(JobDescription.JobDescription1) Visible=false HeaderText="Job Description"  Width="150">
            <Template>
                @{
                    <p>@((MarkupString)(context as JobDescription)?.JobDescription1)</p>
                }
            </Template>
        </GridColumn>
        <GridForeignColumn Field=@nameof(JobDescription.JobTypeId) HeaderText="Job Type" Width="150" ForeignKeyField="@(nameof(AJobType.JobTypeId))" ForeignKeyValue="@(nameof(AJobType.TypeDescription))" ForeignDataSource="@JobTypeData"></GridForeignColumn>
        <GridColumn Field=@nameof(JobDescription.Vacancies) HeaderText="Vacancies"  Width="150"></GridColumn>
        <GridForeignColumn Field=@nameof(JobDescription.JobStatusId) HeaderText="Job Status" Width="150" ForeignKeyField="@(nameof(AJobStatus.JobStatusId))" ForeignKeyValue="@(nameof(AJobStatus.JobStatusDesc))" ForeignDataSource="@JobStatusData"></GridForeignColumn>
    </GridColumns>
</SfGrid>


@*Saving Dialogue*@
<div class="form-group col-md-12">
    <SfDialog Width="80%" Height="20vh" AllowDragging=true EnableResize=true
              CloseOnEscape=false IsModal=true ShowCloseIcon=false
              Target=".mainbody" @ref=@SavingDialog Visible=false>
        <DialogTemplates>
            <Content>
                <div class="dialogContent">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader-Saving-text"></div>
                    </div>
                    @*<p>Saving Record please wait......</p>*@
                </div>
            </Content>
        </DialogTemplates>
    </SfDialog>
</div>


@code {

    #region Toasters
    public static string? ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast? DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters
    SfGrid<JobDescription>? JobDescriptionGrid { get; set; }
    SfGrid<JobDescriptionKnowledge>? JobDescriptionKnowledgeGrid { get; set; }
    SfGrid<JobDescriptionResponsibility>? JobDescriptionResponsibilityDataGrid { get; set; }
    SfGrid<JobDescriptionWorkExperienceRequirement>? JobDescriptionWorkExperienceRequirementGrid { get; set; }
    SfGrid<JobDescriptionBenefit>? JobDescriptionBenefitGrid { get; set; }
    JobDescription? JobDescriptionReviewData { get; set; }
    SfNumericTextBox<int>? JobDescriptionIdTxt { get; set; }
    String? JobDescriptionUrl { get; set; }
    List<AJobTitle>? JobTitleData { get; set; }
    List<ADepartment>? DepartmentData { get; set; }
    List<ASalaryScale>? SalaryScaleData { get; set; }
    List<AJobType>? JobTypeData { get; set; }
    List<AContractLengthType>? ContractLengthTypeData { get; set; }
    List<ALevelofEducation>? LevelofEducationData { get; set; }
    List<AJobStatus>? JobStatusData { get; set; }
    List<AFieldOfStudy>? FieldOfStudyData { get; set; }
    List<AYearsofExperience>? YearsofExperienceData { get; set; }
    string? ErrorMessage { get; set; } = null;
    Query ChildQuery { get; set; } = new Query();
    Query JobTitleChildQuery { get; set; } = new Query();
    SfDropDownList<int?, AJobTitle> JobTitleObj { get; set; }
    SfDialog SavingDialog { get; set; }
    LoginResultModel? Credentials { get; set; }
    SfSpinner? UploadAttachmentSpinner;
    long maxFileSize = 5242880/* 1024L * 1024L * 1024L * 2L */;//5 Megabytes
    bool IsSaveDisabled { get; set; }
    string? ImageString { get; set; }
    string fileName = string.Empty;
    int random = -9999;
    private DialogSettings AttachmentDialog = new DialogSettings { Height = "auto", MinHeight = "5vh", Width = "80%" };
    bool attachmentnamebool = false;
    private SfMultiSelect<int[], AFieldOfStudy>? FieldDatasourceObj;
    public Query LocalDataQuery = new Query().Take(15);
    public Query MainQuery = new Query();

    private ToolbarType Tooltype = ToolbarType.MultiRow;
    bool isloading { get; set; } = true;

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };
    private List<LinkToolbarItemModel> Link = new List<LinkToolbarItemModel>()
    {
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.Open },
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.Edit },
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.UnLink }
    };

    private void ToggleSearchQuery(Query? DetailData)
    {
        try
        {
            if (DetailData != null)
            {
                MainQuery = DetailData;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            StateHasChanged();
        }

    }

    private void DepartmentValueChangeHandler(ChangeEventArgs<int?, ADepartment> args)
    {
        if(args.ItemData != null){
            JobTitleChildQuery= new Query().Where(new WhereFilter() { Field = "DepartmentId", Operator = "equal", value = args.ItemData.DepartmentId, IgnoreCase = false, IgnoreAccent = false });
        }
    }

    private void JobTitleValueChangeHandler(ChangeEventArgs<int?, AJobTitle> args)
    {
        if(args.ItemData != null)
        {
            JobDescriptionReviewData.DepartmentId = args.ItemData.DepartmentId;
        }
    }

    public async void OnClick(string clickedid)
    {
        await JSRuntime.InvokeVoidAsync("RequiredFieldClearFunction", clickedid);
        //Console.WriteLine(clickedid);
    }

    private async void OnOpenHandler(string clickedid)
    {
        await JSRuntime.InvokeVoidAsync("RequiredFieldClearFunction", clickedid);
    }

    /// <summary>
    /// Event for Toolbar click for Grid Exporting
    /// </summary>
    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid1_excelexport")
        {
            this.JobDescriptionGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid1_pdfexport")
        {
            this.JobDescriptionGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid1_csvexport")
        {
            this.JobDescriptionGrid.ExportToCsvAsync();
        }
        if (args.Item.Id == "Grid2_excelexport")
        {
            this.JobDescriptionKnowledgeGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid2_pdfexport")
        {
            this.JobDescriptionKnowledgeGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid2_csvexport")
        {
            this.JobDescriptionKnowledgeGrid.ExportToCsvAsync();
        }
        if (args.Item.Id == "Grid3_excelexport")
        {
            this.JobDescriptionResponsibilityDataGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid3_pdfexport")
        {
            this.JobDescriptionResponsibilityDataGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid3_csvexport")
        {
            this.JobDescriptionResponsibilityDataGrid.ExportToCsvAsync();
        }
        if (args.Item.Id == "Grid4_excelexport")
        {
            this.JobDescriptionWorkExperienceRequirementGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid4_pdfexport")
        {
            this.JobDescriptionWorkExperienceRequirementGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid4_csvexport")
        {
            this.JobDescriptionWorkExperienceRequirementGrid.ExportToCsvAsync();
        }
        if (args.Item.Id == "Grid5_excelexport")
        {
            this.JobDescriptionBenefitGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid5_pdfexport")
        {
            this.JobDescriptionBenefitGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid5_csvexport")
        {
            this.JobDescriptionBenefitGrid.ExportToCsvAsync();
        }
    }
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "60vh", Width = "96%" };
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

    private void ToggleMinimumQualificationsData(List<JobDescriptionKnowledge>? ReactionChange)
    {
        if (JobDescriptionReviewData != null && ReactionChange != null)
        {
            if (JobDescriptionReviewData.JobDescriptionKnowledge == null)
            {
                JobDescriptionReviewData.JobDescriptionKnowledge = new List<JobDescriptionKnowledge>();
            }
            JobDescriptionReviewData.JobDescriptionKnowledge = ReactionChange;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            // isloading = true;
            var isAuthenticated = await AuthService.CheckAuthenticationStatus();
            if (isAuthenticated == false)
            {
                navManager.NavigateTo("/LoginPage", true);
            }
            else
            {
                Credentials = await AuthService.GetUserCredentials();

                var tasks = new List<Task>();
                tasks.Add(Task.Run(async () =>
               {

                   var response = await Http.GetAsync($"HumanResource/GetJobTitle");
                   var content = await response.Content.ReadAsStringAsync();
                   if (response.IsSuccessStatusCode)
                   {
                       JobTitleData = JsonSerializer.Deserialize<List<AJobTitle>>(content, _options);
                   }
               }));
                tasks.Add(Task.Run(async () =>
               {

                   var response = await Http.GetAsync($"Utilities/GetDepartment");
                   var content = await response.Content.ReadAsStringAsync();
                   if (response.IsSuccessStatusCode)
                   {
                       DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(content, _options);
                   }
               }));
                tasks.Add(Task.Run(async () =>
                {

                    var response = await Http.GetAsync($"Utilities/GetSalaryScale");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        SalaryScaleData = JsonSerializer.Deserialize<List<ASalaryScale>>(content, _options);
                    }
                }));
                tasks.Add(Task.Run(async () =>
                {

                    var response = await Http.GetAsync($"Utilities/GetJobType");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        JobTypeData = JsonSerializer.Deserialize<List<AJobType>>(content, _options);
                    }
                }));
                tasks.Add(Task.Run(async () =>
                {

                    var response = await Http.GetAsync($"Utilities/GetContractLengthType");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        ContractLengthTypeData = JsonSerializer.Deserialize<List<AContractLengthType>>(content, _options);
                    }
                }));
                tasks.Add(Task.Run(async () =>
                {

                    var response = await Http.GetAsync($"Utilities/GetLevelofEducation");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        LevelofEducationData = JsonSerializer.Deserialize<List<ALevelofEducation>>(content, _options);
                    }
                }));

                tasks.Add(Task.Run(async () =>
                {

                    var response = await Http.GetAsync($"Utilities/GetFieldOfStudy");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        FieldOfStudyData = JsonSerializer.Deserialize<List<AFieldOfStudy>>(content, _options);
                    }
                }));

                tasks.Add(Task.Run(async () =>
               {

                   var response = await Http.GetAsync($"Utilities/GetYearsofExperience");
                   var content = await response.Content.ReadAsStringAsync();
                   if (response.IsSuccessStatusCode)
                   {
                       YearsofExperienceData = JsonSerializer.Deserialize<List<AYearsofExperience>>(content, _options);
                   }
               }));


                Task t = Task.WhenAll(tasks);
                await t;
            }

        }
        catch(Exception ex)
        {
            ErrorMessage=$"Error: {ex.Message}";
        }
        finally
        {
            // isloading = false;
        }
        StateHasChanged();
    }


    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        try
        {
            if (e.File.Size <= maxFileSize)
            {
                IsSaveDisabled = true;
                await UploadAttachmentSpinner.ShowAsync();
                MemoryStream ms = new MemoryStream();
                await e.File.OpenReadStream(maxFileSize).CopyToAsync(ms);

                var _jobtitle = JobTitleData.FirstOrDefault(o => o.JobTitleId == JobDescriptionReviewData.JibTitleId);

                ms.Position = 0;

                System.IO.FileInfo info = new System.IO.FileInfo(e.File.Name);
                if (info.Extension.ToLower().Contains("png") || info.Extension.ToLower().Contains("gif") || info.Extension.ToLower().Contains("jpeg") || info.Extension.ToLower().Contains("jpg"))
                {
                    fileName = _jobtitle.JobTitleDescription.Trim() + "_" + DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss") + info.Extension;

                    byte[] bytes = ms.ToArray();
                    //byte[] bytes = file.Stream.ToArray();
                    string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);
                    DocumentBytes m = new DocumentBytes()
                        {
                            DocumentName = fileName,
                            DocumentExt = info.Extension.Trim(),
                            DocumentByte = bytes,
                            DocumentFolder = "JobDescription"
                        };

                    await _DocumentUploadModel.UploadDocument(m);
                    var result = "data:application/pdf;base64," + base64;
                    JobDescriptionReviewData.DocumentName = fileName;
                    JobDescriptionReviewData.DocumentExt = info.Extension.Trim();
                    ImageString = result;
                    bytes = null;

                }

                else if (info.Extension.ToLower().Contains("pdf") || info.Extension.ToLower().Contains("doc"))
                {
                    string fileName = string.Empty;
                    if (info.Extension.ToLower().Contains("doc"))
                    {
                        ms.Position = 0;
                        fileName = _jobtitle.JobTitleDescription.Trim() + "_" + DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss") + ".pdf";

                        //Create a new document
                        Syncfusion.DocIO.DLS.WordDocument document;
                        if (info.Extension.Contains("doc") && !info.Extension.Contains("docx"))
                        {
                            document = new Syncfusion.DocIO.DLS.WordDocument(ms, Syncfusion.DocIO.FormatType.Doc);
                        }
                        else
                        {
                            document = new Syncfusion.DocIO.DLS.WordDocument(ms, Syncfusion.DocIO.FormatType.Docx);
                        }
                        //Creates an instance of the DocToPDFConverter
                        DocIORenderer render = new DocIORenderer();//Converts Word document into PDF document
                        PdfDocument pdfDocument = render.ConvertToPDF(document);

                        MemoryStream _ms = new MemoryStream();
                        pdfDocument.Save(_ms);
                        _ms.Position = 0;


                        DocumentBytes m = new DocumentBytes();
                        m.DocumentName = fileName;
                        m.DocumentFolder = "JobDescription";
                        m.DocumentByte = _ms.ToArray();
                        m.DocumentExt = "pdf";

                        await _DocumentUploadModel.UploadDocument(m);
                        _ms.Position = 0;
                        byte[] _bytes = _ms.ToArray();
                        string base64 = Convert.ToBase64String(_bytes, 0, _bytes.Length);

                        var result = "data:application/pdf;base64," + base64;
                        JobDescriptionReviewData.DocumentName = fileName;
                        JobDescriptionReviewData.DocumentExt = "pdf";
                        ImageString = result;
                    }

                    else
                    {
                        fileName = _jobtitle.JobTitleDescription.Trim() + "_" + DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss") + ".pdf";

                        ms.Position = 0;
                        byte[] bytes = ms.ToArray();
                        string base64 = Convert.ToBase64String(bytes, 0, bytes.Length);

                        DocumentBytes m = new DocumentBytes()
                            {
                                DocumentName = fileName,
                                DocumentExt = info.Extension.Trim(),
                                DocumentByte = bytes,
                                DocumentFolder = "JobDescription"
                            };

                        await _DocumentUploadModel.UploadDocument(m);
                        var result = "data:application/pdf;base64," + base64;
                        JobDescriptionReviewData.DocumentName = fileName;
                        JobDescriptionReviewData.DocumentExt = info.Extension.Trim();
                        ImageString = result;
                        bytes = null;
                    }

                }
                else
                {
                    //<MudAlert Severity="Severity.Warning">Please ensure that the uploaded document is an image(png/Jpeg/gif/jpg) or pdf or word document (doc,docx).</MudAlert>
                    toastService.ShowWarning("Please ensure that the uploaded document is an image(png/Jpeg/gif/jpg) or pdf or word document (doc,docx).");
                }
            }
            else
            {
                IsSaveDisabled = true;
                toastService.ClearAll();
                toastService.ShowWarning("File Too Large (Maximum Size 1 MB)");
            }            
        }
        catch (Exception ex)

        {
            throw ex;
        }

        finally
        {
            IsSaveDisabled = false;
            await UploadAttachmentSpinner.HideAsync();
            StateHasChanged();
        }

    }

    public class JobDescriptionAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        //private UserManagement _userManagement;
        public JobDescriptionAdapter(HttpClient _http, IToastService ts/*, UserManagement userManagement*/
        ,SystemSettings systemSettings,ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _SystemSettings = systemSettings;
            _ApiConfig = apiConfig;
            //_userManagement = userManagement;
            toastService = ts;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<JobDescription>();
            try
            {
                string? _DepartmentId = null;
                string? _JobTitleId = null;

                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;

                    if (val.FirstOrDefault(o => o.Key == "DepartmentId").Value != null)
                    {
                        _DepartmentId = val.FirstOrDefault(o => o.Key == "DepartmentId").Value.ToString();
                    }

                    if (val.FirstOrDefault(o => o.Key == "JobTitleId").Value != null)
                    {
                        _JobTitleId = val.FirstOrDefault(o => o.Key == "JobTitleId").Value.ToString();
                    }

                }
                
                var response = await Http.GetAsync($"HumanResource/GetJobDescription?DepartmentId={_DepartmentId}&JobTitleId={_JobTitleId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<JobDescription>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<JobDescription>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {

                var val = (value as JobDescription);
                if(val != null)
                {
                    if (val.JobDescriptionId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"HumanResource/PostJobDescription", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"HumanResource/PutJobDescription", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            //try
            //{
            //    int data = (int)value;
            //    using (var dbContext = new MUCOBADIContext())
            //    {
            //        var exists = dbContext.AAdministrationPhase.FirstOrDefault(o => o.AdministrationPhaseId == data);
            //        if (exists != null)
            //        {
            //            dbContext.AAdministrationPhase.Remove(exists);
            //        }
            //        await dbContext.SaveChangesAsync();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    toastService.ShowError(ex.Message.ToString());
            //}


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {

                var val = (value as JobDescription);
                if(val != null)
                {
                    if (val.JobDescriptionId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"HumanResource/PostJobDescription", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"HumanResource/PutJobDescription", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
        public override async Task<object> BatchUpdateAsync(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            object? products = null;
            try
            {

                if (Changed != null)
                {
                    products = Changed;
                    foreach (var val in (List<JobDescription>)Changed)
                    {
                        if(val != null)
                        {
                            if (val.JobDescriptionId == 0)
                            {

                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"HumanResource/PostJobDescription", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<Response>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {

                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"HumanResource/PutJobDescription", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<Response>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Added != null)
                {
                    products = Added;
                    foreach (var val in (List<JobDescription>)Added)
                    {
                        if(val != null)
                        {
                            if (val.JobDescriptionId == 0)
                            {

                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"HumanResource/PostJobDescription", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<Response>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {

                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"HumanResource/PutJobDescription", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<Response>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Deleted != null)
                {
                    products = Deleted;
                    //foreach (var rec in (List<OrderDetails>)Deleted)
                    //{
                    //    Orders.Remove(Orders.Where(or => or.OrderID == rec.OrderID).FirstOrDefault());
                    //}

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return products;
        }
    }
    public async Task OnJobDescriptionActionBegin(ActionEventArgs<JobDescription> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {
                //Show Spinner
                // isloading = true;

                ChildQuery = new();
                ChildQuery.AddParams("JobDescriptionId", args.RowData.JobDescriptionId);
                
                //JobDescriptionGrid.PreventRender(false);
            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {                
                if (args.Data.JibTitleId == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please select the Post !");
                    args.Cancel = true;
                    await JSRuntime.InvokeVoidAsync("RequiredFieldFunction");
                }
                else if (args.Data.DepartmentId == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please select the department !");
                    args.Cancel = true;
                    await JSRuntime.InvokeVoidAsync("RequiredFieldFunction");
                }
                else if (args.Data.JobTypeId == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please select the job type !");
                    args.Cancel = true;
                    await JSRuntime.InvokeVoidAsync("RequiredFieldFunction");
                }

                else if (args.Data.MinimumLevelOfEducationId == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please select the minimum education level required !");
                    args.Cancel = true;
                    await JSRuntime.InvokeVoidAsync("RequiredFieldFunction");
                }

                else if (args.Data.MinimumYearsofExperience == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please select the minimum years of experience required !");
                    args.Cancel = true;
                    await JSRuntime.InvokeVoidAsync("RequiredFieldFunction");
                }

                else if (args.Data.Vacancies == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please enter the number of vacancies !");
                    args.Cancel = true;
                    await JSRuntime.InvokeVoidAsync("RequiredFieldFunction");
                }

                else if (string.IsNullOrEmpty(args.Data.OtherRequirements))
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please enter the job purpose!");
                    args.Cancel = true;
                    await JSRuntime.InvokeVoidAsync("RequiredFieldFunction");
                }

                else if (args.Data.JobDescription1 == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please enter the duties and responsibilities !");
                    args.Cancel = true;
                    await JSRuntime.InvokeVoidAsync("RequiredFieldFunction");
                }

                // else if (string.IsNullOrEmpty(args.Data.Qualification))
                // {
                //     toastService.ClearAll();
                //     toastService.ShowWarning("Please enter the minimum qualification and experience!");
                //     args.Cancel = true;
                //     await JSRuntime.InvokeVoidAsync("RequiredFieldFunction");
                // }

                else if (string.IsNullOrEmpty(args.Data.RequiredWorkExperience))
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please enter the relevant experience!");
                    args.Cancel = true;
                    await JSRuntime.InvokeVoidAsync("RequiredFieldFunction");
                }
                else if (string.IsNullOrEmpty(args.Data.DocumentExt) && string.IsNullOrEmpty(args.Data.DocumentName))
                {
                    toastService.ShowWarning("Please upload a physical advert for the post!");
                    args.Cancel = true;
                }      
                
                else
                {
                    SavingDialog.ShowAsync();
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }

    }
    
    public async Task OnJobDescriptionActionComplete(ActionEventArgs<JobDescription> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {
                //Hide Spinner
                // isloading = false;

                JobDescriptionGrid.PreventRender(false);

                if (!string.IsNullOrEmpty(args.RowData.DocumentName) && !string.IsNullOrEmpty(args.RowData.DocumentExt))
                {
                    ImageString = await GetImageString(args.RowData.DocumentName, args.RowData.DocumentExt, "JobDescription");
                }
            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                var tasks = new List<Task>();

                tasks.Add(Task.Run(async () =>
                {

                    var response = await Http.GetAsync($"Utilities/GetFieldOfStudy");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        FieldOfStudyData = JsonSerializer.Deserialize<List<AFieldOfStudy>>(content, _options);
                    }
                }));

                Task t = Task.WhenAll(tasks);
                await t;

                SavingDialog.HideAsync();
            }
        }
        catch(Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }

    }
   
    private async Task<string> GetImageString(string imageUrl, string ext, string DocumentFolder)
    {
        string result = null;
        try
        {
            if (!string.IsNullOrEmpty(imageUrl))
            {
                var a = await _DocumentUploadModel.GetDocument(imageUrl, DocumentFolder);

                if (a != null && !string.IsNullOrEmpty(a.DocumentExt))
                {
                    if (a.DocumentExt.Contains("pdf"))
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        result = "data:application/pdf;base64," + base64String;
                    }
                    else
                    {
                        string base64String = Convert.ToBase64String(a.DocumentByte, 0, a.DocumentByte.Length);
                        result = "data:image/" + a.DocumentExt + ";base64," + base64String;
                    }

                }
                else
                {
                    toastService.ShowError("There is no attachment uploaded");
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ClearAll();
            toastService.ShowError(ex.Message.ToString());
        }
        return result;
    }

    public string GetJobDescriptionHeader(JobDescription Value)
    {
        if (Value.JobDescriptionId == 0)
        {
            return "Add New Job Description";
        }
        else
        {
            string? Desc = string.Empty;
            if(JobTitleData != null){
                var data = JobTitleData.FirstOrDefault(o => o.JobTitleId == Value.JibTitleId);
                if(data != null){
                    Desc = data.JobTitleDescription;
                }
            }
            return "Edit Details for " + Desc;
        }
    }

    public void OnFieldDatasourceBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(JobDescriptionReviewData.FieldofStudyId))
        {
            var a = JobDescriptionReviewData.FieldofStudyId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            FieldDatasourceObj.Value = c.ToArray();
        }
    }
    public void OnFieldDatasourceChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            JobDescriptionReviewData.FieldofStudyId = string.Join(",", args.Value);
        }
        else
        {
            JobDescriptionReviewData.FieldofStudyId = null;
        }
    }

}