@using HCMIS.Model.JobDescriptionModel
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using HCMIS.ViewModel
@using System.Collections;
@inject HttpClient Http
@inject AppState AppState
@inject ApiConfig _ApiConfig;
@inject NavigationManager Navigation
@inject DocumentUploadModel _DocumentUploadModel;
@inject SystemSettings _SystemSettings
@*<h3>JobDescriptionPage</h3>*@
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>

<SfGrid @ref="@JobDescriptionGrid" TValue="JobDescription" ID="Grid1" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update","ExcelExport","PdfExport","CsvExport", "Search"})">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <GridEvents OnToolbarClick="@GridToolbarClick" TValue="JobDescription"></GridEvents>
    <SfDataManager AdaptorInstance="@typeof(JobDescriptionAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEvents OnActionComplete="@OnJobDescriptionActionComplete" OnActionBegin="@OnJobDescriptionActionBegin" TValue="JobDescription"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
        <HeaderTemplate>
            @{
                var text = GetJobDescriptionHeader((context as JobDescription));
                                <div class="headerbandimg">
                            <span>@text</span>
                                </div>
            }
        </HeaderTemplate>
        <Template Context="JobDescriptionContext">
            @{
                JobDescriptionReviewData = (JobDescriptionContext as JobDescription);
                if(JobDescriptionReviewData != null){
                            <SfTab HeaderPlacement="HeaderPosition.Top" LoadOn="ContentLoad.Demand" OverflowMode="@OverflowMode.Scrollable" >
                                <TabItems>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Job Description"></TabHeader> 
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div style="margin:10px;">
                                                <div class="row">
                                                <div class="col-md-12" hidden>
                                                <SfNumericTextBox @ref="@JobDescriptionIdTxt" @bind-Value="@(JobDescriptionReviewData.JobDescriptionId)" ID="JobDescriptionId" TValue="int" Width="100%" Format="N0" Placeholder="Job Description Id" Step="1" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                    </div>
                                                    <div class="col-md-6">
                                                <p>Department</p>
                                                <SfDropDownList @bind-Value="@(JobDescriptionReviewData.DepartmentId)" TItem="ADepartment" TValue="int?" Width="100%" PopupHeight="230px" AllowFiltering=true IgnoreAccent=true DataSource="@DepartmentData">
                                                    <DropDownListFieldSettings Text="DepartmentDescription" Value="DepartmentId"></DropDownListFieldSettings>
                                                    <DropDownListEvents TItem="ADepartment" TValue="int?" ValueChange="@DepartmentValueChangeHandler" ></DropDownListEvents>
                                                </SfDropDownList>
                                                    </div>
                                                    <div class="col-md-6">
                                                 <p>Job Title</p>
                                                <SfDropDownList @bind-Value="@(JobDescriptionReviewData.JibTitleId)" Query="@(JobTitleChildQuery)" TItem="AJobTitle" TValue="int?" Width="100%" PopupHeight="230px" AllowFiltering=true IgnoreAccent=true DataSource="@JobTitleData">
                                                    <DropDownListFieldSettings Value="JobTitleId" Text="@(nameof(AJobTitle.JobTitleDescription))"></DropDownListFieldSettings>
                                                </SfDropDownList>
                                                    </div>
                                                    <div class="col-md-6">
                                                 <p>SalaryScale</p>
                                                <SfDropDownList @bind-Value="@(JobDescriptionReviewData.SalaryScaleId)" TItem="ASalaryScale" TValue="int?" Width="100%" PopupHeight="230px" DataSource="@SalaryScaleData">
                                                    <DropDownListFieldSettings Text="SalaryScaleDescription" Value="SalaryScaleId"></DropDownListFieldSettings>
                                                </SfDropDownList>
                                                    </div>
                                                    <div class="col-md-6">
                                                 <p>Job Type</p>
                                                <SfDropDownList @bind-Value="@(JobDescriptionReviewData.JobTypeId)" TItem="AJobType" TValue="int?" Width="100%" PopupHeight="230px" DataSource="@JobTypeData">
                                                    <DropDownListFieldSettings Text="TypeDescription" Value="JobTypeId"></DropDownListFieldSettings>
                                                </SfDropDownList>
                                                    </div>
                                                    <div class="col-md-12">
                                                        <p>Job Overview</p>
                                                        <SfRichTextEditor Height="400px" ShowCharCount="true" @bind-Value="@(JobDescriptionReviewData.JobDescription1)" Placeholder="Type something..." EnableResize=true EditorMode="EditorMode.HTML">
                                                            <RichTextEditorQuickToolbarSettings Link="@Link" />
                                                            <RichTextEditorToolbarSettings Type="@Tooltype" Items="@Tools" Enable=true   EnableFloating="true" />
                                                        </SfRichTextEditor>
                                                    </div>
                                                    <div class="col-md-6">
                                                <p>No of Vaccancies</p>
                                                <SfNumericTextBox @bind-Value="@(JobDescriptionReviewData.Vacancies)" TValue="int?" Width="100%" Format="N0" Placeholder="Contract Length" Step="1" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                    </div>
                                                    <div class="col-md-6">
                                                 <p>Minimum Level of Education</p>
                                                <SfDropDownList @bind-Value="@(JobDescriptionReviewData.MinimumLevelOfEducationId)" TItem="ALevelofEducation" TValue="int?" Width="100%" PopupHeight="230px" DataSource="@LevelofEducationData">
                                                    <DropDownListFieldSettings Text="LevelofEducationDesc" Value="LevelofEducationId"></DropDownListFieldSettings>
                                                </SfDropDownList>
                                                    </div>
                                                    @if(JobDescriptionReviewData.JobTypeId==3){
                                                <div class="col-md-12">
                                                    <h3>Contract Details</h3>
                                                </div>
                                                <div class="col-md-6">
                                                     <p>Contract Length</p>
                                                    <SfNumericTextBox @bind-Value="@(JobDescriptionReviewData.ContractLength)" TValue="int?" Width="100%" Format="N0" Placeholder="Contract Length" Step="1" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                </div>
                                                <div class="col-md-6">
                                                    <p>Contract Length Type</p>
                                                    <SfDropDownList @bind-Value="@(JobDescriptionReviewData.ContractLengthTypeId)" TItem="AContractLengthType" TValue="int?" Width="100%" PopupHeight="230px" DataSource="@ContractLengthTypeData">
                                                        <DropDownListFieldSettings Text="ContractLengthTypeDesc" Value="ContractLengthTypeId"></DropDownListFieldSettings>
                                                    </SfDropDownList>
                                                </div>
                                                <div class="col-md-6">
                                                     <p>Contract Start Date</p>
                                                    <SfDatePicker @bind-Value="@(JobDescriptionReviewData.ContractStartDate)" TValue="DateTime?" Placeholder="Choose a Date" Format="dd/MMM/yyyy" >
                                                    </SfDatePicker>
                                                </div>
                                                <div class="col-md-6">
                                                    <p>Contract End Date</p>
                                                    <SfDatePicker @bind-Value="@(JobDescriptionReviewData.ContractEnddate)" TValue="DateTime?" Placeholder="Choose a Date" Format="dd/MMM/yyyy" >
                                                    </SfDatePicker>
                                                </div>
                                            }
                                                    
                                                    <div class="col-md-4">

                                                    </div>
                                            <div class="col-md-4">
                                            </div>
                                            <div class="col-md-4">
                                            </div>
                                        </div>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Qualification"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div style="margin:10px;">
                                                <SfGrid @ref="@JobDescriptionKnowledgeGrid" Query="@ChildQuery" TValue="JobDescriptionKnowledge" ID="Grid2" AllowPaging="true" AllowFiltering="true" AllowReordering="true"
                                        AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true"
                                        Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update","ExcelExport","PdfExport","CsvExport", "Search"})">
                                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                    <GridPageSettings PageSizes="true"></GridPageSettings>
                                                     <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                                    <GridEvents OnToolbarClick="@GridToolbarClick" TValue="JobDescriptionKnowledge"></GridEvents>
                                                    <SfDataManager AdaptorInstance="@typeof(JobDescriptionKnowledgeAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                            <GridEvents OnActionComplete="@OnJobDescriptionKnowledgeComplete" OnActionBegin="@OnJobDescriptionKnowledgeActionBegin" TValue="JobDescriptionKnowledge"></GridEvents>
                                                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams">
                                                    <HeaderTemplate>
                                                        @{
                                                        var text = GetJobDescriptionKnowledgeHeader((context as JobDescriptionKnowledge));
                                                                            <div class="headerbandimg">
                                                                        <span>@text</span>
                                                                            </div>
                                                        }
                                                    </HeaderTemplate>
                                                        <Template Context="JobDescriptionKnowledgeContext">
                                                        @{
                                                        var JobDescriptionKnowledgeReviewData = (JobDescriptionKnowledgeContext as JobDescriptionKnowledge);
                                                                <div class="row">
                                                                    <div class="col-md-12">

                                                                    </div>
                                                                    <div class="col-md-6">
                                                                        <p>Level of Education</p>
                                                                        <SfDropDownList @bind-Value="@(JobDescriptionKnowledgeReviewData.LevelofEducationId)" TItem="ALevelofEducation" TValue="int?" Width="100%" PopupHeight="230px" DataSource="@LevelofEducationData">
                                                                            <DropDownListFieldSettings Text="@(nameof(ALevelofEducation.LevelofEducationDesc))" Value="@(nameof(ALevelofEducation.LevelofEducationId))"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                    <div class="col-md-6">
                                                                        <p>Field of Study</p>
                                                                        <SfDropDownList @bind-Value="@(JobDescriptionKnowledgeReviewData.FieldofStudyId)" TItem="AFieldOfStudy" TValue="int?" Width="100%" PopupHeight="230px" DataSource="@FieldOfStudyData">
                                                                            <DropDownListFieldSettings Text="@(nameof(AFieldOfStudy.FieldOfStudyDesc))" Value="@(nameof(AFieldOfStudy.FieldOfStudyId))"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                    <div class="col-md-6" style="padding-top:15px;padding-bottom:15px;">
                                                                        <SfCheckBox @bind-Checked="@(JobDescriptionKnowledgeReviewData.IsRequired)" Label="Is a must have?" LabelPosition="Syncfusion.Blazor.Buttons.LabelPosition.Before"></SfCheckBox>
                                                                    </div>
                                                                    <div class="col-md-12">
                                                                    <p>Extra Notes</p>
                                                                    <SfTextBox Multiline=true @bind-Value="@(JobDescriptionKnowledgeReviewData.Notes)" Placeholder="Extra Notes" Width="100%"  FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                    </div>
                                                                    <div class="col-md-6">
                                                                    </div>
                                                                </div>

                                                        }
                                                    </Template>
                                                    </GridEditSettings>
                                                    <GridColumns>
                                                        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                                                        <GridColumn Field=@nameof(JobDescriptionKnowledge.KnowledgeId) Visible=false HeaderText="KnowledgeId" AllowEditing="false" IsPrimaryKey="true" Width="150"></GridColumn>
                                                        <GridColumn Field=@nameof(JobDescriptionKnowledge.JobDescriptionId) Visible=false HeaderText="JobDescriptionId" AllowEditing="false"  Width="150"></GridColumn>
                                                        <GridForeignColumn Field=@nameof(JobDescriptionKnowledge.LevelofEducationId) HeaderText="Level of Education" AllowEditing="false" Width="150" ForeignKeyField="@(nameof(ALevelofEducation.LevelofEducationId))" ForeignKeyValue="@(nameof(ALevelofEducation.LevelofEducationDesc))" ForeignDataSource="@LevelofEducationData"></GridForeignColumn>
                                                        <GridForeignColumn Field=@nameof(JobDescriptionKnowledge.FieldofStudyId) HeaderText="Field of Study" AllowEditing="false" Width="150" ForeignKeyField="@(nameof(AFieldOfStudy.FieldOfStudyId))" ForeignKeyValue="@(nameof(AFieldOfStudy.FieldOfStudyDesc))" ForeignDataSource="@FieldOfStudyData"></GridForeignColumn>
                                                        <GridColumn Field=@nameof(JobDescriptionKnowledge.IsRequired) HeaderText="Is Required?" AllowEditing="false"  Width="150"></GridColumn>
                                                        <GridColumn Field=@nameof(JobDescriptionKnowledge.Notes) HeaderText="Notes" AllowEditing="false"  Width="150"></GridColumn>
                                                    </GridColumns>
                                                </SfGrid>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Responsibility"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div style="margin:10px;">
                                        <SfGrid @ref="@JobDescriptionResponsibilityDataGrid" Query="@ChildQuery" TValue="JobDescriptionResponsibility" ID="Grid3" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update","ExcelExport","PdfExport","CsvExport", "Search"})">
                                                     <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                    <GridPageSettings PageSizes="true"></GridPageSettings>
                                                                                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                                    <GridEvents OnToolbarClick="@GridToolbarClick" TValue="JobDescriptionResponsibility"></GridEvents>
                                            <SfDataManager AdaptorInstance="@typeof(JobDescriptionResponsibilityAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                            <GridEvents OnActionComplete="@OnJobDescriptionResponsibilityComplete" OnActionBegin="@OnJobDescriptionResponsibilityActionBegin" TValue="JobDescriptionResponsibility"></GridEvents>
                                            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams">
                                                <HeaderTemplate>
                                                    @{
                                                        var text = GetJobDescriptionResponsibilityHeader((context as JobDescriptionResponsibility));
                                                        <div class="headerbandimg">
                                                            <span>@text</span>
                                                        </div>
                                                    }
                                                </HeaderTemplate>
                                                   <Template Context="JobDescriptionResponsibilityContext">
                                                        @{
                                                        var JobDescriptionResponsibilityReviewData = (JobDescriptionResponsibilityContext as JobDescriptionResponsibility);
                                                                <div class="row">
                                                                    <div class="col-md-12">

                                                                    </div>
                                                                    <div class="col-md-12">
                                                                        <p>Responsibility</p>
                                                                        <SfTextBox Multiline=true @bind-Value="@(JobDescriptionResponsibilityReviewData.ResponsibilityDesc)" Placeholder="Responsibility" Width="100%"  FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                    </div>
                                                                    <div class="col-md-6">
                                                                    </div>
                                                                </div>

                                                        }
                                                    </Template>
                                            </GridEditSettings>
                                            <GridColumns>
                                                      <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                                                    	<GridColumn Field=@nameof(JobDescriptionResponsibility.ResponsibiltyId) Visible=false HeaderText="ResponsibiltyId" AllowEditing="false" IsPrimaryKey="true" Width="150"></GridColumn>
                                                        <GridColumn Field=@nameof(JobDescriptionResponsibility.JobDescriptionId) Visible=false HeaderText="JobDescriptionId" AllowEditing="false"  Width="150"></GridColumn>
                                                        <GridColumn Field=@nameof(JobDescriptionResponsibility.ResponsibilityDesc) HeaderText="Responsibility" AllowEditing="false"  Width="150"></GridColumn>
                                                    </GridColumns>
                                                </SfGrid>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Work Experience"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div style="margin:10px;">
                                        <SfGrid @ref="@JobDescriptionWorkExperienceRequirementGrid" Query="@ChildQuery" TValue="JobDescriptionWorkExperienceRequirement" ID="Grid4" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update","ExcelExport","PdfExport","CsvExport", "Search"})">
                                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                    <GridPageSettings PageSizes="true"></GridPageSettings>
                                                                                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                                    <GridEvents OnToolbarClick="@GridToolbarClick" TValue="JobDescriptionWorkExperienceRequirement"></GridEvents>
                                                    <SfDataManager AdaptorInstance="@typeof(JobDescriptionWorkExperienceRequirementAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                            <GridEvents OnActionComplete="@OnJobDescriptionWorkExperienceRequirementComplete" OnActionBegin="@OnJobDescriptionWorkExperienceRequirementActionBegin" TValue="JobDescriptionWorkExperienceRequirement"></GridEvents>
                                            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams">
                                                <HeaderTemplate>
                                                    @{
                                                        var text = GetJobDescriptionWorkExperienceRequirementHeader((context as JobDescriptionWorkExperienceRequirement));
                                                        <div class="headerbandimg">
                                                            <span>@text</span>
                                                        </div>
                                                    }
                                                </HeaderTemplate>
                                                <Template Context="JobDescriptionWorkExperienceRequirementContext">
                                                    @{
                                                        var JobDescriptionWorkExperienceRequirementReviewData = (JobDescriptionWorkExperienceRequirementContext as JobDescriptionWorkExperienceRequirement);
                                                        <div class="row">
                                                            <div class="col-md-12">
                                                            </div>
                                                            <div class="col-md-12">
                                                                <p>Required work Experience</p>
                                                                <SfTextBox Multiline=true @bind-Value="@(JobDescriptionWorkExperienceRequirementReviewData.ExperienceDesc)" Placeholder="Required work Experience" Width="100%" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="col-md-6">
                                                            </div>
                                                        </div>

                                                    }
                                                </Template>
                                            </GridEditSettings>
                                            <GridColumns>
                                                      <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                                                    	<GridColumn Field=@nameof(JobDescriptionWorkExperienceRequirement.ExperienceId) Visible=false HeaderText="ExperienceId" AllowEditing="false" IsPrimaryKey="true" Width="150"></GridColumn>
                                                        <GridColumn Field=@nameof(JobDescriptionWorkExperienceRequirement.JobDescriptionId) Visible=false HeaderText="JobDescriptionId" AllowEditing="false"  Width="150"></GridColumn>
                                                        <GridColumn Field=@nameof(JobDescriptionWorkExperienceRequirement.ExperienceDesc) HeaderText="Required work Experience" AllowEditing="false"  Width="150"></GridColumn>
                                                    </GridColumns>
                                                </SfGrid>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Benefits"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <div style="margin:10px;">
                                            <SfGrid @ref="@JobDescriptionBenefitGrid" Query="@ChildQuery" TValue="JobDescriptionBenefit" ID="Grid5" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update","ExcelExport","PdfExport","CsvExport", "Search"})">
                                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                <GridPageSettings PageSizes="true"></GridPageSettings>
                                                 <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                                <GridEvents OnToolbarClick="@GridToolbarClick" TValue="JobDescriptionBenefit"></GridEvents>
                                                <SfDataManager AdaptorInstance="@typeof(JobDescriptionBenefitAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                            <GridEvents OnActionComplete="@OnJobDescriptionBenefitComplete" OnActionBegin="@OnJobDescriptionBenefitActionBegin" TValue="JobDescriptionBenefit"></GridEvents>
                                            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams">
                                                <HeaderTemplate>
                                                    @{
                                                        var text = GetJobDescriptionBenefitHeader((context as JobDescriptionBenefit));
                                                        <div class="headerbandimg">
                                                            <span>@text</span>
                                                        </div>
                                                    }
                                                </HeaderTemplate>
                                                <Template Context="JobDescriptionBenefitContext">
                                                    @{
                                                        var JobDescriptionBenefitReviewData = (JobDescriptionBenefitContext as JobDescriptionBenefit);
                                                        <div class="row">
                                                            <div class="col-md-12">
                                                            </div>
                                                            <div class="col-md-12">
                                                                <p>Benefits</p>
                                                                <SfTextBox Multiline=true @bind-Value="@(JobDescriptionBenefitReviewData.BenefitDescription)" Placeholder="Benefits" Width="100%" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="col-md-6">
                                                            </div>
                                                        </div>

                                                    }
                                                </Template>
                                            </GridEditSettings>
                                                <GridColumns>
                                                  <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                                                	<GridColumn Field=@nameof(JobDescriptionBenefit.BenefitId) HeaderText="BenefitId" Visible=false AllowEditing="false" IsPrimaryKey="true" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(JobDescriptionBenefit.JobDescriptionId) HeaderText="JobDescriptionId" Visible=false AllowEditing="false" Width="150"></GridColumn>
                                                    <GridColumn Field=@nameof(JobDescriptionBenefit.BenefitDescription) HeaderText="Benefits" AllowEditing="false"  Width="150"></GridColumn>
                                                </GridColumns>
                                            </SfGrid>
                                        </div>
                                    </ContentTemplate>
                                </TabItem>
                            </TabItems>
                            </SfTab>
                }
            }
        </Template>
    </GridEditSettings>
    <GridColumns>
      <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
    	<GridColumn Field=@nameof(JobDescription.JobDescriptionId) Visible=false HeaderText="JobDescriptionId" AllowEditing="false" IsPrimaryKey="true" Width="150"></GridColumn>
        <GridForeignColumn Field=@nameof(JobDescription.JibTitleId) HeaderText="Job Title"  Width="150" ForeignKeyField="@(nameof(AJobTitle.JobTitleId))" ForeignKeyValue="@(nameof(AJobTitle.JobTitleDescription))" ForeignDataSource="@JobTitleData"></GridForeignColumn>
        <GridForeignColumn Field=@nameof(JobDescription.DepartmentId) HeaderText="Department" Width="150" ForeignKeyField="@(nameof(ADepartment.DepartmentId))" ForeignKeyValue="@(nameof(ADepartment.DepartmentDescription))" ForeignDataSource="@DepartmentData"></GridForeignColumn>
        <GridForeignColumn Field=@nameof(JobDescription.SalaryScaleId) HeaderText="Salary Scale" Width="150" ForeignKeyField="@(nameof(ASalaryScale.SalaryScaleId))" ForeignKeyValue="@(nameof(ASalaryScale.SalaryScaleDescription))" ForeignDataSource="@SalaryScaleData"></GridForeignColumn>
        <GridColumn Field=@nameof(JobDescription.JobDescription1) Visible=false HeaderText="Job Description"  Width="150">
            <Template>
                @{
                    <p>@((MarkupString)(context as JobDescription)?.JobDescription1)</p>
                }
            </Template>
        </GridColumn>
        <GridForeignColumn Field=@nameof(JobDescription.JobTypeId) HeaderText="Job Type" Width="150" ForeignKeyField="@(nameof(AJobType.JobTypeId))" ForeignKeyValue="@(nameof(AJobType.TypeDescription))" ForeignDataSource="@JobTypeData"></GridForeignColumn>
        <GridColumn Field=@nameof(JobDescription.Vacancies) HeaderText="Vacancies"  Width="150"></GridColumn>
        <GridForeignColumn Field=@nameof(JobDescription.JobStatusId) HeaderText="Job Status" Width="150" ForeignKeyField="@(nameof(AJobStatus.JobStatusId))" ForeignKeyValue="@(nameof(AJobStatus.JobStatusDesc))" ForeignDataSource="@JobStatusData"></GridForeignColumn>
    </GridColumns>
</SfGrid>

@code {

    #region Toasters
    public static string? ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast? DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters
    SfGrid<JobDescription>? JobDescriptionGrid { get; set; }
    SfGrid<JobDescriptionKnowledge>? JobDescriptionKnowledgeGrid { get; set; }
    SfGrid<JobDescriptionResponsibility>? JobDescriptionResponsibilityDataGrid { get; set; }
    SfGrid<JobDescriptionWorkExperienceRequirement>? JobDescriptionWorkExperienceRequirementGrid { get; set; }
    SfGrid<JobDescriptionBenefit>? JobDescriptionBenefitGrid { get; set; }
    JobDescription? JobDescriptionReviewData { get; set; }
    SfNumericTextBox<int>? JobDescriptionIdTxt { get; set; }
    String? JobDescriptionUrl { get; set; }
    List<AJobTitle>? JobTitleData { get; set; }
    List<ADepartment>? DepartmentData { get; set; }
    List<ASalaryScale>? SalaryScaleData { get; set; }
    List<AJobType>? JobTypeData { get; set; }
    List<AContractLengthType>? ContractLengthTypeData { get; set; }
    List<ALevelofEducation>? LevelofEducationData { get; set; }
    List<AJobStatus>? JobStatusData { get; set; }
    List<AFieldOfStudy>? FieldOfStudyData { get; set; }
    string? ErrorMessage { get; set; } = null;
    Query ChildQuery { get; set; } = new Query();
    Query JobTitleChildQuery { get; set; } = new Query();

    private ToolbarType Tooltype = ToolbarType.MultiRow;
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };
    private List<LinkToolbarItemModel> Link = new List<LinkToolbarItemModel>()
    {
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.Open },
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.Edit },
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.UnLink }
    };

    private void DepartmentValueChangeHandler(ChangeEventArgs<int?, ADepartment> args)
    {
        if(args.ItemData != null){
            JobTitleChildQuery= new Query().Where(new WhereFilter() { Field = "DepartmentId", Operator = "equal", value = args.ItemData.DepartmentId, IgnoreCase = false, IgnoreAccent = false });
        }
    }
    /// <summary>
    /// Event for Toolbar click for Grid Exporting
    /// </summary>
    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid1_excelexport")
        {
            this.JobDescriptionGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid1_pdfexport")
        {
            this.JobDescriptionGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid1_csvexport")
        {
            this.JobDescriptionGrid.ExportToCsvAsync();
        }
        if (args.Item.Id == "Grid2_excelexport")
        {
            this.JobDescriptionKnowledgeGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid2_pdfexport")
        {
            this.JobDescriptionKnowledgeGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid2_csvexport")
        {
            this.JobDescriptionKnowledgeGrid.ExportToCsvAsync();
        }
        if (args.Item.Id == "Grid3_excelexport")
        {
            this.JobDescriptionResponsibilityDataGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid3_pdfexport")
        {
            this.JobDescriptionResponsibilityDataGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid3_csvexport")
        {
            this.JobDescriptionResponsibilityDataGrid.ExportToCsvAsync();
        }
        if (args.Item.Id == "Grid4_excelexport")
        {
            this.JobDescriptionWorkExperienceRequirementGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid4_pdfexport")
        {
            this.JobDescriptionWorkExperienceRequirementGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid4_csvexport")
        {
            this.JobDescriptionWorkExperienceRequirementGrid.ExportToCsvAsync();
        }
        if (args.Item.Id == "Grid5_excelexport")
        {
            this.JobDescriptionBenefitGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid5_pdfexport")
        {
            this.JobDescriptionBenefitGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid5_csvexport")
        {
            this.JobDescriptionBenefitGrid.ExportToCsvAsync();
        }
    }
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "60vh", Width = "96%" };
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    protected override async Task OnInitializedAsync()
    {
        try{
            await _SystemSettings.GetLoginCredentials();
            if (string.IsNullOrEmpty(_SystemSettings.AccessToken))
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                var tasks = new List<Task>();
                tasks.Add(Task.Run(async () =>
               {
                   Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                   var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}HumanResource/GetJobTitle");
                   var content = await response.Content.ReadAsStringAsync();
                   if (response.IsSuccessStatusCode)
                   {
                       JobTitleData = JsonSerializer.Deserialize<List<AJobTitle>>(content, _options);
                   }
               }));
                tasks.Add(Task.Run(async () =>
               {
                   Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                   var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Utilities/GetDepartment");
                   var content = await response.Content.ReadAsStringAsync();
                   if (response.IsSuccessStatusCode)
                   {
                       DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(content, _options);
                   }
               }));
                tasks.Add(Task.Run(async () =>
                {
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                    var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Utilities/GetSalaryScale");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        SalaryScaleData = JsonSerializer.Deserialize<List<ASalaryScale>>(content, _options);
                    }
                }));
                tasks.Add(Task.Run(async () =>
                {
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                    var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Utilities/GetJobType");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        JobTypeData = JsonSerializer.Deserialize<List<AJobType>>(content, _options);
                    }
                }));
                tasks.Add(Task.Run(async () =>
                {
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                    var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Utilities/GetContractLengthType");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        ContractLengthTypeData = JsonSerializer.Deserialize<List<AContractLengthType>>(content, _options);
                    }
                }));
                tasks.Add(Task.Run(async () =>
               {
                   Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                   var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Utilities/GetLevelofEducation");
                   var content = await response.Content.ReadAsStringAsync();
                   if (response.IsSuccessStatusCode)
                   {
                       LevelofEducationData = JsonSerializer.Deserialize<List<ALevelofEducation>>(content, _options);
                   }
               }));
                tasks.Add(Task.Run(async () =>
                {
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                    var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}Utilities/GetFieldOfStudy");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        FieldOfStudyData = JsonSerializer.Deserialize<List<AFieldOfStudy>>(content, _options);
                    }
                }));
                Task t = Task.WhenAll(tasks);
                await t;
            }

        }
        catch(Exception ex)
        {
            ErrorMessage=$"Error: {ex.Message}";
        }
        await base.OnInitializedAsync();
        StateHasChanged();
    }


    public class JobDescriptionAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        //private UserManagement _userManagement;
        public JobDescriptionAdapter(HttpClient _http, IToastService ts/*, UserManagement userManagement*/
        ,SystemSettings systemSettings,ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _SystemSettings = systemSettings;
            _ApiConfig = apiConfig;
            //_userManagement = userManagement;
            toastService = ts;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<JobDescription>();
            try
            {
                await _SystemSettings.GetLoginCredentials();

                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}HumanResource/GetJobDescription");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<JobDescription>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<JobDescription>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                await _SystemSettings.GetLoginCredentials();
                var val = (value as JobDescription);
                if(val != null)
                {
                    if (val.JobDescriptionId == 0)
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescription", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescription", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            //try
            //{
            //    int data = (int)value;
            //    using (var dbContext = new MUCOBADIContext())
            //    {
            //        var exists = dbContext.AAdministrationPhase.FirstOrDefault(o => o.AdministrationPhaseId == data);
            //        if (exists != null)
            //        {
            //            dbContext.AAdministrationPhase.Remove(exists);
            //        }
            //        await dbContext.SaveChangesAsync();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    toastService.ShowError(ex.Message.ToString());
            //}


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                await _SystemSettings.GetLoginCredentials();
                var val = (value as JobDescription);
                if(val != null)
                {
                    if (val.JobDescriptionId == 0)
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescription", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescription", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if(data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
        public override async Task<object> BatchUpdateAsync(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            object? products = null;
            try
            {
                await _SystemSettings.GetLoginCredentials();
                if (Changed != null)
                {
                    products = Changed;
                    foreach (var val in (List<JobDescription>)Changed)
                    {
                        if(val != null)
                        {
                            if (val.JobDescriptionId == 0)
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescription", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescription", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Added != null)
                {
                    products = Added;
                    foreach (var val in (List<JobDescription>)Added)
                    {
                        if(val != null)
                        {
                            if (val.JobDescriptionId == 0)
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescription", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescription", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if(data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Deleted != null)
                {
                    products = Deleted;
                    //foreach (var rec in (List<OrderDetails>)Deleted)
                    //{
                    //    Orders.Remove(Orders.Where(or => or.OrderID == rec.OrderID).FirstOrDefault());
                    //}

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return products;
        }
    }
    public async Task OnJobDescriptionActionBegin(ActionEventArgs<JobDescription> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {
                ChildQuery = new();
                ChildQuery.AddParams("JobDescriptionId", args.RowData.JobDescriptionId);
                //JobDescriptionGrid.PreventRender(false);
            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {

            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }

    }
    public async Task OnJobDescriptionActionComplete(ActionEventArgs<JobDescription> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {
                JobDescriptionGrid.PreventRender(false);
            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {

            }
        }
        catch(Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }

    }
    public string GetJobDescriptionHeader(JobDescription Value)
    {
        if (Value.JobDescriptionId == 0)
        {
            return "Add New Job Description";
        }
        else
        {
            string? Desc = string.Empty;
            if(JobTitleData != null){
                var data = JobTitleData.FirstOrDefault(o => o.JobTitleId == Value.JibTitleId);
                if(data != null){
                    Desc = data.JobTitleDescription;
                }
            }
            return "Edit Details for " + Desc;
        }
    }

    public class JobDescriptionKnowledgeAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        //private UserManagement _userManagement;
        public JobDescriptionKnowledgeAdapter(HttpClient _http, IToastService ts/*, UserManagement userManagement*/
        , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _SystemSettings = systemSettings;
            _ApiConfig = apiConfig;
            //_userManagement = userManagement;
            toastService = ts;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<JobDescriptionKnowledge>();
            try
            {
                await _SystemSettings.GetLoginCredentials();

                int? JobDescriptionId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "JobDescriptionId").Value != null)
                    {
                        JobDescriptionId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "JobDescriptionId").Value.ToString());
                    }
                }

                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}HumanResource/GetJobDescriptionKnowledge/{JobDescriptionId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<JobDescriptionKnowledge>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<JobDescriptionKnowledge>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                await _SystemSettings.GetLoginCredentials();
                var val = (value as JobDescriptionKnowledge);
                if (val != null)
                {
                    if (val.KnowledgeId == 0)
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionKnowledge", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionKnowledge", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            //try
            //{
            //    int data = (int)value;
            //    using (var dbContext = new MUCOBADIContext())
            //    {
            //        var exists = dbContext.AAdministrationPhase.FirstOrDefault(o => o.AdministrationPhaseId == data);
            //        if (exists != null)
            //        {
            //            dbContext.AAdministrationPhase.Remove(exists);
            //        }
            //        await dbContext.SaveChangesAsync();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    toastService.ShowError(ex.Message.ToString());
            //}


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                await _SystemSettings.GetLoginCredentials();
                var val = (value as JobDescriptionKnowledge);
                if (val != null)
                {
                    if (val.KnowledgeId == 0)
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionKnowledge", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionKnowledge", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
        public override async Task<object> BatchUpdateAsync(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            object? products = null;
            try
            {
                await _SystemSettings.GetLoginCredentials();
                if (Changed != null)
                {
                    products = Changed;
                    foreach (var val in (List<JobDescriptionKnowledge>)Changed)
                    {
                        if (val != null)
                        {
                            if (val.KnowledgeId == 0)
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionKnowledge", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionKnowledge", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Added != null)
                {
                    products = Added;
                    foreach (var val in (List<JobDescriptionKnowledge>)Added)
                    {
                        if (val != null)
                        {
                            if (val.KnowledgeId == 0)
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionKnowledge", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionKnowledge", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Deleted != null)
                {
                    products = Deleted;
                    //foreach (var rec in (List<OrderDetails>)Deleted)
                    //{
                    //    Orders.Remove(Orders.Where(or => or.OrderID == rec.OrderID).FirstOrDefault());
                    //}

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return products;
        }
    }
    public async Task OnJobDescriptionKnowledgeComplete(ActionEventArgs<JobDescriptionKnowledge> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {
                JobDescriptionKnowledgeGrid.PreventRender(false);
            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                ChildQuery.AddParams("JobDescriptionId", JobDescriptionReviewData.JobDescriptionId);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }

    }
    public string GetJobDescriptionKnowledgeHeader(JobDescriptionKnowledge Value)
    {
        if (Value.KnowledgeId == 0)
        {
            return "Add New Qualification";
        }
        else
        {
            string? Desc = string.Empty;
            if (FieldOfStudyData != null)
            {
                var data = FieldOfStudyData.FirstOrDefault(o => o.FieldOfStudyId == Value.FieldofStudyId);
                if (data != null)
                {
                    Desc = data.FieldOfStudyDesc;
                }
            }
            return "Edit Details for " + Desc;
        }
    }
    public async Task OnJobDescriptionKnowledgeActionBegin(ActionEventArgs<JobDescriptionKnowledge> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {
                
            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                if(JobDescriptionReviewData != null && JobDescriptionReviewData.JobDescriptionId==0){
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(JobDescriptionReviewData);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                    var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionData", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        var content = await result.Content.ReadAsStringAsync();
                        var data = JsonSerializer.Deserialize<JobDescription>(content, _options);
                        JobDescriptionReviewData.JobDescriptionId = data.JobDescriptionId;
                        //JobDescriptionIdTxt.Value = JobDescriptionReviewData.JobDescriptionId;
                        StateHasChanged();
                    }
                    else
                    {
                        var content = await result.Content.ReadAsStringAsync();
                        var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = data.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        args.Cancel = true;
                    }
                }
                args.Data.JobDescriptionId = JobDescriptionReviewData.JobDescriptionId;
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally{
            ChildQuery.AddParams("JobDescriptionId", JobDescriptionReviewData.JobDescriptionId);
            StateHasChanged();
        }
    }

    public class JobDescriptionResponsibilityAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        //private UserManagement _userManagement;
        public JobDescriptionResponsibilityAdapter(HttpClient _http, IToastService ts/*, UserManagement userManagement*/
        , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _SystemSettings = systemSettings;
            _ApiConfig = apiConfig;
            //_userManagement = userManagement;
            toastService = ts;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<JobDescriptionResponsibility>();
            try
            {
                await _SystemSettings.GetLoginCredentials();

                int? JobDescriptionId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "JobDescriptionId").Value != null)
                    {
                        JobDescriptionId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "JobDescriptionId").Value.ToString());
                    }
                }

                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}HumanResource/GetJobDescriptionResponsibility/{JobDescriptionId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<JobDescriptionResponsibility>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<JobDescriptionResponsibility>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                await _SystemSettings.GetLoginCredentials();
                var val = (value as JobDescriptionResponsibility);
                if (val != null)
                {
                    if (val.ResponsibiltyId == 0)
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionResponsibility", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionResponsibility", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            //try
            //{
            //    int data = (int)value;
            //    using (var dbContext = new MUCOBADIContext())
            //    {
            //        var exists = dbContext.AAdministrationPhase.FirstOrDefault(o => o.AdministrationPhaseId == data);
            //        if (exists != null)
            //        {
            //            dbContext.AAdministrationPhase.Remove(exists);
            //        }
            //        await dbContext.SaveChangesAsync();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    toastService.ShowError(ex.Message.ToString());
            //}


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                await _SystemSettings.GetLoginCredentials();
                var val = (value as JobDescriptionResponsibility);
                if (val != null)
                {
                    if (val.ResponsibiltyId == 0)
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionResponsibility", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionResponsibility", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
        public override async Task<object> BatchUpdateAsync(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            object? products = null;
            try
            {
                await _SystemSettings.GetLoginCredentials();
                if (Changed != null)
                {
                    products = Changed;
                    foreach (var val in (List<JobDescriptionResponsibility>)Changed)
                    {
                        if (val != null)
                        {
                            if (val.ResponsibiltyId == 0)
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionResponsibility", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionResponsibility", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Added != null)
                {
                    products = Added;
                    foreach (var val in (List<JobDescriptionResponsibility>)Added)
                    {
                        if (val != null)
                        {
                            if (val.ResponsibiltyId == 0)
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionResponsibility", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionResponsibility", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Deleted != null)
                {
                    products = Deleted;
                    //foreach (var rec in (List<OrderDetails>)Deleted)
                    //{
                    //    Orders.Remove(Orders.Where(or => or.OrderID == rec.OrderID).FirstOrDefault());
                    //}

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return products;
        }
    }
    public async Task OnJobDescriptionResponsibilityComplete(ActionEventArgs<JobDescriptionResponsibility> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {
                JobDescriptionResponsibilityDataGrid.PreventRender(false);
            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                ChildQuery.AddParams("JobDescriptionId", JobDescriptionReviewData.JobDescriptionId);
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }

    }
    public string GetJobDescriptionResponsibilityHeader(JobDescriptionResponsibility Value)
    {
        if (Value.ResponsibiltyId == 0)
        {
            return "Add New Responsibilities";
        }
        else
        {
            return "Edit Details for " + Value.ResponsibilityDesc;
        }
    }
    public async Task OnJobDescriptionResponsibilityActionBegin(ActionEventArgs<JobDescriptionResponsibility> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {

            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                if (JobDescriptionReviewData != null && JobDescriptionReviewData.JobDescriptionId == 0)
                {
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(JobDescriptionReviewData);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                    var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionData", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        var content = await result.Content.ReadAsStringAsync();
                        var data = JsonSerializer.Deserialize<JobDescription>(content, _options);
                        JobDescriptionReviewData.JobDescriptionId = data.JobDescriptionId;
                        //JobDescriptionIdTxt.Value = JobDescriptionReviewData.JobDescriptionId;
                        StateHasChanged();
                    }
                    else
                    {
                        var content = await result.Content.ReadAsStringAsync();
                        var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = data.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        args.Cancel = true;
                    }
                }
                args.Data.JobDescriptionId = JobDescriptionReviewData.JobDescriptionId;
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            ChildQuery.AddParams("JobDescriptionId", JobDescriptionReviewData.JobDescriptionId);
            StateHasChanged();
        }

    }

    public class JobDescriptionWorkExperienceRequirementAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        //private UserManagement _userManagement;
        public JobDescriptionWorkExperienceRequirementAdapter(HttpClient _http, IToastService ts/*, UserManagement userManagement*/
        , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _SystemSettings = systemSettings;
            _ApiConfig = apiConfig;
            //_userManagement = userManagement;
            toastService = ts;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<JobDescriptionWorkExperienceRequirement>();
            try
            {
                await _SystemSettings.GetLoginCredentials();

                int? JobDescriptionId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "JobDescriptionId").Value != null)
                    {
                        JobDescriptionId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "JobDescriptionId").Value.ToString());
                    }
                }

                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}HumanResource/GetJobDescriptionWorkExperienceRequirement/{JobDescriptionId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<JobDescriptionWorkExperienceRequirement>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<JobDescriptionWorkExperienceRequirement>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                await _SystemSettings.GetLoginCredentials();
                var val = (value as JobDescriptionWorkExperienceRequirement);
                if (val != null)
                {
                    if (val.ExperienceId == 0)
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionWorkExperienceRequirement", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionWorkExperienceRequirement", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            //try
            //{
            //    int data = (int)value;
            //    using (var dbContext = new MUCOBADIContext())
            //    {
            //        var exists = dbContext.AAdministrationPhase.FirstOrDefault(o => o.AdministrationPhaseId == data);
            //        if (exists != null)
            //        {
            //            dbContext.AAdministrationPhase.Remove(exists);
            //        }
            //        await dbContext.SaveChangesAsync();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    toastService.ShowError(ex.Message.ToString());
            //}


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                await _SystemSettings.GetLoginCredentials();
                var val = (value as JobDescriptionWorkExperienceRequirement);
                if (val != null)
                {
                    if (val.ExperienceId == 0)
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionWorkExperienceRequirement", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionWorkExperienceRequirement", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
        public override async Task<object> BatchUpdateAsync(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            object? products = null;
            try
            {
                await _SystemSettings.GetLoginCredentials();
                if (Changed != null)
                {
                    products = Changed;
                    foreach (var val in (List<JobDescriptionWorkExperienceRequirement>)Changed)
                    {
                        if (val != null)
                        {
                            if (val.ExperienceId == 0)
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionWorkExperienceRequirement", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionWorkExperienceRequirement", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Added != null)
                {
                    products = Added;
                    foreach (var val in (List<JobDescriptionWorkExperienceRequirement>)Added)
                    {
                        if (val != null)
                        {
                            if (val.ExperienceId == 0)
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionWorkExperienceRequirement", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionWorkExperienceRequirement", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Deleted != null)
                {
                    products = Deleted;
                    //foreach (var rec in (List<OrderDetails>)Deleted)
                    //{
                    //    Orders.Remove(Orders.Where(or => or.OrderID == rec.OrderID).FirstOrDefault());
                    //}

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return products;
        }
    }
    public async Task OnJobDescriptionWorkExperienceRequirementComplete(ActionEventArgs<JobDescriptionWorkExperienceRequirement> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {
                JobDescriptionWorkExperienceRequirementGrid.PreventRender(false);
            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                ChildQuery.AddParams("JobDescriptionId", JobDescriptionReviewData.JobDescriptionId);
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }

    }
    public string GetJobDescriptionWorkExperienceRequirementHeader(JobDescriptionWorkExperienceRequirement Value)
    {
        if (Value.ExperienceId == 0)
        {
            return "Add New Required Work Experience";
        }
        else
        {
            return "Edit Details for " + Value.ExperienceDesc;
        }
    }
    public async Task OnJobDescriptionWorkExperienceRequirementActionBegin(ActionEventArgs<JobDescriptionWorkExperienceRequirement> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {

            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                if (JobDescriptionReviewData != null && JobDescriptionReviewData.JobDescriptionId == 0)
                {
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(JobDescriptionReviewData);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                    var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionData", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        var content = await result.Content.ReadAsStringAsync();
                        var data = JsonSerializer.Deserialize<JobDescription>(content, _options);
                        JobDescriptionReviewData.JobDescriptionId = data.JobDescriptionId;
                        //JobDescriptionIdTxt.Value = JobDescriptionReviewData.JobDescriptionId;
                        StateHasChanged();
                    }
                    else
                    {
                        var content = await result.Content.ReadAsStringAsync();
                        var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = data.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        args.Cancel = true;
                    }
                }
                args.Data.JobDescriptionId = JobDescriptionReviewData.JobDescriptionId;
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            ChildQuery.AddParams("JobDescriptionId", JobDescriptionReviewData.JobDescriptionId);
            StateHasChanged();
        }
    }

    public class JobDescriptionBenefitAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        SystemSettings _SystemSettings;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        //private UserManagement _userManagement;
        public JobDescriptionBenefitAdapter(HttpClient _http, IToastService ts/*, UserManagement userManagement*/
        , SystemSettings systemSettings, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _SystemSettings = systemSettings;
            _ApiConfig = apiConfig;
            //_userManagement = userManagement;
            toastService = ts;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<JobDescriptionBenefit>();
            try
            {
                await _SystemSettings.GetLoginCredentials();

                int? JobDescriptionId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "JobDescriptionId").Value != null)
                    {
                        JobDescriptionId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "JobDescriptionId").Value.ToString());
                    }
                }

                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}HumanResource/GetJobDescriptionBenefit/{JobDescriptionId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<JobDescriptionBenefit>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<JobDescriptionBenefit>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                await _SystemSettings.GetLoginCredentials();
                var val = (value as JobDescriptionBenefit);
                if (val != null)
                {
                    if (val.BenefitId == 0)
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionBenefit", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionBenefit", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            //try
            //{
            //    int data = (int)value;
            //    using (var dbContext = new MUCOBADIContext())
            //    {
            //        var exists = dbContext.AAdministrationPhase.FirstOrDefault(o => o.AdministrationPhaseId == data);
            //        if (exists != null)
            //        {
            //            dbContext.AAdministrationPhase.Remove(exists);
            //        }
            //        await dbContext.SaveChangesAsync();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    toastService.ShowError(ex.Message.ToString());
            //}


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                await _SystemSettings.GetLoginCredentials();
                var val = (value as JobDescriptionBenefit);
                if (val != null)
                {
                    if (val.BenefitId == 0)
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionBenefit", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionBenefit", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
        public override async Task<object> BatchUpdateAsync(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            object? products = null;
            try
            {
                await _SystemSettings.GetLoginCredentials();
                if (Changed != null)
                {
                    products = Changed;
                    foreach (var val in (List<JobDescriptionBenefit>)Changed)
                    {
                        if (val != null)
                        {
                            if (val.BenefitId == 0)
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionBenefit", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionBenefit", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Added != null)
                {
                    products = Added;
                    foreach (var val in (List<JobDescriptionBenefit>)Added)
                    {
                        if (val != null)
                        {
                            if (val.BenefitId == 0)
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionBenefit", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }

                            }
                            else
                            {
                                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                                var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}HumanResource/PutJobDescriptionBenefit", httpContent);
                                if (result.IsSuccessStatusCode)
                                {
                                    var content = await result.Content.ReadAsStringAsync();
                                    var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                                    if (data != null)
                                    {
                                        if (data.IsSuccess)
                                        {
                                            toastService.ShowSuccess(data.Message);
                                        }
                                        else
                                        {
                                            toastService.ShowError(data.Message);
                                        }
                                    }
                                }
                                else
                                {
                                    toastService.ShowError(result.ReasonPhrase);
                                }
                            }
                        }
                    }

                }
                if (Deleted != null)
                {
                    products = Deleted;
                    //foreach (var rec in (List<OrderDetails>)Deleted)
                    //{
                    //    Orders.Remove(Orders.Where(or => or.OrderID == rec.OrderID).FirstOrDefault());
                    //}

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return products;
        }
    }
    public async Task OnJobDescriptionBenefitComplete(ActionEventArgs<JobDescriptionBenefit> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {
                JobDescriptionBenefitGrid.PreventRender(false);
            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                ChildQuery.AddParams("JobDescriptionId", JobDescriptionReviewData.JobDescriptionId);
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }

    }
    public string GetJobDescriptionBenefitHeader(JobDescriptionBenefit Value)
    {
        if (Value.BenefitId == 0)
        {
            return "Add New Required Work Experience";
        }
        else
        {
            return "Edit Details for " + Value.BenefitDescription;
        }
    }
    public async Task OnJobDescriptionBenefitActionBegin(ActionEventArgs<JobDescriptionBenefit> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
            {

            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                if (JobDescriptionReviewData != null && JobDescriptionReviewData.JobDescriptionId == 0)
                {
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(JobDescriptionReviewData);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                    var result = await Http.PostAsync($"{_ApiConfig.BaseUrl}HumanResource/PostJobDescriptionData", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        var content = await result.Content.ReadAsStringAsync();
                        var data = JsonSerializer.Deserialize<JobDescription>(content, _options);
                        JobDescriptionReviewData.JobDescriptionId = data.JobDescriptionId;
                        //JobDescriptionIdTxt.Value = JobDescriptionReviewData.JobDescriptionId;
                        StateHasChanged();
                    }
                    else
                    {
                        var content = await result.Content.ReadAsStringAsync();
                        var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                        await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = data.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        args.Cancel = true;
                    }
                }
                args.Data.JobDescriptionId = JobDescriptionReviewData.JobDescriptionId;
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            ChildQuery.AddParams("JobDescriptionId", JobDescriptionReviewData.JobDescriptionId);
            StateHasChanged();
        }
    }
}