@page "/FinalApplicationAssessmentPage"
@using HCMIS.DTOs
@using System.Collections
@using HCMIS.Interface
@using System.Text.Json;
@using HCMIS.Model;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SystemSettings _SystemSettings
@inject ApiConfig _ApiConfig;
@inject IToastService toastService;
@inject NavigationManager navManager;
@inject IAuthenticationService AuthService;

@*<h3>FinalApplicationAssessmentPage</h3>*@
<style>
    p {
        font-size: 11pt;
    }

    label {
        font-size: 12pt;
        font-weight: bold;
    }

    h3 {
        color: ghostwhite;
        background-color: darkslategray;
        padding: 10px;
        font-size: 13pt;
        width: 100%;
    }

    h4 {
        color: ghostwhite;
        background-color: black;
        padding: 10px;
        font-size: 12pt;
        width: 100%;
    }

    .alert-info {
        padding: 10px;
    }
</style>


<BreadCrumbPage Module="HCMIS" Submodule="FINAL CANDIDATES"/>

<MudOverlay Visible="@loadingspinner" DarkBackground="true" Absolute="true" Style="z-index:100000;">
    <div class="loader">
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--text" style="color:white;"></div>
    </div>
</MudOverlay>

<SfGrid @ref=@AppliedForJobGrid TValue="AppliedForJobs" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
        AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true"
        Toolbar="@(new string[] {"Edit","Update","Cancel","ColumnChooser"})">
    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSize="20"></GridPageSettings>
    <SfDataManager AdaptorInstance="@typeof(FinalStageApplicationAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
        <Template>
            @{
                HeaderReviewData = (context as AppliedForJobs);
                if (HeaderReviewData != null)
                {
                    <div class="row">
                        <HCMIS.Pages.HR.Applicants.PartialPages.ApplicantHeaderPartialPage HeaderReviewData="@HeaderReviewData" ShowAptituddeTestResults=true />

                        <HCMIS.Pages.HR.Applicants.PartialPages.ApplicantHeaderPartialPage HeaderReviewData="@HeaderReviewData" ContractLengthTypeData="@ContractLengthTypeData" DepartmentData="@DepartmentData" JobDescriptionData="@JobDescriptionData" JobOpeningData="@JobOpeningData" JobTitleData="@JobTitleData" JobTypeData="@JobTypeData" LevelofEducationData="@LevelofEducationData"
                                                                                           SalaryScaleData="@SalaryScaleData" EmployeeData="@EmployeeData" NonStaffData="@NonStaffData" DistrictData="@DistrictData" ParishData="@ParishData" SubCountyData="SubCountyData" VillageData="@VillageData" ShowAptituddeTestResults=true />
                        
                        <div class="col-md-12">
                            <SfTab>
                                <TabItems>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Process Comments"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div style="margin:10px; width:100%;">
                                                <HCMIS.Pages.HR.Applicants.PartialPages.ApplicationCommentPartialPage AppliedForJobsComment="@HeaderReviewData.AppliedForJobsComment.ToList()" />
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>

                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Qualifications"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            @{
                                                List<ApplicationNonStaffQualification> _nonstaffqualification = new List<ApplicationNonStaffQualification>();
                                                List<ApplicationNonStaffQualification> _employeequalification = new List<ApplicationNonStaffQualification>();

                                                <div style="margin:10px; width:100%;">
                                                    @*Employee*@
                                                    @if (HeaderReviewData != null && HeaderReviewData.Employeeid != null && HeaderReviewData.NonStaffid == null && QualificationData != null)
                                                    {
                                                        _employeequalification = QualificationData.Where(o => o.EmployeeId == HeaderReviewData.Employeeid).ToList();
                                                    }
                                                    @*NonStaff*@
                                                    else if (HeaderReviewData != null && HeaderReviewData.NonStaffid != null && HeaderReviewData.Employeeid == null && QualificationData != null)
                                                    {
                                                        _nonstaffqualification = QualificationData.Where(o => o.NonStaffid == HeaderReviewData.NonStaffid).ToList();
                                                    }

                                                    <HCMIS.Pages.HR.Applicants.PartialPages.QualificationPartialPage QualificationData="_nonstaffqualification.ToList()"
                                                                                                                     FieldOfStudyData="@FieldOfStudyData"
                                                                                                                     LevelofEducationData="@LevelofEducationData"
                                                                                                                     AccessToken="@AccessToken" />
                                                </div>
                                            }
                                        </ContentTemplate>
                                    </TabItem>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Work Experience"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            @{
                                                List<ApplicationNonStaffWorkExperience> _nonstaffqualification = new List<ApplicationNonStaffWorkExperience>();
                                                List<ApplicationNonStaffWorkExperience> _employeequalification = new List<ApplicationNonStaffWorkExperience>();

                                                <div style="margin:10px; width:100%;">
                                                    @*Employee*@
                                                    @if (HeaderReviewData != null && HeaderReviewData.Employeeid != null && HeaderReviewData.NonStaffid == null && WorkExperienceData != null)
                                                    {
                                                        _employeequalification = WorkExperienceData.Where(o => o.EmployeeId == HeaderReviewData.Employeeid).ToList();
                                                    }
                                                    @*NonStaff*@
                                                    else if (HeaderReviewData != null && HeaderReviewData.NonStaffid != null && HeaderReviewData.Employeeid == null && WorkExperienceData != null)
                                                    {
                                                        _nonstaffqualification = WorkExperienceData.Where(o => o.NonStaffid == HeaderReviewData.NonStaffid).ToList();
                                                    }

                                                    <HCMIS.Pages.HR.Applicants.PartialPages.WorkExperiencePatialPage WorkExperienceData="@_nonstaffqualification.ToList()" />
                                                </div>
                                            }
                                        </ContentTemplate>
                                    </TabItem>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Skills"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            @{
                                                List<NonStaffSkills> _nonstaffskills = new List<NonStaffSkills>();
                                                // List<ApplicationNonStaffWorkExperience> _employeequalification = new List<ApplicationNonStaffWorkExperience>();

                                                <div style="margin:10px; width:100%;">
                                                    @*Employee*@
                                                    @if (HeaderReviewData != null && HeaderReviewData.Employeeid != null && HeaderReviewData.NonStaffid == null && NonStaffSkillsData != null)
                                                    {
                                                        // _nonstaffskills = NonStaffSkillsData.Where(o => o.NonStaffid == HeaderReviewData.Employeeid).ToList();
                                                    }
                                                    @*NonStaff*@
                                                    else if (HeaderReviewData != null && HeaderReviewData.NonStaffid != null && HeaderReviewData.Employeeid == null && NonStaffSkillsData != null)
                                                    {
                                                        _nonstaffskills = NonStaffSkillsData.Where(o => o.NonStaffid == HeaderReviewData.NonStaffid).ToList();
                                                    }

                                                    <HCMIS.Pages.HR.Applicants.PartialPages.SkillsPartialPage SkillsData="@_nonstaffskills.ToList()"
                                                                                                              SkillLevelData="@SkillLevelData"
                                                                                                              AccessToken="@AccessToken" />
                                                </div>
                                            }
                                        </ContentTemplate>
                                    </TabItem>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Languages Known"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            @{
                                                List<NonStaffLanguagesKnown> _nonstafflanguages = new List<NonStaffLanguagesKnown>();
                                                // List<ApplicationNonStaffWorkExperience> _employeequalification = new List<ApplicationNonStaffWorkExperience>();

                                                <div style="margin:10px; width:100%;">
                                                    @*Employee*@
                                                    @if (HeaderReviewData != null && HeaderReviewData.Employeeid != null && HeaderReviewData.NonStaffid == null && NonStaffLanguagesKnownData != null)
                                                    {
                                                        // _nonstaffskills = NonStaffSkillsData.Where(o => o.NonStaffid == HeaderReviewData.Employeeid).ToList();
                                                    }
                                                    @*NonStaff*@
                                                    else if (HeaderReviewData != null && HeaderReviewData.NonStaffid != null && HeaderReviewData.Employeeid == null && NonStaffLanguagesKnownData != null)
                                                    {
                                                        _nonstafflanguages = NonStaffLanguagesKnownData.Where(o => o.NonStaffid == HeaderReviewData.NonStaffid).ToList();
                                                    }

                                                    <HCMIS.Pages.HR.Applicants.PartialPages.LanguageKnownPartialPage KnownLanguageData="@_nonstafflanguages.ToList()"
                                                                                                                     LanguageProlificData="@LanguageProlificData" LanguagesData="@LanguagesData" />

                                                </div>
                                            }
                                            <div style="margin:10px; width:100%;">
                                                @*<HCMIS.Pages.HR.Applicants.PartialPages.LanguageKnownPartialPage KnownLanguageData="@HeaderReviewData.NonStaff.NonStaffLanguagesKnown.ToList()"
                                        LanguageProlificData="@LanguageProlificData" LanguagesData="@LanguagesData" />
                                        *@
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>

                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Referees"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            @{
                                                List<ApplicationAppliedForJobReferees> _nonstaffdata = new List<ApplicationAppliedForJobReferees>();
                                                // List<ApplicationNonStaffWorkExperience> _employeequalification = new List<ApplicationNonStaffWorkExperience>();

                                                <div style="margin:10px; width:100%;">
                                                    @*Employee*@
                                                    @if (HeaderReviewData != null && HeaderReviewData.Employeeid != null && HeaderReviewData.NonStaffid == null && NonStaffSkillsData != null)
                                                    {
                                                        // _nonstaffskills = NonStaffSkillsData.Where(o => o.NonStaffid == HeaderReviewData.Employeeid).ToList();
                                                    }
                                                    @*NonStaff*@
                                                    else if (HeaderReviewData != null && HeaderReviewData.NonStaffid != null && HeaderReviewData.Employeeid == null && JobRefereesData != null)
                                                    {
                                                        _nonstaffdata = JobRefereesData.Where(o => o.NonStaffid == HeaderReviewData.NonStaffid).ToList();
                                                    }

                                                    <HCMIS.Pages.HR.Applicants.PartialPages.RefereesPartialPage CountryData="@CountryData" JobRefereesData="@_nonstaffdata.ToList()" />

                                                </div>
                                            }
                                        </ContentTemplate>
                                    </TabItem>

                                </TabItems>
                            </SfTab>
                        </div>
                        <div class="col-md-12">
                            <SfDialog @ref=@ConfirmationDialog Visible=false Width="50%" EnableResize=true AllowDragging=true
                              CloseOnEscape=false ShowCloseIcon=false IsModal=true Target=".page">
                                <DialogTemplates>
                                    <Header>
                                        <h1>Confirmation</h1>
                                    </Header>
                                    <Content>
                                        <div class="row">
                                            <div class="col-md-12">
                                                @*<p>Are you sure you would like to approve @HeaderReviewData.FullName</p>*@
                                                <p>Are you sure you would like to approve @HeaderReviewData.Employee</p>
                                            </div>
                                        </div>
                                    </Content>
                                    <FooterTemplate>
                                        <button class="btn btn-primary" @onclick=@ConfirmationYes>Yes Continue</button>
                                        <button class="btn btn-danger" @onclick=@ConfirmationNo>Cancel</button>
                                    </FooterTemplate>
                                </DialogTemplates>
                            </SfDialog>
                        </div>
                        <div class="col-md-12">
                            <SfDialog @ref=@CommentDialog Visible=false Width="50%" EnableResize=true AllowDragging=true
                              CloseOnEscape=false ShowCloseIcon=false IsModal=true Target=".page">
                                <DialogTemplates>
                                    <Header>
                                        <h1>Decission Comment</h1>
                                    </Header>
                                    <Content>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <p>Please Enter a comment</p>
                                            </div>
                                            <div class="col-md-12">
                                                @if (CommentModel != null)
                                                {
                                                    <SfTextBox Multiline=true @bind-Value=@(CommentModel.CommentDesc) Placeholder="Comment" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                }
                                            </div>
                                        </div>
                                    </Content>
                                    <FooterTemplate>
                                        <button class="btn btn-primary" @onclick=@SaveComment>Save Record</button>
                                        <button class="btn btn-danger" @onclick=@CancelComment>Cancel</button>
                                    </FooterTemplate>
                                </DialogTemplates>
                            </SfDialog>
                        </div>
                    </div>
                }
            }
        </Template>
        <FooterTemplate>
            <button class="btn btn-primary" @onclick=@ApproveApplicant>Award Contract</button>
            <button class="btn btn-dark" @onclick=@RejectApplicant>Do Not Award Contract</button>
            <button class="btn btn-danger" @onclick=@SaveApplicant>Save Application</button>
        </FooterTemplate>
    </GridEditSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
        @* <GridColumn Field="@(nameof(AppliedForJobs.AppliedForJobsId))" Visible=false IsPrimaryKey=true IsIdentity=true HeaderText="Ref Id" Width="120" AllowFiltering="true"></GridColumn>
        <GridColumn Field="@(nameof(AppliedForJobs.JobReferenceNo))" HeaderText="Ref No" Width="120" AllowFiltering="true"></GridColumn>
         *@
        <GridForeignColumn Field=@nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId)
                           HeaderText="Department"
                           Width="60"
                           AllowEditing="true"
                           ForeignKeyField="@(nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId))"
                           ForeignKeyValue="@(nameof(ViewAppliedForJobsDetails2024.DepartmentDescription))"
                           ForeignDataSource="@AppliedforJobsDetailData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

        <GridForeignColumn Field=@nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId)
                           HeaderText="Job Title"
                           Width="50"
                           AllowEditing="false"
                           ForeignKeyField="@(nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId))"
                           ForeignKeyValue="@(nameof(ViewAppliedForJobsDetails2024.JobTitleDescription))"
                           ForeignDataSource="@JobTitleData"
                           AllowFiltering="false">
        </GridForeignColumn>

        <GridForeignColumn Field=@nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId)
                           HeaderText="Applicant"
                           Width="50"
                           AllowEditing="false"
                           ForeignKeyField="@(nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId))"
                           ForeignKeyValue="@(nameof(ViewAppliedForJobsDetails2024.FullName))"
                           ForeignDataSource="@AppliedforJobsDetailData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

        <GridForeignColumn Field=@nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId)
                           HeaderText="Applicant"
                           Width="50"
                           AllowEditing="false"
                           ForeignKeyField="@(nameof(ViewAppliedForJobsDetails2024.AppliedForJobsId))"
                           ForeignKeyValue="@(nameof(ViewAppliedForJobsDetails2024.EmailAddress))"
                           ForeignDataSource="@AppliedforJobsDetailData" AllowFiltering="false"
                           CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
        </GridForeignColumn>

        @*

        <GridColumn Field="@(nameof(AppliedForJobs.JobTitleDescription))" HeaderText="Job Title" Width="120" AllowFiltering="true"></GridColumn>
        <GridColumn Field="@(nameof(AppliedForJobs.FullName))" HeaderText="Name" Width="120" AllowFiltering="true"></GridColumn>
        <GridColumn Field="@(nameof(AppliedForJobs.GenderDesc))" HeaderText="Gender" Width="120" AllowFiltering="true"></GridColumn>
        <GridColumn Field="@(nameof(AppliedForJobs.DoB))" HeaderText="Date of Birth" Width="120" AllowFiltering="true"></GridColumn>
        <GridColumn Field="@(nameof(AppliedForJobs.EmailAddress))" HeaderText="Email" Width="120" AllowFiltering="true"></GridColumn> 
        
        *@

        <GridColumn HeaderText="Aptitudde Test">
            <GridColumns>
                <GridColumn Field="@(nameof(AppliedForJobs.AptituddeTestPassMark))" HeaderText="Pass mark" Width="120" AllowFiltering="true"></GridColumn>
                <GridColumn Field="@(nameof(AppliedForJobs.AptituddeTestApplicantScore))" HeaderText="Test Score" Format="N1" Width="120" AllowFiltering="true"></GridColumn>
            </GridColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    SfDialog? ConfirmationDialog;
    SfDialog? CommentDialog;
    SfGrid<AppliedForJobs>? AppliedForJobGrid { get; set; }
    AppliedForJobs? HeaderReviewData { get; set; }
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "80vh", Width = "96%" };
    List<ACountry>? CountryData { get; set; }
    List<ALevelofEducation>? LevelofEducationData { get; set; }
    List<AFieldOfStudy>? FieldOfStudyData { get; set; }
    List<ALanguages>? LanguagesData { get; set; }
    List<ALanguageProlific>? LanguageProlificData { get; set; }
    List<ASkillLevel>? SkillLevelData { get; set; }
    List<ADepartment>? DepartmentData { get; set; }
    List<AJobTitle>? JobTitleData { get; set; }
    List<ViewAppliedForJobsDetails2024>? AppliedforJobsDetailData { get; set; }
    List<ApplicationNonStaffQualification>? QualificationData { get; set; }
    List<ApplicationAppliedForJobReferees>? JobRefereesData { get; set; }
    List<ApplicationNonStaffQualificationAttachment>? QualificationAttachmentData { get; set; }
    List<ApplicationNonStaffWorkExperience>? WorkExperienceData { get; set; }
    List<NonStaffSkills>? NonStaffSkillsData { get; set; }
    List<NonStaffLanguagesKnown>? NonStaffLanguagesKnownData { get; set; }
    List<AContractLengthType>? ContractLengthTypeData { get; set; }
    List<JobDescription>? JobDescriptionData { get; set; }
    List<AJobType>? JobTypeData { get; set; }
    List<ViewJobDescOpening2024>? JobOpeningData { get; set; }
    List<ASalaryScale>? SalaryScaleData { get; set; }
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<ViewNonStaffDropDown>? NonStaffData { get; set; }
    List<ADistrict>? DistrictData { get; set; }
    List<ViewAparish>? ParishData { get; set; }
    List<ASubCounty>? SubCountyData { get; set; }
    List<ViewAvillage>? VillageData { get; set; }

    string? AccessToken { get; set; }
    AppliedForJobsComment? CommentModel { get; set; }
    int? previousStatusId { get; set; }
    LoginResultModel? Credentials { get; set; }
    public bool loadingspinner { get; set; } = false;

    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loadingspinner = true;
            await base.OnInitializedAsync();

            var isAuthenticated = await AuthService.CheckAuthenticationStatus();
            if (isAuthenticated == false)
            {
                navManager.NavigateTo("/LoginPage", true);
            }
            else
            {
                Credentials = await AuthService.GetUserCredentials();
                var tasks = new List<Task>();

                //Get Administrative Units Primary Data at once Because its too big
                var response = await Http.GetAsync($"Employeez/GetEmployeePrimaryDataList");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    var _EmployeeRegistrationModel = JsonSerializer.Deserialize<EmployeeRegistrationModel>(content, _options);

                    if (_EmployeeRegistrationModel != null)
                    {
                        DistrictData = _EmployeeRegistrationModel.District;
                        SubCountyData = _EmployeeRegistrationModel.SubCounty;
                        VillageData = _EmployeeRegistrationModel.Village;
                        ParishData = _EmployeeRegistrationModel.Parish;
                    }
                }

                tasks.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"NonStaff/GetRegistrationPrimartData");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        var _ExternalRegistrationModel = JsonSerializer.Deserialize<ExternalRegistrationModel>(content, _options);

                        if (_ExternalRegistrationModel != null)
                        {
                            if (_ExternalRegistrationModel.Coutry != null)
                            {
                                CountryData = _ExternalRegistrationModel.Coutry.OrderBy(o => o.CountryDesc).ToList();
                            }
                            FieldOfStudyData = _ExternalRegistrationModel.FieldOfStudy;
                            LevelofEducationData = _ExternalRegistrationModel.LevelofEducation;
                            SkillLevelData = _ExternalRegistrationModel.SkillLevel;
                            LanguageProlificData = _ExternalRegistrationModel.LanguageProlific;
                            LanguagesData = _ExternalRegistrationModel.Languages;
                        }
                    }
                }));

                tasks.Add(Task.Run(async () =>
                    {

                        var response = await Http.GetAsync($"Utilities/GetDepartment");
                        var content = await response.Content.ReadAsStringAsync();
                        if (response.IsSuccessStatusCode)
                        {
                            DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(content, _options);
                        }
                    }));

                tasks.Add(Task.Run(async () =>
                  {

                      var response = await Http.GetAsync($"HumanResource/GetJobTitle");
                      var content = await response.Content.ReadAsStringAsync();
                      if (response.IsSuccessStatusCode)
                      {
                          JobTitleData = JsonSerializer.Deserialize<List<AJobTitle>>(content, _options);
                      }
                  }));

                tasks.Add(Task.Run(async () =>
                    {

                        var response = await Http.GetAsync($"HumanResource/GetAppliedForJobsDetail");
                        var content = await response.Content.ReadAsStringAsync();
                        if (response.IsSuccessStatusCode)
                        {
                            AppliedforJobsDetailData = JsonSerializer.Deserialize<List<ViewAppliedForJobsDetails2024>>(content, _options);
                        }
                    }));

                tasks.Add(Task.Run(async () =>
                    {
                        var response = await Http.GetAsync($"HumanResource/GetApplicationQualification");
                        var content = await response.Content.ReadAsStringAsync();
                        if (response.IsSuccessStatusCode)
                        {
                            QualificationData = JsonSerializer.Deserialize<List<ApplicationNonStaffQualification>>(content, _options);
                        }
                    }));

                tasks.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"HumanResource/GetApplicationJobReferees");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        JobRefereesData = JsonSerializer.Deserialize<List<ApplicationAppliedForJobReferees>>(content, _options);
                    }
                }));

                tasks.Add(Task.Run(async () =>
                    {
                        var response = await Http.GetAsync($"HumanResource/GetApplicationQualificationAttachment");
                        var content = await response.Content.ReadAsStringAsync();
                        if (response.IsSuccessStatusCode)
                        {
                            QualificationAttachmentData = JsonSerializer.Deserialize<List<ApplicationNonStaffQualificationAttachment>>(content, _options);
                        }
                    }));

                tasks.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"HumanResource/GetApplicationWorkExperience");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        WorkExperienceData = JsonSerializer.Deserialize<List<ApplicationNonStaffWorkExperience>>(content, _options);
                    }
                }));

                tasks.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"HumanResource/GetNonStaffSkills");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        NonStaffSkillsData = JsonSerializer.Deserialize<List<NonStaffSkills>>(content, _options);
                    }
                }));

                tasks.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"HumanResource/GetNonStaffLanguagesKnown");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        NonStaffLanguagesKnownData = JsonSerializer.Deserialize<List<NonStaffLanguagesKnown>>(content, _options);
                    }
                }));

                tasks.Add(Task.Run(async () =>
                  {

                      var response = await Http.GetAsync($"Utilities/GetContractLengthType");
                      var content = await response.Content.ReadAsStringAsync();
                      if (response.IsSuccessStatusCode)
                      {
                          ContractLengthTypeData = JsonSerializer.Deserialize<List<AContractLengthType>>(content, _options);
                      }
                  }));

                tasks.Add(Task.Run(async () =>
                {

                    var response = await Http.GetAsync($"HumanResource/GetJobDescription");
                    var content = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        JobDescriptionData = JsonSerializer.Deserialize<List<JobDescription>>(content, _options);
                    }
                }));

                tasks.Add(Task.Run(async () =>
              {

                  var response = await Http.GetAsync($"HumanResource/GetJobOpening");
                  var content = await response.Content.ReadAsStringAsync();
                  if (response.IsSuccessStatusCode)
                  {
                      JobOpeningData = JsonSerializer.Deserialize<List<ViewJobDescOpening2024>>(content, _options);
                  }
              }));

                tasks.Add(Task.Run(async () =>
                   {

                       var response = await Http.GetAsync($"Utilities/GetJobType");
                       var content = await response.Content.ReadAsStringAsync();
                       if (response.IsSuccessStatusCode)
                       {
                           JobTypeData = JsonSerializer.Deserialize<List<AJobType>>(content, _options);
                       }
                   }));

                tasks.Add(Task.Run(async () =>
            {

                var response = await Http.GetAsync($"Utilities/GetSalaryScale");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    SalaryScaleData = JsonSerializer.Deserialize<List<ASalaryScale>>(content, _options);
                }
            }));

                tasks.Add(Task.Run(async () =>
                  {

                      var response = await Http.GetAsync($"Utilities/GetContractLengthType");
                      var content = await response.Content.ReadAsStringAsync();
                      if (response.IsSuccessStatusCode)
                      {
                          ContractLengthTypeData = JsonSerializer.Deserialize<List<AContractLengthType>>(content, _options);
                      }
                  }));

                tasks.Add(Task.Run(async () =>
                  {
                      var response = await Http.GetAsync($"Utilities/GetEmployeeDD");
                      if (response.IsSuccessStatusCode)
                      {
                          var content = await response.Content.ReadAsStringAsync();
                          EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(content, _options);
                      }
                  }));

                tasks.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetNonStaffDD");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        NonStaffData = JsonSerializer.Deserialize<List<ViewNonStaffDropDown>>(content, _options);
                    }
                }));

            }
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {
            loadingspinner = false;
        }
        
    }

    private void ApproveApplicant()
    {
        previousStatusId = HeaderReviewData.ApplicationStatusId;
        HeaderReviewData.ApplicationStatusId = 10;
        ConfirmationDialog.ShowAsync();
    }
    private void RejectApplicant()
    {
        previousStatusId = HeaderReviewData.ApplicationStatusId;
        HeaderReviewData.ApplicationStatusId = 11;
        ConfirmationDialog.ShowAsync();
    }
    private void SaveApplicant()
    {
        //HeaderReviewData.ApplicationStatusId = 3;
        AppliedForJobGrid.EndEditAsync();
    }
    private void ConfirmationYes()
    {
        //AppliedForJobGrid.EndEditAsync();
        CommentModel = new AppliedForJobsComment();
        CommentModel.CommentDate = DateTime.Now;
        CommentModel.CommentedBy = _SystemSettings.AccountHolderName;
        ConfirmationDialog.HideAsync();
        CommentDialog.ShowAsync();

    }
    private void ConfirmationNo()
    {
        HeaderReviewData.ApplicationStatusId = previousStatusId;
        ConfirmationDialog.HideAsync();
    }

    private void SaveComment()
    {
        if (string.IsNullOrEmpty(CommentModel.CommentDesc))
        {
            toastService.ShowWarning("Please enter your comment before saving this record.");
        }
        else
        {
            CommentModel.AppliedForJobsId = HeaderReviewData.AppliedForJobsId;
            if (HeaderReviewData.AppliedForJobsComment == null)
            {
                HeaderReviewData.AppliedForJobsComment = new List<AppliedForJobsComment>();
            }
            HeaderReviewData.AppliedForJobsComment.Add(CommentModel);
            CommentDialog.HideAsync();
            AppliedForJobGrid.EndEditAsync();
        }
    }
    private void CancelComment()
    {
        HeaderReviewData.ApplicationStatusId = previousStatusId;
        CommentDialog.HideAsync();
    }

    public class FinalStageApplicationAdapter : DataAdaptor
    {
        private IJobApplications reopsitory;
        public IToastService toastService;
        public FinalStageApplicationAdapter(IJobApplications _reopsitory, IToastService ts)
        {
            reopsitory = _reopsitory;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = await reopsitory.GetApplicationsAsync("6,8",null,null,null);

            IEnumerable GridData = data;
            int _count = data.Count;
            //toastService.ShowWarning("Count is" + _count.ToString());
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<AppliedForJobs>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            var val = (value as AppliedForJobs);
            await reopsitory.SaveUpdateApplicationAsync(val);
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            var val = (value as AppliedForJobs);
            await reopsitory.SaveUpdateApplicationAsync(val);

            return value;
        }
    }
}

