@* <h3>SubmittedApplicationsSearchPage</h3> *@

@using HCMIS.Data;
@using HCMIS.SHARED.Models;

@inject IToastService toastService;

<style>

    .head, .item {
        display: table;
        width: 80%;
        margin-left: 10px;
    }

    .head {
        height: 40px;
        font-size: 15px;
        font-weight: 600;
    }

    .name, .city {
        display: table-cell;
        vertical-align: middle;
        width: 50%;
    }

    .head .name {
        text-indent: 16px;
    }

    .head .city {
        text-indent: 10px;
    }

</style>


<div class="form-row">
    <div class="form-group col-md-12">
        <div class="form-group col-md-12">
            <EditForm Model="@searchpanel" OnValidSubmit="@OnLoadRecords">
                <DataAnnotationsValidator />
                <div class="row" style="margin-bottom:10px;">

                    @if (ApplicationStageId == 1)
                    {
                        <div class="col-md-4">
                            <p>Shortlisted/Not-Shortlisted Status</p>
                            <SfMultiSelect @bind-Value="@searchpanel.ShortlistId"
                                           TValue="int?[]" TItem="AShortlist"
                                           AllowFiltering="true"
                                           FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                           Mode="@VisualMode.CheckBox"
                                           DataSource="@ShortlistDetailData"
                                           ShowSelectAll="true"
                                           EnableSelectionOrder="true"
                                           ShowDropDownIcon="true"
                                           FilterBarPlaceholder="Year"
                                           FloatLabelType="FloatLabelType.Never" PopupHeight="350px"
                                           Query="@LocalDataQuery"
                                           EnableVirtualization="true">
                                <MultiSelectFieldSettings Value="@nameof(AShortlist.ShortlistId)"
                                                          Text="@nameof(AShortlist.ShortlistDescription)">
                                </MultiSelectFieldSettings>
                            </SfMultiSelect>
                        </div>
                    }
                    
                    <div class="col-md-4">
                        <p>Department</p>
                        <SfMultiSelect @bind-Value="@searchpanel.DepartmentId"
                                       TValue="int?[]" TItem="ADepartment"
                                       AllowFiltering="true"
                                       FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                       Mode="@VisualMode.CheckBox"
                                       DataSource="@DepartmentData"
                                       ShowSelectAll="true"
                                       EnableSelectionOrder="true"
                                       ShowDropDownIcon="true"
                                       FilterBarPlaceholder="Year"
                                       FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                            <MultiSelectFieldSettings Value="@nameof(ADepartment.DepartmentId)"
                                                      Text="@nameof(ADepartment.DepartmentDescription)">
                            </MultiSelectFieldSettings>
                            <MultiSelectEvents TValue="int?[]" TItem="ADepartment" ValueChange="OnDepartmentChange"></MultiSelectEvents>
                        </SfMultiSelect>
                    </div>

                    <div class="col-md-4">
                        <p>Job Title</p>
                         <SfMultiSelect TValue="int?[]" TItem="ViewJobDescOpening2024" AllowFiltering="true" Mode="@VisualMode.CheckBox"  Enabled="JobTitleDD"
                                       DataSource="@JobOpeningData" ShowSelectAll="true" SelectAllText="Select All"
                                        UnSelectAllText="Unselect All" EnableSelectionOrder="true" ShowDropDownIcon="true"
                                        FilterBarPlaceholder="--Select Job---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px"
                                       PopupWidth="500px" EnableVirtualization="true" Query="@IndicatorQuery" @bind-Value="@(@searchpanel.JobTitleId)">
                             <MultiSelectTemplates TItem="ViewJobDescOpening2024">
                                 <ItemTemplate Context="ItemTemplateContext">
                                    @((ItemTemplateContext as ViewJobDescOpening2024).ReferenceNumber) @((ItemTemplateContext as ViewJobDescOpening2024).JobTitleDescription)                                    
                                 </ItemTemplate>
                                 <HeaderTemplate>
                                    <span class='head'><span class='city'>Reference No.</span><span class='name'>Job Title</span></span>
                                 </HeaderTemplate>
                             </MultiSelectTemplates>
                            <MultiSelectFieldSettings Value="@nameof(ViewJobDescOpening2024.JibTitleId)" Text="@nameof(ViewJobDescOpening2024.JobTitleDescription)"></MultiSelectFieldSettings>
                            @*<MultiSelectEvents TValue="int[]" TItem="ViewJobDescOpening2024" ValueChange="OnBatchSelectionChanged"
                                                DataBound="OnBatchSelectionBound"></MultiSelectEvents> *@
                         </SfMultiSelect>
                    </div>

                    <div class="col-md-4">
                        <p>Reference No.</p>
                        <SfTextBox 
                            Multiline="false" 
                            @bind-Value="@(searchpanel.ReferenceNumber)"
                            Enabled="true" 
                            FloatLabelType="FloatLabelType.Never">
                        </SfTextBox>
                        
                    </div>

                    <div class="col-md-4">
                        <p>Application Date</p>
                        <div class="row">
                            <div class="col-md-6" style="margin-left: -25px;">
                                <SfDatePicker @bind-Value="@(searchpanel.StartDate)" Enabled="true" Placeholder="Start Date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                            </div>
                            <div class="col-md-6">
                                <SfDatePicker @bind-Value="@(searchpanel.EndDate)" Enabled="true" Placeholder="End Date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                            </div>
                        </div>
                    </div>

                    <div class="col col-md-12" style="margin-top:20px">
                        <button class="btn btn-success" data-ripple="true" style="margin-right:10px;">Load Records</button>
                        <button @onclick="@ClearSearchBtnClick" class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Clear Search</button>
                    </div>
                </div>
                <ValidationSummary />
            </EditForm>
        </div>
    </div>
</div>

@code {

    public AppraisalSearch searchpanel { get; set; } = new AppraisalSearch();
    [Parameter]
    public List<AShortlist>? ShortlistDetailData { get; set; }

    [Parameter]
    public List<ADepartment>? DepartmentData { get; set; }

    [Parameter]
    public List<ViewJobDescOpening2024>? JobOpeningData { get; set; }

    public Query MainQuery = new Query();
    [Parameter]
    public EventCallback<Query?> onsearchtoggle { get; set; }
    [Parameter]
    public int? listid { get; set; }
    public Query LocalDataQuery  = new Query().Take(15);
    public bool JobTitleDD = false;
    Query? IndicatorQuery { get; set; }  = new Query().Take(15);
    [Parameter]
    public int ApplicationStageId { get; set; }
    // Define an event to pass the value to the parent component
    [Parameter]
    public EventCallback<string?> JobTitleValues { get; set; }
    [Parameter]
    public EventCallback<string?> DepartmentValues { get; set; }
    string JobTitleIdParam = string.Empty;
    string DeptIdParam = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            List<int?> _listid = new List<int?>();
            _listid.Add(listid);
            searchpanel.ShortlistId = _listid.ToArray();

            JobTitleIdParam = null;
            DeptIdParam = null;
        }
        catch (Exception ex)
        {

        }
    }

    private async void OnLoadRecords()
    {
        try
        {
            if (searchpanel.DepartmentId != null && searchpanel.JobTitleId != null)
            {
                string _listId = null;
                if (searchpanel.ShortlistId != null)
                {
                    _listId = string.Join(",", searchpanel.ShortlistId);
                }

                string _DepartmentId = null;
                if (searchpanel.DepartmentId != null)
                {
                    _DepartmentId = string.Join(",", searchpanel.DepartmentId);
                    DeptIdParam = _DepartmentId;
                }

                string _ReferenceNumber = null;
                if (searchpanel.ReferenceNumber != null)
                {
                    _ReferenceNumber = searchpanel.ReferenceNumber;
                }

                string _JobTitleId = null;
                if (searchpanel.JobTitleId != null)
                {
                    _JobTitleId = string.Join(",", searchpanel.JobTitleId);
                    JobTitleIdParam = _JobTitleId;
                }


                string sdate = null;
                if (searchpanel.StartDate != null)
                {
                    sdate = searchpanel.StartDate.Value.ToString("dd/MM/yyyy");
                }

                string edate = null;
                if (searchpanel.EndDate != null)
                {
                    edate = searchpanel.EndDate.Value.ToString("dd/MM/yyyy");
                }

                MainQuery = new Query()
                .AddParams("MeetsRequirements", _listId)
                .AddParams("DepartmentId", _DepartmentId)
                .AddParams("ReferenceNumber", _ReferenceNumber)
                .AddParams("JobTitleId", _JobTitleId)
                .AddParams("ReferenceNumber", _ReferenceNumber)
                .AddParams("StartDate", sdate)
                .AddParams("EndDate", edate);
                await onsearchtoggle.InvokeAsync(MainQuery);
                await JobTitleValues.InvokeAsync(JobTitleIdParam);
                await DepartmentValues.InvokeAsync(DeptIdParam);
            }

        }
        catch (Exception ex)
        {
            toastService.ShowWarning(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void ClearSearchBtnClick()
    {
        try
        {
            searchpanel = new AppraisalSearch();
            MainQuery = new Query();
            await onsearchtoggle.InvokeAsync(MainQuery);

            JobTitleIdParam = string.Empty;
            DeptIdParam = string.Empty; 
            await JobTitleValues.InvokeAsync(JobTitleIdParam);
            await DepartmentValues.InvokeAsync(DeptIdParam);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnDepartmentChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            JobTitleDD = true;
            IndicatorQuery = new Query();
            List<WhereFilter> filterList = new List<WhereFilter>();
            foreach (var item in args.Value)
            {
                filterList.Add(new WhereFilter() { Field = "DepartmentId", Operator = "equal", value = item, IgnoreCase = true });
            }

            var orWhere = WhereFilter.Or(filterList);
            IndicatorQuery = new Query().Where(orWhere);
        }
        else
        {
            IndicatorQuery = new Query();
        }
    }
}


