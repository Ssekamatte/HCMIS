@page "/EmployeeLeaveApplicationPage"
@using HCMIS.Data;
@using HCMIS.Model
@using HCMIS.SHARED;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Text.RegularExpressions
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager navManager;
@using System.Collections;
@inject IToastService toastService;
@using System.Globalization;
@using HCMIS.SHARED.Data;
@inject IJSRuntime JsRuntime;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;

<style>
    /*Customize Scroll Bars*/
    ::-webkit-scrollbar-thumb {
        background-color: #888;
        border-radius: 10px
    }

    ::-webkit-scrollbar {
        background-color: white;
    }

    ::-webkit-scrollbar-button {
        background-color: #bbbbbb;
    }
    /*Customize Scroll Bars*/

    /*stick grid headers*/
    .e-gridheader {
        position: -webkit-sticky;
        position: sticky;
        top: 56px;
        z-index: 1;
    }
    /*stick grid headers*/
    
    .e-edit-dialog {
        max-height: 95%;
        max-width: 100%;
        min-width: 100%;
        min-height: 95%;
    }

    h6 {
        color: ghostwhite;
        background-color: red;
        padding: 10px;
        width: 100%;
        font-size: 18px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        background-color: #bdc3c7;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #ff4d00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    /**/
    #container {
        position: relative;
        height: 550px;
    }

    .e-spinner-pane.e-spin-overlay {
        background-color: rgb(192,192,192);
    }

    /*Accordion Colors*/
    .e-accordion {
        border-radius: 6px 6px 6px 6px;
        border: none !important;
    }

        /* header custom css*/
        .e-accordion .e-acrdn-item .e-acrdn-header {
            background-color: rgb(0, 204, 0);
            border-radius: 6px 6px 6px 6px;
        }

            /*header on hover custom css*/
            .e-accordion .e-acrdn-item .e-acrdn-header:hover {
                background-color: rgb(0, 204, 0);
            }

        /*header on selected and expanded custom css*/
        .e-accordion .e-acrdn-item.e-select.e-expand-state > .e-acrdn-header {
            background: rgb(0, 204, 0);
        }

        .e-accordion .e-acrdn-item.e-select.e-selected.e-expand-state > .e-acrdn-header {
            background: rgb(0, 204, 0);
        }

        .e-accordion .e-acrdn-item.e-expand-state.e-select:not(.e-selected) > .e-acrdn-header:focus {
            background: rgb(0, 204, 0);
        }

        /*content custom css*/
        .e-accordion .e-acrdn-item .e-acrdn-panel .e-acrdn-content {
            background-color: whitesmoke;
            border-radius: 6px 6px 6px 6px;
        }

        /*to remove the white line*/
        .e-accordion .e-acrdn-item.e-select {
            border-bottom: 1px solid white !important;
            border-top: 1px solid white !important;
        }
        /*to change the accordion header color*/
        .e-accordion .e-acrdn-item .e-acrdn-header .e-acrdn-header-content {
            color: darkred;
        }


    .pp {
        color: ghostwhite;
        background-color: #00cc00;
        padding: 10px;
    }
    /*Hide Grid Pager Numbers*/
    .e-pager {
        display: none;
    }
</style>

<center>
    <h5>
        <strong>LEAVE APPLICATION FORM</strong>
    </h5>    
</center>

<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="@ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false" CssClass="const">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <SearchLeaveRequestPage 
                            YearData="@YearData" 
                            finyearid="@finyearid" 
                            onsearchtoggle="@ToggleSearchQuery">
                        </SearchLeaveRequestPage>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>
    </div>
</div>

<div class="form-group col-md-12">

    <SfGrid @ref="@DataGrid" 
        TValue="EmployeeLeaveHeader" 
        ID="Grid" 
        AllowPaging="true" 
        AllowFiltering="true" 
        AllowReordering="true" 
        AllowResizing="true" 
        AllowGrouping="true" 
        AllowExcelExport="true" 
        AllowPdfExport="true" 
        AllowSelection="true" 
        AllowSorting="true" 
        Query="@MainQuery"
            AllowTextWrap="true" Toolbar="@ToolbarMenu">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
            <HeaderTemplate>
                @{
                    var text = GetLeaveRequestHeader((context as EmployeeLeaveHeader));
                    <div class="headerbandimg">
                        <span>@text</span>
                    </div>
                }
            </HeaderTemplate>
            <Template>
                @{
                    <div class="row">
                        <div class="col-md-4">
                            <center>
                                <h5>
                                    <strong>LEAVE APPLICATION FORM</strong>
                                </h5>
                            </center>
                        </div>

                        @*@if (employeeleave != null)
                        {
                            <div class="col-md-4">
                                <h5 style="color:green;">
                                    <strong>Leave No: @employeeleave.EmployeeLeaveNo</strong>
                                </h5>
                            </div>
                            <div class="col-md-4">
                                <h5 style="color:green;">
                                    <strong>Application Status: @employeeleave.LeaveApprovalStatus</strong>
                                </h5>
                            </div>
                        }*@
                    </div>
                    LeaveData = (context as EmployeeLeaveHeader);

                    @if(LeaveData != null)
                    {
                        <SfAccordion ExpandMode="ExpandMode.Single">
                            <AccordionItems>
                                <AccordionItem Expanded="true">
                                    <HeaderTemplate><strong>PART I: EMPLOYEE PROFILE:  To be Completed and returned to the HR Department</strong></HeaderTemplate>
                                    <ContentTemplate>
                                        @* style="width:100%;font-size:20px; border-color:black; border-width:2px; border-style:solid; "*@
                                        <table class="table table-bordered">
                                            <tr>
                                                <td style="font-weight:bold">
                                                    No.
                                                </td>
                                                <td style="font-weight:bold">
                                                    Item/Narration
                                                </td>
                                                <td style="font-weight:bold">
                                                    Response
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    1.
                                                </td>
                                                <td>
                                                    Employee Name
                                                </td>
                                                <td>
                                                    <SfDropDownList @bind-Value="@(LeaveData.Employeeid)"
                                                                    Enabled="EmployeeDD"
                                                                    TItem="ViewEmployeeDropDown"
                                                                    TValue="int?"
                                                                    DataSource="@EmployeeData"
                                                                    Placeholder="Please select"
                                                                    FloatLabelType="FloatLabelType.Never"
                                                                    AllowFiltering="true"
                                                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)"
                                                                                   Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)">
                                                        </DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="int?"
                                                                            TItem="ViewEmployeeDropDown"
                                                                            ValueChange="OnEmployeeChange">
                                                        </DropDownListEvents>
                                                    </SfDropDownList>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    2.
                                                </td>
                                                <td>
                                                    Designation
                                                </td>
                                                <td>
                                                    @if (employeeno != null)
                                                    {
                                                        @employeeno.JobTitleDescription
                                                    }
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    3.
                                                </td>
                                                <td>
                                                    Department
                                                </td>
                                                <td>
                                                    @if (employeeno != null)
                                                    {
                                                        @employeeno.DepartmentDescription
                                                    }
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    4.
                                                </td>
                                                <td>
                                                    Date of Last Leave within the Present Year
                                                </td>
                                                <td>
                                                    @if (employeeno != null)
                                                    {

                                                    }
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    5.
                                                </td>
                                                <td>
                                                    Telephone contact during Leave
                                                </td>
                                                <td>
                                                    <SfTextBox Multiline="false"
                                                    @bind-Value="@(LeaveData.Telephone)"
                                                               Enabled="true"
                                                               FloatLabelType="FloatLabelType.Never">
                                                    </SfTextBox>
                                                </td>
                                            </tr>
                                        </table>

                                        <div class="row">
                                            <div class="col-md-12">
                                                <p><h3>Acting Officer During Period of Leave</h3></p>
                                            </div>
                                            <div class="col-md-6">
                                                <p>Name</p>
                                                <SfDropDownList @bind-Value="@(LeaveData.ActingOfficerId)" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" Enabled="ActingOfficerDD" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                    <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnActingOfficerChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>

                                            <div class="col-md-6">
                                                <p>Title</p>

                                                @if (employeeactingofficer != null)
                                                {
                                                    @employeeactingofficer.JobTitleDescription
                                                }
                                            </div>
                                        </div>
                                        @*<div class="row">
                                            <div class="col-md-12">
                                                <p><h3>Acting Officer During Period of Leave</h3></p>
                                                <LeaveDetailsPage 
                                                    ActingOfficerDD="@ActingOfficerDD"
                                                    ondetailstoggle="@ToggleLeaveDetailsData"
                                                    EmployeeData="@EmployeeData"
                                                    EmployeeLeaveId="@LeaveData.EmployeeLeaveId"
                                                    detailsdata="@LeaveData.EmployeeLeaveDetails.ToList()">
                                                </LeaveDetailsPage>
                                            </div>
                                        </div>*@

                                        <div class="row">
                                            <div class="col-md-12">
                                                <p><h3>Leave Information</h3></p>
                                            </div>
                                            <div class="col-md-4">
                                                <p>Leave Type:<span style="color:red;">*</span></p>
                                                <SfDropDownList @bind-Value="@(LeaveData.LeaveTypeId)" Enabled="LeaveTypeIdDD" TItem="ALeaveType" TValue="int?" DataSource="@LeaveTypeData" Placeholder="Choose Leave Type" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                    <DropDownListFieldSettings Value="@nameof(ALeaveType.LeaveTypeId)" Text="@nameof(ALeaveType.LeaveTypeDescription)"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="int?" TItem="ALeaveType" ValueChange="OnLeaveTypeChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>

                                            @if (employeeno != null && employeeno.GenderId == 2 && LeaveData != null
                                            && LeaveData.LeaveTypeId == 4)
                                            {
                                                <h6 style="background-color:red; color:ghostwhite;margin-top: 10px;">Females donot qualify for paternal leave</h6>
                                            }
                                            else if (employeeno != null && employeeno.GenderId == 1 && LeaveData != null
                                            && LeaveData.LeaveTypeId == 2)
                                            {
                                                <h6 style="background-color:red; color:ghostwhite;margin-top: 10px;">Males do not qualify for maternal leave</h6>
                                            }

                                            else
                                            {
                                                <div class="col-md-4">
                                                    <p>Commencement Date:<span style="color:red;">*</span></p>
                                                    <SfDatePicker @bind-Value="@(LeaveData.CommencementDate)" Enabled="StartDateEnabler" ID="ScheduledStartDate" Format="dd-MM-yyyy" FloatLabelType="FloatLabelType.Never" Min="MinDate">
                                                        @if (LeaveData != null && (LeaveData.LeaveTypeId == 2 || LeaveData.LeaveTypeId == 4 || LeaveData.LeaveTypeId == 5))
                                                        {
                                                            EndDateEnabler = false;
                                                            <DatePickerEvents TValue="DateTime?" ValueChange="OnMaternityDateChange"></DatePickerEvents>
                                                        }
                                                        else
                                                        {
                                                            EndDateEnabler = true;
                                                        }

                                                    </SfDatePicker>
                                                </div>

                                                <div class="col-md-4">
                                                    <p>End Date:<span style="color:red;">*</span></p>
                                                    <SfDatePicker @bind-Value="@(LeaveData.EndDate)" Enabled="EndDateEnabler" ID="ScheduledEndDate" Format="dd-MM-yyyy" FloatLabelType="FloatLabelType.Never" Min="MinDate" Max='@MaxDate'>
                                                        <DatePickerEvents TValue="DateTime?" ValueChange="OnEndDateChange"></DatePickerEvents>
                                                    </SfDatePicker>
                                                </div>

                                                <div class="col-md-4">
                                                    <p style="margin-top:10px;">Days Entitled:</p>
                                                    @if (leavetypedays != null)
                                                    {
                                                        @leavetypedays.LeaveDaysPerYear
                                                    }
                                                </div>

                                                <div class="col-md-4">
                                                    <p style="margin-top:10px;">Days Selected:</p>
                                                    <SfNumericTextBox @bind-Value="@(LeaveData.TotalDays)" Enabled="false" Format="N0" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                </div>

                                                <div class="col-md-4">
                                                    <p style="margin-top:10px;">Days Arleady Utilized:</p>
                                                    @if (LeaveData.LeaveTypeId != 2 && LeaveData.LeaveTypeId != 4)
                                                    {
                                                            @TotalDaysTakenPrior
                                                    }
                                                    else
                                                    {
                                                            <p style:"color:red;">N/A</p>
                                                    }
                                                </div>
                                            }
                                            
                                        </div>
                                    </ContentTemplate>
                                </AccordionItem>

                                <AccordionItem Expanded="true">
                                    <HeaderTemplate><strong>PART II: LEAVE COMPUTATION: Completed by the Head-HR & Administration</strong></HeaderTemplate>
                                    <ContentTemplate>
                                        
                                    </ContentTemplate>
                                </AccordionItem>

                                <AccordionItem Expanded="true">
                                    <HeaderTemplate><strong>PART III: RECOMMENDATION</strong></HeaderTemplate>
                                    <ContentTemplate>
                                        <table class="table table-bordered">
                                            <tr>
                                                <td style="font-weight:bold">
                                                    Recommended By
                                                </td>
                                                <td style="font-weight:bold">
                                                    Name
                                                </td>
                                            </tr>

                                            <tr>
                                                <td>
                                                    Immediate Supervisor <span style="color:red;">*</span>
                                                </td>

                                                <td>
                                                    <SfDropDownList @bind-Value="@(LeaveData.ImmediateSupervisor)" TItem="ViewEmployeeDropDown" Enabled="ImmediateSupervisorDD" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnEmployeeSupervisorChange"></DropDownListEvents>
                                                    </SfDropDownList>
                                                </td>
                                            </tr>

                                            <tr>
                                                <td>
                                                    Head of Department <span style="color:red;">*</span>
                                                </td>

                                                <td>
                                                    <SfDropDownList @bind-Value="@(LeaveData.Hod)" TItem="ViewEmployeeDropDown" Enabled="ImmediateSupervisorDD" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnEmployeeSupervisorChange"></DropDownListEvents>
                                                    </SfDropDownList>
                                                </td>
                                            </tr>
                                        </table>
                                    </ContentTemplate>
                                </AccordionItem>
                            </AccordionItems>
                        </SfAccordion>
                    }
                }
            </Template>
            <FooterTemplate>
                <button @onclick="@onSaveDraftForm" disabled=@IsDraftDisabled class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Save Draft</button>

                @if (_previous == Syncfusion.Blazor.Grids.Action.Add)
                {
                    <button @onclick="@onSubmitForm" disabled=@IsSubmitDisabled class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Submit Request</button>
                }
                else if (_previous == Syncfusion.Blazor.Grids.Action.BeginEdit)
                {
                    <button @onclick="@onApproveForm" disabled=@IsApproveDisabled class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Approval Request</button>
                    <button @onclick="@onRejectForm" disabled=@IsRejectDisabled class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Reject</button>
                }
            </FooterTemplate>
        </GridEditSettings>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
        <GridEvents 
                    OnActionComplete="ActionCompleteMain"
                    OnActionBegin="ActionBeginMain"
                    QueryCellInfo="QueryCellInfoHandler"
                    RowDataBound="RowBound"
                    TValue="EmployeeLeaveHeader">
        </GridEvents>
        <SfDataManager AdaptorInstance="@typeof(LeaveApplicationAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
        <GridColumns>
            <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
            <GridColumn Field=@nameof(ViewEmployeeLeave.EmployeeLeaveId) HeaderText="EmployeeLeaveId" AllowEditing="false" IsPrimaryKey="true" Width="80" Visible="false"></GridColumn>
            <GridForeignColumn Field=@nameof(ViewEmployeeLeave.EmployeeId)
                               HeaderText="Employee"
                               Width="100"
                               AllowEditing="true"
                               ForeignKeyField="@(nameof(ViewBscEmployee.Employeeid))"
                               ForeignKeyValue="@(nameof(ViewBscEmployee.EmployeeDetails))"
                               ForeignDataSource="@EmployeeData" AllowFiltering="false"
                               CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>
            <GridForeignColumn Field=@nameof(ViewEmployeeLeave.LeaveTypeId)
                               HeaderText="Leave Type"
                               Width="80"
                               AllowEditing="false"
                               ForeignKeyField="@(nameof(ALeaveType.LeaveTypeId))"
                               ForeignKeyValue="@(nameof(ALeaveType.LeaveTypeDescription))"
                               ForeignDataSource="@LeaveTypeData"
                               AllowFiltering="false"
                               IsFrozen="false"
                               CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>
            <GridColumn Field=@nameof(ViewEmployeeLeave.NoDaysAppliedFor)
                        HeaderText="Requested Days"
                        AllowEditing="false"
                        Width="80"
                        Visible="true"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            </GridColumn>
            <GridForeignColumn Field=@nameof(ViewEmployeeLeave.LeaveApprovalStatusId)
                               HeaderText="Approval Status"
                               Width="80"
                               AllowEditing="false"
                               ForeignKeyField="@(nameof(ALeaveApprovalStatus.LeaveApprovalStatusId))"
                               ForeignKeyValue="@(nameof(ALeaveApprovalStatus.LeaveApprovalStatus))"
                               ForeignDataSource="@ApprovalStatusData"
                               AllowFiltering="false"
                               IsFrozen="false"
                               CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>
            <GridColumn Field=@nameof(ViewEmployeeLeave.EmployeeLeaveNo)
                        HeaderText="Employee Leave No"
                        AllowEditing="false"
                        Width="80"
                        Visible="true"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            </GridColumn>
            <GridColumn Field=@nameof(ViewEmployeeLeave.ApplicationDate)
                        HeaderText="Application Date"
                        Format="dd/MMMM/yyyy hh:mm:ss"
                        TextAlign="TextAlign.Justify"
                        Width="80"
                        ClipMode="ClipMode.EllipsisWithTooltip"
                        Type="ColumnType.Date"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            </GridColumn>
            <GridColumn Field=@nameof(ViewEmployeeLeave.SubmittedToSupervisor)
                        HeaderText="Submitted To Supervisor"
                        AllowEditing="false"
                        Width="80"
                        Visible="false">
            </GridColumn>
            <GridColumn Field=@nameof(ViewEmployeeLeave.SubmittedToHod)
                        HeaderText="Submitted To HOD"
                        AllowEditing="false"
                        Width="80"
                        Visible="false">
            </GridColumn>
            <GridColumn Field=@nameof(ViewEmployeeLeave.SubmittedToChro)
                        HeaderText="Submitted To CHRO"
                        AllowEditing="false"
                        Width="80"
                        Visible="false">
            </GridColumn>
            <GridColumn Field=@nameof(ViewEmployeeLeave.ApprovedByChro)
                        HeaderText="Approved By CHRO"
                        AllowEditing="false"
                        Width="80"
                        Visible="false">
            </GridColumn>
        </GridColumns>
    </SfGrid>

</div>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="20%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        @*<div class="loader-Loading-text"></div>*@
                        <div class="loader-Saving-text"></div>
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>


@code {
    public int? finyearid { get; set; }    
    public Query MainQuery = new Query();
    LoginResultModel? Credentials { get; set; }
    List<AYears>? YearData { get; set; }
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    private static ViewEmployeeDropDown? employeeno { get; set; }
    private static ViewEmployeeDropDown? employeeactingofficer { get; set; }
    List<ALeaveType>? LeaveTypeData { get; set; }
    List<ALeaveApprovalStatus>? ApprovalStatusData { get; set; }
    List<EmployeeLeaveHeader>? LeaveDataSource { get; set; }
    private static EmployeeLeaveHeader? LeaveData { get; set; }
    List<APublicHolidays>? PublicHolidaysData { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    int currentMonth = DateTime.Now.Month;
    int currentYear = DateTime.Now.Year;
    int currentDay = DateTime.Now.Day;
    public AppraisalSearch searchpanel { get; set; } = new AppraisalSearch();
    SfGrid<EmployeeLeaveHeader> DataGrid { get; set; }
    public bool EmployeeDD { get; set; }
    public bool ActingOfficerDD { get; set; }
    bool LeaveTypeIdDD = true;
    bool EndDateEnabler = true;
    bool StartDateEnabler = true;
    public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime MaxDate { get; set; } = new DateTime(DateTime.Now.Year, 12, 31); 
    Syncfusion.Blazor.Grids.Action _previous { get; set; }
    DateTime StartDate = DateTime.Now;
    DateTime EndDate = DateTime.Now;
    private static ALeaveType? leavetypedays { get; set; }
    public static int PublicHolidays { get; set; } = 0;
    public static int numberOfDays2 { get; set; } = 0;
    public static DateTime[]? datesselectedd = null;
    public static int LeaveDays { get; set; } = 0;
    public static int TotalDaysTakenPrior { get; set; } = 0;
    bool ImmediateSupervisorDD = true;
    bool HeadofDepartmentDD = true;
    private static ViewEmployeeDropDown? employeenosupervisor { get; set; }
    private static ViewEmployeeDropDown? employeenohodchange { get; set; }
    SfDialog? LoadingDialogue;
    bool IsDraftDisabled = false;
    bool IsSubmitDisabled = false;
    bool IsApproveDisabled = false;
    bool IsRejectDisabled = false;
    string ConfirmationText { get; set; }

    private List<object> ToolbarMenu = new List<object>()
    {
        new ItemModel() { Text = "Create Request", PrefixIcon = "e-add", Id = "Grid_add"},
        new ItemModel(){ Text = "Edit Request", PrefixIcon= "e-edit", Id="Grid_edit"},
        //new ItemModel(){ Text = "Delete Training Plan", PrefixIcon= "e-delete", Id="Grid_delete"},
        new ItemModel(){ Text = "Update Request", PrefixIcon= "e-update", Id="Grid_update"},
        new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="Grid_cancel"}
    };

    private void ToggleSearchQuery(Query? DetailData)
    {
        try
        {
            if (DetailData != null)
            {
                MainQuery = DetailData;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            StateHasChanged();
        }

    }

    private void ToggleLeaveDetailsData(List<EmployeeLeaveDetails>? DetailsChange)
    {
        if (LeaveData != null && DetailsChange != null)
        {
            if (LeaveData.EmployeeLeaveDetails == null)
            {
                LeaveData.EmployeeLeaveDetails = new List<EmployeeLeaveDetails>();
            }
            LeaveData.EmployeeLeaveDetails = DetailsChange;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            var isAuthenticated = await AuthService.CheckAuthenticationStatus();
            if (isAuthenticated == false)
            {
                navManager.NavigateTo("/LoginPage", true);
            }
            else
            {
                Credentials = await AuthService.GetUserCredentials();
                employeeno = null;
                MainQuery = new Query();

                List<Task> t = new List<Task>();

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetYears");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        YearData = JsonSerializer.Deserialize<List<AYears>>(content, _options);

                        var b = YearData.FirstOrDefault(o => o.YearDesc == currentYear);
                        if (b != null)
                        {
                            finyearid = b.YearId;
                            List<int?> _finyearid = new List<int?>();
                            _finyearid.Add(finyearid);
                            searchpanel.YearId = _finyearid.ToArray();
                            MainQuery = new Query().AddParams("YearId", string.Join(",", searchpanel.YearId));
                        }
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetEmployeeDD");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetLeaveType");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        LeaveTypeData = JsonSerializer.Deserialize<List<ALeaveType>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"EmployeeLeave/GetEmployeeLeaveData");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        LeaveDataSource = JsonSerializer.Deserialize<List<EmployeeLeaveHeader>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetPublicHoliday");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        PublicHolidaysData = JsonSerializer.Deserialize<List<APublicHolidays>>(content, _options);
                    }
                }));

                Task _t = Task.WhenAll(t);
                await _t;
            }
        }
        catch (Exception ex)
        {

        }
        finally
        {

        }

    }

    public async Task onSaveDraftForm()
    {
        try
        {
            if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                LeaveData.LeaveApprovalStatusId = 1;
                LeaveData.DateAdded = DateTime.Now;
                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    public async Task onSubmitForm()
    {
        try
        {    
            if(LeaveData.Employeeid == null)
            {
                toastService.ShowWarning("Please select the employee (Part I)");
            }

            else if(LeaveData.LeaveTypeId == null)
            {
                toastService.ShowWarning("Please select the leave type");
            }

            else if(LeaveData.CommencementDate == null)
            {
                toastService.ShowWarning("Please select the commencement date (Part I)");
            }

            else if(LeaveData.EndDate == null)
            {
                toastService.ShowWarning("Please select the end date (Part I)");
            }

            else if(employeenosupervisor != null && employeenosupervisor.EmailAddress == null)
            {
                toastService.ShowWarning("Supervisor email not registered in the system (Part III), kindly ask the system administrator to update the email and then continue.");
            }

            else if(LeaveData.ImmediateSupervisor == null)
            {
                toastService.ShowWarning("Please select your supervisor (Part III).");
            }

            else if(employeenohodchange != null && employeenohodchange.EmailAddress == null)
            {
                toastService.ShowWarning("Head of Department email not registered in the system (Part III), kindly ask the system administrator to update the email and then continue.");
            }

            else if(LeaveData.Hod == null)
            {
                toastService.ShowWarning("Please select your Head of Department (Part III).");
            }

            else if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                LeaveData.LeaveApprovalStatusId = 2;
                LeaveData.DateAdded = DateTime.Now;
                //LeaveData.SubmittedToSupervisor = true;
                await DataGrid.EndEditAsync();
            }            
        }
        catch (Exception ex)
        {
            //toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    public async Task onApproveForm()
    {
        try
        {
            if (LeaveData.Employeeid == null)
            {
                toastService.ShowWarning("Please select the employee (Part I)");
            }

            else if (LeaveData.LeaveTypeId == null)
            {
                toastService.ShowWarning("Please select the leave type");
            }

            else if (LeaveData.CommencementDate == null)
            {
                toastService.ShowWarning("Please select the commencement date (Part I)");
            }

            else if (LeaveData.EndDate == null)
            {
                toastService.ShowWarning("Please select the end date (Part I)");
            }

            else if (employeenosupervisor != null && employeenosupervisor.EmailAddress == null)
            {
                toastService.ShowWarning("Supervisor email not registered in the system (Part III), kindly ask the system administrator to update the email and then continue.");
            }

            else if (employeenohodchange != null && employeenohodchange.EmailAddress == null)
            {
                toastService.ShowWarning("Head of Department email not registered in the system (Part III), kindly ask the system administrator to update the email and then continue.");
            }

            else if (LeaveData.ImmediateSupervisor == null)
            {
                toastService.ShowWarning("Please select your supervisor (Part III).");
            }

            else if (employeenohodchange != null && employeenohodchange.EmailAddress == null)
            {
                toastService.ShowWarning("Head of Department email not registered in the system (Part III), kindly ask the system administrator to update the email and then continue.");
            }

            else if (LeaveData.Hod == null)
            {
                toastService.ShowWarning("Please select your Head of Department (Part III).");
            }

            else if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                LeaveData.LeaveApprovalStatusId = 5;
                //LeaveData.SupervisorRecommendationDate = DateTime.Now;
                //LeaveData.SubmittedToHod = true;
                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            //toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    public async Task onRejectForm()
    {
        try
        {
            ConfirmationText = "<p>Are you sure you want to reject this leave request! </p>";
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    public string GetLeaveRequestHeader(EmployeeLeaveHeader Value)
    {
        if (Value.EmployeeLeaveId == 0)
        {
            return "New Leave Request";
        }
        else
        {
            // return "Edit " + Value.EmployeeFullName;
            return "Edit Records";
        }
    }

    public async void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeeno = args.ItemData;        
    }

    public async void OnActingOfficerChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeeactingofficer = args.ItemData;
    }

    public async void OnEmployeeSupervisorChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?,ViewEmployeeDropDown> args)
    {
        employeenosupervisor = args.ItemData;  
    }

    public async void OnEmployeeHODChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeenohodchange = args.ItemData;
    }

    public void OnLeaveTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ALeaveType> args)
    {
        leavetypedays = args.ItemData;
        int? leavetypeId = args.ItemData.LeaveTypeId;

        //If the leavetype is changed in drodown, clear the other text fields
        if (args.PreviousItemData != null)
        {
            LeaveData.CommencementDate = null;
            LeaveData.EndDate = null;
            LeaveData.TotalDays = null;
            //LeaveData.NoChildren = null;
        }
        else
        {
            if (leavetypeId != null && (leavetypeId == 2 || leavetypeId == 4))
            {
                EndDateEnabler = false;
            }
            else
            {
                EndDateEnabler = true;
            }
        }
        StateHasChanged();
    }

    protected async Task OnMaternityDateChange(ChangedEventArgs<DateTime?> args)
    {
        EndDateEnabler = false;
        StartDate = Convert.ToDateTime(args.Value);
        leavetypedays = LeaveTypeData.FirstOrDefault(o => o.LeaveTypeId == LeaveData.LeaveTypeId);
        DateTime EndDateWeekDays = GetWeekDaysOnly(StartDate, leavetypedays.LeaveDaysPerYear.Value).AddDays(-1); // Subtract one day inorder to get end date as the actual date the leave ends

        PublicHolidays = GetNumberOfPublicHolidays(StartDate, EndDateWeekDays);
        LeaveData.CommencementDate = EndDateWeekDays.AddDays(PublicHolidays);

        numberOfDays2 = GetNumberOfDates(StartDate, EndDateWeekDays);
        datesselectedd = GetDatesBetween(StartDate, EndDateWeekDays).ToArray();

        LeaveData.TotalDays = leavetypedays.LeaveDaysPerYear.Value;

        StateHasChanged();
    }

    public static DateTime GetWeekDaysOnly(DateTime date, int days)
    {
        if (days < 0)
        {
            throw new ArgumentException("days cannot be negative", "days");
        }

        if (days == 0) return date;

        if (date.DayOfWeek == DayOfWeek.Saturday)
        {
            date = date.AddDays(2);
            days -= 1;
        }
        else if (date.DayOfWeek == DayOfWeek.Sunday)
        {
            date = date.AddDays(1);
            days -= 1;
        }

        date = date.AddDays(days / 5 * 7);
        int extraDays = days % 5;

        if ((int)date.DayOfWeek + extraDays > 5)
        {
            extraDays += 2;
        }

        return date.AddDays(extraDays);
    }

    //Get number of public holidays
    public int GetNumberOfPublicHolidays(DateTime from, DateTime to)
    {
        PublicHolidays = PublicHolidaysData.Where(o => o.HolidayDate >= from && o.HolidayDate <= to).Count();
        return PublicHolidays;
    }

    //Function to return number of days minus weekends
    static int GetNumberOfDates(DateTime from, DateTime to)
    {
        if (to < from)
            throw new ArgumentException("To cannot be smaller than from.", nameof(to));

        if (to.Date == from.Date)
            return 0;

        int n = 0;
        DateTime nextDate = from;
        while (nextDate <= to.Date)
        {
            if (nextDate.DayOfWeek != DayOfWeek.Saturday && nextDate.DayOfWeek != DayOfWeek.Sunday)
                n++;
            nextDate = nextDate.AddDays(1);
        }

        return n;
    }

     //Function to get all dates between two dates
    public List<DateTime> GetDatesBetween(DateTime startDate, DateTime endDate)
    {
        List<DateTime> allDates = new List<DateTime>();

        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
        {
            var countdata = PublicHolidaysData?.FirstOrDefault(o => o.HolidayDate == date);

            if ((date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday) && (countdata == null))
            {
                allDates.Add(date.Date);
            }            
        }

        return allDates;
    }


    protected async Task OnEndDateChange(ChangedEventArgs<DateTime?> value)
    {
        StartDate = Convert.ToDateTime(LeaveData.CommencementDate);
        EndDate = Convert.ToDateTime(LeaveData.EndDate);
        numberOfDays2 = GetNumberOfDates(StartDate, EndDate);
        datesselectedd = GetDatesBetween(StartDate, EndDate).ToArray();
        PublicHolidays = GetNumberOfPublicHolidays(StartDate, EndDate);
        LeaveDays = numberOfDays2 - PublicHolidays;

        //Calculate the current number of days between the two dates
        if (StartDate != EndDate)
        {
            LeaveData.TotalDays = LeaveDays;
        }
        else
        {
            LeaveData.TotalDays = 1;
        }

        StateHasChanged();

        var LD = LeaveDataSource.OrderByDescending(x => x.TotalDays)
        .FirstOrDefault(o => o.Employeeid == LeaveData.Employeeid &&
            o.LeaveTypeId == LeaveData.LeaveTypeId);
        if (LD != null && LD.TotalDays != null)
        {
            LeaveData.TotalDays = LeaveDays + LD.TotalDays.Value;
            TotalDaysTakenPrior = LD.TotalDays.Value;
            StateHasChanged();
        }
        else
        {
            LeaveData.TotalDays = LeaveDays;
            TotalDaysTakenPrior = 0;
        }
    }

    public async void ActionCompleteMain(ActionEventArgs<EmployeeLeaveHeader> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) ||
        args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            DataGrid.PreventRender(false);
        }
    }

    public async void ActionBeginMain(ActionEventArgs<EmployeeLeaveHeader> Args)
    {
        try
        {
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                _previous = Args.RequestType;
                ActingOfficerDD = true;
                EmployeeDD = true;

                if(Credentials.StaffId > 0)
                {
                    Args.Data.Employeeid = Credentials.StaffId;

                    if (EmployeeData != null)
                    {
                        employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid);
                    }
                }

                Args.RowData.EmployeeLeaveDetails = new List<EmployeeLeaveDetails>();
            }

            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                _previous = Args.RequestType;
                employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid);

                if (Args.RowData.EmployeeLeaveDetails == null)
                {
                    Args.RowData.EmployeeLeaveDetails = new List<EmployeeLeaveDetails>();
                }
            }
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                
            }

        }
        catch(Exception ex)
        {

        }
        finally
        {
            
        }
        
    }

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<EmployeeLeaveHeader> Args)
    {
        if (Args.Column.Field == "LeaveApprovalStatusId")
        {
            if (Args.Data.LeaveApprovalStatusId == 9 || Args.Data.LeaveApprovalStatusId == 11)
            {
                Args.Cell.AddClass(new string[] { "Approved" });
            }
            else
            {
                Args.Cell.AddClass(new string[] { "Draft" });
            }
        }
    }

    public void RowBound(RowDataBoundEventArgs<EmployeeLeaveHeader> Args)
    {

    }

    #region LeaveRequest

    public class LeaveApplicationAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        IAuthenticationService _AuthService;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;
        private readonly ILogger<LeaveApplicationAdapter> _logger;

        public LeaveApplicationAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , IAuthenticationService authservice, ApiConfig apiConfig,
        ILogger<LeaveApplicationAdapter> logger)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            string? _YearId = null;

            if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
            {
                var val = dataManagerRequest.Params;

                if (val.FirstOrDefault(o => o.Key == "YearId").Value != null)
                {
                    _YearId = val.FirstOrDefault(o => o.Key == "YearId").Value.ToString();
                }
            }

            var data = new List<EmployeeLeaveHeader>();
            try
            {
                var response = await Http.GetAsync($"EmployeeLeave/GetEmployeeLeaveData?finyearid={_YearId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<EmployeeLeaveHeader>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<EmployeeLeaveHeader>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
    }

    #endregion LeaveRequest
}
