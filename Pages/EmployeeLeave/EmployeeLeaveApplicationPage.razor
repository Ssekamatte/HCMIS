@page "/EmployeeLeaveApplicationPage"
@using HCMIS.Data;
@using HCMIS.Model
@using HCMIS.SHARED;
@using HCMIS.SHARED.Models;
@using HCMIS.ViewModel
@using System.Text.Json
@using System.Text.RegularExpressions
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager navManager;
@using System.Collections;
@inject IToastService toastService;
@using System.Globalization;
@using HCMIS.SHARED.Data;
@inject IJSRuntime JsRuntime;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;
@using Microsoft.AspNetCore.Components;

<style>

    /*Custom color for multiline textbox*/
    .e-custom .e-control.e-textbox 
    { 
        color: #03a9f4; 
    } 

     /*Manage Records Button*/
    .e-grid .e-icons:not(.e-btn-icon) {
        color: #00cc00;
        color: floralwhite;
        font-size: smaller;
        font-weight: bolder;
    }
 
    .e-grid .e-unboundcelldiv .e-icons:not(.e-btn-icon) {
        color: white;
    }

    /*Manage Records Button

    /*hide the Default Grid spinner */
    .e-grid .e-spinner-pane {
        display: none;
    }

    /*Disable select all on grid checkbox*/
    .e-headercelldiv.e-headerchkcelldiv .e-checkbox-wrapper.e-css {
        pointer-events: none;
        opacity: 0.5;
    }

    /*Customize Scroll Bars*/
    ::-webkit-scrollbar-thumb {
        background-color: #888;
        border-radius: 10px
    }

    ::-webkit-scrollbar {
        background-color: white;
    }

    ::-webkit-scrollbar-button {
        background-color: #bbbbbb;
    }
    /*Customize Scroll Bars*/

    /*stick grid headers*/
    .e-gridheader {
        position: -webkit-sticky;
        position: sticky;
        top: 56px;
        z-index: 1;
    }
    /*stick grid headers*/
    
    h6 {
        color: ghostwhite;
        background-color: red;
        padding: 10px;
        width: 100%;
        font-size: 18px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        background-color: #bdc3c7;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    /*Change Cell Color */
    .e-headercell.e-attr1 {
        background: #ff4d00;
        color: white;
    }

    .e-headercell.e-attr2 {
        background: #FFFF00;
        color: darkred;
    }

    .e-headercell.e-attr3 {
        background: grey;
        color: white;
    }

    /**/
    #container {
        position: relative;
        height: 550px;
    }

    .e-spinner-pane.e-spin-overlay {
        background-color: rgb(192,192,192);
    }

    /*Accordion Colors*/
    .e-accordion {
        border-radius: 6px 6px 6px 6px;
        border: none !important;
    }

        /* header custom css*/
        .e-accordion .e-acrdn-item .e-acrdn-header {
            background-color: rgb(0, 204, 0);
            border-radius: 6px 6px 6px 6px;
        }

            /*header on hover custom css*/
            .e-accordion .e-acrdn-item .e-acrdn-header:hover {
                background-color: rgb(0, 204, 0);
            }

        /*header on selected and expanded custom css*/
        .e-accordion .e-acrdn-item.e-select.e-expand-state > .e-acrdn-header {
            background: rgb(0, 204, 0);
        }

        .e-accordion .e-acrdn-item.e-select.e-selected.e-expand-state > .e-acrdn-header {
            background: rgb(0, 204, 0);
        }

        .e-accordion .e-acrdn-item.e-expand-state.e-select:not(.e-selected) > .e-acrdn-header:focus {
            background: rgb(0, 204, 0);
        }

        /*content custom css*/
        .e-accordion .e-acrdn-item .e-acrdn-panel .e-acrdn-content {
            background-color: whitesmoke;
            border-radius: 6px 6px 6px 6px;
        }

        /*to remove the white line*/
        .e-accordion .e-acrdn-item.e-select {
            border-bottom: 1px solid white !important;
            border-top: 1px solid white !important;
        }
        /*to change the accordion header color*/
        .e-accordion .e-acrdn-item .e-acrdn-header .e-acrdn-header-content {
            color: darkred;
        }


    .pp {
        color: ghostwhite;
        background-color: #00cc00;
        padding: 10px;
    }
    /*Hide Grid Pager Numbers*/
    .e-pager {
        display: none;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25"/> HCMIS
        </strong>| LEAVE APPLICATION FORM
    </li>
</ol>

<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="@ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false" CssClass="const">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <SearchLeaveRequestPage 
                            YearData="@YearData" 
                            finyearid="@finyearid" 
                            onsearchtoggle="@ToggleSearchQuery">
                        </SearchLeaveRequestPage>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>
    </div>
</div>

<div class="form-group col-md-12">
    <SfSpinner @ref="SpinnerObj" Label="Loading Please Wait....." Size="50" ZIndex="1001">
        @*Render custom spinner component.*@
    </SfSpinner>
</div>


<div class="form-group col-md-12">

    <SfGrid @ref="@DataGrid" 
        TValue="EmployeeLeaveHeader" 
        ID="Grid" 
        AllowPaging="true" 
        AllowFiltering="false" 
        AllowReordering="true" 
        AllowResizing="true" 
        AllowGrouping="false" 
        AllowExcelExport="true" 
        AllowPdfExport="true" 
        AllowSelection="true" 
        AllowSorting="true" 
        @attributes="@GridAttributes"
        Query="@MainQuery"
            AllowTextWrap="true" Toolbar="@ToolbarMenu">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog"  Dialog="AttachmentDialog">
            <HeaderTemplate>
                @{
                    var text = GetLeaveRequestHeader((context as EmployeeLeaveHeader));
                    <div class="headerbandimg">
                        <span>@text</span>
                    </div>
                }
            </HeaderTemplate>
            <Template>
                @{
                    <div class="row">
                        <div class="col-md-4">
                            <h5 style="text-align:left;">
                                <strong>LEAVE APPLICATION FORM</strong>
                            </h5>
                        </div>

                        @if(LeaveData != null && ApprovalStatusData != null && _previous == Syncfusion.Blazor.Grids.Action.BeginEdit)
                        {
                            var _datastatus = ApprovalStatusData.FirstOrDefault(o=>o.LeaveApprovalStatusId == LeaveData.LeaveApprovalStatusId);
                            <div class="col-md-4">
                                <h5 style="color:green;">
                                    <strong>Leave No: @LeaveData.EmployeeLeaveNo</strong>
                                </h5>
                            </div>
                            <div class="col-md-4">
                                @if(_datastatus != null)
                                {
                                    <h5 style="color:green;">
                                        <strong>Application Status: @_datastatus.LeaveApprovalStatus</strong>
                                    </h5>
                                }                                
                            </div>
                        }
                    </div>
                    LeaveData = (context as EmployeeLeaveHeader);

                    @if(LeaveData != null)
                    {
                        <SfAccordion ExpandMode="ExpandMode.Single">
                            <AccordionItems>
                                <AccordionItem Expanded="true">
                                    <HeaderTemplate><strong>PART I: EMPLOYEE PROFILE:  To be Completed and returned to the HR Department</strong></HeaderTemplate>
                                    <ContentTemplate>
                                        @* style="width:100%;font-size:20px; border-color:black; border-width:2px; border-style:solid; "*@
                                        <table class="table table-bordered">
                                            <tr>
                                                <td style="font-weight:bold">
                                                    No.
                                                </td>
                                                <td style="font-weight:bold">
                                                    Item/Narration
                                                </td>
                                                <td style="font-weight:bold">
                                                    Response
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    1.
                                                </td>
                                                <td>
                                                    Employee Name<span style="color:red;">*</span>
                                                </td>
                                                <td>
                                                    <SfDropDownList @bind-Value="@(LeaveData.Employeeid)"
                                                                    Enabled="false"
                                                                    TItem="ViewEmployeeDropDown"
                                                                    TValue="int?"
                                                                    DataSource="@EmployeeData"
                                                                    Placeholder="Please select"
                                                                    FloatLabelType="FloatLabelType.Never"
                                                                    AllowFiltering="true"
                                                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)"
                                                                                   Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)">
                                                        </DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="int?"
                                                                            TItem="ViewEmployeeDropDown"
                                                                            ValueChange="OnEmployeeChange">
                                                        </DropDownListEvents>
                                                    </SfDropDownList>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    2.
                                                </td>
                                                <td>
                                                    Designation
                                                </td>
                                                <td>
                                                    @if (employeeno != null)
                                                    {
                                                        @employeeno.JobTitleDescription
                                                    }
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    3.
                                                </td>
                                                <td>
                                                    Department
                                                </td>
                                                <td>
                                                    @if (employeeno != null)
                                                    {
                                                        @employeeno.DepartmentDescription
                                                    }
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    4.
                                                </td>
                                                <td>
                                                    Date of Last Leave within the Present Year
                                                </td>
                                                <td>
                                                    @if (employeeleave != null && employeeleave.EndDate != null)
                                                    {
                                                        @employeeleave.EndDate.Value.ToString("dd/MM/yyyy")
                                                    }
                                                    else
                                                    {
                                                        <p>No Application Made</p>
                                                    }
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    5.
                                                </td>
                                                <td>
                                                    Telephone contact during Leave<span style="color:red;">*</span>
                                                </td>
                                                <td>
                                                    @*<SfTextBox Multiline="false"
                                                    @bind-Value="@(LeaveData.Telephone)"
                                                               Enabled="@OnSubmitButtonsBool"
                                                               FloatLabelType="FloatLabelType.Never">
                                                    </SfTextBox>*@

                                                    <SfDropDownList TValue="int?" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" TItem="ACountry" Width="50px" DataSource="CountryData" PopupWidth="300px" @bind-Value="@(LeaveData.CountryId)">
                                                        <DropDownListTemplates TItem="ACountry">
                                                            <ItemTemplate Context="itemcontext">
                                                                <div>
                                                                    <p><img className="empImage" src="https://flagcdn.com/16x12/@((itemcontext as ACountry).Eimg).png" height="11px" width="20px" alt="employee" />  @((itemcontext as ACountry).CountryDesc)  @((itemcontext as ACountry).CountryCode)</p>

                                                                </div>
                                                            </ItemTemplate>
                                                            <ValueTemplate Context="valuecontext">
                                                                <div>
                                                                    <img className="empImage" src="https://flagcdn.com/16x12/@((valuecontext as ACountry).Eimg).png" height="11px" width="20px" alt="employee" />
                                                                </div>
                                                            </ValueTemplate>
                                                        </DropDownListTemplates>
                                                        <DropDownListFieldSettings Value="CoutryId" Text="CountryDesc"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="int?" TItem="ACountry" ValueChange="changeHandler"></DropDownListEvents>
                                                    </SfDropDownList>

                                                    @*<SfTextBox Multiline="false" ID="DialCode" @bind-Value="@(LeaveData.DialCode)" FloatLabelType="FloatLabelType.Never" Enabled="false" Width="50px"></SfTextBox>*@

                                                    <SfMaskedTextBox Mask="@maskvalue" @bind-Value="@(LeaveData.Telephone)" Width="150px" Enabled="@(LeaveData.CountryId == null ? false : true)"></SfMaskedTextBox>


                                                </td>
                                            </tr>

                                            <tr>
                                                <td>
                                                    6.
                                                </td>
                                                <td>
                                                    Financial Year
                                                </td>
                                                <td>
                                                    <SfDropDownList @bind-Value="@(LeaveData.FinancialYearId)" TItem="AYears" TValue="int?"
                                                                    DataSource="@YearData" Placeholder="Please select"
                                                                    FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                                                    Enabled="false">
                                                        <DropDownListFieldSettings Value="@nameof(AYears.YearId)"
                                                                                   Text="@nameof(AYears.YearDesc)">
                                                        </DropDownListFieldSettings>
                                                    </SfDropDownList>
                                                </td>
                                                <td hidden>
                                                    Employee Leave Id
                                                </td>
                                                <td hidden>
                                                    <SfNumericTextBox @bind-Value="@(LeaveData.EmployeeLeaveId)" Enabled="false" Format="N0" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                </td>
                                            </tr>
                                        </table>

                                        <div class="row">
                                            <div class="col-md-12">
                                                <p><h3>Acting Officer During Period of Leave</h3></p>
                                            </div>
                                            <div class="col-md-6">
                                                <p>Name<span style="color:red;">*</span></p>
                                                <SfDropDownList @bind-Value="@(LeaveData.ActingOfficerId)" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" Enabled="OnSubmitButtonsBool" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                    <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnActingOfficerChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>

                                            @*Check if acting officer is not owner of application*@
                                            @if (LeaveData != null && LeaveData.Employeeid != LeaveData.ActingOfficerId)
                                            {
                                                ActingOfficerBool = true;
                                                @if (employeeactingofficer != null)
                                                {
                                                    <div class="col-md-6">
                                                        <p>Title</p>
                                                        @if (employeeactingofficer != null)
                                                        {
                                                            @employeeactingofficer.JobTitleDescription
                                                        }
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                ActingOfficerBool = false;
                                                <h6 style="background-color:red; color:ghostwhite;margin-top: 10px;">You cannot act on your behalf. Revise your selection please</h6>
                                            }
                                                                                        
                                        </div>
                                        @*<div class="row">
                                            <div class="col-md-12">
                                                <p><h3>Acting Officer During Period of Leave</h3></p>
                                                <LeaveDetailsPage 
                                                    ActingOfficerDD="@ActingOfficerDD"
                                                    ondetailstoggle="@ToggleLeaveDetailsData"
                                                    EmployeeData="@EmployeeData"
                                                    EmployeeLeaveId="@LeaveData.EmployeeLeaveId"
                                                    detailsdata="@LeaveData.EmployeeLeaveDetails.ToList()">
                                                </LeaveDetailsPage>
                                            </div>
                                        </div>*@

                                        <div class="row">
                                            <div class="col-md-12">
                                                <p><h3>Leave Information</h3></p>
                                            </div>
                                            <div class="col-md-4">
                                                <p>Leave Type:<span style="color:red;">*</span></p>
                                                <SfDropDownList @bind-Value="@(LeaveData.LeaveTypeId)" Enabled="OnSubmitButtonsBool" TItem="ALeaveType" TValue="int?" DataSource="@LeaveTypeData" Placeholder="Choose Leave Type" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                    <DropDownListFieldSettings Value="@nameof(ALeaveType.LeaveTypeId)" Text="@nameof(ALeaveType.LeaveTypeDescription)"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="int?" TItem="ALeaveType" ValueChange="OnLeaveTypeChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>


                                            @if (employeeno != null && employeeno.GenderId == 2 && LeaveData != null
                                            && LeaveData.LeaveTypeId == 4)
                                            {
                                                <h6 style="background-color:red; color:ghostwhite;margin-top: 10px;">Females donot qualify for paternal leave</h6>
                                            }
                                            else if (employeeno != null && employeeno.GenderId == 1 && LeaveData != null
                                            && LeaveData.LeaveTypeId == 2)
                                            {
                                                <h6 style="background-color:red; color:ghostwhite;margin-top: 10px;">Males do not qualify for maternal leave</h6>
                                            }

                                            else
                                            {
                                                @if (LeaveData != null && LeaveData.LeaveTypeId == 4)
                                                {                                                    
                                                    <div class="col-md-4" hidden>
                                                        <p>No. of Children:<span style="color:red;">*</span></p>
                                                        <SfNumericTextBox TValue="int?" @bind-Value="@(LeaveData.NoChildren)" Enabled="OnSubmitButtonsBool" Format="N0" Min="1">
                                                            @*<NumericTextBoxEvents TValue="int?" ValueChange="ChildrenChange"></NumericTextBoxEvents>*@
                                                        </SfNumericTextBox>
                                                    </div>

                                                }
                                                
                                                <div class="col-md-4">
                                                    <p>Commencement Date:<span style="color:red;">*</span></p>
                                                    <SfDatePicker @bind-Value="@(LeaveData.CommencementDate)" Enabled="OnSubmitButtonsBool" ID="ScheduledStartDate" Format="dd-MM-yyyy" FloatLabelType="FloatLabelType.Never" Min="MinDate">
                                                        <DatePickerEvents TValue="DateTime?" ValueChange="OnMaternityDateChange"></DatePickerEvents>                                                       
                                                    </SfDatePicker>
                                                </div>

                                                <div class="col-md-4">
                                                    <p>End Date:<span style="color:red;">*</span></p>
                                                    <SfDatePicker @bind-Value="@(LeaveData.EndDate)" Enabled="EndDateEnablerBool" ID="ScheduledEndDate" Format="dd-MM-yyyy" FloatLabelType="FloatLabelType.Never" Min="MinDate" Max='@MaxDate'>
                                                        <DatePickerEvents TValue="DateTime?" ValueChange="OnEndDateChange"></DatePickerEvents>
                                                    </SfDatePicker>
                                                </div>

                                                @if (LeaveData.EndDate < LeaveData.CommencementDate)
                                                {
                                                    <div class="col-md-12;margin-top:10px;">
                                                        <p style="background-color:red;color:whitesmoke;margin-top: 10px;">The End Date should not be before the Start Date</p>
                                                    </div>
                                                }

                                                else if (leavetypedays != null && (LeaveData.LeaveTypeId != 2 && LeaveData.LeaveTypeId != 4) &&
                                                    (LeaveData.TotalDays > @leavetypedays.LeaveDaysPerYear))
                                                {
                                                    <h6 style="margin-top: 10px;">
                                                        You have exceeded the @leavetypedays.LeaveDaysPerYear working days allocated.
                                                        Kindly reduce on the number of days.
                                                    </h6>
                                                }
                                                
                                                else
                                                {
                                                    <div class="col-md-3">
                                                        <p style="margin-top:10px;">Days Entitled:</p>
                                                        @*@if (leavetypedays != null && leavetypedays.LeaveTypeId != 4)*@
                                                        @if (leavetypedays != null)
                                                        {
                                                            @leavetypedays.LeaveDaysPerYear
                                                        }
                                                        else if (leavetypedays != null && leavetypedays.LeaveTypeId == 4)
                                                        {
                                                            <p>@leavetypedays.LeaveDaysPerYear Days</p>
                                                        }
                                                    </div>

                                                    <div class="col-md-3">
                                                        <p style="margin-top:10px;">Days Arleady Utilized:</p>
                                                        @if (LeaveData.LeaveTypeId != 2 && LeaveData.LeaveTypeId != 4)
                                                        {
                                                            @TotalDaysTakenPrior
                                                        }
                                                        else
                                                        {
                                                            <p style:"color:red;">N/A</p>
                                                        }
                                                    </div>

                                                    <div class="col-md-3">
                                                        <p style="margin-top:10px;">Days Selected:</p>
                                                        <SfNumericTextBox @bind-Value="@(LeaveData.NoDaysAppliedFor)" Enabled="false" Format="N0" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                    </div>

                                                    <div class="col-md-3">
                                                        <p style="margin-top:10px;">Total Annual Days:</p>
                                                        <SfNumericTextBox @bind-Value="@(LeaveData.TotalDays)" Enabled="false" Format="N0" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                    </div>

                                                    

                                                    @*<div class="col-md-3">
                                                        <p style="margin-top:10px;">Annual Total</p>
                                                        @{
                                                            if(LeaveData != null && LeaveData.TotalDays !=null)
                                                            {
                                                                OverrallTotal = (LeaveData.TotalDays + TotalDaysTakenPrior);
                                                                @OverrallTotal;
                                                            }
                                                        }
                                                    </div>*@
                                                }                                                
                                            }
                                            
                                            @if (LeaveData != null && LeaveData.LeaveTypeId == 3)
                                            {
                                                 <div class="col-md-12">
                                                    <p style="margin-top:10px;">Any further explanation can be given here:</p>
                                                    <SfTextBox Multiline="true" rows="4"
                                                               @bind-Value="@(LeaveData.OtherDetails)"
                                                               Enabled="@OnSubmitButtonsBool"
                                                               FloatLabelType="FloatLabelType.Never">
                                                    </SfTextBox>

                                                    <h6 style="background-color:#2c3e50; color:ghostwhite;margin-top: 10px;">NB: YOU ARE REQUIRED TO UPLOAD EVIDENCE FOR SICK LEAVE APPLICATION.OTHERWISE IT MIGHT NOT BE GRANTED</h6>
                                                 </div>
                                                
                                            }

                                        </div>
                                    </ContentTemplate>
                                </AccordionItem>

                                @if(LeaveComputation == true)
                                {
                                    <AccordionItem Expanded="true">
                                        <HeaderTemplate><strong>PART II: LEAVE COMPUTATION: Completed by the Head-HR & Administration</strong></HeaderTemplate>
                                        <ContentTemplate>
                                            <LeaveComputationPage 
                                                AppliedDays="@LeaveData.NoDaysAppliedFor" 
                                                LeaveTypeData="@LeaveTypeData" 
                                                TotalDaysTakenPrior="@TotalDaysTakenPrior"
                                                EmployeeLeaveId="@LeaveData.EmployeeLeaveId">
                                            </LeaveComputationPage>
                                        </ContentTemplate>
                                    </AccordionItem>
                                }

                                <AccordionItem Expanded="true">
                                    <HeaderTemplate><strong>PART III: RECOMMENDATION</strong></HeaderTemplate>
                                    <ContentTemplate>
                                        <table class="table table-bordered">
                                            <tr>
                                                <td style="font-weight:bold">
                                                    Recommended By
                                                </td>
                                                <td style="font-weight:bold">
                                                    Name
                                                </td>
                                            </tr>

                                            <tr>
                                                <td>
                                                    Immediate Supervisor <span style="color:red;">*</span>
                                                </td>

                                                <td>
                                                    <SfDropDownList @bind-Value="@(LeaveData.ImmediateSupervisor)" TItem="ViewEmployeeDropDown" Enabled="OnSubmitButtonsBool" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnEmployeeSupervisorChange"></DropDownListEvents>
                                                    </SfDropDownList>

                                                    @if (employeenosupervisor != null && !string.IsNullOrEmpty(employeenosupervisor.EmailAddress) && LeaveData.ImmediateSupervisor != null)
                                                    {
                                                        <p style="color:forestgreen; font-weight:bold">Email: @employeenosupervisor.EmailAddress</p>
                                                    }
                                                    else if ((LeaveData != null && LeaveData.ImmediateSupervisor != null)
                                                    && (employeenosupervisor != null && string.IsNullOrEmpty(employeenosupervisor.EmailAddress)))
                                                    {
                                                        <p style="color:red; font-weight:bold">Email Not Provided</p>
                                                    }
                                                    else
                                                    {

                                                    }
                                                </td>                                                
                                            </tr>

                                            <tr>
                                                <td>
                                                    Head of Department <span style="color:red;">*</span>
                                                </td>

                                                <td>
                                                    <SfDropDownList @bind-Value="@(LeaveData.Hod)" TItem="ViewEmployeeDropDown" Enabled="OnSubmitButtonsBool" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                        <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnEmployeeHODChange"></DropDownListEvents>
                                                    </SfDropDownList>

                                                    @if (employeenohodchange != null && !string.IsNullOrEmpty(employeenohodchange.EmailAddress) && LeaveData.Hod != null)
                                                    {
                                                        <p style="color:forestgreen; font-weight:bold">Email: @employeenohodchange.EmailAddress</p>
                                                    }
                                                    else if (employeenohodchange != null && (LeaveData != null && LeaveData.Hod != null)
                                                    && (employeenohodchange != null && string.IsNullOrEmpty(employeenohodchange.EmailAddress)))
                                                    {
                                                        <p style="color:red; font-weight:bold">Email Not Provided</p>
                                                    }
                                                    else
                                                    {

                                                    }
                                                </td>
                                            </tr>
                                        </table>
                                    </ContentTemplate>
                                </AccordionItem>

                                <AccordionItem Expanded="true">
                                    <HeaderTemplate><strong>PART IV: APPROVAL</strong></HeaderTemplate>
                                    <ContentTemplate>
                                        <div class="col-md-12">
                                            <h6 style="background-color: white;color: black;"> Leave Approved By : Chief Human Resource Officer</h6>
                                        </div>

                                        <div class="col-md-12">
                                            @*<SfDropDownList @bind-Value="@(LeaveData.Chro)" TItem="ViewEmployeeDropDown" Enabled="OnSubmitButtonsBool" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                            </SfDropDownList>*@

                                            <SfDropDownList @bind-Value="@(LeaveData.Chro)" TItem="ViewEmployeeDropDown" Enabled="OnSubmitButtonsBool" TValue="int?" DataSource="@EmployeeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                                                <DropDownListEvents TValue="int?" TItem="ViewEmployeeDropDown" ValueChange="OnEmployeeCHROChange"></DropDownListEvents>
                                            </SfDropDownList>

                                            @if (employeenochrochange != null && !string.IsNullOrEmpty(employeenochrochange.EmailAddress) && LeaveData.Chro != null)
                                            {
                                                <p style="color:forestgreen; font-weight:bold">Email: @employeenochrochange.EmailAddress</p>
                                            }
                                            else if (employeenochrochange != null && (LeaveData != null && LeaveData.Chro != null)
                                            && (employeenochrochange != null && string.IsNullOrEmpty(employeenochrochange.EmailAddress)))
                                            {
                                                <p style="color:red; font-weight:bold">Email Not Provided</p>
                                            }
                                            else
                                            {

                                            }
                                        </div>

                                        <div class="col-md-12">
                                        </div>
                                    </ContentTemplate>
                                </AccordionItem>

                                <div class="col-md-12" style="margin-top:10px">
                                    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                                            <MudTabPanel Text="Attachment">
                                                <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;">UPLOAD ATTACHMENT (Including any Evidence you have)</h6>

                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <EmployeeLeaveAttachment EmployeeLeaveId="@LeaveData.EmployeeLeaveId"
                                                                                 OnHeaderAttachmentToggled="@ToggleBalanceScoreCardAttachment"
                                                                                 HeaderAttachmentData="@LeaveData.EmployeeLeaveHeaderAttachment.ToList()"
                                                                                 BSCAttachmentToolbarItems="@BSCAttachmentToolbarItems"
                                                                                 OnSubmitButtonsBool="@OnSubmitButtonsBool">
                                                        </EmployeeLeaveAttachment>
                                                    </div>
                                                </div>
                                            </MudTabPanel>

                                            <MudTabPanel Text="Rejection Comments">
                                                <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;">REJECTION COMMENTS</h6>
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <LeaveRejectionCommentsPage EmployeeLeaveId="@LeaveData.EmployeeLeaveId"
                                                                                    onscorecardtoggle="@ToggleRejectionComments"
                                                                                    hodcommentsdata="@LeaveData.EmployeeLeaveRejectionComments.ToList()"
                                                                                    _previous="@_previous">
                                                        </LeaveRejectionCommentsPage>
                                                    </div>
                                                </div>
                                            </MudTabPanel>

                                            <MudTabPanel Text="Reason For Recall">
                                                <div class="form-group col-md-12">
                                                    <SfTextBox Multiline="true" CssClass="e-custom" Rows="5" @bind-Value="@(LeaveData.RecallReason)" Enabled="false" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                                </div>
                                            </MudTabPanel>
                                    </MudTabs>
                                </div>

                                
                            </AccordionItems>
                        </SfAccordion>
                    }
                }
            </Template>
            <FooterTemplate>
                @if (LeaveData != null && (LeaveData.CommencementDate <= LeaveData.EndDate))
                {
                    <button @onclick="@onSaveDraftForm" disabled=@IsDraftDisabled hidden=@IsHiddenDraft class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Save Draft</button>
                    <button @onclick="@onSubmitForm" disabled=@IsSubmitDisabled hidden=@IsHiddenPersonSubmit class="btn btn-success" data-ripple="true" style="margin-right:10px;">Submit Request</button>
                    <button @onclick="@onApproveForm" disabled=@IsApproveDisabled hidden=@IsHiddenApprove class="btn btn-secondary" data-ripple="true" style="margin-right:10px;">Approve</button>
                    <button @onclick="@onRejectForm" disabled=@IsRejectDisabled hidden=@IsHiddenRejected class="btn btn-warning" data-ripple="true" style="margin-right:10px;">Reject</button>
                    @* <button @onclick="() => onRecallForm(LeaveData)" disabled=@IsRecallDisabled hidden=@IsHiddenRecall class="btn btn-info" data-ripple="true" style="margin-right:10px;">Recall</button>
                     *@

                    <button @onclick="() => onRecallForm(LeaveData)" disabled=@IsRecallDisabled hidden=@IsHiddenRecall class="btn btn-info" data-ripple="true" style="margin-right:10px;">
                        @if(buttonspinner == true)
                        {
                             <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        Recall
                    </button>
                }

                <button @onclick="@DialogCancelBtnclicked" class="btn btn-danger" data-ripple="true">Cancel Plan</button>

            </FooterTemplate>
        </GridEditSettings>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
        <GridEvents 
                    OnActionComplete="ActionCompleteMain"
                    OnActionBegin="ActionBeginMain"
                    QueryCellInfo="QueryCellInfoHandler"
                    RowDataBound="RowBound"
                    OnLoad="LoadHandler"
                    DataBound="DataBound"
                    TValue="EmployeeLeaveHeader">
        </GridEvents>
        <SfDataManager AdaptorInstance="@typeof(LeaveApplicationAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
        <GridColumns>            
            @* <GridColumn Type="ColumnType.CheckBox" Width="30"></GridColumn> *@
            <GridColumn 
                HeaderText="Manage" 
                Width="40" 
                CustomAttributes="@(new Dictionary<string,object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Left">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit/View"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
            <GridColumn Field=@nameof(EmployeeLeaveHeader.EmployeeLeaveId) HeaderText="EmployeeLeaveId" AllowEditing="false" IsPrimaryKey="true" Width="80" Visible="false"></GridColumn>
            <GridForeignColumn Field=@nameof(EmployeeLeaveHeader.Employeeid)
                               HeaderText="Employee"
                               Width="100"
                               AllowEditing="true"
                               ForeignKeyField="@(nameof(ViewEmployeeDropDown.Employeeid))"
                               ForeignKeyValue="@(nameof(ViewEmployeeDropDown.EmployeeDetails))"
                               ForeignDataSource="@EmployeeData" AllowFiltering="false"
                               CustomAttributes="@(new Dictionary<string,
                    object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>
            
            <GridColumn Field=@nameof(EmployeeLeaveHeader.EmployeeLeaveNo)
                        HeaderText="Employee Leave No"
                        AllowEditing="false"
                        Width="80"
                        Visible="true"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            </GridColumn>

            <GridForeignColumn Field=@nameof(EmployeeLeaveHeader.LeaveTypeId)
                               HeaderText="Leave Type"
                               Width="80"
                               AllowEditing="false"
                               ForeignKeyField="@(nameof(ALeaveType.LeaveTypeId))"
                               ForeignKeyValue="@(nameof(ALeaveType.LeaveTypeDescription))"
                               ForeignDataSource="@LeaveTypeData"
                               AllowFiltering="false"
                               IsFrozen="false"
                               CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>
            <GridColumn Field=@nameof(EmployeeLeaveHeader.NoDaysAppliedFor)
                        HeaderText="Requested Days"
                        AllowEditing="false"
                        Width="80"
                        Visible="true"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            </GridColumn>
            <GridForeignColumn Field=@nameof(EmployeeLeaveHeader.LeaveApprovalStatusId)
                               HeaderText="Approval Status"
                               Width="80"
                               AllowEditing="false"
                               ForeignKeyField="@(nameof(ALeaveApprovalStatus.LeaveApprovalStatusId))"
                               ForeignKeyValue="@(nameof(ALeaveApprovalStatus.LeaveApprovalStatus))"
                               ForeignDataSource="@ApprovalStatusData"
                               AllowFiltering="false"
                               IsFrozen="false"
                               CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            </GridForeignColumn>                   
            
            <GridColumn Field=@nameof(EmployeeLeaveHeader.DateAdded)
                        HeaderText="Application Date"
                        Format="dd/MMMM/yyyy HH:mm:ss"
                        TextAlign="TextAlign.Justify"
                        Width="80"
                        ClipMode="ClipMode.EllipsisWithTooltip"
                        Type="ColumnType.Date"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
            </GridColumn>
        </GridColumns>
    </SfGrid>

</div>

<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationSubmitDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationSubmitYes" />
            <DialogButton Content="No" OnClick="@ComfirmationSubmitNo" />
        </DialogButtons>
    </SfDialog>
</div>

<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationYes" />
            <DialogButton Content="No" OnClick="@ComfirmationNo" />
        </DialogButtons>
    </SfDialog>
</div>

@*Reason for rejection - Supervisor*@
<div class="form-group col-md-12">
    <SfDialog @ref="@RejectLeaveDialogue" Width="80%" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @if(RejectionCommentsModel != null)
                {
                    <div class="form-row">
                        <div class="col-md-3">
                            <p>Provide Rejection Reason <span style="color:red;">*</span></p>
                        </div>
                        <div class="form-group col-md-12">
                            <SfTextBox Multiline="true" @bind-Value="@(RejectionCommentsModel.RejectionComments)" Enabled="true" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                        </div>
                    </div>
                }
                
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton OnClick="@RejectReasonYes" Content="Confirm Rejection" IsPrimary="true" />
            <DialogButton OnClick="@RejectReasonNo" Content="Cancel" />
        </DialogButtons>
    </SfDialog>
</div>

@*Approval Confirmation*@
<div class="form-group col-md-12">
    <SfDialog @ref="@ConfirmationApprovalDialogue" Width="400px" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
        <DialogTemplates>
            <Content>
                @((MarkupString)@ConfirmationText)
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationApprovalYes" />
            <DialogButton Content="No" OnClick="@ComfirmationApprovalNo" />
        </DialogButtons>
    </SfDialog>
</div>

@*Recall Confirmation*@

<div class="form-group col-md-12">

<SfDialog @ref="@ConfirmationRecallDialogue" Width="80%" Target=".mainbody" ShowCloseIcon="false" Visible="false" IsModal="true">
    <DialogTemplates>
        <Content>
            <div class="form-row">
                <div class="form-group col-md-12" style="font-weight:bolder;">
                    @((MarkupString)@ConfirmationText)
                </div>

                <div class="form-group col-md-12" style="font-weight:bolder;">
                    <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;margin-top: 10px;">LEAVE DETAIL SUMMARY</h6>
                </div>

                <div class="form-group col-md-12">
                    @if (selecteddecision != null)
                    {
                        <div class='scroll'>
                            <table class='table table-striped' style='min-width:99%;'>
                                <thead class='thead-dark'><tr><td><p style='padding:10px;font-weight:bolder;'>Employee</p></td><td><p style='padding:10px;font-weight:bolder;'>Leave Type</p></td><td><p style='padding:10px;font-weight:bolder;'>Commencement Date</p></td><td><p style='padding:10px;font-weight:bolder;'>End Date</p></td><td><p style='padding:10px;font-weight:bolder;'>No. of Days Taken</p></td></tr></thead>
                                <tbody>
                                    @{    
                                        <tr>
                                             @if (EmployeeData != null)
                                             {
                                                 var impcolor = EmployeeData.FirstOrDefault(o => o.Employeeid == @selecteddecision.Employeeid);
                                                 if (impcolor != null)
                                                 {
                                                     <td><p>@impcolor.EmployeeDetails</p></td>
                                                 }
                                             }
                                            
                                             @if (LeaveTypeData != null)
                                             {
                                                 var impcolor = LeaveTypeData.FirstOrDefault(o => o.LeaveTypeId == @selecteddecision.LeaveTypeId);
                                                 if (impcolor != null)
                                                 {
                                                     <td><p>@impcolor.LeaveTypeDescription</p></td>
                                                 }
                                             }

                                            <td>
                                                @if (selecteddecision.CommencementDate.HasValue)
                                                {
                                                    <p style='padding:10px;'>@selecteddecision.CommencementDate.Value.ToString("dd/MM/yyyy")</p>
                                                }
                                            </td>
                                            <td>
                                                @if (selecteddecision.EndDate.HasValue)
                                                {
                                                        <p style='padding:10px;'>@selecteddecision.EndDate.Value.ToString("dd/MM/yyyy")</p>
                                                }
                                            </td>

                                            <td><p style='padding:10px;'>@selecteddecision.NoDaysAppliedFor</p></td>

                                        </tr>
                                        
                                        <tr>
                                            <td colspan="5">
                                                <h6 style="background-color:#268cff; color:ghostwhite;font-weight:bolder;font-size:large; text-align:center;margin-top: 10px;">RECALL INFORMATION</h6>
                                            </td>                                                
                                        </tr>

                                        <tr>
                                           @{
                                                    //Limit selection of date beyond the employees original end date

                                                    int _year = Convert.ToDateTime(LeaveData.EndDate).Year;
                                                    int _month = Convert.ToDateTime(LeaveData.EndDate).Month;
                                                    int _day = Convert.ToDateTime(LeaveData.EndDate).Day;
                                                    MaxRecallDate = new DateTime(_year, _month, _day);

                                                    <td colspan="2">
                                                        <p>Recall Date:<span style="color:red;">*</span></p>
                                                         <SfDatePicker @bind-Value="@(LeaveData.RecallDate)" Enabled="true" ID="RecallDate" Format="dd-MM-yyyy" FloatLabelType="FloatLabelType.Never" Min="MinDate" Max='@MaxRecallDate'>
                                                            <DatePickerEvents TValue="DateTime?" ValueChange="OnRecallDateChange"></DatePickerEvents>
                                                        </SfDatePicker>
                                                    </td>

                                                    <td>
                                                    <p>No. of Days Taken:</p>
                                                        <SfNumericTextBox @bind-Value="@(LeaveData.RecallDaysTaken)" Enabled="false" Format="N0" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                    </td>

                                                    <td colspan="2">
                                                        <p>Provide Reason Why you are recalling this employee:<span style="color:red;">*</span></p>
                                                        <SfTextBox Multiline="true"
                                                                   @bind-Value="@(LeaveData.RecallReason)"
                                                                   Enabled="true"
                                                                   FloatLabelType="FloatLabelType.Never">
                                                        </SfTextBox>
                                                    </td>

                                           }                                            
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>

        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Yes" IsPrimary="true" OnClick="@ComfirmationRecallYes"/>
        <DialogButton Content="No" OnClick="@ComfirmationRecallNo" />
    </DialogButtons>
</SfDialog>
</div>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="40%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        @*<div class="loader-Loading-text"></div>*@
                        <div class="loader-Saving-text"></div>
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

<MudScrollToTop>
    <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
</MudScrollToTop>

@code {
    public int? finyearid { get; set; }    
    public Query MainQuery = new Query();
    LoginResultModel? Credentials { get; set; }
    List<AYears>? YearData { get; set; }
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    private static ViewEmployeeDropDown? employeeno { get; set; }
    private static ViewEmployeeDropDown? employeeactingofficer { get; set; }
    private static EmployeeLeaveHeader? employeeleave { get; set; }
    List<ALeaveType>? LeaveTypeData { get; set; }
    List<ALeaveApprovalStatus>? ApprovalStatusData { get; set; }
    List<EmployeeLeaveHeader>? LeaveDataSource { get; set; }
    EmployeeLeaveHeader? selecteddecision { get; set; }
    private static EmployeeLeaveHeader? LeaveData { get; set; }
    List<APublicHolidays>? PublicHolidaysData { get; set; }
    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    int currentMonth = DateTime.Now.Month;
    int currentYear = DateTime.Now.Year;
    int currentDay = DateTime.Now.Day;
    public AppraisalSearch searchpanel { get; set; } = new AppraisalSearch();
    SfGrid<EmployeeLeaveHeader> DataGrid { get; set; }

    public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime MaxDate { get; set; } = new DateTime(DateTime.Now.Year, 12, 31); 
    public DateTime MaxRecallDate { get; set; } = new DateTime(DateTime.Now.Year,DateTime.Now.Month,DateTime.Now.Day); 
    Syncfusion.Blazor.Grids.Action _previous { get; set; }
    DateTime StartDate = DateTime.Now;
    DateTime EndDate = DateTime.Now;
    private static ALeaveType? leavetypedays { get; set; }
    public static int PublicHolidays { get; set; } = 0;
    public static int numberOfDays2 { get; set; } = 0;
    public static DateTime[]? datesselectedd = null;
    public static int LeaveDays { get; set; } = 0;
    public static int RecallLeaveDays { get; set; } = 0;
    public static int TotalDaysTakenPrior { get; set; } = 0;
    public static int? AppliedDays { get; set; }
    public static int? OverrallTotal { get; set; }
    public static int TotalPaternalDays { get; set; } = 0;    
    bool CHRODD = false;
    private static ViewEmployeeDropDown? employeenosupervisor { get; set; }
    private static ViewEmployeeDropDown? employeenohodchange { get; set; }
    private static ViewEmployeeDropDown? employeenochrochange { get; set; }
    SfDialog? LoadingDialogue;
    bool IsDraftDisabled;
    bool IsSubmitDisabled;
    bool IsApproveDisabled;
    bool IsRejectDisabled;
    bool IsRecallDisabled;
    bool buttonspinner = false;
    string ConfirmationText { get; set; }
    public bool OnSubmitButtonsBool { get; set; }
    public bool EndDateEnablerBool { get; set; }
    bool ActingOfficerBool = false;
    bool IsHiddenPersonSubmit;
    bool IsHiddenDraft;
    bool IsHiddenApprove;
    bool IsHiddenRejected;
    bool IsHiddenRecall;
    SfDialog ConfirmationDialogue;
    SfDialog ConfirmationApprovalDialogue;
    SfDialog ConfirmationRecallDialogue;
    SfDialog ConfirmationSubmitDialogue;
    SfDialog RejectLeaveDialogue;
    EmployeeLeaveRejectionComments? RejectionCommentsModel { get; set; }
    private List<object>? BSCAttachmentToolbarItems { get; set; }
    private Dictionary<string, object> GridAttributes { get; set; } = new Dictionary<string, object>();
    SfSpinner? SpinnerObj;
    bool LeaveComputation = false;
    bool RejectionCommentsSection = false;
    private DialogSettings AttachmentDialog = new DialogSettings { Height = "auto", MinHeight = "auto", Width = "98%" };
    int _recallnewtotaldays = 0;
    public string maskvalue { get; set; } = "000 000 000 0";
    List<ACountry>? CountryData { get; set; }


    private List<object> ToolbarMenu = new List<object>()
    {
        new ItemModel() { Text = "Create Request", PrefixIcon = "e-add", Id = "Grid_add"}
        //,new ItemModel(){ Text = "Edit Request", PrefixIcon= "e-edit", Id="Grid_edit"}
        //new ItemModel(){ Text = "Delete Training Plan", PrefixIcon= "e-delete", Id="Grid_delete"},
        // new ItemModel(){ Text = "Update Request", PrefixIcon= "e-update", Id="Grid_update"},
        // new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="Grid_cancel"}
    };

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await Task.Delay(500);
    //         await SpinnerObj.ShowAsync();
    //         await Task.Delay(5000);
    //         await SpinnerObj.HideAsync();
    //     }
    // }


    public async void changeHandler(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ACountry> args)
    {
        if(args.ItemData != null)
        {
            maskvalue = null;
            if (!string.IsNullOrEmpty(args.ItemData.CountryCode))
            {
                foreach (var item in args.ItemData.CountryCode.Trim())
                {
                    if (item != '-')
                    {
                        maskvalue += $@"\\{item}";
                    }
                }
                maskvalue += " 000 000 000";
            }
        }
        else
        {
            maskvalue = "000 000 000 000";
        }
    }

    // public async void changeHandler(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ACountry> args)
    // {
    //     if (args.Value != null)
    //     {
    //         var _countrycode = CountryData.FirstOrDefault(o => o.CoutryId == args.ItemData.CoutryId);
    //         LeaveData.DialCode = _countrycode.CountryCode;
    //     }

    // }

    private void ToggleRejectionComments(List<EmployeeLeaveRejectionComments>? HODCommentsChange)
    {
        if (LeaveData != null && HODCommentsChange != null)
        {
            if (LeaveData.EmployeeLeaveRejectionComments == null)
            {
                LeaveData.EmployeeLeaveRejectionComments = new List<EmployeeLeaveRejectionComments>();
            }
            LeaveData.EmployeeLeaveRejectionComments = HODCommentsChange;
        }
    }

    private void ToggleBalanceScoreCardAttachment(List<EmployeeLeaveHeaderAttachment>? AttachmentChange)
    {
        if (LeaveData != null && AttachmentChange != null)
        {
            if (LeaveData.EmployeeLeaveHeaderAttachment == null)
            {
                LeaveData.EmployeeLeaveHeaderAttachment = new List<EmployeeLeaveHeaderAttachment>();
            }
            LeaveData.EmployeeLeaveHeaderAttachment = AttachmentChange;
        }
    }

    private void ToggleSearchQuery(Query? DetailData)
    {
        try
        {
            if (DetailData != null)
            {
                MainQuery = DetailData;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            StateHasChanged();
        }

    }

    private void ToggleLeaveDetailsData(List<EmployeeLeaveDetails>? DetailsChange)
    {
        if (LeaveData != null && DetailsChange != null)
        {
            if (LeaveData.EmployeeLeaveDetails == null)
            {
                LeaveData.EmployeeLeaveDetails = new List<EmployeeLeaveDetails>();
            }
            LeaveData.EmployeeLeaveDetails = DetailsChange;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            var isAuthenticated = await AuthService.CheckAuthenticationStatus();
            if (isAuthenticated == false)
            {
                navManager.NavigateTo("/LoginPage", true);
            }
            else
            {
                Credentials = await AuthService.GetUserCredentials();
                employeeno = null;
                MainQuery = new Query();

                List<Task> t = new List<Task>();

                t.Add(Task.Run(async () =>
                {
                    var responsecountry = await Http.GetAsync($"Utilities/GetCountry");
                    if (responsecountry.IsSuccessStatusCode)
                    {
                        var contentcountry = await responsecountry.Content.ReadAsStringAsync();
                        CountryData = JsonSerializer.Deserialize<List<ACountry>>(contentcountry, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetYears");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        YearData = JsonSerializer.Deserialize<List<AYears>>(content, _options);

                        var b = YearData.FirstOrDefault(o => o.YearDesc == currentYear);
                        if (b != null)
                        {
                            finyearid = b.YearId;
                            List<int?> _finyearid = new List<int?>();
                            _finyearid.Add(finyearid);
                            searchpanel.YearId = _finyearid.ToArray();
                            MainQuery = new Query().AddParams("YearId", string.Join(",", searchpanel.YearId));
                        }
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetEmployeeDD");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetLeaveType");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        LeaveTypeData = JsonSerializer.Deserialize<List<ALeaveType>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"EmployeeLeave/GetEmployeeLeaveData");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        LeaveDataSource = JsonSerializer.Deserialize<List<EmployeeLeaveHeader>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetPublicHoliday");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        PublicHolidaysData = JsonSerializer.Deserialize<List<APublicHolidays>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetLeaveApprovalStatus");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        ApprovalStatusData = JsonSerializer.Deserialize<List<ALeaveApprovalStatus>>(content, _options);
                    }
                }));

                Task _t = Task.WhenAll(t);
                await _t;

                BSCAttachmentToolbarItems = new List<object>() {
                            new ItemModel(){ Text = "Add new Attachment", PrefixIcon= "e-add", Id="BSCGrid_add"}
                            // new ItemModel(){ Text = "Edit Attachment", PrefixIcon= "e-edit", Id="BSCGrid_edit"},
                            // new ItemModel(){ Text = "Update Attachment", PrefixIcon= "e-update", Id="BSCGrid_update"},
                            // new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="BSCGrid_cancel"}
                };
            }
        }
        catch (Exception ex)
        {

        }
        finally
        {

        }

    }

    public async Task onSaveDraftForm()
    {
        try
        {
            if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                LeaveData.LeaveApprovalStatusId = 1;
                LeaveData.DateAdded = DateTime.Now;
                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    public async Task onSubmitForm()
    {
        try
        {
            // var existingdates = LeaveDataSource.Where(o => (o.LeaveApprovalStatusId == 9) && 
            // ((LeaveData.CommencementDate >= o.CommencementDate && LeaveData.CommencementDate <= o.EndDate)
            // || (LeaveData.EndDate <= o.EndDate && LeaveData.EndDate >= o.CommencementDate)
            // && (o.LeaveTypeId == LeaveData.LeaveTypeId && o.Employeeid == LeaveData.Employeeid))).ToList();

            var existingdates = LeaveDataSource.Where(o => ((o.LeaveApprovalStatusId == 9 && o.LeaveTypeId == LeaveData.LeaveTypeId && o.Employeeid == LeaveData.Employeeid) &&
            ((LeaveData.CommencementDate >= o.CommencementDate && LeaveData.CommencementDate <= o.EndDate)
            || (LeaveData.EndDate <= o.EndDate && LeaveData.EndDate >= o.CommencementDate)))).ToList();

            if(LeaveData.Employeeid == null)
            {
                toastService.ShowWarning("Please select the employee (Part I)");
            }

            else if(LeaveData.Telephone == null)
            {
                toastService.ShowWarning("Please enter your telephone contact (Part I)");
            }

            else if(LeaveData.ActingOfficerId == null)
            {
                toastService.ShowWarning("Please select the acting officer during the period of leave");
            }

            else if(LeaveData.LeaveTypeId == null)
            {
                toastService.ShowWarning("Please select the leave type");
            }

            // else if (LeaveData.LeaveTypeId == 4 && LeaveData.NoChildren == null)
            // {
            //     toastService.ShowWarning("Please enter the number of children");
            // }

            // else if (LeaveData.LeaveTypeId == 4 && LeaveData.NoChildren == null)
            // {
            //     toastService.ShowWarning("Please enter the number of children");
            // }

            else if (LeaveData.LeaveTypeId == 3 && LeaveData.EmployeeLeaveHeaderAttachment.Count <= 0)
            {
                toastService.ShowWarning("Please provide evidence for sick leave in the attachment section");
            }

            else if(LeaveData.CommencementDate == null)
            {
                toastService.ShowWarning("Please select the commencement date (Part I)");
            }

            else if(LeaveData.EndDate == null)
            {
                toastService.ShowWarning("Please select the end date (Part I)");
            }

            else if(employeenosupervisor != null && employeenosupervisor.EmailAddress == null)
            {
                toastService.ShowWarning("Supervisor email not registered in the system (Part III), kindly ask the system administrator to update the email and then continue.");
            }

            else if(LeaveData.ImmediateSupervisor == null)
            {
                toastService.ShowWarning("Please select your supervisor (Part III).");
            }

            else if(employeenohodchange != null && employeenohodchange.EmailAddress == null)
            {
                toastService.ShowWarning("Head of Department email not registered in the system (Part III), kindly ask the system administrator to update the email and then continue.");
            }
            else if (employeenochrochange != null && employeenochrochange.EmailAddress == null)
            {
                toastService.ShowWarning("CHRO email not registered in the system (Part III), kindly ask the system administrator to update the email and then continue.");
            }
            else if(LeaveData.Hod == null)
            {
                toastService.ShowWarning("Please select your Head of Department (Part III).");
            }

            else if(existingdates.Count > 0 )
            {
                toastService.ShowWarning("Selected period arleady taken. Refer to the date of last leave");
            }

            else
            {
                ConfirmationText = "<p>Are you sure you want to submit this leave request! </p>";
                await this.ConfirmationSubmitDialogue.ShowAsync();
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }
    public async Task ComfirmationSubmitYes()
    {
        try
        {  
            if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();
                LeaveData.LeaveApprovalStatusId = 2;
                LeaveData.DateAdded = DateTime.Now;
                await DataGrid.EndEditAsync();
            }            
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            await this.ConfirmationSubmitDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void ComfirmationSubmitNo()
    {
        this.ConfirmationSubmitDialogue.HideAsync();
    }

    public async Task onApproveForm()
    {
        try
        {
            ConfirmationText = "<p>Are you sure you want to approve this leave request! </p>";
            await this.ConfirmationApprovalDialogue.ShowAsync();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void ComfirmationApprovalYes()
    {
        try
        {
            if (LeaveData.Employeeid == null)
            {
                toastService.ShowWarning("Please select the employee (Part I)");
            }

            else if (LeaveData.LeaveTypeId == null)
            {
                toastService.ShowWarning("Please select the leave type");
            }

            else if (LeaveData.CommencementDate == null)
            {
                toastService.ShowWarning("Please select the commencement date (Part I)");
            }

            else if (LeaveData.EndDate == null)
            {
                toastService.ShowWarning("Please select the end date (Part I)");
            }

            else if (employeenosupervisor != null && employeenosupervisor.EmailAddress == null)
            {
                toastService.ShowWarning("Supervisor email not registered in the system (Part III), kindly ask the system administrator to update the email and then continue.");
            }

            else if (LeaveData.ImmediateSupervisor == null)
            {
                toastService.ShowWarning("Please select your supervisor (Part III).");
            }

            else if (employeenohodchange != null && employeenohodchange.EmailAddress == null)
            {
                toastService.ShowWarning("Head of Department email not registered in the system (Part IV), kindly ask the system administrator to update the email and then continue.");
            }

            else if (LeaveData.Hod == null)
            {
                toastService.ShowWarning("Please select your Head of Department (Part III).");
            }

            else if (employeenochrochange != null && employeenochrochange.EmailAddress == null)
            {
                toastService.ShowWarning("CHRO email not registered in the system (Part IV), kindly ask the system administrator to update the email and then continue.");
            }

            else if (DataGrid != null)
            {
                await LoadingDialogue.ShowAsync();

                //Supervisor Review
                if (LeaveData.LeaveApprovalStatusId == 2)
                {
                    LeaveData.LeaveApprovalStatusId = 5;
                    LeaveData.SupervisorApprovalDate = DateTime.Now;
                }

                //HOD Review
                else if (LeaveData.LeaveApprovalStatusId == 5)
                {
                    LeaveData.LeaveApprovalStatusId = 8;
                    LeaveData.HodapprovalDate = DateTime.Now;
                }

                //CHRO Review and Approval
                else if (LeaveData.LeaveApprovalStatusId ==8)
                {
                    LeaveData.LeaveApprovalStatusId = 9;
                    LeaveData.ChroapprovalDate = DateTime.Now;
                }

                await DataGrid.EndEditAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            await this.ConfirmationApprovalDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void ComfirmationApprovalNo()
    {
        this.ConfirmationApprovalDialogue.HideAsync();
    }


    public async Task onRejectForm()
    {
        try
        {
            ConfirmationText = "<p>Are you sure you want to reject this leave request! </p>";
            await this.ConfirmationDialogue.ShowAsync();  
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void ComfirmationYes()
    {
        try
        {
            RejectionCommentsModel = new EmployeeLeaveRejectionComments();
            if (LeaveData != null)
            {
                RejectionCommentsModel.EmployeeLeaveId = LeaveData.EmployeeLeaveId;
            }

            if (Credentials != null)
            {
                RejectionCommentsModel.AddedBy = Credentials.AccountHolderName;
            }
            RejectionCommentsModel.AddedDate = DateTime.Now;

            if (ConfirmationDialogue != null)
            {
                await ConfirmationDialogue.HideAsync();
            }

            if (RejectLeaveDialogue != null)
            {
                await RejectLeaveDialogue.ShowAsync();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            //DataGrid.Refresh();
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void ComfirmationNo()
    {
        this.ConfirmationDialogue.HideAsync();
    }

    //Rejection Reason
    private async Task RejectReasonYes()
    {
        try
        {
            if(string.IsNullOrEmpty(RejectionCommentsModel.RejectionComments))
            {
                toastService.ShowWarning("Please enter a reason");               
            }
            else
            {
                await LoadingDialogue.ShowAsync();
                if(LeaveData.EmployeeLeaveRejectionComments == null)
                {
                    LeaveData.EmployeeLeaveRejectionComments =new List<EmployeeLeaveRejectionComments>();
                }
                LeaveData.EmployeeLeaveRejectionComments.Add(RejectionCommentsModel);

                //Supervisor Review
                if (LeaveData.LeaveApprovalStatusId == 2)
                {
                    LeaveData.LeaveApprovalStatusId = 4;
                    LeaveData.SupervisorRejectionDate = DateTime.Now;
                    //LeaveData.DateAdded = DateTime.Now;
                }

                //HOD Review
                else if (LeaveData.LeaveApprovalStatusId == 5)
                {
                    LeaveData.LeaveApprovalStatusId = 7;
                    LeaveData.HodrejectionDate = DateTime.Now;
                    //LeaveData.DateAdded = DateTime.Now;
                }

                //CHRO Review and Approval
                else if (LeaveData.LeaveApprovalStatusId == 8)
                {
                    LeaveData.LeaveApprovalStatusId = 10;
                    LeaveData.ChrorejectionDate = DateTime.Now;
                    //LeaveData.DateAdded = DateTime.Now;
                }

                if (RejectLeaveDialogue != null)
                {
                    await RejectLeaveDialogue.HideAsync();
                }

                if (DataGrid != null)
                {
                    await DataGrid.EndEditAsync();
                }
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            // await DataGrid.Refresh();
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }

    private void RejectReasonNo()
    {
        this.RejectLeaveDialogue.HideAsync();
    }

    public async void DialogCancelBtnclicked()
    {
        if (DataGrid != null)
        {
            await DataGrid.CloseEditAsync();
        }        
    }


    #region Recall
    public async Task onRecallForm(EmployeeLeaveHeader data)
    {
        try
        {
            buttonspinner = true;
            selecteddecision = data;
            ConfirmationText = "<p>Are you sure you want to recall this employee from leave! </p>";
            await this.ConfirmationRecallDialogue.ShowAsync();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void ComfirmationRecallYes()
    {
        try
        { 
            if(LeaveData.RecallDate == null)
            {
                toastService.ShowWarning("Please select the recall date");
            }

            else if(string.IsNullOrEmpty(LeaveData.RecallReason))
            {
                toastService.ShowWarning("Please enter the reason why you are recalling the employee");
            }
            else
            {
                await LoadingDialogue.ShowAsync();                
                LeaveData.LeaveApprovalStatusId = 13;
                LeaveData.EndDate = LeaveData.RecallDate.Value.AddDays(-1);// Subtract one from the entered recall date to get the last leave day
                LeaveData.NoDaysAppliedFor = LeaveData.RecallDaysTaken;
                LeaveData.TotalDays = (LeaveData.TotalDays-_recallnewtotaldays);            

                await DataGrid.EndEditAsync();
                await this.ConfirmationRecallDialogue.HideAsync();
                buttonspinner = false;
            }

            StateHasChanged();
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {
            await LoadingDialogue.HideAsync();
        }
    }

    private void ComfirmationRecallNo()
    {
        this.ConfirmationRecallDialogue.HideAsync();
        buttonspinner = false;
    }

    #endregion Recall

    public string GetLeaveRequestHeader(EmployeeLeaveHeader Value)
    {
        if (Value.EmployeeLeaveId == 0)
        {
            return "New Leave Request";
        }
        else
        {
            // return "Edit " + Value.EmployeeFullName;
            return "Edit Records";
        }
    }

    public async void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeeno = args.ItemData;        
    }

    public async void OnActingOfficerChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeeactingofficer = args.ItemData;
    }

    public async void OnEmployeeSupervisorChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?,ViewEmployeeDropDown> args)
    {
        employeenosupervisor = args.ItemData;  
    }

    public async void OnEmployeeHODChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeenohodchange = args.ItemData;
    }

    public async void OnEmployeeCHROChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeDropDown> args)
    {
        employeenochrochange = args.ItemData;
    }

    public void OnLeaveTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ALeaveType> args)
    {
        leavetypedays = args.ItemData;
        int? leavetypeId = args.ItemData.LeaveTypeId;
        EndDateEnablerBool = true;

        LeaveData.CommencementDate = null;
        LeaveData.EndDate = null;
        LeaveData.TotalDays = null;
        LeaveData.NoChildren = null;
        LeaveData.NoDaysAppliedFor = null;
        TotalDaysTakenPrior = 0;

        //For Sick Leave - Open the Dates
        if(args.ItemData.LeaveTypeId == 3)
        {
            MinDate = new DateTime(2000, 01, 01);
            MaxDate = new DateTime(DateTime.Now.Year, 12, 31); 
        }
        else
        {
            MinDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
            MaxDate = new DateTime(DateTime.Now.Year, 12, 31); 
        }

        StateHasChanged();
    }

    private async Task ChildrenChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> args)
    {

    }

    protected async Task OnMaternityDateChange(ChangedEventArgs<DateTime?> args)
    {
        leavetypedays = LeaveTypeData.FirstOrDefault(o => o.LeaveTypeId == LeaveData.LeaveTypeId);
        StartDate = Convert.ToDateTime(args.Value);

        //Annual
        if (LeaveData.LeaveTypeId == 1 || LeaveData.LeaveTypeId == 5)
        {
            EndDateEnablerBool = true;
            LeaveData.EndDate = null;
            TotalDaysTakenPrior = 0;
            LeaveData.NoDaysAppliedFor = 0;
            LeaveData.TotalDays = 0;
        }
        //Compassionate and Maternity and Sick Leave
        else if(LeaveData.LeaveTypeId == 2 || LeaveData.LeaveTypeId == 3/*  || LeaveData.LeaveTypeId == 5  */)
        {                        
            DateTime EndDateWeekDays = GetWeekDaysOnly(StartDate, leavetypedays.LeaveDaysPerYear.Value).AddDays(0); // Subtract one day inorder to get end date as the actual date the leave ends

            PublicHolidays = GetNumberOfPublicHolidays(StartDate, EndDateWeekDays);
            LeaveData.EndDate = EndDateWeekDays.AddDays(PublicHolidays);

            numberOfDays2 = GetNumberOfDates(StartDate, EndDateWeekDays);
            datesselectedd = GetDatesBetween(StartDate, EndDateWeekDays).ToArray();

            LeaveData.TotalDays = leavetypedays.LeaveDaysPerYear.Value;

            //Below is to assign the total days applied for
            //Maternity leave
            if(LeaveData.LeaveTypeId == 2)
            {
                EndDateEnablerBool = false;
                LeaveData.NoDaysAppliedFor = leavetypedays.LeaveDaysPerYear.Value;
            }
            //Sick leave
            else if(LeaveData.LeaveTypeId == 3)
            {
                EndDateEnablerBool = true;
                LeaveData.NoDaysAppliedFor = leavetypedays.LeaveDaysPerYear.Value;
            }   

            //Compassionate leave
            // else if(LeaveData.LeaveTypeId == 5)
            // {
            //     EndDateEnablerBool = false;
            //     LeaveData.NoDaysAppliedFor = leavetypedays.LeaveDaysPerYear.Value;
            // }             
        }

        //Parternity
        else if(LeaveData.LeaveTypeId == 4 )
        {
            EndDateEnablerBool = false;
            TotalPaternalDays = leavetypedays.LeaveDaysPerYear.Value;
            // TotalPaternalDays = (leavetypedays.LeaveDaysPerYear.Value * Convert.ToInt32(LeaveData.NoChildren));

            DateTime EndDateWeekDays = GetWeekDaysOnly(StartDate, TotalPaternalDays).AddDays(0);

            LeaveData.TotalDays = TotalPaternalDays;
            PublicHolidays = GetNumberOfPublicHolidays(StartDate, EndDateWeekDays);
            LeaveData.EndDate = EndDateWeekDays.AddDays(PublicHolidays);
            LeaveData.NoDaysAppliedFor = TotalPaternalDays;
        }


        StateHasChanged();
    }

    public static DateTime GetWeekDaysOnly(DateTime date, int days)
    {
        if (days < 0)
        {
            throw new ArgumentException("days cannot be negative", "days");
        }

        if (days == 0) return date;

        if (date.DayOfWeek == DayOfWeek.Saturday)
        {
            date = date.AddDays(2);
            days -= 1;
        }
        else if (date.DayOfWeek == DayOfWeek.Sunday)
        {
            date = date.AddDays(1);
            days -= 1;
        }

        date = date.AddDays(days / 5 * 7);
        int extraDays = days % 5;

        if ((int)date.DayOfWeek + extraDays > 5)
        {
            extraDays += 2;
        }

        return date.AddDays(extraDays);
    }

    //Get number of public holidays
    public int GetNumberOfPublicHolidays(DateTime from, DateTime to)
    {
        PublicHolidays = PublicHolidaysData.Where(o => o.HolidayDate >= from && o.HolidayDate <= to).Count();
        return PublicHolidays;
    }

    //Function to return number of days minus weekends
    static int GetNumberOfDates(DateTime from, DateTime to)
    {
        if (to < from)
            throw new ArgumentException("To cannot be smaller than from.", nameof(to));


        if ((to.Date == from.Date) && (from.DayOfWeek != DayOfWeek.Saturday && from.DayOfWeek != DayOfWeek.Sunday))
        {
            return 1;
        }

        else if ((to.Date == from.Date) && (from.DayOfWeek == DayOfWeek.Saturday && from.DayOfWeek == DayOfWeek.Sunday))
        {
            return 0;
        }

        int n = 0;
        DateTime nextDate = from;
        while(nextDate <= to.Date)
        {
            if (nextDate.DayOfWeek != DayOfWeek.Saturday && nextDate.DayOfWeek != DayOfWeek.Sunday)
                n++;
            nextDate = nextDate.AddDays(1);
        }

        return n;
    }

    //Function to get all dates between two dates
    public List<DateTime> GetDatesBetween(DateTime startDate, DateTime endDate)
    {
        List<DateTime> allDates = new List<DateTime>();

        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
        {
            var countdata = PublicHolidaysData?.FirstOrDefault(o => o.HolidayDate == date);

            if ((date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday) && (countdata == null))
            {
                allDates.Add(date.Date);
            }            
        }

        return allDates;
    }


    protected async Task OnEndDateChange(ChangedEventArgs<DateTime?> value)
    {
        StartDate = Convert.ToDateTime(LeaveData.CommencementDate);
        EndDate = Convert.ToDateTime(LeaveData.EndDate);
        numberOfDays2 = GetNumberOfDates(StartDate, EndDate);
        datesselectedd = GetDatesBetween(StartDate, EndDate).ToArray();
        PublicHolidays = GetNumberOfPublicHolidays(StartDate, EndDate);
        LeaveDays = numberOfDays2 - PublicHolidays;

        var getutilizeddays = LeaveDataSource.OrderByDescending(x => x.TotalDays)
        .FirstOrDefault(o => o.Employeeid == LeaveData.Employeeid &&
            o.LeaveTypeId == LeaveData.LeaveTypeId && o.LeaveApprovalStatusId == 9);

        LeaveData.NoDaysAppliedFor = LeaveDays;

        AppliedDays = LeaveData.TotalDays;
        if(getutilizeddays != null)
        {
            LeaveData.TotalDays = LeaveData.NoDaysAppliedFor + getutilizeddays.TotalDays.Value;
            TotalDaysTakenPrior = getutilizeddays.TotalDays.Value;
        }        
        else
        {
            LeaveData.TotalDays = LeaveData.NoDaysAppliedFor + 0;
            TotalDaysTakenPrior = 0;
        }
        StateHasChanged();
    }

    protected async Task OnRecallDateChange(ChangedEventArgs<DateTime?> value)
    {
        StartDate = Convert.ToDateTime(LeaveData.CommencementDate);
        EndDate = Convert.ToDateTime(LeaveData.RecallDate).AddDays(-1); // Subtract one from the entered recall date to get the last leave day

        numberOfDays2 = GetNumberOfDates(StartDate, EndDate);
        datesselectedd = GetDatesBetween(StartDate, EndDate).ToArray();
        PublicHolidays = GetNumberOfPublicHolidays(StartDate, EndDate);
        RecallLeaveDays = numberOfDays2 - PublicHolidays;

        LeaveData.RecallDaysTaken = RecallLeaveDays;

        //Get New Total
        _recallnewtotaldays = Convert.ToInt32(LeaveData.TotalDays - RecallLeaveDays);

        StateHasChanged();
    }

    public async void ActionCompleteMain(ActionEventArgs<EmployeeLeaveHeader> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) ||
        args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            DataGrid.PreventRender(false);
        }
    }

    public async void ActionBeginMain(ActionEventArgs<EmployeeLeaveHeader> Args)
    {
        try
        {
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                _previous = Args.RequestType;
                LeaveData = null;
                OnSubmitButtonsBool = true;
                EndDateEnablerBool = true;

                //Show buttons on add 
                IsHiddenDraft = false;
                IsHiddenPersonSubmit = false;
                IsHiddenApprove = true;
                IsHiddenRejected = true;
                IsHiddenRecall = true;

                //Clear fields on add

                // leavetypedays.LeaveDaysPerYear = 0;
                TotalDaysTakenPrior = 0;

                Args.RowData.DateAdded = DateTime.Now;
                Args.RowData.FinancialYearId = finyearid;
                Args.RowData.RecordStatusId = 1;
                Args.RowData.LeaveApprovalStatusId = 2;

                //Assign Logged in Employee
                if(Credentials.StaffId > 0)
                {
                    Args.RowData.Employeeid = Credentials.StaffId;
                    Args.RowData.AddedBy = Credentials.AccountHolderName;

                    //Get last leave application date
                    if (LeaveDataSource != null)
                    {
                        employeeleave = LeaveDataSource.OrderByDescending(x => x.TotalDays)
                        .FirstOrDefault(o => o.Employeeid == Credentials.StaffId &&
                            o.LeaveApprovalStatusId == 9 && o.FinancialYearId == finyearid);
                    }
                }

                if(EmployeeData != null)
                {
                    employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid);
                    employeenosupervisor = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid);
                    employeenohodchange = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid);
                    //employeeactingofficer = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid);

                    //Assign the CHRO
                    var _data = EmployeeData.FirstOrDefault(o => o.JibTitleId == 44);

                    if (_data != null)
                    {
                        Args.RowData.Chro = _data.Employeeid;
                        employeenochrochange = EmployeeData.FirstOrDefault(o => o.Employeeid == _data.Employeeid);
                    }


                    //Assign HOD on Add
                    if(employeenohodchange != null && employeenohodchange.HoDemployeeId != null)
                    {
                        Args.RowData.Hod = employeenohodchange.HoDemployeeId;
                    }


                }

                Args.RowData.EmployeeLeaveDetails = new List<EmployeeLeaveDetails>();
                Args.RowData.EmployeeLeaveHeaderAttachment = new List<EmployeeLeaveHeaderAttachment>();
            }

            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                _previous = Args.RequestType;
                var _employeedetail = EmployeeData.FirstOrDefault(o=>o.Employeeid == Credentials.StaffId);

                //Load the current data here

                List<Task> t = new List<Task>();

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetEmployeeDD");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(content, _options);
                    }
                }));

                t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"EmployeeLeave/GetEmployeeLeaveData");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        LeaveDataSource = JsonSerializer.Deserialize<List<EmployeeLeaveHeader>>(content, _options);
                    }
                }));

                Task _t = Task.WhenAll(t);
                await _t;

                if(EmployeeData != null)
                {
                    employeeno = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid);
                    employeenosupervisor = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.ImmediateSupervisor);
                    employeenohodchange = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Hod);
                    employeeactingofficer = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.ActingOfficerId);
                    employeenochrochange = EmployeeData.FirstOrDefault(o => o.Employeeid == Args.RowData.Chro);
                }

                Args.RowData.DateAdded = DateTime.Now;

                if(Credentials.StaffId > 0)
                {
                    Args.RowData.AddedBy = Credentials.AccountHolderName;

                    //Get last leave application date
                    if (LeaveDataSource != null)
                    {
                        employeeleave = LeaveDataSource.OrderByDescending(x => x.TotalDays)
                        .FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid &&
                            o.LeaveApprovalStatusId == 9 && o.FinancialYearId == Args.RowData.FinancialYearId);
                    }
                }

                leavetypedays = LeaveTypeData.FirstOrDefault(o => o.LeaveTypeId == Args.RowData.LeaveTypeId);

                //Leave Information
                StartDate = Convert.ToDateTime(Args.RowData.CommencementDate);
                EndDate = Convert.ToDateTime(Args.RowData.EndDate);
                numberOfDays2 = GetNumberOfDates(StartDate, EndDate);
                datesselectedd = GetDatesBetween(StartDate, EndDate).ToArray();
                PublicHolidays = GetNumberOfPublicHolidays(StartDate, EndDate);
                LeaveDays = numberOfDays2 - PublicHolidays;

                var getutilizeddays = LeaveDataSource.OrderByDescending(x => x.TotalDays)
                .FirstOrDefault(o => o.Employeeid == Args.RowData.Employeeid &&
                    o.LeaveTypeId == Args.RowData.LeaveTypeId && o.LeaveApprovalStatusId == 9);

                Args.RowData.NoDaysAppliedFor = LeaveDays;


                if(getutilizeddays != null)
                {
                    Args.RowData.TotalDays = Args.RowData.NoDaysAppliedFor + getutilizeddays.TotalDays.Value;
                    TotalDaysTakenPrior = getutilizeddays.TotalDays.Value;

                }    

                if (Args.RowData.EmployeeLeaveDetails == null)
                {
                    Args.RowData.EmployeeLeaveDetails = new List<EmployeeLeaveDetails>();
                }

                if (Args.RowData.EmployeeLeaveHeaderAttachment == null)
                {
                    Args.RowData.EmployeeLeaveHeaderAttachment = new List<EmployeeLeaveHeaderAttachment>();
                }

                //New
                //Draft
                if(Args.RowData.LeaveApprovalStatusId == 1)
                {
                    IsHiddenRecall = true;

                    //If person editing is the same as the employee, hide buttons and not draft
                    if (Args.RowData.Employeeid == Credentials.StaffId)
                    {
                        //Buttons
                        IsHiddenDraft = false;
                        IsHiddenPersonSubmit = false;
                        IsHiddenApprove = true;
                        IsHiddenRejected = true;
                        LeaveComputation = false;

                        OnSubmitButtonsBool = true;
                        EndDateEnablerBool = true;
                    }
                    else
                    {
                        LeaveComputation = false;
                        OnSubmitButtonsBool = false;
                        EndDateEnablerBool = false;
                        IsHiddenDraft = true;
                        IsHiddenPersonSubmit = true;
                        IsHiddenApprove = true;
                        IsHiddenRejected = true;
                    }
                }

                //Under Review By Supervisor
                else if(Args.RowData.LeaveApprovalStatusId == 2)
                {
                    OnSubmitButtonsBool = false;
                    EndDateEnablerBool = false;
                    IsHiddenRecall = true;

                    if ((Args.RowData.Employeeid != Credentials.StaffId) && (Args.RowData.ImmediateSupervisor == Credentials.StaffId))
                    {
                        //Buttons
                        IsHiddenDraft = true;
                        IsHiddenPersonSubmit = true;
                        IsHiddenApprove = false;
                        IsHiddenRejected = false;

                        LeaveComputation = false;
                    }
                    else
                    {
                        //Buttons
                        IsHiddenDraft = true;
                        IsHiddenPersonSubmit = true;
                        IsHiddenApprove = true;
                        IsHiddenRejected = true;

                        LeaveComputation = false;
                    }
                }

                //Approved By Supervisor
                else if(Args.RowData.LeaveApprovalStatusId == 3)
                {
                    OnSubmitButtonsBool = false;
                    EndDateEnablerBool = false;
                    IsHiddenRecall = true;

                    //Buttons
                    IsHiddenDraft = true;
                    IsHiddenPersonSubmit = true;
                    IsHiddenApprove = true;
                    IsHiddenRejected = true;

                    LeaveComputation = false;
                }

                //Rejected By Supervisor
                else if(Args.RowData.LeaveApprovalStatusId == 4)
                {
                    IsHiddenRecall = true;

                    //Owner of rejected application
                    if ((Args.RowData.Employeeid == Credentials.StaffId))
                    {
                        //Buttons
                        IsHiddenDraft = false;
                        IsHiddenPersonSubmit = false;
                        IsHiddenApprove = true;
                        IsHiddenRejected = true;

                        LeaveComputation = false;
                        RejectionCommentsSection = true;

                        OnSubmitButtonsBool = true;
                        EndDateEnablerBool = true;
                    }
                    else
                    {
                        //Buttons
                        IsHiddenDraft = true;
                        IsHiddenPersonSubmit = true;
                        IsHiddenApprove = true;
                        IsHiddenRejected = true;

                        LeaveComputation = false;
                        RejectionCommentsSection = true;

                        OnSubmitButtonsBool = false;
                        EndDateEnablerBool = false;
                    }
                }

                //Under Review By HOD
                else if(Args.RowData.LeaveApprovalStatusId == 5)
                {
                    OnSubmitButtonsBool = false;
                    EndDateEnablerBool = false;
                    IsHiddenRecall = true;

                    //If person editing is not the same as the employee and is selected as the hod and status is 5-Under Review By HOD
                    if ((Args.RowData.Employeeid != Credentials.StaffId)
                    && (Args.RowData.Hod == Credentials.StaffId))
                    {
                        //Buttons
                        IsHiddenDraft = true;
                        IsHiddenPersonSubmit = true;
                        IsHiddenApprove = false;
                        IsHiddenRejected = false;

                        LeaveComputation = false;
                    }
                    else
                    {
                        //Buttons
                        IsHiddenDraft = true;
                        IsHiddenPersonSubmit = true;
                        IsHiddenApprove = true;
                        IsHiddenRejected = true;

                        LeaveComputation = false;
                    }
                }

                //Approved By HOD
                else if(Args.RowData.LeaveApprovalStatusId == 6)
                {
                    OnSubmitButtonsBool = false;
                    EndDateEnablerBool = false;
                    IsHiddenRecall = true;

                    //Buttons
                    IsHiddenDraft = true;
                    IsHiddenPersonSubmit = true;
                    IsHiddenApprove = true;
                    IsHiddenRejected = true;

                    LeaveComputation = false;
                }

                //Rejected By HOD
                else if(Args.RowData.LeaveApprovalStatusId == 7)
                {
                    IsHiddenRecall = true;

                    //Owner of rejected application
                    if ((Args.RowData.Employeeid == Credentials.StaffId))
                    {
                        //Buttons
                        IsHiddenDraft = false;
                        IsHiddenPersonSubmit = false;
                        IsHiddenApprove = true;
                        IsHiddenRejected = true;

                        LeaveComputation = false;
                        RejectionCommentsSection = true;

                        OnSubmitButtonsBool = true;
                        EndDateEnablerBool = true;
                    }
                    else
                    {
                        //Buttons
                        IsHiddenDraft = true;
                        IsHiddenPersonSubmit = true;
                        IsHiddenApprove = true;
                        IsHiddenRejected = true;

                        LeaveComputation = false;
                        RejectionCommentsSection = true;

                        OnSubmitButtonsBool = false;
                        EndDateEnablerBool = false;
                    }
                }

                //Under Review By CHRO
                else if(Args.RowData.LeaveApprovalStatusId == 8)
                {
                    OnSubmitButtonsBool = false;
                    EndDateEnablerBool = false;
                    IsHiddenRecall = true;

                    if ((Args.RowData.Employeeid != Credentials.StaffId)
                    && (Args.RowData.Chro == Credentials.StaffId))
                    {
                        //Buttons
                        IsHiddenDraft = true;
                        IsHiddenPersonSubmit = true;
                        IsHiddenApprove = false;
                        IsHiddenRejected = false;

                        LeaveComputation = true;
                    }

                    else
                    {
                        //Buttons
                        IsHiddenDraft = true;
                        IsHiddenPersonSubmit = true;
                        IsHiddenApprove = true;
                        IsHiddenRejected = true;

                        LeaveComputation = false;
                    }
                }

                //Approved By CHRO
                else if(Args.RowData.LeaveApprovalStatusId == 9)
                {
                    OnSubmitButtonsBool = false;
                    EndDateEnablerBool = false;

                    //Buttons
                    IsHiddenDraft = true;
                    IsHiddenPersonSubmit = true;
                    IsHiddenApprove = true;
                    IsHiddenRejected = true;
                                        
                    //Show recall button for CHRO and HOD for a particular application
                    if ((_employeedetail != null && _employeedetail.JibTitleId == 44 ) || Args.RowData.Hod == Credentials.StaffId)
                    {
                        IsHiddenRecall = false;
                    }
                    else
                    {
                        IsHiddenRecall = true;
                    }

                }

                //Rejected By CHRO
                else if(Args.RowData.LeaveApprovalStatusId == 10)
                {
                    //Owner of rejected application
                    if ((Args.RowData.Employeeid == Credentials.StaffId))
                    {
                        //Buttons
                        IsHiddenDraft = false;
                        IsHiddenPersonSubmit = false;
                        IsHiddenApprove = true;
                        IsHiddenRejected = true;

                        OnSubmitButtonsBool = true;
                        EndDateEnablerBool = true;
                    }
                    else
                    {
                        //Buttons
                        IsHiddenDraft = true;
                        IsHiddenPersonSubmit = true;
                        IsHiddenApprove = true;
                        IsHiddenRejected = true;

                        OnSubmitButtonsBool = false;
                        EndDateEnablerBool = false;

                    }
                }

                //Recall
                else if(Args.RowData.LeaveApprovalStatusId == 13)
                {
                    IsHiddenRecall = true;
                    OnSubmitButtonsBool = false;
                    EndDateEnablerBool = false;

                    //Buttons
                    IsHiddenDraft = true;
                    IsHiddenPersonSubmit = true;
                    IsHiddenApprove = true;
                    IsHiddenRejected = true;

                    //Show Leave computation for CHRO
                    if ((_employeedetail != null && _employeedetail.JibTitleId == 44 ) || Args.RowData.Hod == Credentials.StaffId)
                    {
                        LeaveComputation = true;
                    }
                    else
                    {
                        LeaveComputation = false;
                    }
                                        
                }

                StateHasChanged();
            }
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                
            }

        }
        catch(Exception ex)
        {

        }
        finally
        {
            
        }
        
    }

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<EmployeeLeaveHeader> Args)
    {
        if (Args.Column.Field == "LeaveApprovalStatusId")
        {
            if(ApprovalStatusData != null)
            {
                var impcolor = ApprovalStatusData.FirstOrDefault(o => o.LeaveApprovalStatusId == Args.Data.LeaveApprovalStatusId);
                if (impcolor != null)
                {
                    Args.Cell.AddStyle(new string[] { $"background-color:{impcolor.LeaveApprovalStatusColor}", $"color:{impcolor.LeaveApprovalTextColor}" });
                }
            }
            
        }
    }

    public void RowBound(RowDataBoundEventArgs<EmployeeLeaveHeader> Args)
    {

    }

    public async void LoadHandler()
    {
        SpinnerObj.ShowAsync();
        GridAttributes.Add("disable", "yes");
    }

    public async void DataBound()
    {
        GridAttributes["disable"] = "no";
        await SpinnerObj.HideAsync();
    }

    #region LeaveRequest

    public class LeaveApplicationAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        IAuthenticationService _AuthService;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;
        private readonly ILogger<LeaveApplicationAdapter> _logger;

        public LeaveApplicationAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , IAuthenticationService authservice, ApiConfig apiConfig,
        ILogger<LeaveApplicationAdapter> logger)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            string? _YearId = null;

            if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
            {
                var val = dataManagerRequest.Params;

                if (val.FirstOrDefault(o => o.Key == "YearId").Value != null)
                {
                    _YearId = val.FirstOrDefault(o => o.Key == "YearId").Value.ToString();
                }
            }

            var data = new List<EmployeeLeaveHeader>();
            try
            {
                var response = await Http.GetAsync($"EmployeeLeave/GetEmployeeLeaveData?finyearid={_YearId}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<EmployeeLeaveHeader>>(content, _options);
                }

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<EmployeeLeaveHeader>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;

                var val = (value as EmployeeLeaveHeader);
                if (val != null)
                {
                    if (val.EmployeeLeaveId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"EmployeeLeave/CreateEmployeeLeave?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as EmployeeLeaveHeader);
                if (val != null)
                {
                    if (val.EmployeeLeaveId != 0)
                    {
                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"EmployeeLeave/UpdateEmployeeLeave?_baseurl={_baseurl}", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<Response>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }

    }

    #endregion LeaveRequest
}
