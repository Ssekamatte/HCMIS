@page "/RequestLeave"
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using HCMIS.ViewModel
@using System.Collections
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject SystemSettings _SystemSettings
@inject ApiConfig _ApiConfig;
@inject AppState AppState
@inject NavigationManager Navigation
@inject DocumentUploadModel _DocumentUploadModel;

<div class="row">
    <div class="col-md-12">
        <SfTab HeaderPlacement="HeaderPosition.Left"> 
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="Leave Application"></TabHeader>
                    </ChildContent>
                     <ContentTemplate>
            <div style="margin:10px; width:100%;">
            <EditForm Model="@LeaveData" OnValidSubmit="@SaveProfile" class="row">
                <div class="row">
                    <div class="col-md-12">
                        <p class="alert alert-primary"> <b>Application Form</b></p>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-4">
                            <p>Department / Section:<span style="color:red;">(*)</span></p>
                                 <SfDropDownList @bind-Value="@(LeaveData.DepartmentId)" Enabled="true" TItem="ADepartment" TValue="int?" DataSource="@DepartmentData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                               <DropDownListFieldSettings Value="@nameof(ADepartment.DepartmentId)" Text="@nameof(ADepartment.DepartmentDescription)"></DropDownListFieldSettings>
                             <DropDownListEvents TValue="int?" TItem="ADepartment" ValueChange="OnDepartmentChange"></DropDownListEvents>
                               </SfDropDownList>
                               <p> <ValidationMessage For="@(() => LeaveData.DepartmentId)" /></p>
                        </div>
                        <div class="col-md-4">
                            <p>Employee Number:<span style="color:red;">(*)</span></p>
                               <SfDropDownList @bind-Value="@(LeaveData.EmployeeId)" Query="@DepartmentChange" Enabled="true" TItem="ViewEmployeeLeaveDetails" TValue="int?" DataSource="@EmployeeLeaveData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                               <DropDownListFieldSettings Value="@nameof(ViewEmployeeLeaveDetails.Employeeid)" Text="@nameof(ViewEmployeeLeaveDetails.EmployeeNumber)"></DropDownListFieldSettings>
                               <DropDownListEvents TValue="int?" TItem="ViewEmployeeLeaveDetails" ValueChange="OnEmployeeChange"></DropDownListEvents>
                               </SfDropDownList>
                                <p> <ValidationMessage For="@(() => LeaveData.EmployeeId)" /></p>
                        </div>
                
                        @if (employeeno != null)
                        {
                            <div class="col-md-4">
                                <p>Employee Name:<span style="color:red;">(*)</span></p><br>
                                <p>@employeeno.EmployeeDetails</p>
                            </div>
                          <div class="col-md-4">
                            <p>Position:<span style="color:red;">(*)</span></p><br>
                            <p>   @employeeno.JobTitleDescription</p>
                        </div>
                           <div class="col-md-4">
                            <p>Leave Entitlement:<span style="color:red;">(*)</span></p><br>
                            <p>   @employeeno.LeaveEntitlement</p>
                        </div>
                 
                        }
                         <div class="col-md-4">
                            <p>Leave Type Requested:<span style="color:red;">(*)</span></p>
                               <SfDropDownList @bind-Value="@(LeaveData.EmployeeLeaveTypeId)" Enabled="true" TItem="ALeaveType" TValue="int?" DataSource="@EmployeeLeaveTypeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                               <DropDownListFieldSettings Value="@nameof(ALeaveType.LeaveTypeId)" Text="@nameof(ALeaveType.LeaveTypeDescription)"></DropDownListFieldSettings>
                              </SfDropDownList>
                               <p> <ValidationMessage For="@(() => LeaveData.EmployeeLeaveTypeId)" /></p>
                        </div>
                         <div class="col-md-4">
                            <p> No. of leave days applied for:<span style="color:red;">(*)</span></p>
                              <SfNumericTextBox Type="InputType.Text" @bind-Value="@LeaveData.DaysAppliedFor" CssClass="form-control" Placeholder="Days applied for" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                            <p> <ValidationMessage For="@(() => LeaveData.DaysAppliedFor)" /></p>
                        </div>
                         <div class="col-md-4">
                            <p> Last working day:<span style="color:red;">(*)</span></p>
                             <SfDatePicker @bind-Value="@(LeaveData.LastWorkingDay)" Placeholder="Select Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                            <p> <ValidationMessage For="@(() => LeaveData.LastWorkingDay)" /></p>
                        </div>
                         <div class="col-md-4">
                            <p> Date of Resumption of work:<span style="color:red;">(*)</span></p>
                            <SfDatePicker @bind-Value="@(LeaveData.DateOfResumptionToWork)" Placeholder="Select Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                            <p> <ValidationMessage For="@(() => LeaveData.DateOfResumptionToWork)" /></p>
                        </div>
                         <div class="col-md-4">
                             <p> Check box for Yes</p>
                              <SfCheckBox Label="Salary Requested in Advance" @bind-Checked="@LeaveData.SalaryRequestedInAdvance">  </SfCheckBox>
                        </div>

                    </div>
                    <br>
      
                    <div class="form-group col-md-12">
                        <SfButton CssClass="e-primary" @onclick="SubmitRequest">Send Request</SfButton>
                         <SfButton CssClass="e-secondary" >Cancel</SfButton>
                    </div>

                </div>
            </EditForm>
          </div>
                     </ContentTemplate>
                     </TabItem>
                     <TabItem>
                         <ChildContent>
                             <TabHeader Text="Head of Department"></TabHeader>
                         </ChildContent>
                         <ContentTemplate>
                                   <div style="margin:10px; width:100%;">
                            <HeadofDepartmentApprovalPage></HeadofDepartmentApprovalPage>
                                   </div>
                         </ContentTemplate>
                     </TabItem>
                </TabItems>
        </SfTab>
     </div>
</div>



@code {
    #region Toasters
    public static string? ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast? DeleteToastObj;
    private string? ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    string? RegisterError { get; set; }
    [Parameter]
    public string? AccessToken { get; set; }
    Query DepartmentChange { get; set; } = new();
    Query mainQuery { get; set; } = new();
    string? RegisterSuccess { get; set; }
    SfSpinner? SavingSpinner;
    SfTab? Tab;
    SfDialog? SavingDialog;
    EmployeeLeave? LeaveData { get; set; } = new();
    List<ADepartment>? DepartmentData { get; set; }
    List<ALeaveType>? EmployeeLeaveTypeData { get; set; }
    List<ViewEmployeeLeaveDetails>? EmployeeLeaveData { get; set; }
    private static ViewEmployeeLeaveDetails employeeno { get; set; }
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    LeaveApplicationModel inputmodel { get; set; } = new LeaveApplicationModel();
    public void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewEmployeeLeaveDetails> args)
    {
        employeeno = args.ItemData;
    }
    public void OnDepartmentChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ADepartment> args)
    {
        if(args.ItemData!=null){
            DepartmentChange = new Query().Where(new WhereFilter() { Field = "DepartmentId", Operator="equal", value=args.ItemData.DepartmentId, IgnoreCase=false, IgnoreAccent=false });
        }
    }
    int TabNumber { get; set; } = 0;
    private async Task SubmitRequest()
    {
        try
        {
            await SavingDialog.ShowAsync();
            LeaveData.IsSubmitted = true;
            LeaveData.LeaveApprovalStatusId = 2;
            LeaveData.LeaveRequestDate = DateTime.Now;

            string json = Newtonsoft.Json.JsonConvert.SerializeObject(LeaveData);
            StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}EmployeeLeave", httpContent);

            if (result.IsSuccessStatusCode)
            {
                TabNumber = 0;
                //  await Tab.EnableTabAsync(3, false);
                //  await Tab.EnableTabAsync(2, false);
                await Tab.EnableTabAsync(1, false);
                await Tab.SelectAsync(0);
                await ToastObj.Show(new ToastModel { Title = "Success!", Content = "Your leave request has been successfully submitted  for Approval.", CssClass = "e-toast-success", Icon = "e-success toast-icons" });
            }
            else
            {
                await ToastObj.Show(new ToastModel { Title = "Error!", Content = "An error occured that prevented your leave request from being submitted. Please contact the IT department for assistance", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
            }
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await SavingDialog.HideAsync();
        }
    }

    private async Task SaveProfile()
    {
        try
        {
            await SavingSpinner.ShowAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _SystemSettings.AccessToken);
            string json = Newtonsoft.Json.JsonConvert.SerializeObject(inputmodel);
            StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            var result = await Http.PutAsync($"{_ApiConfig.BaseUrl}EmployeeLeave", httpContent);
            if (result.IsSuccessStatusCode)
            {
                var content = await result.Content.ReadAsStringAsync();
                var data = JsonSerializer.Deserialize<Response>(content, _options);
                if (data != null)
                {
                    if (data.IsSuccess)
                    {
                        RegisterSuccess = $"Success: {data.Message}";
                    }
                    else
                    {
                        RegisterError = $"Error: {data.Message}";
                    }
                }

                ///RegisterSuccess
            }
            else
            {
                RegisterError = $"Error: {result.ReasonPhrase}";
            }

        }
        catch (Exception ex)
        {
            RegisterError = $"Error: {ex.Message}";
        }
        finally
        {
            await SavingSpinner.HideAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await _SystemSettings.GetLoginCredentials();
            mainQuery = new();
            mainQuery.AddParams("AccessToken", AccessToken).AddParams("BaseUrl", _ApiConfig.BaseUrl);

            inputmodel = new();
            //   inputmodel.BscMdl = new();
            var response = await Http.GetAsync($"{_ApiConfig.BaseUrl}EmployeeLeave/GetLeavePrimaryDetails");
            var content = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                var _LeaveApplicationModel = JsonSerializer.Deserialize<EmployeeLeaveModel>(content, _options);

                if (_LeaveApplicationModel != null)
                {
                    EmployeeLeaveData = _LeaveApplicationModel.ViewEmployeeLeaveDetails;
                    DepartmentData = _LeaveApplicationModel.Departments;
                    EmployeeLeaveTypeData = _LeaveApplicationModel.EmployeeLeaveType;

                }
            }
        }
        catch (Exception ex)
        {
            RegisterError = $"Error: {ex.Message}";
        }
        await base.OnInitializedAsync();
    }
}
