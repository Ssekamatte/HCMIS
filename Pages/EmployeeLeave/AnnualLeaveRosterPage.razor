@page "/AnnualLeaveRosterPage"
@using System.Text.Json;

@using HCMIS.Model;
@using HCMIS.SHARED.Data;
@using HCMIS.SHARED.Models;
@using Syncfusion.Blazor.Schedule
@using static System.Net.WebRequestMethods;
@inject HttpClient Http
@inject NavigationManager Navigation
@using HCMIS.DTOs;
@using HCMIS.Data;
@using System.Globalization;
@inject IToastService toastService;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;

@*Calender Improvement*@

<style>
    #display-date {
        max-width: 300px;
        margin: 0 auto;
        padding: 15px 0;
        font-size: 13px;
    }

    .control-wrapper {
        width: 300px;
        margin: 0 auto;
        padding-top: 20px;
    }

    .e-calendar .e-content .e-cell.personal-appointment span.e-day,
    .e-calendar .e-content td:hover.e-cell.personal-appointment span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.personal-appointment span.e-day {
        color: #28a745;
        font-weight: 800;
    }

    .e-calendar .e-content .e-cell.official-appointment span.e-day,
    .e-calendar .e-content td:hover.e-cell.official-appointment span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.official-appointment span.e-day {
        color: #dc3545;
        font-weight: 800;
    }

    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.personal-appointment span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.official-appointment span.e-day {
        background-color: #b511485e;
    }
</style>


<style>
/*Hide Time Icon in sfdatetime picker*/
.e-input-group .e-input-group-icon:last-child, .e-input-group.e-bigger .e-input-group-icon:last-child, .e-input-group .e-input-group-icon.e-bigger:last-child, .e-bigger .e-input-group .e-input-group-icon:last-child, .e-input-group.e-small .e-input-group-icon:last-child, .e-input-group.e-small.e-bigger .e-input-group-icon:last-child, .e-input-group.e-small .e-input-group-icon.e-bigger:last-child, .e-input-group.e-control-wrapper .e-input-group-icon:last-child, .e-input-group.e-control-wrapper.e-bigger .e-input-group-icon:last-child, .e-input-group.e-control-wrapper .e-input-group-icon.e-bigger:last-child, .e-input-group.e-control-wrapper.e-small .e-input-group-icon:last-child, .e-input-group.e-control-wrapper.e-small.e-bigger .e-input-group-icon:last-child, .e-input-group.e-control-wrapper.e-small .e-input-group-icon.e-bigger:last-child, .e-bigger .e-input-group.e-control-wrapper.e-small .e-input-group-icon:last-child, .e-bigger .e-input-group.e-small .e-input-group-icon:last-child {
    margin-right: 0;
    display: none;
}

/*Hide Time in Bar in Schedular*/
.e-schedule .e-month-view .e-appointment .e-appointment-details .e-time {
    font-size: 11px;
    padding: 1.5px;
    visibility: hidden;
}

/*Change color of forward and back arrows*/
    .e-schedule .e-schedule-toolbar .e-toolbar-items .e-toolbar-item.e-prev .e-icon-prev, .e-schedule .e-schedule-toolbar .e-toolbar-items .e-toolbar-item.e-next .e-icon-next {
        font-size: 30px;
        color: forestgreen;
    }

/*Change color of blocked dates*/
.e-schedule .e-block-appointment {
background: red !important;
color: ghostwhite;
}

/*Right Tool Bar CSS*/
.e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn-text {
        font-size: 20px;
        text-transform: initial;        
        font-family: math;
        font-weight: bold;
}

    .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn-text {
        color: forestgreen;
    }

/*Left Tool Bar CSS*/
    .e-schedule .e-schedule-toolbar .e-toolbar-items .e-toolbar-item.e-date-range .e-tbar-btn .e-tbar-btn-text {
    font-size: 30px;
    text-transform: initial;
    color: forestgreen;
    font-family: cursive;
    font-weight:bold;
}

/*Days of the Week CSS*/
    .e-schedule .e-month-view .e-date-header-wrap table td, .e-schedule .e-month-agenda-view .e-date-header-wrap table td {
        background: #fff;
        border-color: #edebe9;
        border-style: solid;
        border-width: 0 0 1px 1px;
        color: purple;
        font-size: 14px;
        text-align: left;
        text-transform: none;
        font-size: x-large;
        font-family: cursive;
    }

    /*Header Cells Designs - For Month*/
    .e-schedule .e-month-view .e-date-header-wrap table td, .e-schedule .e-month-agenda-view .e-date-header-wrap table td {
    background: #fff;
    border-color: #edebe9;
    border-style: solid;
    border-width: 0 0 1px 1px;
    color: #323130;
    font-size: 14px;
    text-align: left;
    text-transform: none;
    font-size: x-large;
    font-family: cursive;
}

    .e-schedule .e-schedule-table {
        border: 0 none;
        border-collapse: separate;
        border-spacing: 0;
        margin: 0;
        table-layout: fixed;
        width: 100%;
        font-size: x-large;
    }
</style>

<style>  
    .e-dialog.e-control.e-popup {
        padding: 3px;
        min-width: 94%;
    }
    
    /* .e-dialog {
        max-height: 98%;
        max-width: 100%;
        min-width: 90%;
        position: absolute;
    } */

    .e-recurrenceeditor .e-editor {
        display: -ms-flexbox;
        display: flex;
        -ms-flex-flow: row wrap;
        flex-flow: row wrap;
        margin-left: 1px;
        margin-right: 1px;
        /*max-width: 1240px;*/
    }

    h4 {
        background-color: #007bff;
        color: whitesmoke;
        padding: 10px;
    }

    h5 {
        color: ghostwhite;
        background-color: #00cc00;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h6 {
        color: ghostwhite;
        background-color: red;
        padding: 10px;
        width: 100%;
        font-size: 18px;
    }

    .e-schedule-dialog .e-footer-content {
        margin-top: 4px;
        display: none;
    }

    .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn-text {
        color: black;
    }
</style>

<style>
    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.custom-class,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.custom-class,
    .e-schedule .e-month-view .e-appointment.custom-class {
        background: yellow;
        color: red;
    }

    .e-schedule .e-vertical-view .e-work-cells.cell-custom-class {
        background: red !important;
    }

    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.e-past-app, .e-schedule .e-month-view .e-appointment.e-past-app {
        background-color: chocolate;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/Image/logonhcc.png" width="40" height="25" /> HCMIS
        </strong>| ANNUAL LEAVE ROASTER
    </li>
</ol>


<div class="form-group col-md-12">
    @{
        if(DaedlineData != null)
        {
            //Pass Id = 1 because it will always be one record in the table
            var _ddata = DaedlineData.FirstOrDefault(o=>o.LeaveRoasterDeadlineId == 1);
            if (_ddata != null)
            {
                var outputdate = _ddata.LeaveRoasterDeadlineDate.Value.ToString("dd/MMMM/yyyy");
                var outputtime = _ddata.LeaveRoasterDeadlineDate.Value.ToString("HH:mm:ss");

                <p style="color:brown;font-size:xx-large;">Deadline Date : @outputdate at @outputtime</p>
            }
        }
    }    
    
</div>

@if(Credentials != null && (!string.IsNullOrEmpty(Credentials.UserRole) &&
    Credentials.UserRole.Contains("Administrator") || Credentials.JobTitleId == 44))
{
        <div class="form-group col-md-12">
            <SfAccordion ExpandMode="@ExpandMode.Single">
                <AccordionItems>
                    <AccordionItem Expanded="false" CssClass="const">
                        <HeaderTemplate>Color Codes (Click on Word To Expand)</HeaderTemplate>
                        <ContentTemplate>
                            <div class="alert-info" style="padding-left: 10px; padding-right: 10px; padding-top: 10px; padding-bottom:-10px;">
                                <DepartmentSummaryPage 
                                    DepartmentData="@DepartmentData" 
                                    EmployeeLeaveRoasterData="@EmployeeLeaveRoasterData">
                                </DepartmentSummaryPage>
                            </div>
                        </ContentTemplate>
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
        </div>
}

<SfSchedule TValue="ViewEmployeeLeaveRoster" @ref="@ScheduleRef" Height="550px" 
            @bind-SelectedDate="@CurrentDate"
            ShowWeekend=true ShowWeekNumber=false EnableAutoRowHeight="true"
            MinDate="@MinDate" MaxDate="@MaxDate" @bind-CurrentView="@CurrentView">
    <ScheduleTimeScale Enable="false"></ScheduleTimeScale>
    <ScheduleEvents 
        TValue="ViewEmployeeLeaveRoster" 
        OnActionBegin="OnActionBegin"
        ActionCompleted="OnActionCompleted"
        OnRenderCell="@OnRenderCell" 
        OnPopupOpen="OnPopupOpen"
        EventRendered="OnEventRendered"
        DataBound="OnDataBound"
        OnCellClick="OnCellClick"
        OnEventClick="OnEventClick"
        OnCellDoubleClick="OnCellDoubleClick"
        OnEventDoubleClick="OnEventDoubleClick">
    </ScheduleEvents>
    @*GridEditSettings Dialog="@DialogParams">   
    
    </GridEditSettings>*@

    <ScheduleTemplates>
        <EditorTemplate>
            @{
                LeaveRosterData = (context as ViewEmployeeLeaveRoster);
            }
            <input type="hidden" name="Id" class="e-field" value="@(LeaveRosterData.LeaveRosterId)" />

            <div class="row" style="padding:15px;">
                <div class="form-group col-md-12">
                    <p style="font-size:xx-large;font-weight:bolder;color:purple; text-align:center;">ANNUAL LEAVE BOOKING : @_startdate</p>
                </div>
                <div class="form-group col-md-12">
                    <h5>
                        Kindly note that you are entitled to only 25 Working Leave Days Annually.
                    </h5>
                </div>

                <div class="form-group col-md-6">
                    <p>Employee:<span style="color:red;">*</span></p>
                    <SfDropDownList @bind-Value="@(LeaveRosterData.EmployeeId)" Enabled="false" TItem="ViewEmployeeDropDown" TValue="int?" DataSource="@EmployeeData" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                        <DropDownListFieldSettings Value="@nameof(ViewEmployeeDropDown.Employeeid)" Text="@nameof(ViewEmployeeDropDown.EmployeeDetails)"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>

                <div class="form-group col-md-6">
                    <p>Calender Year:<span style="color:red;">*</span></p>
                    <SfDropDownList @bind-Value="@(LeaveRosterData.YearId)" TItem="AYears" TValue="int?"
                                    DataSource="@YearData" Placeholder="Please select"
                                    FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    Enabled="false">
                        <DropDownListFieldSettings Value="@nameof(AYears.YearId)"
                                                   Text="@nameof(AYears.YearDesc)">
                        </DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                @*Format="dd-MMMM-yyyy h:mm:ss tt"*@
                <div class="col col-md-6">
                    <p>Proposed Start Date:<span style="color:red;">*</span></p>
                    <SfDateTimePicker @bind-Value="@(LeaveRosterData.ProposedLeaveStartDate)" Enabled=@IsEnabled ID="ProposedLeaveStartDate" Format="dd-MMMM-yyyy" Min="@MinDateForm" Max='@MaxDateForm'>
                        <DateTimePickerEvents OnRenderDayCell="CustomDates" TValue="DateTime?" ValueChange="OnStartDateChange"></DateTimePickerEvents>
                    </SfDateTimePicker>
                </div>
                <div class="col col-md-6">
                    <p>Proposed End Date:<span style="color:red;">*</span></p>
                    <SfDateTimePicker @bind-Value="@(LeaveRosterData.ProposedLeaveEndDate)" Enabled=@IsEnabled ID="ProposedLeaveEndDate" Format="dd-MMMM-yyyy" Min="@MinDateForm" Max='@MaxDateForm'>
                        <DateTimePickerEvents TValue="DateTime?" OnRenderDayCell="CustomDates" ValueChange="OnEndDateChange"></DateTimePickerEvents>
                    </SfDateTimePicker>
                </div>

                <div class="col-md-4">
                    <p style="margin-top:10px;">Days Arleady Planned For:</p>
                    @if (_employee != null)
                    {
                        @_employee.TotalDays
                    }
                    else
                    {
                        <h5 style="color: black;background-color: white;">0</h5>
                    }
                </div>

                <div class="col-md-4">
                    <p style="margin-top:10px;">Days Selected:</p>
                    <SfNumericTextBox @bind-Value="@(LeaveRosterData.NoofDaysPlannedFor)" Enabled="false" Format="N0" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                </div>


                <div class="col-md-4">
                    <p style="margin-top:10px;">Total Days:</p>
                    <SfNumericTextBox @bind-Value="@(LeaveRosterData.NoofDays)" Enabled="false" Format="N0" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                </div>

            </div>
            @if (LeaveRosterData != null && LeaveRosterData.NoofDays <= 25)
            {
                <SfButton CssClass="btn btn-success" style="float:left; margin-right:10px;" OnClick="@(e => OnSubmit(e, context as ViewEmployeeLeaveRoster))">Confirm Schedule</SfButton>
                <button @onclick="@OnClose" class="btn btn-danger" data-ripple="true" style="margin-right:10px;">Close Form</button>
            }
            else if(LeaveRosterData != null && LeaveRosterData.NoofDays > 25)
            {
                <h6>
                    You cannot plan for more than 25 working days in a year (Overrall No of Days should not exceed 25 Days).
                </h6>
            }
        </EditorTemplate>
    </ScheduleTemplates>

    <ScheduleEventSettings TValue="ViewEmployeeLeaveRoster" 
        EnableMaxHeight="true" 
        EnableIndicator="true"
        EnableTooltip="true"
        IgnoreWhitespace="true">
        <SfDataManager AdaptorInstance="@typeof(AnnualLeaveRosterAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
        <ScheduleField>
            <FieldSubject Title="Employee" Name="EmployeeDetails"></FieldSubject>
            <FieldStartTime Title="Proposed Start Date" Name="ProposedLeaveStartDate"></FieldStartTime>
            <FieldEndTime Title="Prosposed End Date" Name="ProposedLeaveEndDate"></FieldEndTime>
            <FieldIsAllDay Title="Is all Day" Name="IsAllDay"></FieldIsAllDay>
        </ScheduleField>
    </ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Month"></ScheduleView>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.WorkWeek"></ScheduleView>        
        @*<ScheduleView Option="View.Agenda"></ScheduleView>*@
    </ScheduleViews>
</SfSchedule>

@*Saving Dialogue*@
<div class="form-group col-md-4">
    <SfDialog Width="40%" Height="20vh" AllowDragging=true EnableResize=true
              CloseOnEscape=false IsModal=true ShowCloseIcon=false
              Target=".mainbody" @ref=@SavingDialog Visible=false>
        <DialogTemplates>
            <Content>
                <div class="dialogContent">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader-Saving-text"></div>
                    </div>
                    @*<p>Saving Record please wait......</p>*@
                </div>
            </Content>
        </DialogTemplates>
    </SfDialog>
</div>

@code {
    View CurrentView = View.Month;
    private DateTime CurrentDate = DateTime.Now;
    private ViewEmployeeLeaveRoster? LeaveRosterData { get; set; }
    List<ViewEmployeeDropDown>? EmployeeData { get; set; }
    List<ViewEmployeeLeaveRoster>? EmployeeLeaveRoasterData { get; set; }
    List<ADepartment>? DepartmentData { get; set; }
    List<APublicHolidays>? PublicHolidaysData { get; set; }
    List<AMaximumYear>? MaximumYearData { get; set; }
    List<AAnnualLeaveRoasterDeadlineDate>? DaedlineData { get; set; }
    List<AYears>? YearData { get; set; }
    SfSchedule<ViewEmployeeLeaveRoster>? ScheduleRef;
    bool IsEnabled { get; set; } = true;
    public string[] CellCustomClass = { "cell-custom-class" };
    public string[] CustomClass = { "custom-class" };
    List<ViewUserManagement>? UsersData { get; set; }
    // List<ViewEmployeePlannedDays>? LeaveTotalPlannedDaysData { get; set; }
    List<ViewEmployeePlannedDays>? OverrallDaysData { get; set; }
    private static ViewEmployeePlannedDays? _employee { get; set; }
    //public static int OverrallDaysData { get; set; } = 0;
    public DateTime? StartDateValue { get; set; }
    public static int LeaveDays { get; set; } = 0;
    public static int PublicHolidays { get; set; } = 0;
    public static int numberOfDays2 { get; set; } = 0;
    public static int TotalDays { get; set; } = 0;
    private static ViewEmployeePlannedDays RoasterCount { get; set; }
    LoginResultModel? Credentials { get; set; }
    public List<string> CustomClassPast = new List<string>() { "e-past-app" };
    public bool EmployeeDD = true;
    public bool WarningDisplay = true;
    SfDialog? SavingDialog { get; set; }
    private DepartmentCounts DepCounts = new DepartmentCounts();
    public DateTime? SelectedDate { get; set; }
    public string SelectedValue { get; set; } = DateTime.Now.ToString("M/d/yyyy");
    int selecteddays = 0;
    int overralldays = 0;
    DateTime StartDate = DateTime.Now;
    DateTime EndDate = DateTime.Now;
    public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, 01, 01);
    public DateTime MaxDate { get; set; } = new DateTime(DateTime.Now.Year, 12, 31); 
    public DateTime MinDateForm { get; set; } = new DateTime(DateTime.Now.Year, 01, 01);
    public DateTime MaxDateForm { get; set; } = new DateTime(DateTime.Now.Year, 12, 31); 

    JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    public int maximumsetyear { get; set; } = 0;
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "80%" };
    int _startdate = 2000;
    int FormEditType = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Credentials = await AuthService.GetUserCredentials();

            List<Task> t = new List<Task>();

            t.Add(Task.Run(async () =>
                {
                    var response = await Http.GetAsync($"Utilities/GetYears");
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        YearData = JsonSerializer.Deserialize<List<AYears>>(content, _options);
                    }
                }));

            t.Add(Task.Run(async () =>
            {
                var responseusers = await Http.GetAsync($"Utilities/GetUsers");
                if (responseusers.IsSuccessStatusCode)
                {
                    var contentusers = await responseusers.Content.ReadAsStringAsync();
                    UsersData = JsonSerializer.Deserialize<List<ViewUserManagement>>(contentusers, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responseemployee = await Http.GetAsync($"Utilities/GetEmployeeDD");
                if (responseemployee.IsSuccessStatusCode)
                {
                    var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                    EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(contentemployee, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsepublicholiday = await Http.GetAsync($"Utilities/GetPublicHoliday");
                if (responsepublicholiday.IsSuccessStatusCode)
                {
                    var contentpublicholiday = await responsepublicholiday.Content.ReadAsStringAsync();
                    PublicHolidaysData = JsonSerializer.Deserialize<List<APublicHolidays>>(contentpublicholiday, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responseleavedata = await Http.GetAsync($"Employeez/GetEmployeeLeaverRoster");
                if (responseleavedata.IsSuccessStatusCode)
                {
                    var contentleavedata = await responseleavedata.Content.ReadAsStringAsync();
                    EmployeeLeaveRoasterData = JsonSerializer.Deserialize<List<ViewEmployeeLeaveRoster>>(contentleavedata, _options);
                }
            }));       

            t.Add(Task.Run(async () =>
            {
                var response = await Http.GetAsync($"Employeez/GetEmployeeLeaverRosterDays");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    OverrallDaysData = JsonSerializer.Deserialize <List<ViewEmployeePlannedDays>>(content, _options);
                }
            }));       


            t.Add(Task.Run(async () =>
            {
                var response = await Http.GetAsync($"Utilities/GetDepartment");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    DepartmentData = JsonSerializer.Deserialize<List<ADepartment>>(content, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var response = await Http.GetAsync($"Utilities/GetMaximumYear");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    MaximumYearData = JsonSerializer.Deserialize<List<AMaximumYear>>(content, _options);

                    var b = MaximumYearData.FirstOrDefault();

                    if(b != null)
                    {
                        maximumsetyear = b.MaximumYearDesc.Value;
                        MaxDate = new DateTime(maximumsetyear, 12, 31);
                    }

                }
            }));

            t.Add(Task.Run(async () =>
            {
                var response = await Http.GetAsync($"Utilities/GetLeaveRoasterDeadline");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    DaedlineData = JsonSerializer.Deserialize<List<AAnnualLeaveRoasterDeadlineDate>>(content, _options);
                }
            }));

            Task _t = Task.WhenAll(t);
            await _t;
        }
        catch(Exception ex)
        {
            //throw ex;  
        }
    }

    public void CustomDates(RenderDayCellEventArgs args)
    {
        //var CurrentMonth = CurrentDate.Month;
        //if (args.Date.Month == CurrentMonth && (args.Date.Day == 7 || args.Date.Day == 14 || args.Date.Day == 24 || args.Date.Day == 29))
        //{
        //    args.CellData.ClassList += " personal-appointment";
        //}
        //if (args.Date.Month == CurrentMonth && (args.Date.Day == 3 || args.Date.Day == 11 || args.Date.Day == 17 || args.Date.Day == 22))
        //{
        //    args.CellData.ClassList += " official-appointment";
        //}

        ////Mine
        //var phol = PublicHolidaysData.ToList();

        //foreach (var n in phol)
        //{
        //    var CurrentMonth = n.HolidayDate.Value.Month;
        //    if (n.Month == CurrentMonth && n.HolidayDate.Value.Day == n.Day)
        //    {
        //        args.CellData.ClassList += " official-appointment";
        //    }
        //    else
        //    {
        //        args.CellData.ClassList += " personal-appointment";                
        //    }

        //}
    }

    public void OnStartDateChange(ChangedEventArgs<DateTime?> args)
    {
        LeaveRosterData.ProposedLeaveEndDate = null;
        LeaveRosterData.NoofDaysPlannedFor = null;
        LeaveRosterData.NoofDays = null;
    }

    public void OnEndDateChange(ChangedEventArgs<DateTime?> args)
    {
        //int? employeeid = Credentials.StaffId;
        var _employeeid = OverrallDaysData.FirstOrDefault(o => o.EmployeeId == LeaveRosterData.EmployeeId && o.YearId == LeaveRosterData.YearId);

        StartDate = Convert.ToDateTime(LeaveRosterData.ProposedLeaveStartDate.Value);
        EndDate = Convert.ToDateTime(args.Value.Value);

        numberOfDays2 = GetNumberOfDates(StartDate, EndDate);
        PublicHolidays = GetNumberOfPublicHolidays(StartDate, EndDate);

        //Initialize these to zero incase the database is null or empty
        LeaveRosterData.NoofDaysPlannedFor = 0;
        LeaveRosterData.NoofDays = 0;

        LeaveRosterData.NoofDaysPlannedFor = numberOfDays2 - PublicHolidays;

        //New Record

        if (FormEditType == 1)
        {
            if (_employeeid != null)
            {
                LeaveRosterData.NoofDays = (LeaveRosterData.NoofDaysPlannedFor) + _employeeid.TotalDays;
            }
            else
            {
                LeaveRosterData.NoofDays = (LeaveRosterData.NoofDaysPlannedFor);
            }
        }

        //Editing Record
        else if (FormEditType == 2)
        {
            //First subtract number of days then add the new value
            int? subtractedvalue = 0;
            var _olddata = EmployeeLeaveRoasterData.FirstOrDefault(o => o.LeaveRosterId == LeaveRosterData.LeaveRosterId);

            if (_employeeid != null && _olddata != null)
            {
                subtractedvalue = _employeeid.TotalDays - _olddata.NoofDaysPlannedFor;
                LeaveRosterData.NoofDays = subtractedvalue + numberOfDays2;
            }
        }

        StateHasChanged();
    }


    //Function to return number of days minus weekends
    static int GetNumberOfDates(DateTime from, DateTime to)
    {
        if (to < from)
            throw new ArgumentException("To cannot be smaller than from.", nameof(to));


        if ((to.Date == from.Date) && (from.DayOfWeek != DayOfWeek.Saturday && from.DayOfWeek != DayOfWeek.Sunday))
        {
            return 1;
        }

        else if ((to.Date == from.Date) && (from.DayOfWeek == DayOfWeek.Saturday && from.DayOfWeek == DayOfWeek.Sunday))
        {
            return 0;
        }

        int n = 0;
        DateTime nextDate = from;
        while(nextDate <= to.Date)
        {
            if (nextDate.DayOfWeek != DayOfWeek.Saturday && nextDate.DayOfWeek != DayOfWeek.Sunday)
                n++;
            nextDate = nextDate.AddDays(1);
        }

        return n;

        // if (to < from)
        //     throw new ArgumentException("To cannot be smaller than from.", nameof(to));

        // if (to.Date == from.Date)
        //     return 1;

        // int n = 0;
        // DateTime nextDate = from;
        // while(nextDate <= to.Date)
        // {
        //     if (nextDate.DayOfWeek != DayOfWeek.Saturday && nextDate.DayOfWeek != DayOfWeek.Sunday)
        //         n++;
        //     nextDate = nextDate.AddDays(1); 
        // }

        // return n;
    }

    //Get number of public holidays
    public int GetNumberOfPublicHolidays(DateTime from, DateTime to)
    {
        PublicHolidays = PublicHolidaysData.Where(o => o.HolidayDate >= from && o.HolidayDate <= to).Count();
        return PublicHolidays;
    }

    private async Task OnSubmit(MouseEventArgs args, ViewEmployeeLeaveRoster data)
    {        
        try
        {
            if (data.ProposedLeaveStartDate != null && data.ProposedLeaveEndDate != null)
            {
                var Datedifference = (data.ProposedLeaveEndDate.Value - data.ProposedLeaveStartDate.Value).TotalDays;
                bool Hasday =false;
                int? LeaveRosterId = 0;
                for (int i = 0; i <= Datedifference; i++)
                {
                    DateTime NewDay = data.ProposedLeaveStartDate.Value.AddDays(i);
                    var existingdates = EmployeeLeaveRoasterData.FirstOrDefault(o => (NewDay >= o.ProposedLeaveStartDate
                    && NewDay <= o.ProposedLeaveEndDate) && o.EmployeeId == data.EmployeeId);
                    if(existingdates != null)
                    {
                        Hasday =true;
                        LeaveRosterId = existingdates.LeaveRosterId;
                        break;
                    }
                }

                var _publicholidays = PublicHolidaysData.FirstOrDefault(o => data.ProposedLeaveStartDate.Value == o.HolidayDate);

                if (data.EmployeeId == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Please select the employee");
                }

                else if (data.ProposedLeaveEndDate < data.ProposedLeaveStartDate)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("Your start date cannot be later than the end date.");
                }

                else if (FormEditType == 1 && Hasday==true && _publicholidays == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("You have arleady planned for this selected period. Refer to the calender for confirmation");
                }

                else if (FormEditType == 2 && Hasday == true && LeaveRosterId != data.LeaveRosterId && _publicholidays == null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("You have arleady planned for this selected period. Refer to the calender for confirmation");
                }

                else if (_publicholidays != null)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("You cannot schedule your leave starting on a public holiday.");
                }
                else if (data.ProposedLeaveStartDate.Value.DayOfWeek == DayOfWeek.Saturday || data.ProposedLeaveStartDate.Value.DayOfWeek == DayOfWeek.Sunday)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("You cannot schedule your leave starting on a weekend.");
                }

                else
                {
                    await SavingDialog.ShowAsync();
                    await ScheduleRef.AddEventAsync(data);
                    ScheduleRef.CloseEditor();
                }
            }

            else
            {
                toastService.ClearAll();
                toastService.ShowWarning("Please enter the proposed start date and proposed end date");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString());
        }
        finally
        {
            await SavingDialog.HideAsync();
        }

    }

    private async Task OnClose(MouseEventArgs args)
    {
        try
        {
            ScheduleRef.CloseEditor();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString());
        }

    }
    public async void OnRenderCell(RenderCellEventArgs args)
    {
        if (args.ElementType == ElementType.AllDayCells)
        {
            args.CssClasses = CustomClassPast;
        }
    }

    public async void OnPopupOpen(PopupOpenEventArgs<ViewEmployeeLeaveRoster> args)
    {
        List<Task> t = new List<Task>();

        t.Add(Task.Run(async () =>
        {
            var response = await Http.GetAsync($"Employeez/GetEmployeeLeaverRosterDays");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                OverrallDaysData = JsonSerializer.Deserialize<List<ViewEmployeePlannedDays>>(content, _options);
            }
        }));

        Task _t = Task.WhenAll(t);
        await _t;

        _startdate = Convert.ToDateTime(args.Data.ProposedLeaveStartDate).Year;
        MinDateForm = new DateTime(_startdate, 01, 01);
        MaxDateForm = new DateTime(_startdate, 12, 31);

        //Initialize these to zero incase the database is null or empty
        LeaveRosterData.NoofDaysPlannedFor = 0;
        LeaveRosterData.NoofDays = 0;

        var b = YearData.FirstOrDefault(o => o.YearDesc == _startdate);
        if (b != null)
        {
            args.Data.YearId = b.YearId;
        }

        if (LeaveRosterData != null && LeaveRosterData.IsBlock != null && LeaveRosterData.IsBlock == true)
        {
            args.Cancel = true;
        }

        else
        {
            args.Data.EmployeeId = Credentials.StaffId;

            StartDate = Convert.ToDateTime(args.Data.ProposedLeaveStartDate.Value);
            EndDate = Convert.ToDateTime(args.Data.ProposedLeaveEndDate);

            numberOfDays2 = GetNumberOfDates(StartDate, EndDate);
            PublicHolidays = GetNumberOfPublicHolidays(StartDate, EndDate);


            _employee = OverrallDaysData.FirstOrDefault(o => o.EmployeeId == args.Data.EmployeeId && o.YearId == args.Data.YearId);

            //New Record
            if(args.Data.LeaveRosterId == null)
            {
                //Adding New Record
                FormEditType = 1;


                LeaveRosterData.NoofDaysPlannedFor = numberOfDays2 - PublicHolidays;

                if (_employee != null)
                {
                    LeaveRosterData.NoofDays = (LeaveRosterData.NoofDaysPlannedFor) + _employee.TotalDays;
                }
                else
                {
                    LeaveRosterData.NoofDays = (LeaveRosterData.NoofDaysPlannedFor);
                }   
            }

            //Editing Record
            else
            {
                //Editing Record
                FormEditType = 2;

                LeaveRosterData.NoofDaysPlannedFor = numberOfDays2 - PublicHolidays;

                if (_employee != null)
                {
                    LeaveRosterData.NoofDays = _employee.TotalDays;
                }
            }

            StateHasChanged();
        }
    }

    public void OnEventRendered(EventRenderedArgs<ViewEmployeeLeaveRoster> args)
    {
        args.CssClasses = new List<string>(CustomClass);

        // Dictionary<string, object> attributes = new Dictionary<string, object>();
        // Dictionary<string, object> attributesfont = new Dictionary<string, object>();
        // /*Assign color to different events on schedular*/
        // if(DepartmentData != null)
        // {
        //     var impcolor = DepartmentData.FirstOrDefault(o => o.DepartmentId == args.Data.DepartmentId);
        //     if (impcolor != null)
        //     {
        //         attributes.Add("style", $"background: {impcolor.ColorCode}");
        //         //attributesfont.Add("style", $"color: {impcolor.FontColorCode}");
        //         args.Attributes = attributes;
        //         //args..Attributes = attributesfont;
        //     }
        // }             
    }

    public async Task OnCellClick(CellClickEventArgs args)
    {
        args.Cancel = true;

        if (DaedlineData != null)
        {
            //Pass Id = 1 because it will always be one record in the table
            var _ddata = DaedlineData.FirstOrDefault(o => o.LeaveRoasterDeadlineId == 1);
            //Activate the form
            if (_ddata != null && (_ddata.LeaveRoasterDeadlineDate.Value >= DateTime.Now))
            {
                await ScheduleRef.OpenEditorAsync(args, CurrentAction.Add); //to open the editor window on single cell click
            }
            else
            {
                toastService.ClearAll();
                toastService.ShowWarning("Deadline has arleady passed. You cannot proceed");
            }

        }
    }

    public async Task OnCellDoubleClick(CellClickEventArgs args)
    {
        args.Cancel = true;

        if (DaedlineData != null)
        {
            //Pass Id = 1 because it will always be one record in the table
            var _ddata = DaedlineData.FirstOrDefault(o => o.LeaveRoasterDeadlineId == 1);
            //Activate the form
            if (_ddata != null && (_ddata.LeaveRoasterDeadlineDate.Value >= DateTime.Now))
            {
                await ScheduleRef.OpenEditorAsync(args, CurrentAction.Add); //to open the editor window on single cell click
            }
            else
            {
                toastService.ClearAll();
                toastService.ShowWarning("Deadline has arleady passed. You cannot proceed");
            }

        }
    }
    
    public async Task OnEventDoubleClick(EventClickArgs<ViewEmployeeLeaveRoster> args)
    {
        args.Cancel = true;
        CurrentAction action = CurrentAction.Save;

        if (DaedlineData != null)
        {
            //Pass Id = 1 because it will always be one record in the table
            var _ddata = DaedlineData.FirstOrDefault(o => o.LeaveRoasterDeadlineId == 1);
            //Activate the form
            if (_ddata != null && (_ddata.LeaveRoasterDeadlineDate.Value >= DateTime.Now))
            {
                if (args.Event.IsReadonly == true)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("You cannot update a public holiday");
                }
                else
                {
                    await ScheduleRef.OpenEditorAsync(args.Event, action); //to open the editor window on event click
                }
            }
            else
            {
                toastService.ClearAll();
                toastService.ShowWarning("Deadline has arleady passed. You cannot proceed");
            }

        }
    }

    public async Task OnEventClick(EventClickArgs<ViewEmployeeLeaveRoster> args)
    {
        args.Cancel = true;
        CurrentAction action = CurrentAction.Save;

        if(DaedlineData != null)
        {
            //Pass Id = 1 because it will always be one record in the table
            var _ddata = DaedlineData.FirstOrDefault(o=>o.LeaveRoasterDeadlineId == 1);
            //Activate the form
            if(_ddata != null && (_ddata.LeaveRoasterDeadlineDate.Value >= DateTime.Now))
            {
                if (args.Event.IsReadonly == true)
                {
                    toastService.ClearAll();
                    toastService.ShowWarning("You cannot update a public holiday");
                }
                else
                {
                    await ScheduleRef.OpenEditorAsync(args.Event, action); //to open the editor window on event click
                }
            }
            else
            {
                toastService.ClearAll();
                toastService.ShowWarning("Deadline has arleady passed. You cannot proceed");
            }

        }

    }

    public class AnnualLeaveRosterAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        IAuthenticationService _AuthService;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public AnnualLeaveRosterAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            , IAuthenticationService authservice, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }

        public async override Task<object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {            
            List<ViewEmployeeLeaveRoster> EventData = new List<ViewEmployeeLeaveRoster>();
            var credentials = await _AuthService.GetUserCredentials();
            int? Employeeid = credentials.StaffId;

            HttpResponseMessage response = null;
            response = await Http.GetAsync($"Employeez/GetEmployeeLeaverRoster");

            var content = await response.Content.ReadAsStringAsync();
            if (!response.IsSuccessStatusCode)
            {
                toastService.ShowError(response.ReasonPhrase);
            }
            EventData = JsonSerializer.Deserialize<List<ViewEmployeeLeaveRoster>>(content, _options);

            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = EventData, Count = EventData.Count() } : (object)EventData;
        }

        public async override Task<object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                string? _baseurl = Navigation.BaseUri;
                var val = (value as ViewEmployeeLeaveRoster);

                if (val.LeaveRosterId == null)
                {
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var result = await Http.PostAsync($"Employeez/CreateEmployeeLeaverRoster?_baseurl={_baseurl}", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        toastService.ShowSuccess("Record sucessfully added");
                    }
                    else
                    {
                        //toastService.ShowError(result.Content.);
                    }
                }

                else
                {
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                    StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var result = await Http.PutAsync($"Employeez/UpdateEmployeeLeaverRoster", httpContent);
                    if (result.IsSuccessStatusCode)
                    {
                        toastService.ShowSuccess("Record was sucessfully updated");
                    }
                    else
                    {
                        //toastService.ShowError(data.Message);
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public async override Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as ViewEmployeeLeaveRoster);
                string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                var result = await Http.PutAsync($"Employeez/UpdateEmployeeLeaverRoster", httpContent);
                if (result.IsSuccessStatusCode)
                {
                    toastService.ShowSuccess($"{val.EmployeeId}  was sucessfully updated");
                }
                else
                {
                    toastService.ShowError(result.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }

    }

    private async void OnActionBegin(Syncfusion.Blazor.Schedule.ActionEventArgs<ViewEmployeeLeaveRoster> args)
    {
        try
        {
            if (args.ActionType == Syncfusion.Blazor.Schedule.ActionType.EventCreate)
            {
                EmployeeDD = true;
            }

            if (args.ActionType == Syncfusion.Blazor.Schedule.ActionType.EventChange)
            {
                EmployeeDD = false;
            }
        }
        catch (Exception ex)
        {

            throw;
        }
    }

    public async void OnActionCompleted(Syncfusion.Blazor.Schedule.ActionEventArgs<ViewEmployeeLeaveRoster> args)
    {
        if (args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange)
        {
            List<Task> t = new List<Task>();
            t.Add(Task.Run(async () =>
            {
                var responseusers = await Http.GetAsync($"Utilities/GetUsers");
                if (responseusers.IsSuccessStatusCode)
                {
                    var contentusers = await responseusers.Content.ReadAsStringAsync();
                    UsersData = JsonSerializer.Deserialize<List<ViewUserManagement>>(contentusers, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responseemployee = await Http.GetAsync($"Utilities/GetEmployeeDD");
                if (responseemployee.IsSuccessStatusCode)
                {
                    var contentemployee = await responseemployee.Content.ReadAsStringAsync();
                    EmployeeData = JsonSerializer.Deserialize<List<ViewEmployeeDropDown>>(contentemployee, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responsepublicholiday = await Http.GetAsync($"Utilities/GetPublicHoliday");
                if (responsepublicholiday.IsSuccessStatusCode)
                {
                    var contentpublicholiday = await responsepublicholiday.Content.ReadAsStringAsync();
                    PublicHolidaysData = JsonSerializer.Deserialize<List<APublicHolidays>>(contentpublicholiday, _options);
                }
            }));

            t.Add(Task.Run(async () =>
            {
                var responseleavedata = await Http.GetAsync($"Employeez/GetEmployeeLeaverRoster");
                if (responseleavedata.IsSuccessStatusCode)
                {
                    var contentleavedata = await responseleavedata.Content.ReadAsStringAsync();
                    EmployeeLeaveRoasterData = JsonSerializer.Deserialize<List<ViewEmployeeLeaveRoster>>(contentleavedata, _options);
                    if (EmployeeLeaveRoasterData != null)
                    {
                        // await getstatusCount();
                    }

                }
            }));

            // t.Add(Task.Run(async () =>
            // {
            //     var responsetotalplanneddaysdata = await Http.GetAsync($"Employeez/GetCountLeaveDays");
            //     if (responsetotalplanneddaysdata.IsSuccessStatusCode)
            //     {
            //         var contenttotalplanneddaysdata = await responsetotalplanneddaysdata.Content.ReadAsStringAsync();
            //         LeaveTotalPlannedDaysData = JsonSerializer.Deserialize<List<ViewEmployeePlannedDays>>(contenttotalplanneddaysdata, _options);
            //     }
            // }));

        }

        else if (args.ActionType == ActionType.DateNavigate)
        {
            
        }
    }

    public async Task OnDataBound(Syncfusion.Blazor.Schedule.DataBoundEventArgs<ViewEmployeeLeaveRoster> args)
    {
        List<ViewEmployeeLeaveRoster> eventCollection = await ScheduleRef.GetEventsAsync();   //You can get the entire appointment collections in the EventCollection variable
    }
}

