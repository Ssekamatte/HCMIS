@page "/AnnualLeavePlanPage"
@using System.Text.Json;
@using HCMIS.SHARED.DTOs;
@using HCMIS.SHARED.DTOs.Employeez;
@using HCMIS.SHARED.DTOs.Utilities;
@using Syncfusion.Blazor.Schedule
@using static System.Net.WebRequestMethods;
@inject ApiConfig _ApiConfig;
@inject HttpClient Http
@inject NavigationManager Navigation
@using HCMIS.DTOs;
@using System.Globalization;
@inject IToastService toastService;
@using System.Collections;
@using HCMIS.Interface;
@inject IAuthenticationService AuthService;

<style>
 /*https://blazor.syncfusion.com/documentation/check-box/how-to/customized-checkbox?_gl=1*tckl3s*_ga*Mzg0MTE4NDM5LjE2NTU3MjY3NTk.*_ga_WC4JKKPHH0*MTY4ODgxMzIxMy40MDIuMS4xNjg4ODEzMjM3LjM2LjAuMA..*_ga_2QTHE2Y2YX*MTY4ODgxMzIxNy4yNi4xLjE2ODg4MTMyMzguMzkuMC4w&_ga=2.35104355.374026478.1688377881-384118439.1655726759*/
    .e-checkbox-wrapper.e-primary:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #e03872;
    }

    .e-checkbox-wrapper.e-success .e-frame.e-check,
    .e-checkbox-wrapper.e-success .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #689f38;
    }

    .e-checkbox-wrapper.e-success:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #449d44;
    }

    .e-checkbox-wrapper.e-info .e-frame.e-check,
    .e-checkbox-wrapper.e-info .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #2196f3;
    }

    .e-checkbox-wrapper.e-info:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #0b7dda;
    }

    .e-checkbox-wrapper.e-warning .e-frame.e-check,
    .e-checkbox-wrapper.e-warning .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #ef6c00;
    }

    .e-checkbox-wrapper.e-warning:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #cc5c00;
    }

    .e-checkbox-wrapper.e-danger .e-frame.e-check,
    .e-checkbox-wrapper.e-danger .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #d84315;
    }

    .e-checkbox-wrapper.e-danger:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #ba3912;
    }

    /*Hide Other Checkboxes*/
    .e-checkbox-wrapper .e-frame+.e-label, .e-css.e-checkbox-wrapper .e-frame+.e-label {
        margin-left: 8px;
        max-width: calc(100% - 28px);
        word-break: break-word !important;
        display: none;
    }

        h6 {
        color: ghostwhite;
        background-color: red;
        padding: 10px;
        width: 100%;
        font-size: 18px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        background-color: darkorange;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

</style>


<div class="form-group col-md-12">
    <SfGrid @ref="@MainGrid" TValue="AnnualLeaveRosterDto" ID="GridMain" Query="@MainQuery" Toolbar="@ToolbarMenuMain"
                AllowPaging="true" AllowFiltering="false" AllowTextWrap="true" AllowGrouping="true" GridLines="GridLine.Both">
                
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog" ShowConfirmDialog="false"
                          Dialog="@DialogParams">
                     <HeaderTemplate>
                        @{
                            var text = GetRoasterHeader(context as AnnualLeaveRosterDto);
                            <div class="headerbandimg">
                                 <span>@text</span>
                            </div>
                        }
                    </HeaderTemplate>
                    <Template>           
                        @{
                            <center>
                                <h5>
                                    <strong>ENTER YOUR PLANNED DAYS</strong>
                                </h5>
                            </center>
                            
                            PlannedDaysData = (context as AnnualLeaveRosterDto);
                            
                            <div style="padding:15px;">
                                <div class="form-row">
                            <div class="form-group col-md-6">
                                <p>Employee:<span style="color:red;">*</span></p>
                                <SfDropDownList @bind-Value="@(PlannedDaysData.EmployeeId)"
                                                TItem="EmployeeDto"
                                                TValue="int?"
                                                DataSource="@EmployeeData"
                                                Placeholder="Please select"
                                                FloatLabelType="FloatLabelType.Never"
                                                AllowFiltering="true"
                                                Enabled="@EmployeeDD"
                                                FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                <DropDownListFieldSettings Text="@nameof(EmployeeDto.LastName)" Value="@nameof(EmployeeDto.Employeeid)"></DropDownListFieldSettings> 
                                                    <DropDownListTemplates TItem="EmployeeDto"> 
                                                        <ValueTemplate Context="NameContext"> 
                                                            <span class='name'>@((NameContext as EmployeeDto).FirstName) @((NameContext as EmployeeDto).LastName)</span>
                                                        </ValueTemplate> 
                                                        <ItemTemplate Context="ItemContext"> 
                                                            <span class='name'>@((ItemContext as EmployeeDto).FirstName) @((ItemContext as EmployeeDto).LastName)</span> 
                                                        </ItemTemplate> 
                                                    </DropDownListTemplates> 
                                                    <DropDownListEvents TValue="int?"
                                                        TItem="EmployeeDto" ValueChange="OnEmployeeChange">
                                                    </DropDownListEvents>
                                </SfDropDownList>
                            </div>
                                    <div class="form-group col-md-6">
                                        <p>Year:<span style="color:red;">*</span></p>
                                        <SfDropDownList @bind-Value="@(PlannedDaysData.YearId)"
                                                        Enabled="@YearDD" TItem="AYearsDto" TValue="int?"
                                                        DataSource="@YearData" Placeholder="Please select"
                                                        FloatLabelType="FloatLabelType.Never" AllowFiltering="true"
                                                        FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" @ref="YearEdit">
                                            <DropDownListFieldSettings Value="@nameof(AYearsDto.YearId)"
                                                                       Text="@nameof(AYearsDto.YearDesc)">
                                            </DropDownListFieldSettings>
                                            <DropDownListEvents TValue="int?"
                                                    TItem="AYearsDto" ValueChange="OnYearChange">
                                        </DropDownListEvents>
                                        </SfDropDownList>
                                    </div>                                    
                                <div>
                                
                                </div>
                                 @if(PlannedDaysData.AnnualLeaveRosterMonths != null && PlannedDaysData.AnnualLeaveRosterMonths.Count > 0)
                                 {
                                     <div>
                                        <h5>Please be reminded that you can only plan for 25 Days Annually.</h5>
                                        <p>Days marked as <img src="/image/blockedcells.png" width="90"/> are not available</p>                                        
                                        <h5 style="color:green;">Days Selected: @SelectedCells.Count</h5>

                                        @*@if (_previous == Syncfusion.Blazor.Grids.Action.Add)
                                        {
                                            <h5 style="color:green;">Days Selected:  @RoasterMonthsCount</h5>
                                        }
                                        else if(_previous == Syncfusion.Blazor.Grids.Action.BeginEdit)
                                        {
                                            <h5 style="color:green;">Days Selected.: @RoasterMonthsCount</h5>
                                        }*@

                                     </div>
                                     if(@SelectedCells.Count > 25)
                                     {
                                        <h6>You cannot add more than 25 Days</h6>
                                     }

                                    <div class="form-group col-md-12">
                                        <SfGrid @ref="@DataGrid"
                                        TValue="AnnualLeaveRosterMonthsDto"
                                                ID="Grid1"
                                            DataSource="@PlannedDaysData.AnnualLeaveRosterMonths"
                                        AllowPaging="false" AllowFiltering="false" AllowReordering="true"
                                                AllowResizing="true" AllowGrouping="true" AllowExcelExport="true"
                                                AllowPdfExport="true" AllowSelection="true" AllowSorting="true"
                                                Height="250px" GridLines="GridLine.Both">
                                            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog="false" Dialog="@DialogParams">
                                            
                                            </GridEditSettings>
                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                            <GridPageSettings PageSizes="true"></GridPageSettings>
                                            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell" CellSelectionMode="CellSelectionMode.Box"></GridSelectionSettings>
                                           
                                            <GridEvents 
                                                    QueryCellInfo="QueryCellInfoHandler"
                                                    CellSelected="OnCellSelect"
                                                    TValue="AnnualLeaveRosterMonthsDto">                                               
                                            </GridEvents>
                                            <GridColumns>
                                            <GridColumn Type="ColumnType.CheckBox" Width="50" Visible="false"></GridColumn>
                                                <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.LeaveRoasterMonthsId) HeaderText="Months Id" AllowEditing="false" IsPrimaryKey="true" Width="150" Visible="false"></GridColumn>
                                                <GridColumn 
                                                    Field=@nameof(AnnualLeaveRosterMonthsDto.DayId) 
                                                    HeaderText="Day" 
                                                    AllowEditing="false" 
                                                    Width="70" 
                                                    Visible="true">
                                                </GridColumn>
                                                <GridColumn HeaderText="Months"
                                                            CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})">
                                                    <GridColumns>
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.January) HeaderText="Jan" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                                <Template Context="JanContext">
                                                                    @{
                                                                        var val = (JanContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.January TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.February) HeaderText="Feb" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                                <Template Context="FebContext">
                                                                    @{
                                                                        var val = (FebContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.February TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.March) HeaderText="Mar" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                                <Template Context="MarContext">
                                                                    @{
                                                                        var val = (MarContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.March TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.April) HeaderText="Apr" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                                <Template Context="AprilContext">
                                                                    @{
                                                                        var val = (AprilContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.April TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.May) HeaderText="May" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                                <Template Context="MayContext">
                                                                    @{
                                                                        var val = (MayContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.May TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.June) HeaderText="Jun" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                                <Template Context="JuneContext">
                                                                    @{
                                                                        var val = (JuneContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.June TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.July) HeaderText="Jul" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                                <Template Context="JulyContext">
                                                                    @{
                                                                        var val = (JulyContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.July TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.August) HeaderText="Aug" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                                <Template Context="AugustContext">
                                                                    @{
                                                                        var val = (AugustContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.August TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.September) HeaderText="Sep" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                                <Template Context="SeptemberContext">
                                                                    @{
                                                                        var val = (SeptemberContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.September TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.October) HeaderText="Oct" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                                <Template Context="OctoberContext">
                                                                    @{
                                                                        var val = (OctoberContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.October TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.November) HeaderText="Nov" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                                <Template Context="NovemberContext">
                                                                    @{
                                                                        var val = (NovemberContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.November TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.December) HeaderText="Dec" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120">
                                                        <Template Context="DecemberContext">
                                                                    @{
                                                                        var val = (DecemberContext as AnnualLeaveRosterMonthsDto);
                                                                        <SfCheckBox CssClass="e-outline e-success" @bind-Checked=@val.December TChecked="bool?"></SfCheckBox>
                                                                    }
                                                                </Template>
                                                            </GridColumn> 


                                                        @*<GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.January) HeaderText="Jan" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> 
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.February) HeaderText="Feb" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> 
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.March) HeaderText="Mar" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> 
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.April) HeaderText="Apr" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> 
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.May) HeaderText="May" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> 
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.June) HeaderText="Jun" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> 
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.July) HeaderText="Jul" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> 
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.August) HeaderText="Aug" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> 
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.September) HeaderText="Sep" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> 
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.October) HeaderText="Oct" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> 
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.November) HeaderText="Nov" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> 
                                                        <GridColumn Field=@nameof(AnnualLeaveRosterMonthsDto.December) HeaderText="Dec" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="120"></GridColumn> *@
                                                                                                        
                                                    </GridColumns>
                                                </GridColumn>
                                           </GridColumns>
                                        </SfGrid>

                                    </div>
                                 }
                                </div>
                            </div>
                        }
                    </Template> 
                    <FooterTemplate>
                        @if(@SelectedCells.Count <= 25)
                        {
                            <button @onclick="@onSubmitForm" class="btn btn-primary" data-ripple="true" style="margin-right:10px;">Save Plan</button>
                            <button @onclick="@DialogCancelBtnclicked" class="btn btn-danger" data-ripple="true">Cancel</button>
                        }                       
                        
                    </FooterTemplate>
        </GridEditSettings>

            <SfDataManager AdaptorInstance="@typeof(LeavePlanHeaderAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                <GridEvents OnActionComplete="ActionCompleteMain"
                            OnActionBegin="ActionBeginMain"                            
                        TValue="AnnualLeaveRosterDto">
                </GridEvents>
                <GridColumns>
                    <GridColumn Type="ColumnType.CheckBox" Width="20"></GridColumn>
                    <GridColumn Field=@nameof(AnnualLeaveRosterDto.LeaveRoasterId) HeaderText="LeaveRoasterId" Visible=false IsPrimaryKey="true" Width="150"></GridColumn>
                    
                    @*<GridColumn Field=@nameof(AnnualLeaveRosterDto.EmployeeId) HeaderText="Customer Name" Width="150">
                        <Template>
                        @{
                        var categoryview = (context as AnnualLeaveRosterDto);
                        var Combined = categoryview.EmployeeId + " - " + categoryview.YearId;
                        <p style="margin-top:0px;margin-bottom:0px">@Combined</p>
                        
                        }
                        </Template>
                    </GridColumn>*@
                    
                    <GridColumn Field=@nameof(AnnualLeaveRosterDto.EmployeeId) HeaderText="Employee Name" Width="150">
                        <Template>
                            @{
                                var con = (context as AnnualLeaveRosterDto);
                                if(EmployeeData != null)
                                {
                                    EmployeeDto ForeignKeyData = EmployeeData.FirstOrDefault(x => x.Employeeid == con.EmployeeId);
                                    if(ForeignKeyData != null)
                                    {
                                        <span>@ForeignKeyData.FirstName @ForeignKeyData.MiddleName @ForeignKeyData.LastName</span>
                                    }                                    
                                }
                                
                            }
                        </Template>
                        
                    </GridColumn>

                    <GridForeignColumn Field=@nameof(AnnualLeaveRosterDto.YearId)
                                                   HeaderText="YEAR"
                                                   Width="80"
                                                   AllowEditing="true"
                                                   ForeignKeyField="@(nameof(AYearsDto.YearId))"
                                                   ForeignKeyValue="@(nameof(AYearsDto.YearDesc))"
                                                   ForeignDataSource="@YearData" AllowFiltering="true"
                                                   CustomAttributes="@(new Dictionary<string,
                                                   object>(){ { "class", "e-attr1" }})">
                    </GridForeignColumn>
                    <GridColumn Field=@nameof(AnnualLeaveRosterDto.DateAdded) 
                                                        DefaultValue="@(DateTime.Now)" 
                                                        HeaderText="DATE CAPTURED" 
                                                        EditType="EditType.DatePickerEdit" 
                                                        Format="dd/MMMM/yyyy" 
                                                        Type="ColumnType.Date" 
                                                        Width="80"
                                                        AllowEditing="false"
                                                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr2" }})">                                            
                                                        </GridColumn> 
                    </GridColumns>
        </SfGrid>
</div>

<div>
    <SfDialog @ref="@LoadingDialogue"
              ID="LoadingDialog"
              Height="auto"
              Width="20%"
              AllowDragging="true"
              Target=".mainbody"
              ShowCloseIcon="false"
              IsModal=true
              Visible="false">
        <DialogTemplates>
            <Content>
                <div style="padding:25px">
                    <div class="loader">
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        <div class="loader--dot"></div>
                        @*<div class="loader-Loading-text"></div>*@
                        @*<div class="loader-Saving-text"></div>*@
                    </div>
                </div>
            </Content>
            <FooterTemplate>

            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

@code {
    SfGrid<AnnualLeaveRosterDto>? MainGrid;
    SfGrid<AnnualLeaveRosterMonthsDto>? DataGrid;
    public Query MainQuery = new Query();
    private static AnnualLeaveRosterDto? PlannedDaysData { get; set; }
    List<ADaysDto>? DaysData { get; set; }
    List<AYearsDto>? YearData { get; set; }
    List<EmployeeDto>? EmployeeData { get; set; }
    List<AnnualLeaveRosterMonthsDto>? RoasterMonthsData { get; set; }
    List<AnnualLeaveRosterMonthsDto>? RoasterMonthsDataSource { get; set; }
    public static int RoasterMonthsCount { get; set; } = 0;

    public bool YearDD = true;
    public bool EmployeeDD = true;
    SfDropDownList<int?,AYearsDto>? YearEdit { get; set; }
    List<AnnualLeaveRosterMonthsDto>? LeaveRosterMonthsDataSource { get; set; }
    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "85vh", Width = "100%" };
    SfDialog? LoadingDialogue;
    int? YrId = null;
    int? EmpId = null;
    public static string? Weekends1 = null;
    List<string> Weekends = new List<string>();
    public int TotalCount = 0; 
    public List<Tuple<double, double>> SelectedCells { get; set; } = new List<Tuple<double, double>>(); 
    LoginResultModel? Credentials { get; set; }
    Syncfusion.Blazor.Grids.Action _previous { get; set; }

    //Generate all weekends in the current year
    static public List<string> GetWeekendDates(DateTime startDate, DateTime endDate)
    {
        List<string> weekendList = new List<string>();
        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
        {
            if (date.DayOfWeek == DayOfWeek.Sunday || date.DayOfWeek == DayOfWeek.Saturday)
                weekendList.Add(date.ToString("dd/MM/yyyy"));
        }

        return weekendList;
    }
    public class DaysClass
    {
        public int LeaveRoasterMonthsId { get; set; }
        public int? LeaveRoasterId { get; set; }
        public int? DayId { get; set; }
    }

    private List<DaysClass> DaysList = new List<DaysClass>();

    private List<object> ToolbarMenuMain = new List<object>()
    {
        new ItemModel() { Text = "Capture Values", PrefixIcon = "e-add", Id = "GridMain_add"},
        new ItemModel(){ Text = "Edit Values", PrefixIcon= "e-edit", Id="GridMain_edit"},
        //new ItemModel(){ Text = "Delete Target", PrefixIcon= "e-delete", Id="Grid_delete"},
        new ItemModel(){ Text = "Update Values", PrefixIcon= "e-update", Id="GridMain_update"},
        new ItemModel(){ Text = "Cancel Changes", PrefixIcon= "e-cancel", Id="GridMain_cancel"}
    };


    protected override async Task OnInitializedAsync()
    {
        Credentials = await AuthService.GetUserCredentials();

        var responseyears = await Http.GetAsync($"Utilities/GetYears");
        var contentyears = await responseyears.Content.ReadAsStringAsync();
        if (responseyears.IsSuccessStatusCode)
        {
            YearData = await Http.GetFromJsonAsync<List<AYearsDto>>
            ($"Utilities/GetYears");
        }

        var responseemployee = await Http.GetAsync($"Employeez/GetMasterList");
        var contentemployee = await responseemployee.Content.ReadAsStringAsync();
        if (responseemployee.IsSuccessStatusCode)
        {
            EmployeeData = await Http.GetFromJsonAsync<List<EmployeeDto>>
            ($"Employeez/GetMasterList");
        }

        var responsedays = await Http.GetAsync($"Utilities/GetDays");
        var contentdays = await responsedays.Content.ReadAsStringAsync();
        if (responsedays.IsSuccessStatusCode)
        {
            DaysData = await Http.GetFromJsonAsync<List<ADaysDto>>
            ($"Utilities/GetDays");
        }

        var responseroastermonths = await Http.GetAsync($"Employeez/GetMonthsLeavePlan");
        var contentroastermonths = await responseroastermonths.Content.ReadAsStringAsync();
        if (responseroastermonths.IsSuccessStatusCode)
        {
            RoasterMonthsData = await Http.GetFromJsonAsync<List<AnnualLeaveRosterMonthsDto>>
            ($"Employeez/GetMonthsLeavePlan");
        }        
    }

    public async Task onSubmitForm()
    {
        try
        {
            await LoadingDialogue.ShowAsync();
            if (DataGrid != null)
            {
                await DataGrid.EndEditAsync();
            }

            if (MainGrid != null)
            {
                await MainGrid.EndEditAsync();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowWarning(ex.Message.ToString());
        }
        finally
        {
            await LoadingDialogue.HideAsync();
            StateHasChanged();
        }
    }


    public async void DialogCancelBtnclicked()
    {
        if (DataGrid != null)
        {
            await DataGrid.CloseEdit();
        }
        if (MainGrid != null)
        {
            await MainGrid.CloseEdit();
        }
    }

    # region LeavePlanHeaderAdapter
    public class LeavePlanHeaderAdapter : DataAdaptor
    {
        HttpClient Http;
        private readonly JsonSerializerOptions _options;
        IAuthenticationService _AuthService;
        ApiConfig _ApiConfig;
        public IToastService toastService;
        private readonly NavigationManager Navigation;

        public LeavePlanHeaderAdapter(HttpClient _http, IToastService ts, NavigationManager _Navigation
            ,IAuthenticationService authservice, ApiConfig apiConfig)
        {
            Http = _http;
            _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            toastService = ts;
            Navigation = _Navigation;
            _ApiConfig = apiConfig;
            _AuthService = authservice;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var credentials = await _AuthService.GetUserCredentials();
            var data = new List<AnnualLeaveRosterDto>();

            //string? AccessToken = _SystemSettings.AccessToken;
            //string? BaseUrl = _ApiConfig.BaseUrl;
            int? EmployeeId = credentials.StaffId;
            string? UserRoleId = credentials.UserRoleId;
            string? UserRole = credentials.UserRole;

            try
            {

                var response = await Http.GetAsync($"Employeez/GetAnnualLeaverRoster?EmployeeId={EmployeeId}&UserRole={UserRole}");
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    data = JsonSerializer.Deserialize<List<AnnualLeaveRosterDto>>(content, _options);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<AnnualLeaveRosterDto>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {

                var val = (value as AnnualLeaveRosterDto);
                if (val != null)
                {
                    if (val.LeaveRoasterId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"Employeez/CreateAnnualLeaverRoster", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"Employeez/UpdateAnnualLeaverRoster", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {

                var val = (value as AnnualLeaveRosterDto);
                if (val != null)
                {
                    if (val.LeaveRoasterId == 0)
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PostAsync($"Employeez/CreateAnnualLeaverRoster", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }

                    }
                    else
                    {

                        string json = Newtonsoft.Json.JsonConvert.SerializeObject(val);
                        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                        var result = await Http.PutAsync($"Employeez/UpdateAnnualLeaverRoster", httpContent);
                        if (result.IsSuccessStatusCode)
                        {
                            var content = await result.Content.ReadAsStringAsync();
                            var data = JsonSerializer.Deserialize<ResponseDto>(content, _options);
                            if (data != null)
                            {
                                if (data.IsSuccess)
                                {
                                    toastService.ShowSuccess(data.Message);
                                }
                                else
                                {
                                    toastService.ShowError(data.Message);
                                }
                            }
                        }
                        else
                        {
                            toastService.ShowError(result.ReasonPhrase);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }
    # endregion LeavePlanHeaderAdapter
    public async void ActionCompleteMain(Syncfusion.Blazor.Grids.ActionEventArgs<AnnualLeaveRosterDto> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) ||
        args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            MainGrid.PreventRender(false);
        }

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {


            var responseyears = await Http.GetAsync($"Utilities/GetYears");
            var contentyears = await responseyears.Content.ReadAsStringAsync();
            if (responseyears.IsSuccessStatusCode)
            {
                YearData = await Http.GetFromJsonAsync<List<AYearsDto>>
                ($"Utilities/GetYears");
            }

            var responseemployee = await Http.GetAsync($"Employeez/GetMasterList");
            var contentemployee = await responseemployee.Content.ReadAsStringAsync();
            if (responseemployee.IsSuccessStatusCode)
            {
                EmployeeData = await Http.GetFromJsonAsync<List<EmployeeDto>>
                ($"Employeez/GetMasterList");
            }

            var responseroastermonths = await Http.GetAsync($"Employeez/GetMonthsLeavePlan");
            var contentroastermonths = await responseroastermonths.Content.ReadAsStringAsync();
            if (responseroastermonths.IsSuccessStatusCode)
            {
                RoasterMonthsData = await Http.GetFromJsonAsync<List<AnnualLeaveRosterMonthsDto>>
                ($"Employeez/GetMonthsLeavePlan?YearId={args.Data.YearId}&EmployeeId={args.Data.EmployeeId}");
            }  

            var responsedays = await Http.GetAsync($"Utilities/GetDays");
            var contentdays = await responsedays.Content.ReadAsStringAsync();
            if (responsedays.IsSuccessStatusCode)
            {
                DaysData = await Http.GetFromJsonAsync<List<ADaysDto>>
                ($"Utilities/GetDays");
            }
        }
    }

    public async void ActionBeginMain(Syncfusion.Blazor.Grids.ActionEventArgs<AnnualLeaveRosterDto> Args)
    {
        var data = Args.Data;
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (Args.Data.YearId == null)
            {
                toastService.ShowWarning("Please select the Year.");
                Args.Cancel = true;
            }
            else if (Args.Data.EmployeeId == null)
            {
                toastService.ShowWarning("Please select the Employee.");
                Args.Cancel = true;
            }
        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        { 
            try
            {
                SelectedCells = new List<Tuple<double, double>>();
                _previous = Args.RequestType;

                int countid = -1000;                              

                var responseroastermonths = await Http.GetAsync($"Employeez/GetMonthsLeavePlan");
                var contentroastermonths = await responseroastermonths.Content.ReadAsStringAsync();
                if (responseroastermonths.IsSuccessStatusCode)
                {
                    RoasterMonthsData = await Http.GetFromJsonAsync<List<AnnualLeaveRosterMonthsDto>>
                    ($"Employeez/GetMonthsLeavePlan?YearId={Args.RowData.YearId}&EmployeeId={Args.RowData.EmployeeId}");
                }  

                var responsedayscount = await Http.GetAsync($"Employeez/GetSelectedDaysCount?YearId={Args.RowData.YearId}&EmployeeId={Args.RowData.EmployeeId}");
                var contentdayscount = await responsedayscount.Content.ReadAsStringAsync();
                if (responsedayscount.IsSuccessStatusCode)
                {
                    RoasterMonthsCount = Convert.ToInt32(contentdayscount);
                }  

                var responsedays = await Http.GetAsync($"Utilities/GetDays");
                var contentdays = await responsedays.Content.ReadAsStringAsync();
                if (responsedays.IsSuccessStatusCode)
                {
                    DaysData = await Http.GetFromJsonAsync<List<ADaysDto>>
                    ($"Utilities/GetDays");
                }

                if(RoasterMonthsData != null)
                {
                    Args.RowData.AnnualLeaveRosterMonths = RoasterMonthsData
                    .ToList();
                }
                if(Args.RowData.AnnualLeaveRosterMonths== null)
                {
                    Args.RowData.AnnualLeaveRosterMonths = new List<AnnualLeaveRosterMonthsDto>();
                }

                foreach (var item in DaysData)
                {
                    try
                    {
                        //await LoadingDialogue.ShowAsync();
                        var exist = Args.RowData.AnnualLeaveRosterMonths.FirstOrDefault(o => o.DayId == item.DayId);
                        if (exist == null)
                        {
                            var m = new AnnualLeaveRosterMonthsDto();
                            m.LeaveRoasterId = countid;
                            m.DayId = item.DayId;
                            //m.YearId = YrId;

                            PlannedDaysData.AnnualLeaveRosterMonths.Add(m);
                            countid++;
                        }
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                    finally
                    {
                        //await LoadingDialogue.HideAsync();
                    }
                }
                PlannedDaysData.AnnualLeaveRosterMonths = Args.RowData.AnnualLeaveRosterMonths.OrderBy(o => o.DayId).ToList();

                //RoasterMonthsCount;

                YearDD = false;
                EmployeeDD = false;

                StateHasChanged(); 
            }
            catch(Exception ex)
            {
                throw ex;
            }
            finally 
            {
                //await LoadingDialogue.HideAsync();
            }
        }
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {            
            SelectedCells = new List<Tuple<double, double>>();
            _previous = Args.RequestType;

            //Enable employee and Year dropdowns on adding
            YearDD = true;
            EmployeeDD = true;

            SelectedCells.Clear();
            if(Credentials.StaffId > 0)
            {
                Args.Data.EmployeeId = Credentials.StaffId;
            }

            Args.RowData.AnnualLeaveRosterMonths = new List<AnnualLeaveRosterMonthsDto>();

            StateHasChanged();
        }
    }

    //Enable cell edit on single click
    public async Task LeavePlanCellSelectHandler(CellSelectEventArgs<AnnualLeaveRosterMonthsDto> args)
    {
        try
        {
            //get selected cell index
            var CellIndexes = await DataGrid.GetSelectedRowCellIndexesAsync();

            //get the row and cell index
            var CurrentEditRowIndex = CellIndexes[0].Item1;
            var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

            //get the available fields
            var fields = await DataGrid.GetColumnFieldNamesAsync();
            // edit the selected cell using the cell index and column name
            await DataGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
        }
        catch (Exception ex)
        {
            // throw ex;
        }
    }


    public async void OnEmployeeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?,EmployeeDto> args)
    {
        YearDD = true;
    }

    public async void OnYearChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?,AYearsDto> args)
    {
        try
        {

            await LoadingDialogue.ShowAsync();

            //Get Year Details
            int year = DateTime.Now.Year;
            DateTime firstDay = new DateTime(DateTime.Now.Year, 1, 1);
            DateTime lastDay = new DateTime(DateTime.Now.Year, 12, 31);

            GetWeekendDates(firstDay, lastDay);            

            YrId = args.ItemData.YearId;
            EmpId = PlannedDaysData.EmployeeId;

            int countid = -1000;
            List<AnnualLeaveRosterMonthsDto> mn = new List<AnnualLeaveRosterMonthsDto>();


            var responseemployee = await Http.GetAsync($"Employeez/GetMasterList");
            var contentemployee = await responseemployee.Content.ReadAsStringAsync();
            if (responseemployee.IsSuccessStatusCode)
            {
                EmployeeData = await Http.GetFromJsonAsync<List<EmployeeDto>>
                ($"Employeez/GetMasterList");
            }

            var responseroastermonths = await Http.GetAsync($"Employeez/GetMonthsLeavePlan");
            var contentroastermonths = await responseroastermonths.Content.ReadAsStringAsync();
            if (responseroastermonths.IsSuccessStatusCode)
            {
                RoasterMonthsData = await Http.GetFromJsonAsync<List<AnnualLeaveRosterMonthsDto>>
                ($"Employeez/GetMonthsLeavePlan?YearId={YrId}&EmployeeId={EmpId}");
            }  

            var responsedays = await Http.GetAsync($"Utilities/GetDays");
            var contentdays = await responsedays.Content.ReadAsStringAsync();
            if (responsedays.IsSuccessStatusCode)
            {
                DaysData = await Http.GetFromJsonAsync<List<ADaysDto>>
                ($"Utilities/GetDays");
            }

            var responsedayscount = await Http.GetAsync($"Employeez/GetSelectedDaysCount?YearId={PlannedDaysData.YearId}&EmployeeId={PlannedDaysData.EmployeeId}");
            var contentdayscount = await responsedayscount.Content.ReadAsStringAsync();
            if (responsedayscount.IsSuccessStatusCode)
            {
                if(!string.IsNullOrEmpty(contentdayscount))
                {
                    RoasterMonthsCount = Convert.ToInt32(contentdayscount);
                }
                else
                {
                    RoasterMonthsCount = 0;
                }                
            }  

            if(RoasterMonthsData != null)
            {
                PlannedDaysData.AnnualLeaveRosterMonths = RoasterMonthsData
                .ToList();
            }
            if(PlannedDaysData.AnnualLeaveRosterMonths== null)
            {
                PlannedDaysData.AnnualLeaveRosterMonths = new List<AnnualLeaveRosterMonthsDto>();
            }

            foreach (var item in DaysData)
            {
                var exist = PlannedDaysData.AnnualLeaveRosterMonths.FirstOrDefault(o => o.DayId == item.DayId);
                if (exist == null)
                {
                    var m = new AnnualLeaveRosterMonthsDto();
                    m.LeaveRoasterId = countid;
                    m.DayId = item.DayId;
                    //m.YearId = YrId;

                    PlannedDaysData.AnnualLeaveRosterMonths.Add(m);
                    countid++;
                }
            }
            PlannedDaysData.AnnualLeaveRosterMonths = PlannedDaysData.AnnualLeaveRosterMonths.OrderBy(o => o.DayId).ToList();
            StateHasChanged(); 
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {
            LoadingDialogue.HideAsync();
        }
    }

    public async void QueryCellInfoHandler(QueryCellInfoEventArgs<AnnualLeaveRosterMonthsDto> Args)
    {
        if(Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.January))
        {
            if (Args.Data.January == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 3));
            }
        }
        else if(Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.February))
        {
            if (Args.Data.February == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 4));
            }

            //Disable the dates in February
            if (Args.Data.DayId == 29 || Args.Data.DayId == 30 || Args.Data.DayId == 31)
            {
                Args.Cell.AddClass(new string[] { "disablecell" });
            }
        }
        else if(Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.March))
        {
            if (Args.Data.March == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 5));
            }
        }
        else if(Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.April))
        {
            if (Args.Data.April == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 6));
            }

            if (Args.Data.DayId == 31 )
            {
                Args.Cell.AddClass(new string[] { "disablecell" });
            }
        }
        else if(Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.May))
        {
            if (Args.Data.May == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 7));
            }
        }
        else if(Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.June))
        {
            if (Args.Data.June == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 8));
            }

            if (Args.Data.DayId == 31 )
            {
                Args.Cell.AddClass(new string[] { "disablecell" });
            }
        }
        else if(Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.July))
        {
            if (Args.Data.July == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 9));
            }
        }
        else if(Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.August))
        {
            if (Args.Data.August == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 10));
            }

            if (Args.Data.DayId == 31)
            {
                Args.Cell.AddClass(new string[] { "disablecell" });
            }
        }
        else if(Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.September))
        {
            if (Args.Data.September == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 11));
            }

            if (Args.Data.DayId == 31 )
            {
                Args.Cell.AddClass(new string[] { "disablecell" });
            }
        }
        else if(Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.October))
        {
            if (Args.Data.October == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 12));
            }
        }
        else if(Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.November))
        {
            if (Args.Data.November == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 13));
            }

            if (Args.Data.DayId == 31)
            {
                Args.Cell.AddClass(new string[] { "disablecell" });
            }
        }
        else if (Args.Column.Field == nameof(AnnualLeaveRosterMonthsDto.December))
        {
            if (Args.Data.December == true)
            {
                var index = await DataGrid.GetRowIndexByPrimaryKeyAsync(Args.Data.LeaveRoasterMonthsId);
                SelectedCells.Add(new Tuple<double, double>(index, 14));
            }
        }
        
        int? year = PlannedDaysData.YearId;
        var yeardesc = YearData.FirstOrDefault(o => o.YearId == PlannedDaysData.YearId);

        int selectedyear = yeardesc.YearDesc.Value;
        DateTime firstDay = new DateTime(selectedyear, 1, 1);
        DateTime lastDay = new DateTime(selectedyear, 12, 31);

        GetWeekendDates(firstDay, lastDay);
        Weekends = GetWeekendDates(firstDay, lastDay);

        //if(Weekends.Count > 0)
        //{
        //    foreach (var n in Weekends)
        //    {
        //        DateTime datefallen = Convert.ToDateTime(n[0]);
        //        var day = datefallen.Day;
        //        var month = datefallen.Month;
        //        var years = datefallen.Year;
        //    }
        //}

        //if (Args.Column.Field == "February")
        //{
        //    if (Args.Data.DayId == 29 || Args.Data.DayId == 30 || Args.Data.DayId == 31)
        //    {
        //        Args.Cell.AddClass(new string[] { "disablecell" });
        //    }
        //}
        //if (Args.Column.Field == "April" || Args.Column.Field == "June"
        //|| Args.Column.Field == "August" || Args.Column.Field == "September" || Args.Column.Field == "November")
        //{
        //    if (Args.Data.DayId == 31 )
        //    {
        //        Args.Cell.AddClass(new string[] { "disablecell" });
        //    }
        //}
    }

    public async Task OnCellSelect(CellSelectEventArgs<AnnualLeaveRosterMonthsDto> Args)
    { 
        try
        {
            if (!SelectedCells.Contains(new Tuple<double, double>(Args.RowIndex, Args.CellIndex))) 
            { 
                SelectedCells.Add(new Tuple<double, double>(Args.RowIndex, Args.CellIndex)); 
            } 
            else
            {
                SelectedCells.Remove(new Tuple<double, double>(Args.RowIndex, Args.CellIndex));        
            }
        }
        catch (Exception ex)
        {
            // throw ex;
        }

            
    } 

    public void CellDeselectHandler(CellDeselectEventArgs<AnnualLeaveRosterMonthsDto> Args)
    {
        if (SelectedCells.Contains(new Tuple<double, double>(Args.RowIndex, Args.CellIndex)))
        {
            SelectedCells.Remove(new Tuple<double, double>(Args.RowIndex, Args.CellIndex));
        }
    }

    public string GetRoasterHeader(AnnualLeaveRosterDto Value)
    { 
        if (Value.LeaveRoasterId == 0)
        {
            return "Add a new Plan";
        }
        else
        {
            //return "Edit Employee Roaster Details";

            if(EmployeeData.Count > 0)
            {
                var empdetail = EmployeeData.FirstOrDefault(o=>o.Employeeid == Value.EmployeeId);
                string firstname = string.Empty;
                string middlename = string.Empty;
                string lastname = string.Empty;
                if(!string.IsNullOrEmpty(empdetail.FirstName))
                {
                    firstname = empdetail.FirstName;
                }
                if(!string.IsNullOrEmpty(empdetail.MiddleName))
                {
                    middlename = empdetail.MiddleName;
                }
                if(!string.IsNullOrEmpty(empdetail.LastName))
                {
                    lastname = empdetail.LastName;
                }
                return "Edit Details for " + firstname + " " + middlename + " " + lastname;
            }  
            else
            {
                return "Edit Employee Roaster Details";
            }
        }
    }
}

<style>
.disablecell {
        background-color: red;
        pointer-events: none;
        display: none;
    }

</style>
