@page "/UnApprovedLeaveRoste"
@using HCMIS.Data
@using HCMIS.Model
@using System.Text.Json
@using HCMIS.ViewModel
@using System.Collections
@using Syncfusion.Blazor.Schedule;
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject SystemSettings _SystemSettings
@inject ApiConfig _ApiConfig;
@inject AppState AppState
@inject NavigationManager Navigation
@inject DocumentUploadModel _DocumentUploadModel;
<style>
    .e-dialog.e-control.e-popup {
        padding: 3px;
        min-width: 94%;
    }

    .e-recurrenceeditor .e-editor {
        display: -ms-flexbox;
        display: flex;
        -ms-flex-flow: row wrap;
        flex-flow: row wrap;
        margin-left: 1px;
        margin-right: 1px;
    }

    h4 {
        background-color: #007bff;
        color: whitesmoke;
        padding: 10px;
    }

    .e-schedule-dialog .e-footer-content {
        margin-top: 4px;
        display: none;
    }

    .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn-text {
        color: black;
    }
</style>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
<ol class="breadcrumb" style="margin-top: 5px; background-color:cornflowerblue;">
    <li class="breadcrumb-item active" style="color: ghostwhite;"> <strong>NHCC |</strong> UN-APPROVED LEAVE ROSTER's</li>
</ol>
<SfGrid @ref="ApprovedRosterGrid" TValue="ALeaveRoster" Query="@MainQuery"
    Toolbar="@(new string[] { "Edit", "Delete", "Update", "Cancel", "ColumnChooser" })" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
        AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
 </SfGrid>
@code {
    #region Toasters
    public static string? ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast? DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    #region Declarations
    private SfGrid<ALeaveRoster>?ApprovedRosterGrid { get; set; }
    public Query MainQuery = new Query();
    Query DepartmentChange { get; set; } = new();
    bool IsEnabled { get; set; } = false;
    bool IsSaveDisabled { get; set; } = false;
    string[]? ToolbarMenu { get; set; }
    string? RegisterError { get; set; }
    public string? AccessToken { get; set; }
    Query mainQuery { get; set; } = new();
    private List<ALeaveType>? ResourceData { get; set; }
    private List<ADepartment>? DepartmentData { get; set; }
    private string[] groupData = new string[] { "Leave Types" };
    List<ALeaveType>? LeaveTypeData { get; set; }
    SfSchedule<ALeaveRoster>? LeaveRosterRef;
    private DateTime CurrentDate = DateTime.Now;
    private ALeaveRoster? LeaveRosterData { get; set; }
    List<ViewEmployeeLeaveRoster>? ViewLeaveRosterData { get; set; }
    private static ViewEmployeeLeaveRoster? employeeno { get; set; }
    EmployeeLeaveModel inputmodel { get; set; } = new EmployeeLeaveModel();
    private readonly JsonSerializerOptions _options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    string SickLeaveDocumentString { get; set; } = null;
    string UserRole { get; set; }
    SfGrid<ASickLeaveDocuments>? SickLeaveDocumentGrid;
    SfSpinner? UploadSickLeaveDocumentSpinner;
    List<ADocumentType>? DocumenttypeData { get; set; } = new();
    bool IsGridButtonVisible { get; set; } = false;
    Employee EmployeeReviewData { get; set; } = new();
    #endregion Declarations

}
